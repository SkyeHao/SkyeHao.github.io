<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>删除链表的结点</title>
      <link href="/2022/02/09/9%E3%80%81%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BB%93%E7%82%B9/"/>
      <url>/2022/02/09/9%E3%80%81%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220209192815686.png" alt="image-20220209192815686"></p><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> *   public ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteNode</span> <span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode temp = head,pre = dummy;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.val == val)&#123;</span><br><span class="line">                pre.next = temp.next;</span><br><span class="line">                <span class="keyword">return</span> dummy.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = temp;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li>利用创建的虚拟头结点dummy实现对于头部的复杂判断的简化</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除链表中的重复结点</title>
      <link href="/2022/02/09/8%E3%80%81%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E7%BB%93%E7%82%B9/"/>
      <url>/2022/02/09/8%E3%80%81%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220209112757584.png" alt="image-20220209112757584"></p><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220209112819973.png" alt="image-20220209112819973"></p><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建哨兵结点作为头结点，便于头结点的处理</span></span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        head.next = pHead;</span><br><span class="line">        ListNode temp = pHead;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span> &amp;&amp; temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.val == temp.next.val)&#123;</span><br><span class="line">                temp = check(temp);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归寻找不与该结点重复的第一个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">check</span><span class="params">(ListNode node)</span></span>&#123;</span><br><span class="line">        <span class="comment">//由于传入的是第一个重复的结点，所以如果为空则直接返回空即可</span></span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span> || node.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回第一个不重复的结点</span></span><br><span class="line">        <span class="keyword">if</span>(node.val != node.next.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> node.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//重复则继续递归</span></span><br><span class="line">            <span class="keyword">return</span> check(node.next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li>实现递归算法时头结点与尾结点位置的情况出现问题。</li><li>利用HashMap实现时，由于HashMap的key值最好设为不变的类型，而ListNode类型会更改next属性，所以无法使用ListNode作为key值。而使用ListNode数组时只能进行判空操作，对于重复奇数次的结点无法判断。</li><li>判断条件的“&amp;”、“&amp;&amp;”、“|”、“||”要分清楚。</li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h3><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220209121724805.png" alt="image-20220209121724805"></p><ul><li><strong>建立虚拟头结点dummy可以有效减少边界判断的情况，降低复杂程度</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode tail = dummy;</span><br><span class="line">        <span class="keyword">while</span> (pHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 进入循环时，确保了 pHead 不会与上一节点相同</span></span><br><span class="line">            <span class="keyword">if</span> (pHead.next == <span class="keyword">null</span> || pHead.next.val != pHead.val) &#123;</span><br><span class="line">                tail.next = pHead;</span><br><span class="line">                tail = pHead;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果 pHead 与下一节点相同，跳过相同节点（到达「连续相同一段」的最后一位）</span></span><br><span class="line">            <span class="keyword">while</span> (pHead.next != <span class="keyword">null</span> &amp;&amp; pHead.val == pHead.next.val) pHead = pHead.next;</span><br><span class="line">            pHead = pHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><h3 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h3><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220209121936508.png" alt="image-20220209121936508"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 递归出口：当「输入节点为空」或者「不存在下一节点」，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (pHead == <span class="keyword">null</span> || pHead.next == <span class="keyword">null</span>) <span class="keyword">return</span> pHead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pHead.val != pHead.next.val) &#123;</span><br><span class="line">            <span class="comment">// 若「当前节点」与「下一节点」值不同，则当前节点可以被保留</span></span><br><span class="line">            pHead.next = deleteDuplication(pHead.next);</span><br><span class="line">            <span class="keyword">return</span> pHead;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 若「当前节点」与「下一节点」相同，需要跳过「值相同的连续一段」</span></span><br><span class="line">            ListNode tmp = pHead;</span><br><span class="line">            <span class="keyword">while</span> (tmp != <span class="keyword">null</span> &amp;&amp; tmp.val == pHead.val) tmp = tmp.next;</span><br><span class="line">            <span class="keyword">return</span> deleteDuplication(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)    忽略递归带来的额外空间开销</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂链表的复制</title>
      <link href="/2022/02/08/7%E3%80%81%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/02/08/7%E3%80%81%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208191139317.png" alt="image-20220208191139317"></p><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class RandomListNode &#123;</span></span><br><span class="line"><span class="comment">    int label;</span></span><br><span class="line"><span class="comment">    RandomListNode next = null;</span></span><br><span class="line"><span class="comment">    RandomListNode random = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    RandomListNode(int label) &#123;</span></span><br><span class="line"><span class="comment">        this.label = label;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">Clone</span><span class="params">(RandomListNode pHead)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(pHead == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//创建HashMap</span></span><br><span class="line">        HashMap&lt;RandomListNode,RandomListNode&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//在内存中克隆每个结点并与原结点对应存入HashMap</span></span><br><span class="line">        RandomListNode temp = pHead;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            RandomListNode node = <span class="keyword">new</span> RandomListNode(temp.label);</span><br><span class="line">            map.put(temp,node);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(RandomListNode node : map.keySet())&#123;</span><br><span class="line">            <span class="comment">//克隆每个结点的next属性</span></span><br><span class="line">            <span class="keyword">if</span>(node.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">                map.get(node).next = map.get(node.next);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.get(node).next = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//克隆每个结点的random属性</span></span><br><span class="line">            <span class="keyword">if</span>(node.random != <span class="keyword">null</span>)&#123;</span><br><span class="line">                map.get(node).random = map.get(node.random);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.get(node).random = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(pHead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li>使用哈希表，空间复杂度较大</li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="链表拼接和拆分"><a href="#链表拼接和拆分" class="headerlink" title="链表拼接和拆分"></a>链表拼接和拆分</h3><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208192213469.png" alt="image-20220208192213469"></p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/7A8DF85097EA0F2B7D31589D6217FE0D.gif" alt="7A8DF85097EA0F2B7D31589D6217FE0D" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="comment">// 1. 复制各节点，并构建拼接链表</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node tmp = <span class="keyword">new</span> Node(cur.val);</span><br><span class="line">            tmp.next = cur.next;</span><br><span class="line">            cur.next = tmp;</span><br><span class="line">            cur = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 构建各新节点的 random 指向</span></span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.random != <span class="keyword">null</span>)</span><br><span class="line">                cur.next.random = cur.random.next;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 拆分两链表</span></span><br><span class="line">        cur = head.next;</span><br><span class="line">        Node pre = head, res = head.next;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pre.next = pre.next.next;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = <span class="keyword">null</span>; <span class="comment">// 单独处理原链表尾节点</span></span><br><span class="line">        <span class="keyword">return</span> res;      <span class="comment">// 返回新链表头节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个链表的第一个公共结点</title>
      <link href="/2022/02/08/4%E3%80%81%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E7%BB%93%E7%82%B9/"/>
      <url>/2022/02/08/4%E3%80%81%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208170614750.png" alt="image-20220208170614750"></p><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208170621966.png" alt="image-20220208170621966"></p><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(pHead1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode node = pHead2; </span><br><span class="line">             <span class="keyword">while</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(pHead1 == node)&#123;</span><br><span class="line">                     <span class="keyword">return</span> node;</span><br><span class="line">                 &#125;</span><br><span class="line">                 node = node.next;</span><br><span class="line">             &#125;</span><br><span class="line">            pHead1 = pHead1.next;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li><p>双层循环遍历的暴力解法，及其低级，不够优美。</p></li><li><p>未考虑链表为空的情况。</p></li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="长度差法"><a href="#长度差法" class="headerlink" title="长度差法"></a>长度差法</h3><p>若两链表存在公共结点，则从公共结点开始，到链表尾部的所有结点都相同。则可视为两个链表&#x3D;&#x3D;尾对齐&#x3D;&#x3D;。</p><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/b9aa24b46146b493b18782d97be378a6.png" alt="b9aa24b46146b493b18782d97be378a6"></p><p>&#x3D;&#x3D;由于两链表尾对齐，链表的长度差就与公共结点前的链表的长度差一致。&#x3D;&#x3D;</p><p>故可先计算出长度差，将两链表同步到同一起点时再进行齐头并进的比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode a, ListNode b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c1 = <span class="number">0</span>, c2 = <span class="number">0</span>;</span><br><span class="line">        ListNode ta = a, tb = b;</span><br><span class="line">        <span class="comment">//计算两链表长度</span></span><br><span class="line">        <span class="keyword">while</span> (ta != <span class="keyword">null</span> &amp;&amp; c1++ &gt;= <span class="number">0</span>) ta = ta.next;</span><br><span class="line">        <span class="keyword">while</span> (tb != <span class="keyword">null</span> &amp;&amp; c2++ &gt;= <span class="number">0</span>) tb = tb.next;</span><br><span class="line">        <span class="comment">//长度差</span></span><br><span class="line">        <span class="keyword">int</span> d = c1 - c2;</span><br><span class="line">        <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (d-- &gt; <span class="number">0</span>) a = a.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            d = -d;</span><br><span class="line">            <span class="keyword">while</span> (d-- &gt; <span class="number">0</span>) b = b.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (a != b) &#123;</span><br><span class="line">            a = a.next;</span><br><span class="line">            b = b.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(n + m)<em>O</em>(<em>n</em>+<em>m</em>)</p></li><li><p>空间复杂度：O(1)<em>O</em>(1)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中环的入口结点</title>
      <link href="/2022/02/08/5%E3%80%81%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/"/>
      <url>/2022/02/08/5%E3%80%81%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208173959244.png" alt="image-20220208173959244"></p><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208174014312.png" alt="image-20220208174014312"></p><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建数组根据下标记录每个结点的访问次数</span></span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10001</span>];</span><br><span class="line">        <span class="comment">//当结点为空或访问两次后跳出循环</span></span><br><span class="line">        <span class="comment">//使用短路与&quot;&amp;&amp;&quot;保证当结点为空时直接跳出循环，不进行后续判断，避免出现空指针异常</span></span><br><span class="line">        <span class="comment">//++i使数组元素先自增再比较，简化代码</span></span><br><span class="line">        <span class="keyword">while</span>(pHead != <span class="keyword">null</span> &amp;&amp; ++num[pHead.val] &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            pHead = pHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li>创建数组时不能确定链表的长度，只能使用最大数量进行创建，浪费大量存储空间（牛客网无法自动导包，原本想使用HashMap）</li><li>while跳出条件”与或“判断和”等号还是不等号“写的就像一坨臭狗屎！！！</li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>一个非常直观的思路是：我们遍历链表中的每个节点，并将它记录下来；一旦遇到了此前遍历过的节点，就可以判定链表中存在环。借助哈希表可以很方便地实现。</p><p>&#x3D;&#x3D;将数组换成哈希表。&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode pos = head;</span><br><span class="line">        Set&lt;ListNode&gt; visited = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">while</span> (pos != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited.contains(pos)) &#123;</span><br><span class="line">                <span class="keyword">return</span> pos;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                visited.add(pos);</span><br><span class="line">            &#125;</span><br><span class="line">            pos = pos.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208180840431.png" alt="image-20220208180840431"></p><ul><li><p>问题：为什么快慢指针必定在慢指针入环第一圈内相遇？</p><p>第一步，快指针先进入环</p><p>第二步：当慢指针刚到达环的入口时，快指针此时在环中的某个位置(也可能此时相遇)</p><p>第三步：设此时快指针和慢指针距离为x，若在第二步相遇，则x &#x3D; 0；</p><p>第四步：设环的周长为n，那么看成快指针追赶慢指针，需要追赶n-x； </p><p>第五步：快指针每次都追赶慢指针1个单位，设慢指针速度1&#x2F;s，快指针2&#x2F;s，那么追赶需要(n-x)s </p><p>第六步：在n-x秒内，慢指针走了n-x单位，因为x&gt;&#x3D;0，则慢指针走的路程小于等于n，即走不完一圈就和快指针相遇</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode slow = head, fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fast = fast.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">                ListNode ptr = head;</span><br><span class="line">                <span class="comment">//因为a = c + (n-1)环长，故两指针毕相遇在入环点</span></span><br><span class="line">                <span class="keyword">while</span> (ptr != slow) &#123;</span><br><span class="line">                    ptr = ptr.next;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中倒数最后k个结点</title>
      <link href="/2022/02/08/6%E3%80%81%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E6%9C%80%E5%90%8Ek%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
      <url>/2022/02/08/6%E3%80%81%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E6%9C%80%E5%90%8Ek%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208182907495.png" alt="image-20220208182907495"></p><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208182917856.png" alt="image-20220208182917856"></p><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> *   public ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">FindKthToTail</span> <span class="params">(ListNode pHead, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//链表长度</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        ListNode node = pHead;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            len++;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果k超出链表长度，返回null</span></span><br><span class="line">        <span class="keyword">if</span>(k &gt; len)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node = pHead;</span><br><span class="line">        <span class="keyword">while</span>(len-- &gt;k)&#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li>使用两次循环，代码看起来较为繁琐</li><li>没有考虑链表为空的情况</li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>使用双指针则可以不用统计链表长度。</p><ul><li>初始化： 前指针 former 、后指针 latter ，双指针都指向头节点 head 。</li><li>构建双指针距离： 前指针 former 先向后走 kk步（结束后，双指针 former 和 latter 间相距 k 步）。</li><li>双指针共同移动： 循环中，双指针 former 和 latter 每轮都向后走一步，直至 former 走过链表&#x3D;&#x3D;尾节点&#x3D;&#x3D;时跳出（跳出后， latter 与尾节点距离为 k-1，即 latter 指向倒数第 k 个节点）。</li><li>返回值： 返回 latter 即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getKthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ListNode former = head, latter = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(former == <span class="keyword">null</span>)&#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            former = former.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(former != <span class="keyword">null</span>) &#123;</span><br><span class="line">            former = former.next;</span><br><span class="line">            latter = latter.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> latter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2022/02/07/JVM/"/>
      <url>/2022/02/07/JVM/</url>
      
        <content type="html"><![CDATA[<h1 id="尚硅谷复习视频"><a href="#尚硅谷复习视频" class="headerlink" title="尚硅谷复习视频"></a>尚硅谷复习视频</h1><h2 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h2><blockquote><p>什么是垃圾？</p></blockquote><p>内存中不再被使用的空间</p><blockquote><p>如何判断一个对象是否被回收？</p></blockquote><p>1、引用计数算法</p><p>2、可达性分析算法</p><blockquote><p>可达性分析算法过程？</p></blockquote><p>通过一系列GC Roots的对象作为起始点，从这个被称为GCRoots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明对象不可用。</p><blockquote><p>哪些对象是GC Roots对象？</p></blockquote><p>1、虚拟机栈（局部变量表）中引用的对象</p><p>2、本地方法栈中引用的对象</p><p>3、方法区中类静态属性引用的对象（1.7之后在堆中）</p><p>4、方法区中常量引用的对象</p><p>5、被synchronized持有的对象</p><p>6、虚拟机内部的引用</p><h2 id="JVM参数"><a href="#JVM参数" class="headerlink" title="JVM参数"></a>JVM参数</h2><blockquote><p>JVM参数类型</p></blockquote><p>1、标配参数：<code>java -version</code>、<code>java -help</code>、<code>java -showversion</code></p><p>2、X参数</p><ul><li><code>-Xint</code>：解释执行</li><li><code>-Xcomp</code>：第一次使用就编译成本地代码</li><li><code>-Xmixed</code>：混合模式，先编译再执行</li></ul><p>3、XX参数</p><ul><li>Boolean类型<ul><li>公式：<code>-XX:+或者-某个属性值</code>，+表示打开，-表示关闭</li></ul></li><li>KV设值类型<ul><li>公式：<code>-XX:属性key=属性值value</code></li><li>例子：<code>-XX:MetaspaceSize=20180888</code></li></ul></li></ul><blockquote><p>如何查看一个正在运行中的java程序，他的某个参数是否开启？参数信息？</p></blockquote><p>1、jps：查看进程ID</p><ul><li><code>jps -l</code></li></ul><p>2、jinfo：查看参数信息</p><ul><li><code>jinfo -flag 参数 ID</code></li><li><code>jinfo -flags ID</code></li></ul><blockquote><p>JVM默认值</p></blockquote><p>1、<code>-XX:PrintFlagsInitial</code>：查看初始默认值</p><ul><li>公式：<code>java -XX:+PrintFlagsInitial</code></li></ul><p>2、<code>-XX:PrintFlagsFinal</code>：查看修改更新</p><ul><li>公式：<code>java -XX:+PrintFlagsFinal -version</code></li></ul><h2 id="常用基本配置参数"><a href="#常用基本配置参数" class="headerlink" title="常用基本配置参数"></a>常用基本配置参数</h2><p>1、<code>-Xms</code>等价于<code>-XX:InitialHeapSize</code></p><p>2、<code>-Xmx</code>等价于<code>-XX:MaxHeapSize</code></p><p>3、<code>-Xss</code>：设置单个线程栈的大小，等价于<code>-XX:ThreadStackSize</code></p><ul><li><strong>默认值依赖于平台</strong></li><li>1024KB（MAC系统、Linux）</li><li>依赖于虚拟内存（Windows系统）</li></ul><p>4、<code>-Xmn</code>：设置年轻代的大小</p><p>5、<code>-XX:MetaspaceSize</code>：设置元空间大小，使用本地内存（jdk8之后）</p><p>6、<code>-XX:+PrintGCDetails</code>：输出GC详细日志信息</p><p><img src="https://img-blog.csdnimg.cn/20210404174751905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 496K-&gt;0<span class="title">K</span><span class="params">(2560K)</span>] [ParOldGen: 16K-&gt;372<span class="title">K</span><span class="params">(7168K)</span>] 512K-&gt;372<span class="title">K</span><span class="params">(9728K)</span>, [Metaspace: 3014K-&gt;3014<span class="title">K</span><span class="params">(1056768K)</span>], 0.0059257 secs] [Times: user</span>=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br></pre></td></tr></table></figure><p>7、<code>-XX:SurivorRatio</code>：Eden区、幸存区0、幸存区1的比例（设置为8，则是8:1:1）</p><p>8、<code>-XX:NewRatio</code>：年轻代、老年代比例（默认2，新生代1，老年代2）</p><p>9、<code>-XX:MaxTenuringThrehold</code>：对象年龄的阈值（默认15，设置为0就直接进入老年代），<strong>必须小于15（jdk8）</strong></p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><blockquote><p>整体架构</p></blockquote><img src="https://img-blog.csdnimg.cn/20210404180255853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 67%;" /><blockquote><p>强引用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj1 = <span class="keyword">new</span> Object();<span class="comment">//这样定义默认是强引用</span></span><br><span class="line">Object obj2 = obj1;<span class="comment">//obj2引用赋值</span></span><br></pre></td></tr></table></figure><p>1、强引用可以直接访问目标对象</p><p>2、强引用所指向的对象在任何时候都不会被系统回收，虚拟机宁愿抛出OOM异常，也不会回收强引用所指向对象</p><p>3、强引用可能导致内存泄漏</p><blockquote><p>软引用</p></blockquote><p>GC回收后，内存不足就进行回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object（）； <span class="comment">//声明强引用</span></span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;（obj）；<span class="comment">//创建软引用</span></span><br><span class="line">obj = <span class="keyword">null</span>； <span class="comment">//销毁强引用，这样就只有一个软引用了</span></span><br></pre></td></tr></table></figure><p>通常用在对内存敏感的程序中，比如高速缓存</p><blockquote><p>弱引用</p></blockquote><p>GC一律回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object（）； <span class="comment">//声明强引用</span></span><br><span class="line">WeakReference&lt;Object&gt; sf = <span class="keyword">new</span> WeakReference&lt;Object&gt;（obj）；</span><br><span class="line">obj = <span class="keyword">null</span>； <span class="comment">//销毁强引用</span></span><br></pre></td></tr></table></figure><blockquote><p>软引用和弱引用的使用场景？</p></blockquote><p>假如要读取大量的本地图片</p><ul><li>如果每次读取图片都从本地读取会严重影响性能</li><li>如果一次性读取可能会造成内存溢出</li></ul><p><strong>此时使用软引用可以解决这个问题：用一个hashmap存储图片的路径和图片对象关联的软引用之间的映射关系，内存不足就自动回收这些缓存图片对象所占用的空间，从而避免OOM</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String SoftReference&lt;Bitmap&gt;&gt; imageCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><blockquote><p>你使用过WeakHashMap吗？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Integer key = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">String value = <span class="string">&quot;hashMap&quot;</span>;</span><br><span class="line">map.put(key,value);</span><br><span class="line">System.out.println(map);<span class="comment">//&#123;1=hashMap&#125;</span></span><br><span class="line">key=<span class="keyword">null</span>;</span><br><span class="line">System.out.println(map);<span class="comment">//&#123;1=hashMap&#125;</span></span><br><span class="line">System.gc();</span><br><span class="line">System.out.println(map);<span class="comment">//&#123;1=hashMap&#125;</span></span><br><span class="line"></span><br><span class="line">WeakHashMap&lt;Integer,String&gt; weakHashMap = <span class="keyword">new</span> WeakHashMap&lt;&gt;();</span><br><span class="line">Integer key1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">String value1 = <span class="string">&quot;hashMap&quot;</span>;</span><br><span class="line">weakHashMap.put(key1,value1);</span><br><span class="line">System.out.println(weakHashMap);<span class="comment">//&#123;1=hashMap&#125;</span></span><br><span class="line">key1=<span class="keyword">null</span>;</span><br><span class="line">System.out.println(weakHashMap);<span class="comment">//&#123;1=hashMap&#125;</span></span><br><span class="line">System.gc();</span><br><span class="line">System.out.println(weakHashMap);<span class="comment">//&#123;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>引用队列</p></blockquote><p>被回收前需要被引用队列保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">ReferenceQueue&lt;Object&gt; referenceQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">WeakReference&lt;Object&gt; weak = <span class="keyword">new</span> WeakReference&lt;&gt;(o1,referenceQueue);</span><br><span class="line">System.out.println(o1);<span class="comment">//java.lang.Object@5cad8086</span></span><br><span class="line">System.out.println(weak.get());<span class="comment">//java.lang.Object@5cad8086</span></span><br><span class="line">System.out.println(referenceQueue.poll());<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line"></span><br><span class="line">o1=<span class="keyword">null</span>;</span><br><span class="line">System.gc();</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">System.out.println(weak.get());<span class="comment">//null</span></span><br><span class="line">System.out.println(referenceQueue.poll());<span class="comment">//java.lang.ref.WeakReference@6e0be858</span></span><br></pre></td></tr></table></figure><blockquote><p>虚引用</p></blockquote><p>如果一个对象只有虚引用，那么就和没有引用一样</p><p><strong>虚引用必须和引用队列一起使用</strong></p><p><strong>作用</strong>：跟踪对象被垃圾回收的状态，说明一个对象已经进入finalization阶段，可以被gc回收，用来实现比finalization机制更灵活的回收操作</p><p>Java技术允许使用<code>finalize()</code>方法在gc前做一些必要的清理工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">object obj = <span class="keyword">new</span> object();</span><br><span class="line">ReferenceQueuephantomQueue = <span class="keyword">new</span> ReferenceQueue( ) ;</span><br><span class="line">PhantomReference&lt;object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;object&gt;(obj, phantomQueue); </span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">ReferenceQueue&lt;Object&gt; referenceQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">PhantomReference&lt;Object&gt; weak = <span class="keyword">new</span> PhantomReference&lt;&gt;(o1,referenceQueue);</span><br><span class="line">System.out.println(o1);<span class="comment">//java.lang.Object@5cad8086</span></span><br><span class="line">System.out.println(weak.get());<span class="comment">//null</span></span><br><span class="line">System.out.println(referenceQueue.poll());<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line"></span><br><span class="line">o1=<span class="keyword">null</span>;</span><br><span class="line">System.gc();</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">System.out.println(weak.get());<span class="comment">//null</span></span><br><span class="line">System.out.println(referenceQueue.poll());<span class="comment">//java.lang.ref.PhantomReference@6e0be858</span></span><br></pre></td></tr></table></figure><p><strong>总结：虚引用必须加入引用队列，可以在对象被销毁后做一些想做的事情</strong></p><h2 id="OOM"><a href="#OOM" class="headerlink" title="OOM"></a>OOM</h2><img src="https://img-blog.csdnimg.cn/20210404192336145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><blockquote><p>java.lang.StackOverflowError</p></blockquote><p>栈溢出，递归</p><blockquote><p>Java.lang.OutOfMemoryError：Java heap Space</p></blockquote><p>堆内存溢出</p><blockquote><p>Java.lang.OutOfMemoryError：GC overhead limit exceeded</p></blockquote><p>GC回收时间过长，超过98%的时间用来GC并且回收了不到2%的堆内存</p><blockquote><p>Java.lang.OutOfMemoryError：Direct buffer memory</p></blockquote><p>写NIO程序经常使用ByteBuffer来读取或者写入数据，这是一种基于通道与缓冲区的IO方式</p><p>它可以使用native函数直接分配堆外内存，然后通过一个存储在java堆内的DirectByteBuffer对象作为这块内存的引用进行操作</p><ul><li>ByteBuffer.allocate(capability)：分配JVM堆内存，属于GC管辖范围，由于需要拷贝所以速度较慢</li><li>ByteBuffer.allocateDirect（capability）：分配本地内存，不属于GC管辖范围，速度较快</li></ul><p><strong>如果不断分配本地内存，堆内存很少使用，那么JVM就不需要执行GC，DirectByteBuffer对象就不会回收，这个时候堆内存充足但是本地内存已经使用光了，再次尝试分配就会报错</strong></p><blockquote><p>Java.lang.OutOfMemoryError：unable to create new native thread</p></blockquote><p>1、创建了太多线程，一个应用进程创建了多个线程，超过了系统的承载极限</p><p>2、服务器不允许创建太多线程，linux线程默认最多1024个</p><blockquote><p>Java.lang.OutOfMemoryError：Metaspace</p></blockquote><p>元空间内存溢出</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><blockquote><p>垃圾回收算法和垃圾回收器的关系？</p></blockquote><p>垃圾回收算法是内存回收的方法论，垃圾回收器是算法的具体实现</p><blockquote><p>四种主要的垃圾回收器？</p></blockquote><p>1、串行回收：Serial、Serial Old</p><p>2、并行回收：ParNew、Parallel、Parallel Old</p><ul><li>多个垃圾收集线程并行工作，STW，适合后台运算场景</li></ul><p>3、并发回收：CMS、G1</p><blockquote><p>如何查看服务器默认的垃圾收集器？</p></blockquote><p><code>java -XX:+PrintCommandLineFlags 17329</code></p><blockquote><p>垃圾回收器</p></blockquote><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88972faa533c~tplv-t2oaga2asx-watermark.awebp" alt="6" style="zoom:50%;" /><blockquote><p>部分参数预先说明</p></blockquote><p>DefNew：默认新生代</p><p>Tenured：老年代</p><p>ParNew：在新生代并行</p><p>PSYoungGen：在新生代Parallel</p><p>ParOldGen：Parallel老年代</p><blockquote><p>串行Serial</p></blockquote><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88af4c12170b~tplv-t2oaga2asx-watermark.awebp" alt="9"></p><p>STW、复制算法、标记-整理算法</p><p><strong>Client模式下默认的新生代垃圾收集器</strong></p><p>参数：<code>-XX:+UseSerialGC</code></p><blockquote><p>并行ParNew</p></blockquote><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88b5da16f393~tplv-t2oaga2asx-watermark.awebp" alt="10"></p><p>STW、复制算法</p><p>很多java虚拟机运行在Server模式下新生代的默认垃圾收集器</p><p><code>-XX:ParallelGCThreads</code>：限制线程数量，默认开启和CPU相同的数量</p><blockquote><p>并行Parallel </p></blockquote><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88bd8272c80d~tplv-t2oaga2asx-watermark.awebp" alt="11"></p><p>Parallel Scavenge：新生代、复制算法、吞吐量优先收集器</p><p>重点关注：</p><ul><li><strong>可控制的吞吐量</strong>：高效利用CPU，多用于后台运算</li><li><strong>自适应调节策略</strong>：虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供合适的停顿时间（<code>-XX:MaxGCPauseMillis</code>）或最大吞吐量</li></ul><p>常用JVM参数：</p><p><code>-XX:+UseAdaptiveSizePolicy</code>：设置Parallel Scavenge收集器具有<strong>自适应调节策略</strong></p><blockquote><p>CMS</p></blockquote><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88c4cd91d748~tplv-t2oaga2asx-watermark.awebp" alt="12"></p><p>老年区</p><p>标记-清理算法</p><p><strong>低延迟</strong></p><p><strong>适合堆内存大、CPU核数多的服务端应用</strong></p><p>1、过程：</p><ul><li>初始标记：STW，标记GC Roots直接关联对象，速度快</li><li>并发标记：并发，遍历对象树，标记全部对象</li><li>重新标记：STW，修正</li><li>并发清理：并发，清理对象</li></ul><p>2、<strong>优点：</strong>并发收集、低延迟</p><p>3、<strong>缺点：</strong></p><ul><li>内存碎片，最后不得不通过担保机制对堆内存进行压缩，进行一次fullGC</li><li>对cpu资源压力大：Serial Old收集器后备策略</li><li>浮动垃圾</li></ul><p>4、参数：</p><ul><li><code>-XX:+UseConcMarkSweepGC</code>：<strong>开启CMS，自动开启ParNew</strong></li></ul><blockquote><p>以前收集器的特点</p></blockquote><p>1、年轻代、老年代各自独立</p><p>2、年轻代使用复制算法</p><p>3、老年代收集必须扫描整个老年代区域</p><p>4、都是以尽可能少而快速的GC为设计原则</p><blockquote><p>G1的特点</p></blockquote><p>服务端，多处理器和大容量内存，在实现高吞吐量的同时尽可能满足垃圾收集暂停时间的要求</p><p><strong>1、特性：</strong></p><ul><li>像CMS一样，能与应用程序线程并发执行</li><li>整理空闲空间更快</li><li>需要更多的时间来预测GC停顿时间</li><li>不希望牺牲大量的吞吐性能</li><li>不需要更大的Java Heap</li></ul><p><strong>2、目标</strong>：取代CMS收集器，在以下方面表现的更出色：</p><ul><li>不会产生很多的内存碎片</li><li>STW更可控，在停顿时间上添加了预测机制，用户可以指定期望的停顿时间</li></ul><p><strong>3、优点</strong></p><ul><li>充分利用CPU、多核环境的硬件优势，缩短STW</li><li>整体上采用标记-整理算法，局部通过复制算法，没有内存碎片</li><li>将内存划分为多个region（逻辑上的分代概念）</li></ul><p><strong>4、缺点</strong></p><p>G1无论是为了垃圾收集产生的内存占用还是程序运行时的额外执行负载都要比CMS要高。</p><p>在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用，上则发挥其优势，平衡点在6一8GB之间。</p><blockquote><p>G1的底层原理</p></blockquote><p><strong>1、Region</strong></p><p><code>-XX:G1HeapRegionSize=n</code>指定分区大小，默认2048个分区（64G）</p><p>分区：E、S、O、H</p><ul><li>新生代的垃圾收集依然采用STW的方式将存活对象拷贝到老年代或者S区</li><li>老年代，G1通过将对象从一个区域复制到另外一个区域，完成了清理工作，这就意味着在正常处理过程中G1完成了堆的压缩，就不会有碎片产生了</li><li>H区：如果一个对象大于50%的region，就是大对象，放入H区，如果一个H区放不下就寻找连续的H区，为了找到连续的H区有时候需要Full GC</li></ul><p><strong>2、回收步骤</strong></p><p><strong>针对Eden区的收集</strong>，Eden区耗尽后会被触发，主要是小区域+形成连续的内存块</p><ul><li>Eden区数据移动到S区，假如S区空间不够，E区晋升到Old区</li><li>S区移动到新的S区，部分数据晋升Old区</li><li>最后Eden区收拾干净了，GC结束</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e960608c62274e6eaa135547320501ac~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>步骤：</strong></p><ul><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ul><blockquote><p>和CMS相比的优势？</p></blockquote><p>1、不会产生内存碎片</p><p>2、可以精确控制停顿</p><h2 id="并发标记算法"><a href="#并发标记算法" class="headerlink" title="并发标记算法"></a>并发标记算法</h2><h3 id="三色标记"><a href="#三色标记" class="headerlink" title="三色标记"></a>三色标记</h3><p>白色：<strong>表示对象尚未被垃圾回收器访问过</strong></p><p>灰色：<strong>表示对象已经被垃圾回收器访问过，但这个对象至少存在一个引用还没有被扫描过</strong></p><p>黑色：<strong>表示对象已经被垃圾回收器访问过，且这个对象的所有引用都已经扫描过</strong></p><h3 id="浮动垃圾问题"><a href="#浮动垃圾问题" class="headerlink" title="浮动垃圾问题"></a>浮动垃圾问题</h3><p>垃圾回收器在对象图上面标记颜色，而同时用户线程在修改引用关系，引用关系修改了，那么对象图就变化了，这样就有可能出现两种后果：</p><p><strong>一种是把原本消亡的对象错误的标记为存活，这不是好事，但是其实是可以容忍的，只不过产生了一点逃过本次回收的浮动垃圾而已，下次清理就可以。</strong></p><p><strong>一种是把原本存活的对象错误的标记为已消亡，这就是非常严重的后果了，一个程序还需要使用的对象被回收了，那程序肯定会因此发生错误。</strong></p><h3 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h3><p><strong>当且仅当以下两个条件同时满足时</strong>，会产生”对象消失”的问题，原来应该是黑色的对象被误标为了白色：</p><ul><li><p>条件一：赋值器插入了一条或者多条从<strong>黑色对象到白色对象的新引用</strong></p></li><li><p>条件二：赋值器删除了全部从<strong>灰色对象到该白色对象</strong>的直接或间接引用</p></li></ul><p>结合图捋一捋上面的这两个条件，是不是当且仅当的关系：</p><p>黑色对象5到白色对象9之间的引用是新建的，对应条件一。</p><p>黑色对象6到白色对象9之间的引用被删除了，对应条件二。</p><img src="https://user-gold-cdn.xitu.io/2020/2/23/170726bdeb0e7841?imageView2/0/w/1280/h/960/ignore-error/1" alt="img" style="zoom: 87%;" /><p>由于两个条件之间是当且仅当的关系。所以，我们要解决并发标记时对象消失的问题，只需要破坏两个条件中的任意一个就行。</p><p>于是产生了两种解决方案：<strong>增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，SATB）。</strong></p><p>在HotSpot虚拟机中，<strong>CMS是基于增量更新来做并发标记的，G1则采用的是原始快照的方式。</strong></p><h3 id="增量更新"><a href="#增量更新" class="headerlink" title="增量更新"></a>增量更新</h3><p>1、破坏的是第一个条件</p><p><strong>2、当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次</strong></p><p>3、写屏障：<strong>写后屏障(Post-Write Barrier)，记录了所有新增的引用关系</strong></p><p>4、但是存在问题，所以CMS的重新扫描阶段需要重新扫描一遍</p><h3 id="原始快照（SATB）"><a href="#原始快照（SATB）" class="headerlink" title="原始快照（SATB）"></a>原始快照（SATB）</h3><p>破坏第二个条件</p><p>关注引用的删除，记录下删除的引用，下次扫描保证还能被GC到</p><h2 id="说一下-JVM-调优的命令"><a href="#说一下-JVM-调优的命令" class="headerlink" title="说一下 JVM 调优的命令"></a>说一下 JVM 调优的命令</h2><ul><li>jps：JVM Process Status Tool,显示指定系统内所有的HotSpot虚拟机进程。</li><li>jstat：jstat(JVM statistics Monitoring)是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</li><li>jmap：jmap(JVM Memory Map)命令用于生成heap dump文件，如果不使用这个命令，还阔以使用-XX:+HeapDumpOnOutOfMemoryError参数来让虚拟机出现OOM的时候·自动生成dump文件。 jmap不仅能生成dump文件，还阔以查询finalize执行队列、Java堆和永久代的详细信息，如当前使用率、当前使用的是哪种收集器等。</li><li>jhat：jhat(JVM Heap Analysis Tool)命令是与jmap搭配使用，用来分析jmap生成的dump，jhat内置了一个微型的HTTP&#x2F;HTML服务器，生成dump的分析结果后，可以在浏览器中查看。在此要注意，一般不会直接在服务器上进行分析，因为jhat是一个耗时并且耗费硬件资源的过程，一般把服务器生成的dump文件复制到本地或其他机器上进行分析。</li><li>jstack：jstack用于生成java虚拟机当前时刻的线程快照。jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果java程序崩溃生成core文件，jstack工具可以用来获得core文件的java stack和native stack的信息，从而可以轻松地知道java程序是如何崩溃和在程序何处发生问题。</li></ul><h2 id="介绍下空间分配担保原则"><a href="#介绍下空间分配担保原则" class="headerlink" title="介绍下空间分配担保原则"></a>介绍下空间分配担保原则</h2><p>如果YougGC时新生代有大量对象存活下来，而 sur<a href="">vivo</a>r 区放不下了，这时必须转移到老年代中，但这时发现老年代也放不下这些对象了，那怎么处理呢？其实JVM有一个老年代空间分配担保机制来保证对象能够进入老年代。</p><p>在执行每次 YoungGC 之前，JVM会先检查老年代最大可用连续空间是否大于新生代所有对象的总大小。因为在极端情况下，可能新生代 YoungGC 后，所有对象都存活下来了，而 sur<a href="">vivo</a>r 区又放不下，那可能所有对象都要进入老年代了。这个时候如果老年代的可用连续空间是大于新生代所有对象的总大小的，那就可以放心进行 YoungGC。但如果老年代的内存大小是小于新生代对象总大小的，那就有可能老年代空间不够放入新生代所有存活对象，这个时候JVM就会先检查 -XX:HandlePromotionFailure 参数是否允许担保失败，如果允许，就会判断老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次YoungGC，尽快这次YoungGC是有风险的。如果小于，或者 -XX:HandlePromotionFailure 参数不允许担保失败，这时就会进行一次 Full GC。</p><p>在允许担保失败并尝试进行YoungGC后，可能会出现三种情况：</p><ul><li>① YoungGC后，存活对象小于sur<a href="">vivo</a>r大小，此时存活对象进入sur<a href="">vivo</a>r区中</li><li>② YoungGC后，存活对象大于sur<a href="">vivo</a>r大小，但是小于老年大可用空间大小，此时直接进入老年代。</li><li>③ YoungGC后，存活对象大于sur<a href="">vivo</a>r大小，也大于老年大可用空间大小，老年代也放不下这些对象了，此时就会发生“Handle Promotion Failure”，就触发了 Full GC。如果 Full GC后，老年代还是没有足够的空间，此时就会发生OOM内存溢出了。</li></ul><p>通过下图来了解空间分配担保原则：</p><p><img src="https://uploadfiles.nowcoder.com/files/20210329/540390845_1617032205518/image-20210329230240201.png" alt="img"></p><h1 id="JVM和Java体系结构"><a href="#JVM和Java体系结构" class="headerlink" title="JVM和Java体系结构"></a>JVM和Java体系结构</h1><h2 id="虚拟机与Java虚拟机"><a href="#虚拟机与Java虚拟机" class="headerlink" title="虚拟机与Java虚拟机"></a>虚拟机与Java虚拟机</h2><p>1、所谓虚拟机，就是一台虚拟的计算机，大体上分为<strong>系统虚拟机和程序虚拟机</strong></p><p>2、Java虚拟机是一台执行<strong>Java字节码</strong>的虚拟计算机，拥有独立的运行机制，其运行的Java字节码也未必由java语言编译而成</p><p>3、Java技术的核心就是<strong>Java虚拟机</strong>，所有的Java程序都运行在Java虚拟机内部</p><p>4、特点：</p><ul><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ul><img src="https://img-blog.csdnimg.cn/2021032819422653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>JVM是运行在操作系统之上的，与硬件没有直接交互</p><h2 id="JVM整体结构"><a href="#JVM整体结构" class="headerlink" title="JVM整体结构"></a>JVM整体结构</h2><p>HotSpot VM是高性能虚拟机的代表作之一</p><img src="https://img-blog.csdnimg.cn/20210328194500996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><p>1、类装载器子系统：将字节码文件加载到内存中，生成class对象（加载、链接、初始化）</p><p>2、运行时数据区：方法区、Java栈、本地方法栈、堆、程序计数器</p><p>3、执行引擎：高级语言翻译成机器语言</p><h2 id="Java代码执行流程"><a href="#Java代码执行流程" class="headerlink" title="Java代码执行流程"></a>Java代码执行流程</h2><img src="https://img-blog.csdnimg.cn/20210328195719927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><h2 id="JVM的架构模型"><a href="#JVM的架构模型" class="headerlink" title="JVM的架构模型"></a>JVM的架构模型</h2><p>Java编译器输入的指令流基本上是一种<strong>基于栈的指令集架构</strong></p><p>特点：</p><ul><li>设计和实现更简单，适用于资源受限的系统</li><li>避开了寄存器的分配难题，使用零地址指令方式分配</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈</li><li>不需要硬件的支持，可移植性更好，更好实现<strong>跨平台</strong></li></ul><p><strong>跨平台、指令集小、指令多、执行性能比寄存器差</strong></p><h2 id="JVM的生命周期"><a href="#JVM的生命周期" class="headerlink" title="JVM的生命周期"></a>JVM的生命周期</h2><p><strong>启动</strong></p><p>通过引导类加载器创建一个初始类来完成，这个类由虚拟机的具体实现指定</p><hr/><p><strong>执行</strong></p><ul><li>一个运行中的java虚拟机有一个清晰的任务：执行Java程序</li><li>程序开始执行他才开始运行，程序结束就停止</li><li>执行一个Java程序的时候，真正执行的是Java虚拟机的进程</li></ul><hr/><p><strong>退出</strong></p><p>如下几种情况：</p><ul><li>程序正常执行结束</li><li>异常终止</li><li>由于操作系统导致终止</li><li>线程调用Runtime类或System类的exit方法等</li></ul><h1 id="类加载子系统"><a href="#类加载子系统" class="headerlink" title="类加载子系统"></a>类加载子系统</h1><h2 id="类加载器和类加载过程"><a href="#类加载器和类加载过程" class="headerlink" title="类加载器和类加载过程"></a>类加载器和类加载过程</h2><p><strong>1、类加载器子系统的作用</strong></p><ul><li><p>类加载子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识；</p></li><li><p>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine（执行引擎）决定</p></li><li><p>加载的类信息存放于一块成为方法区的内存空间。除了类信息之外，方法区还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）</p></li></ul><p><strong>2、类加载器ClassLoader角色</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ec7d7217f0c1c~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><p><strong>3、阶段一：加载阶段</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ec7daeca85a52~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><ul><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流代表的静态存储结构转化为方法区的运行时数据结构</li><li><strong>在内存中生出一个代表这个类的java.lang.Class对象</strong>，作为方法区这个类的各种数据的访问入口</li></ul><p><strong>4、阶段二：链接阶段</strong></p><ul><li><strong>验证</strong><ul><li>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全</li><li>主要包括四种验证：<strong>文件格式验证，源数据验证，字节码验证，符号引用验证</strong></li></ul></li><li><strong>准备</strong><ul><li><strong>为类变量分配内存并且设置该类变量（即静态变量、被<code>static</code>修饰的变量）的默认初始值，即零值；</strong></li><li>这里不包含用final修饰的static，因为<strong>final在编译的时候就会分配了，准备阶段会显式初始化</strong></li><li><strong>不会为实例变量分配初始化</strong>，类变量会分配在方法区中，而实例变量是会随着对象一起分配到java堆中</li></ul></li><li><strong>解析</strong><ul><li><strong>将常量池内的符号引用转换为直接引用的过程。</strong></li><li>事实上，解析操作往往会伴随着jvm在执行完初始化之后再执行</li><li><strong>符号引用就是一组符号来描述所引用的目标</strong>。符号应用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。<strong>直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄</strong></li><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info&#x2F;CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。</li></ul></li></ul><p><strong>5、阶段三：初始化</strong></p><ul><li><p><strong>初始化阶段就是执行类构造器方法clinit（）的过程（静态变量）</strong></p></li><li><p>此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。 <code>我们注意到如果没有静态变量c，那么字节码文件中就不会有clinit方法</code></p></li><li><p>构造器方法中指令按语句在源文件中出现的顺序执行</p></li><li><p>clinit()不同于类的构造器。（关联：构造器是虚拟机视角下的init()）</p></li><li><p>若该类具有父类，jvm会保证子类的clinit()执行前，父类的clinit()已经执行完毕</p></li><li><p>虚拟机必须保证一个类的clinit方法在多线程下被同步加锁</p></li></ul><p><span style="background: yellow;">（静态变量、静态初始化块：决于它们在类中出现的先后顺序）&gt;（变量、初始化块：决于它们在类中出现的先后顺序）&gt; 构造器</span></p><p>有父类的加载顺序：</p><ul><li>父类–静态变量</li><li>父类–静态初始化块</li><li>子类–静态变量</li><li>子类–静态初始化块</li><li>子类main方法</li><li>父类–变量</li><li>父类–初始化块</li><li>父类–构造器</li><li>子类–变量</li><li>子类–初始化块</li><li>子类–构造器</li></ul><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><p>1、JVM支持两种类型的加载器，分别为<strong>引导类加载器（BootStrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）</strong></p><ul><li>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器</li><li>但是java虚拟机规范却没有这么定义，而是<strong>将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器</strong>。</li></ul><img src="https://img-blog.csdnimg.cn/20210329140105713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p><strong>2、加载器：</strong></p><ul><li>引导类加载器（非java语言实现），加载java的核心类库</li><li>扩展类加载器</li><li>系统类加载器，用户自定义类使用这个加载器</li><li>自定义加载器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">//获取系统类加载器</span></span><br><span class="line">  ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">  System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取上层：扩展类加载器</span></span><br><span class="line">  ClassLoader e = systemClassLoader.getParent();</span><br><span class="line">  System.out.println(e);<span class="comment">//sun.misc.Launcher$ExtClassLoader@5cad8086</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取上层：引导类加载器</span></span><br><span class="line">  ClassLoader b = e.getParent();</span><br><span class="line">  System.out.println(b);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//对于用户自定义类来说：默认使用系统类加载器进行加载</span></span><br><span class="line">  ClassLoader add = add.class.getClassLoader();</span><br><span class="line">  System.out.println(add);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//String类：使用引导类加载器进行加载，系统核心类库都是使用引导类加载器进行加载的</span></span><br><span class="line">  ClassLoader s = String.class.getClassLoader();</span><br><span class="line">  System.out.println(s);<span class="comment">//null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引导类加载器"><a href="#引导类加载器" class="headerlink" title="引导类加载器"></a>引导类加载器</h3><p>1、使用<strong>C&#x2F;C++语言</strong>实现，嵌套在JVM内部</p><p>2、<strong>加载Java的核心库</strong>，用于提供JVM自身需要的类</p><p>3、并不继承自java.lang.ClassLoader，没有父加载器</p><p>4、<strong>加载扩展类和应用程序类加载器</strong>，并指定为他们的父类加载器</p><h3 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h3><p>1、Java语言编写</p><p>2、<strong>派生于ClassLoader类</strong></p><p>3、父类加载器为引导类加载器</p><p>4、从jdk的安装目录的<code>jre/lib/ext</code>子目录下加载类库，如果用户把jar包放在这个目录下就自动使用扩展类加载器加载</p><h3 id="系统类加载器"><a href="#系统类加载器" class="headerlink" title="系统类加载器"></a>系统类加载器</h3><p>1、Java语言编写</p><p>2、<strong>派生于ClassLoader类</strong></p><p>3、父类加载器为引导类加载器</p><p>4、负责加载classpath或者系统属性java.class.path下的类库</p><p>5、<strong>该类加载器是程序默认使用的类加载器</strong></p><p>6、通过<code>ClassLoader.getSystemClassLoader()</code>可以获取该类的加载器</p><h3 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h3><p>使用场景：</p><p>1、从任意位置加载类。JVM 预定义的三个类加载器都被限定了自己的类路径，我们可以通过自定义类加载器去加载其他任意位置的类。</p><p>2、解密类文件。比如我们可以对编译后的类文件进行加密，然后通过自定义类加载器进行解密。当然这种方法实际并没有太大的用处，因为自定义的类加载器也可以被反编译。</p><p>3、支持更灵活的内存管理。我们可以使用自定义类加载器在运行时卸载已加载的类，从而更高效的利用内存。</p><p><strong>实现步骤</strong></p><p>1、继承class.lang.ClassLoader类，实现自己的类加载器</p><p>2、将自定义的类加载逻辑写在<code>findClass</code>方法中</p><h2 id="类加载器的启动顺序"><a href="#类加载器的启动顺序" class="headerlink" title="类加载器的启动顺序"></a>类加载器的启动顺序</h2><p>BootStrapClassLoader 是一个使用 C&#x2F;C++ 编写的类加载器，它已经嵌入到了 JVM 的内核之中。</p><p>当 JVM 启动时，BootStrapClassLoader 也会随之启动并加载核心类库。</p><p>当核心类库加载完成后，BootStrapClassLoader 会创建 ExtClassLoader 和 AppClassLoader 的实例，两个 Java 实现的类加载器将会加载自己负责路径下的类库，这个过程我们可以在 <code>sun.misc.Launcher</code> 中窥见。</p><h2 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h2><p>ClassLoader类是一个抽象类，类的加载器继承自这个类（不包括引导类加载器）</p><img src="https://img-blog.csdnimg.cn/20210329154955869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:53%;" /><p><strong>获取ClassLoader的途径</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ec8b36f5d4187~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><blockquote><p>Java虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时才会将她的class文件加载到内存生成的class对象。而且加载某个类的class文件时，java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式</p></blockquote><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ec8cbbe16af0c~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><ul><li><p>先委托给父类加载器，递归到顶层的引导类加载器</p></li><li><p>如果父类加载器可以完成加载任务就成功返回，如果不能子加载器才会自己加载</p></li></ul><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>避免类的重复加载</li><li>保护程序安全，防止<strong>核心API被随意篡改</strong><ul><li>自定义类：java.lang.String</li><li>自定义类：java.lang.test（<strong>java.lang包需要访问权限，阻止我们用包名自定义类</strong>）</li></ul></li></ul><p><strong>「双亲委派」机制用来保证类的唯一性，只要两个类的全路径名称一致，且都是同一个类加载器加载，那么就判断这两个类是相同的</strong></p><h3 id="沙箱安全机制"><a href="#沙箱安全机制" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h3><p>自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载过程中会先加载jdk自带的文件（rt.jar包中的java\lang\String.class）,报错信息说没有main方法就是因为加载的是rt.jar包中的String类。</p><p>这样可以保证对java核心源代码的保护，这就是<strong>沙箱安全机制</strong>。</p><h1 id="运行时数据区（一）"><a href="#运行时数据区（一）" class="headerlink" title="运行时数据区（一）"></a>运行时数据区（一）</h1><h2 id="内存和线程"><a href="#内存和线程" class="headerlink" title="内存和线程"></a>内存和线程</h2><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存是非常重要的系统资源，是硬盘和cpu的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了JAVA在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。</p><p><strong>不同的jvm对于内存的划分方式和管理机制存在着部分差异</strong>（对于Hotspot主要指：方法区）</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecae266df65ba~tplv-t2oaga2asx-watermark.awebp" alt="jdk8以后 ，方法区就是元数据区" style="zoom:50%;" /><p><strong>JDK8的元数据区+JIT编译产物 就是JDK8以前的方法区</strong></p><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecae9790e6eac~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><p><strong>红色：一个进程一份</strong></p><p><strong>灰色：一个线程一份</strong></p><ul><li>每个线程：程序计数器、虚拟机栈、本地栈</li><li>线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</li></ul><p><strong>一般来说，jvm优化（比如垃圾回收）95%是优化堆区，5%优化的是方法区</strong></p><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><p>相当于运行时数据区，每个虚拟机只有一个Runtime实例</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>1、<strong>线程是一个程序里的运行单元</strong>，JVM允许一个程序有多个线程并行的执行</p><p>2、在HotSpot JVM，<strong>每个线程都与操作系统的本地线程直接映射</strong></p><ul><li>当一个java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。java线程执行终止后。本地线程也会回收</li></ul><p>3、操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，<strong>它就会调用java线程中的run（）方法</strong></p><h2 id="程序计数器（PC寄存器）"><a href="#程序计数器（PC寄存器）" class="headerlink" title="程序计数器（PC寄存器）"></a>程序计数器（PC寄存器）</h2><p>JVM中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。</p><p>CPU只有把数据装载到寄存器才能够运行。</p><p><strong>JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecaecbef6c19d~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>PC寄存器是用来存储<strong>指向下一条指令的地址</strong>，即将要执行的指令代码，由执行引擎读取下一条指令。</p><ul><li><p>它是一块很小的内存空间，几乎可以忽略不计，也是<strong>运行速度最快的存储区域</strong></p></li><li><p>在jvm规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致</p></li><li><p>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。程序计数器会存储当前线程正在执行的java方法的JVM指令地址；</p><ul><li><strong>如果是在执行native方法，则是未指定值（undefined）</strong>（因为这个是java层面的寄存器，无法调用c的方法）。</li></ul></li><li><p>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</p></li><li><p>字节码解释器工作时就是通过改变这个计数器的值来选取吓一跳需要执行的字节码指令</p></li><li><p><strong>它是唯一一个在java虚拟机规范中没有规定任何OOM情况的区域</strong></p></li></ul><h3 id="常见面试问题"><a href="#常见面试问题" class="headerlink" title="常见面试问题"></a>常见面试问题</h3><p><strong>1、使用PC寄存器存储字节码指令地址有什么用？</strong></p><p>因为CPU在不停切换不同的线程，切换回来之后需要知道接下来从哪里开始继续执行</p><hr/><p><strong>2、PC寄存器为什么被设定为线程私有？</strong></p><p>**为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器,**这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p><p>由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p><p>这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p><h3 id="CPU时间片"><a href="#CPU时间片" class="headerlink" title="CPU时间片"></a>CPU时间片</h3><p>CPU时间片即CPU分配各各个程序的时间，每个线程被分配一个时间段。称作它的时间片。</p><ul><li><p>在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。 </p></li><li><p>但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</p></li></ul><p><strong>并行与并发的区别</strong></p><ul><li>并行：同一时间多个线程同时执行；</li><li>并发：一个核快速切换多个线程，让它们依次执行，看起来像并行，实际上是并发</li></ul><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>1、栈和堆</strong></p><p>栈是运行时的单位，堆是存储的单位</p><ul><li>栈解决程序的<strong>运行问题</strong>，即程序如何执行、如何处理数据</li><li>堆解决数据的<strong>存储问题</strong>，即数据怎么放，放在哪儿</li></ul><p>2、Java虚拟机栈是什么？</p><p>每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧，对应一次次的Java方法调用<strong>（一个栈帧对应一个方法）</strong></p><p>3、生命周期与线程一致</p><p><strong>4、作用：主管Java程序的运行，保存方法的局部变量（8种基本数据类型、对象的引用地址）、部分结果、并参与方法的调用和返回</strong></p><ul><li>局部变量 vs 成员变量（属性）</li><li>基本数据类型变量 vs 引用类型变量（类、数组、接口）</li></ul><p>5、优点</p><ul><li><strong>栈是一种快速有效的分配存储方式，访问速度仅次于PC寄存器（程序计数器）</strong></li><li>JVM直接对java栈的操作只有两个<ul><li>每个方法执行，伴随着进栈（入栈，压栈）</li><li>执行结束后的出栈工作</li></ul></li><li>对于栈来说不存在垃圾回收问题</li></ul><h3 id="栈的存储单位（栈帧）"><a href="#栈的存储单位（栈帧）" class="headerlink" title="栈的存储单位（栈帧）"></a>栈的存储单位（栈帧）</h3><p>1、每个线程都有自己的栈，栈中的数据都是以栈帧的格式存在的</p><p>2、<strong>方法和栈帧是一对一的关系</strong></p><p>3、栈帧是一个<strong>内存区块</strong>，是一个数据集，维系着方法执行过程中的各种数据信息</p><p>4、一条活动线程中，一个时间点上，只有一个活动栈帧</p><ul><li>只有当前正在执行的栈帧才是有效的，被称为当前栈帧</li><li>对应的方法叫做当前方法</li><li>定义这个方法的类就是当前类</li></ul><p>5、不同的线程所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另外一个栈帧</p><p><strong>6、Java方法有两种返回函数的方式</strong></p><ul><li>return</li><li>抛出异常（没有处理这个异常）</li></ul><h4 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h4><p>每个栈帧中存储着：</p><ul><li><strong>局部变量表</strong>（Local Variables）</li><li><strong>操作数栈</strong>（Operand Stack）(或表达式栈)</li><li>动态链接（Dynamic Linking）(或执行运行时常量池的方法引用)</li><li>方法返回地址（Return Adress）（或方法正常退出或者异常退出的定义）</li><li>一些附加信息</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecafe0fab0cb2~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>1、定义为一个<strong>数字数组</strong>，主要用于存储方法参数和定义在方法体内的局部变量</p><ul><li>数据类型：8种基本数据类型、对象引用、returnAdress类型</li></ul><p>2、<strong>局部变量表需要的容量大小在编译期确定</strong>，并保存在方法的Code属性的Maximum local variables数据项中</p><p><strong>3、局部变量表中的变量只在当前方法调用中有效，方法调用结束后自动销毁</strong></p><h4 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a>Slot</h4><p>1、参数值的存放总是在局部变量数组的index0开始，到数组长度-1的索引结束（数组）</p><p>2、局部变量表，<strong>最基本的存储单元是Slot(变量槽)</strong></p><p>3、局部变量表中存放编译期可知的各种基本数据类型（8种），引用类型（reference），returnAddress类型的变量。</p><p>4、在局部变量表里，<strong>32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot。</strong></p><ul><li>byte、short、char、float在存储前被转换为int，boolean也被转换为int，0表示false，非0表示true；</li><li>long和double则占据两个slot。</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecb1565b0252f~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><p>5、JVM会为局部变量表中的每一个slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值</p><p>6、当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会<strong>按照顺序被复制到局部变量表中的每一个slot上</strong></p><p>7、<strong>如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可。</strong>（比如：访问long或者double类型变量）</p><p>8、如果当前帧是由<strong>构造方法或者实例方法（非静态代码）</strong>创建的，那么<strong>该对象引用this将会存放在index为0的slot处</strong>,其余的参数按照参数表顺序排列。</p><p><strong>总结：</strong></p><ul><li>double和long占两位索引，取前一位</li><li>非静态方法index为0的位置为this</li><li>无参构造器只有this</li></ul><h4 id="slot的重复利用"><a href="#slot的重复利用" class="headerlink" title="slot的重复利用"></a>slot的重复利用</h4><p>栈帧中的局部变量表中的槽位是可以重复利用的，<strong>如果一个局部变量过了其作用域</strong>，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    b = a+<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//变量c使用之前以及经销毁的变量b占据的slot位置</span></span><br><span class="line">  <span class="keyword">int</span> c = a+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态变量与局部变量"><a href="#静态变量与局部变量" class="headerlink" title="静态变量与局部变量"></a>静态变量与局部变量</h4><p><strong>变量分类：</strong></p><ul><li><p>按照数据类型：基本数据类型、引用数据类型</p></li><li><p>按照类中声明的位置：</p><ul><li>成员变量：在使用前都经历过默认初始化赋值（类加载的第二阶段中的准备）<ul><li>类变量（静态变量）<ul><li>链接的准备阶段：给类变量赋值</li><li>初始化阶段：给类变量显式赋值即静态代码块赋值</li></ul></li><li>实例变量<ul><li>随着对象的创建，会在堆空间中分配实例变量空间，并有默认赋值</li></ul></li></ul></li><li>局部变量：使用前必须进行显式赋值，不然编译无法通过</li></ul></li></ul><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>在栈帧中，与性能调优关系最密切的部分就是局部变量表，在方法执行时，虚拟机使用局部变量表完成方法的传递</p><p><strong>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收</strong></p><h3 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h3><p>1、<strong>操作数栈，在方法执行过程中根据字节码指令，往栈中写入数据或者提取数据</strong>，即入栈&#x2F;出栈</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecb180342dcf0~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><p>2、操作数栈，<strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。</strong></p><p>3、操作数栈就是jvm执行引擎的一个工作区，当一个方法开始执行的时候，一个新的栈帧也会随之被创建出来，<strong>这个方法的操作数栈是空的</strong></p><p>4、每一个操作数栈都会<strong>拥有一个明确的栈深度用于存储数值，</strong>其所需的最大深度在编译器就定义好了，保存在方法的code属性中，为max_stack的值（数组的长度是固定的）</p><p>5、栈中的任何一个元素都是可以任意的java数据类型</p><ul><li>32bit的类型<strong>占用一个栈单位深度</strong></li><li>64bit的类型<strong>占用两个栈深度单位（long、double）</strong></li></ul><p>6、操作数栈<strong>并非采用访问索引的方式来进行数据访问</strong>的，而是只能通过标准的入栈push和出栈pop操作来完成一次数据访问</p><p>7、<strong>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，</strong>并更新PC寄存器中下一条需要执行的字节码指令。</p><p>8、操作数栈中的元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类验证阶段的数据流分析阶段要再次验证。</p><p>9、另外，我们说Java虚拟机的<strong>解释引擎是基于栈的执行引擎</strong>,其中的栈指的就是操作数栈。</p><hr/><p><strong>结合下面的图来看一下一个方法（栈帧）的执行过程</strong></p><p><strong>①15入栈；②存储15，15进入局部变量表</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecb1c4797b788~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><p><strong>③压入8；④存储8，8进入局部变量表；</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecb53336d048b~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><p><strong>⑤从局部变量表中把索引为1和2的是数据取出来，放到操作数栈；⑥iadd相加操作，8和15出栈</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecb55fd42e99f~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><p><strong>⑦iadd操作结果23入栈；⑧将23存储在局部变量表索引为3的位置上</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecb5802369d83~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><h4 id="i-和-i的区别"><a href="#i-和-i的区别" class="headerlink" title="i++和++i的区别"></a>i++和++i的区别</h4><img src="https://img-blog.csdnimg.cn/20210330104708298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 30%;" /><h4 id="栈顶缓存技术"><a href="#栈顶缓存技术" class="headerlink" title="栈顶缓存技术"></a>栈顶缓存技术</h4><p>基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（instruction dispatch）次数和内存读&#x2F;写次数</p><p>由于操作数是存储在内存中的，因此频繁地执行内存读&#x2F;写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM的设计者们提出了栈顶缓存技术，<strong>将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读&#x2F;写次数，提升执行疫情的执行效率</strong></p><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p><strong>1、帧数据区</strong>：附加信息+动态链接+方法返回地址</p><p>2、每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。这个引用的目的就是为了支持当前方法的代码能够实现动态链接，比如<code>invokedynamic指令</code></p><p>3、在Java源文件被编译成字节码文件中时，所有的变量和方法引用都作为符号引用（symbolic Refenrence）保存在class文件的常量池里。</p><p>比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用。</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecb779318dd20~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><blockquote><p> 为什么需要常量池？</p></blockquote><p>提供符号和常量，便于指令的识别</p><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><p>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关</p><p>1、<strong>静态链接</strong></p><p>当一个 字节码文件被装载进JVM内部时，<strong>如果被调用的目标方法在编译期可知，</strong>且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</p><p>2、<strong>动态链接</strong></p><p><strong>如果被调用的方法在编译期无法被确定下来</strong>，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接。</p><hr/><p>对应的方法的绑定机制为：早起绑定（Early Binding）和晚期绑定（Late Bingding）。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。</p><p><strong>1、早期绑定</strong></p><p>早期绑定就是指被调用的<strong>目标方法如果在编译期可知，且运行期保持不变</strong>时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</p><p><strong>2、晚期绑定</strong></p><p>如果<strong>被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法</strong>，这种绑定方式也就被称之为晚期绑定。</p><p>随着高级语言的横空出世，类似于java一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持着一个共性，那就是都支持封装，集成和多态等面向对象特性，既然这一类的编程语言具备多态特性，那么自然也就具备早期绑定和晚期绑定两种绑定方式。</p><p>Java中任何一个普通的方法其实都具备虚函数的特征，它们相当于C++语言中的虚函数（C++中则需要使用关键字virtual来显式定义）。如果在Java程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字final来标记这个方法。</p><hr/><p><strong>虚方法和非虚方法</strong></p><p>非虚方法</p><ul><li>如果方法在编译器就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法</li><li><strong>静态方法、私有方法、final方法、实例构造器、父类方法都是非虚方法</strong></li><li>其他方法称为虚方法</li></ul><h5 id="虚拟机中提供了以下几条方法调用指令："><a href="#虚拟机中提供了以下几条方法调用指令：" class="headerlink" title="虚拟机中提供了以下几条方法调用指令："></a>虚拟机中提供了以下几条方法调用指令：</h5><p>普通调用指令：<br><strong>1.invokestatic：调用静态方法，解析阶段确定唯一方法版本；</strong><br><strong>2.invokespecial：调用方法、私有及弗雷方法，解析阶段确定唯一方法版本；</strong><br>3.invokevirtual：调用所有虚方法；<br>4.invokeinterface：调用接口方法；</p><p>动态调用指令：<br>5.invokedynamic：动态解析出需要调用的方法，然后执行 .</p><p>前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定方法版本。其中<strong>invokestatic指令和invokespecial指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法。</strong></p><p><strong>虚方法表</strong></p><ul><li>在面向对象编程中，会很频繁期使用到动态分派，如果在每次动态分派的过程中都要重新在累的方法元数据中搜索合适的目标的话就可能影响到执行效率。因此，为了提高性能，jvm采用在类的方法区建立一个虚方法表（virtual method table）（非虚方法不会出现在表中）来实现。使用索引表来代替查找。</li><li>每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</li><li>那么虚方法表什么时候被创建？ 虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，jvm会把该类的方法表也初始化完毕。</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170ecb7f8233cc27~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><h3 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h3><p><strong>1、存放调用该方法的pc寄存器的值</strong></p><p>一个方法的结束，有两种方式：</p><ul><li>正常执行完成</li><li>出现未处理的异常，非正常退出</li></ul><p>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。</p><ul><li>方法正常退出时，<strong>被调用者的pc计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。</strong></li><li>而通过异常退出时，返回地址是要通过<strong>异常表</strong>来确定，栈帧中一般不会保存这部分信息。</li></ul><p>3、本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值也如调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</p><p><strong>正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值。</strong></p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p><strong>1、举例栈溢出的情况？（StackOverflowError）</strong></p><p>递归调用、无限循环等</p><p>通过-Xss设置栈的大小</p><p><strong>2、调整栈大小，就能保证不出现溢出吗？</strong></p><p>不能保证， 比如：递归无限次数肯定会溢出，调整栈大小只能保证溢出的时间晚一些</p><p><strong>3、分配的栈内存越大越好么？</strong></p><p>不是，会挤占其他线程的空间</p><p><strong>4、垃圾回收是否会涉及到虚拟机栈？</strong></p><p>不会</p><img src="https://img-blog.csdnimg.cn/2021033013143825.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>5、方法中定义的局部变量是否线程安全？</strong></p><p> 根据情况分析</p><ul><li>在方法中创建，在方法中消亡是安全的</li><li>有返回值，return出去是不安全的</li><li>不是在内部产生（形参）的是不安全的</li></ul><h2 id="本地方法接口"><a href="#本地方法接口" class="headerlink" title="本地方法接口"></a>本地方法接口</h2><h3 id="本地方法"><a href="#本地方法" class="headerlink" title="本地方法"></a>本地方法</h3><p>简单来讲，<strong>一个Native Method就是一个java调用非java代码的接口</strong>，</p><p>一个<code>Native Method</code>是这样一个java方法：该方法的实现由非Java语言实现，比如C。</p><p>本地接口的作用是融合不同的编程语言为java所用，它的初衷是融合C&#x2F;C++程序。</p><h3 id="为什么使用本地方法"><a href="#为什么使用本地方法" class="headerlink" title="为什么使用本地方法"></a>为什么使用本地方法</h3><p><strong>1、与java环境外交互</strong></p><p>有时java应用需要与java外面的环境交互，这是本地方法存在的主要原因。 你可以想想java需要与一些底层系统，如擦偶偶系统或某些硬件交换信息时的情况。本地方法正式这样的一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐细节。</p><p><strong>2、与操作系统交互</strong></p><p>JVM支持着java语言本身和运行库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至jvm的一些部分就是用C写的。还有，如果我们要使用一些java语言本身没有提供封装的操作系统特性时，我们也需要使用本地方法。</p><p><strong>3、Sun’s Java</strong></p><p>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread的setPriority()方法是用Java实现的，但是它实现调用的事该类里的本地方法setPriority0（）。这个本地方法是用C实现的，并被植入JVM内部，在Windows 95的平台上，这个本地方法最终将调用Win32 SetProority（）API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。</p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>1、<strong>Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用</strong></p><p>2、本地方法栈是线程私有的</p><p>3、允许被实现成<strong>固定或者是可动态拓展</strong>的内存大小（<strong>和虚拟机栈在内存溢出方面是相同的</strong>）</p><ul><li><p>如果线程请求分配的栈容量超过本地方法栈<strong>允许的最大容量</strong>，Java虚拟机将会抛出一个StackOverFlowError异常。</p></li><li><p>如果本地方法栈可以<strong>动态扩展</strong>，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么java虚拟机将会抛出一个OutOfMemoryError异常。</p></li></ul><p>4、它的具体做法是Native Method Stack中登记<code>native方法</code>，在Execution Engine执行时加载本地方法库</p><p><strong>5、当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界，它和虚拟机拥有同样的权限</strong></p><ul><li>本地方法可以通过本地方法接口来 <strong>访问虚拟机内部的运行时数据区</strong></li><li>它甚至可以直接使用本地处理器中的寄存器</li><li>直接从本地内存的堆中分配任意数量的内存</li></ul><h1 id="运行时数据区（二）"><a href="#运行时数据区（二）" class="headerlink" title="运行时数据区（二）"></a>运行时数据区（二）</h1><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="核心概述"><a href="#核心概述" class="headerlink" title="核心概述"></a>核心概述</h3><p>1、一个进程对应一个JVM实例，一个JVM实例对应一个运行时数据区，一个JVM实例只存在一个堆内存</p><ul><li><strong>线程共享方法区、堆</strong>，在堆还可以划分线程私有的缓冲区</li><li>每个线程独立拥有虚拟机栈、本地方法栈、程序计数器</li></ul><p>2、Java堆区在JVM启动的时候即被创建，其空间大小也就确定了，是JVM最大的内存空间</p><ul><li><strong>堆内存的大小是可以调节的</strong></li></ul><p>3、“几乎”所有的<strong>对象实例以及数组</strong>都应该在运行时分配在堆上</p><p>4、数组和对象可能永远不会存储在栈上，因为<strong>栈帧中保存引用，这个引用指向对象或者数组在堆中的位置</strong></p><p>5、方法结束以后，堆中的对象不会被马上移除</p><h4 id="内存细分"><a href="#内存细分" class="headerlink" title="内存细分"></a>内存细分</h4><p>现代垃圾收集器大部分都基于分代收集理论设计，堆空间细分为：</p><ul><li>Java 7及以前逻辑上分为：新生区 + 养老区 + 永久区</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/28/1725a665af15dfb5~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><ul><li><strong>Java 8及之后逻辑上分为：新生区 + 养老区 + 元空间</strong><ul><li>新生区（年轻代）：Young Generation Space<ul><li>Eden</li><li>Survivor</li></ul></li><li>养老区（老年代）：Tenure generation space</li><li>元空间：Meta Space</li></ul></li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/28/1725a66b57177838~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><h4 id="设置堆空间大小"><a href="#设置堆空间大小" class="headerlink" title="设置堆空间大小"></a>设置堆空间大小</h4><p>1、Java堆区用于存储java对象实例，堆的大小在jvm启动时就已经设定好了，可以通过 “-Xmx”和 “-Xms”来进行设置</p><ul><li>-Xms 用于表示堆的起始内存，等价于 -XX:InitialHeapSize<ul><li>-Xms 用来设置堆空间（年轻代+老年代）的初始内存大小<ul><li>-X 是jvm的运行参数</li><li>ms 是memory start</li></ul></li></ul></li><li>-Xmx 用于设置堆的最大内存，等价于 -XX:MaxHeapSize</li></ul><p>2、一旦堆区中的内存大小超过 -Xmx所指定的最大内存时，将会抛出OOM异常</p><h3 id="年轻代和老年代"><a href="#年轻代和老年代" class="headerlink" title="年轻代和老年代"></a>年轻代和老年代</h3><p>1、存储在JVM中的Java对象可以被划分为两类：</p><ul><li>一类是生命周期较短的对象，这类对象创建和消亡都非常迅速</li><li>一类对象生命周期较长，在某些极端情况下还能够与JVM的生命周期保持一致</li></ul><p>2、Java堆可以划分为年轻代和老年代</p><p>3、年轻代分为<strong>Eden空间、survivor0空间（from区）、survivor1空间（to区）</strong></p><ul><li><p><strong>8:1:1</strong></p></li><li><p>几乎所有Java对象都在Eden空间被new出来</p></li><li><p>绝大部分Java对象的销毁在新生代进行</p></li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/28/1725a6811c74d76b~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><h3 id="对象分配过程"><a href="#对象分配过程" class="headerlink" title="对象分配过程"></a>对象分配过程</h3><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/28/1725a6b5a5099b93~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><p>1、new的对象先放伊甸园区。此区有大小限制。</p><p>2、当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（Minor GC)，  将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区</p><p>3、然后将伊甸园中的剩余对象移动到幸存者0区。</p><p>4、如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</p><p>5、如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</p><p>6、<strong>啥时候能去养老区呢？可以设置次数。默认是15次</strong>。可以设置参数：-XX:MaxTenuringThreshold&#x3D;进行设置。</p><p>7、在养老区，相对悠闲。当老年区内存不足时，再次触发GC：Major GC，进行养老区的内存清理。</p><p>8、若养老区执行了Major GC之后发现依然无法进行对象的保存，就会产生OOM异常。</p><p><strong>总结：</strong></p><ul><li><strong>针对幸存者s0,s1区：谁空谁是to</strong></li><li><strong>关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不在永久区&#x2F;元空间收集。</strong></li><li><strong>什么时候触发YGC？</strong>Eden区满，幸存者区满了不会触发（只有在Eden区满了触发YGC的时候被动触发）</li></ul><h4 id="对象分配特殊情况"><a href="#对象分配特殊情况" class="headerlink" title="对象分配特殊情况"></a>对象分配特殊情况</h4><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/28/1725a6bccc4ef0bb~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><p><strong>超大对象—&gt;老年代</strong></p><p><strong>YGC时幸存者区放不下—&gt;老年代</strong></p><h3 id="Minor-GC、Major-GC、Full-GC"><a href="#Minor-GC、Major-GC、Full-GC" class="headerlink" title="Minor GC、Major GC、Full GC"></a>Minor GC、Major GC、Full GC</h3><blockquote><p>JVM在进行GC时，并非每次都针对上面三个内存区域（新生代、老年代；方法区）一起回收的，大部分时候回收都是指新生代</p></blockquote><p>1、GC按照回收区域分为两大类：</p><ul><li><strong>部分收集（Partial GC）</strong>：不是完整的收集整个Java堆的垃圾收集<ul><li>新生代收集（Minor GC &#x2F; Yong GC）：只是新生代的垃圾收集</li><li>老年代收集（Major GC &#x2F; Old GC）：只是老年代的垃圾收集</li><li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集</li></ul></li><li><strong>整堆收集（full GC）</strong>：收集整个java堆和方法区的垃圾收集</li></ul><hr/><p><strong>2、Minor GC的触发机制</strong></p><ul><li>年轻代空间不足，触发Minor GC，这里的年轻代满指的是<strong>Eden区域</strong>，幸存者区满不会触发</li><li>因为Java对象大多都朝生夕灭，所以Minor GC频率很高，速度也很快</li><li>Minor GC会引发STW，暂停其他用户的线程，等垃圾回收结束，用户线程才恢复运行</li></ul><hr/><p><strong>3、Major GC的触发机制</strong></p><ul><li>发生在老年代的GC，对象从老年代消失时，我们说“Major GC”发生了</li><li>出现了Major GC，经常伴随至少一次的Minor GC（不是绝对的）<ul><li>也就是老年代空间不足时，会先尝试触发Minor GC，如果之后空间还不足就触发Major GC</li></ul></li><li>Major GC速度一般更慢，STW时间更长</li><li>如果Major GC之后，内存还不足，就报OOM</li></ul><hr/><p><strong>4、Full GC的触发机制</strong></p><p>五种触发情况：</p><ul><li>调用system.gc()时，系统执行Full GC</li><li>老年代空间不足<ul><li>通过Minor GC进入老年代的平均大小大于老年代的可用内存</li><li>由Eden区，Survivor S0（from）区向S1（to）区复制时，对象大小由于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li></ul></li><li>方法区空间不足</li></ul><p><strong>尽量避免</strong></p><h3 id="堆空间分代思想"><a href="#堆空间分代思想" class="headerlink" title="堆空间分代思想"></a>堆空间分代思想</h3><blockquote><p> 为什么要把Java堆分代？不分代就不能正常工作了么</p></blockquote><ul><li>经研究，不同对象的生命周期不同。70%-99%的对象都是临时对象。<ul><li>新生代：有Eden、Survivor构成（s0,s1 又称为from to），to总为空</li><li>老年代：存放新生代中经历多次依然存活的对象</li></ul></li><li>其实不分代完全可以，分代的唯一理由就是<strong>优化GC性能</strong>。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描，而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。</li></ul><h3 id="总结：内存分配策略"><a href="#总结：内存分配策略" class="headerlink" title="总结：内存分配策略"></a>总结：内存分配策略</h3><p>1、如果对象在Eden出生并经过第一次Minor GC后依然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，把那个将对象年龄设为1.对象在Survivor区中每熬过一次MinorGC，年龄就增加一岁，当它的年龄增加到一定程度（默认15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代中。</p><p><strong>2、针对不同年龄段的对象分配原则如下：</strong></p><ul><li>优先分配到Eden</li><li><strong>大对象直接分配到老年代</strong><ul><li>尽量避免程序中出现过多的大对象</li></ul></li><li><strong>长期存活的对象分配到老年代（大于阈值）</strong></li><li><strong>动态对象年龄判断</strong><ul><li>如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，<strong>年龄大于或等于该年龄的对象可以直接进入到老年代</strong>。无需等到MaxTenuringThreshold中要求的年龄</li></ul></li><li>空间分配担保<ul><li>-XX: HandlePromotionFailure</li></ul></li></ul><h3 id="TLAB"><a href="#TLAB" class="headerlink" title="TLAB"></a>TLAB</h3><blockquote><p> 为什么有TLAB（Thread Local Allocation Buffer）？</p></blockquote><ul><li>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</li><li>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</li><li>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度</li></ul><blockquote><p>什么是TLAB ?</p></blockquote><ul><li>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，<strong>JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内</strong></li><li>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为<strong>快速分配策略</strong></li><li><strong>TLAB是线程私有的</strong></li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/28/1725a6e5328e2947~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><p><strong>说明</strong></p><ul><li>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但是<strong>JVM明确将TLAB作为内存分配的首选</strong></li><li>默认情况下，**TLAB空间的内存非常小，仅占有整个EDen空间的1%**，也可以自定义</li><li><strong>一旦对象在TLAB空间分配内存失败时</strong>，JVM就会尝试着通过<strong>使用加锁机制</strong>确保数据操作的原子性，从而直接在Eden空间中分配了内存</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/28/1725a6f315abfcae~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><h3 id="堆空间参数小结"><a href="#堆空间参数小结" class="headerlink" title="堆空间参数小结"></a>堆空间参数小结</h3><p><code>-XX:+PrintFlagsInitial</code>: 查看所有参数的默认初始值</p><p><code>-XX:+PrintFlagsFinal</code>：查看所有的参数的最终值（可能会存在修改，不再是初始值）</p><ul><li>具体查看某个参数的指令：<ul><li>jps：查看当前运行中的进程</li><li>jinfo -flag SurvivorRatio 进程id： 查看新生代中Eden和S0&#x2F;S1空间的比例</li></ul></li></ul><p><code>-Xms</code>: 初始堆空间内存（默认为物理内存的1&#x2F;64）</p><p><code>-Xmx</code>: 最大堆空间内存（默认为物理内存的1&#x2F;4）</p><p><code>-Xmn</code>: 设置新生代大小（初始值及最大值）</p><p><code>-XX:NewRatio</code>: 配置新生代与老年代在堆结构的占比</p><p><code>-XX:SurvivorRatio</code>：设置新生代中Eden和S0&#x2F;S1空间的比例</p><p><code>-XX:MaxTenuringThreshold</code>：设置新生代垃圾的最大年龄(默认15)</p><p><code>-XX:+PrintGCDetails</code>：输出详细的GC处理日志</p><ul><li>打印gc简要信息：① -XX:+PrintGC ② -verbose:gc</li></ul><p><code>-XX:HandlePromotionFailure</code>：是否设置空间分配担保</p><h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是<strong>如果经过逃逸分析（Escape Analysis)后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配</strong>。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p><blockquote><p>如何将堆上的对象分配到栈？</p></blockquote><p>使用逃逸分析，这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法</p><blockquote><p>什么是逃逸？</p></blockquote><p>如果一个对象在方法中被定义，对象只在方法内部使用，则认为没有发生逃逸，在栈中分配内存</p><p>如果一个对象在方法中被定义，被外部方法所引用，则认为发生逃逸，在堆中分配内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title">craeteStringBuffer</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">  StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">  sb.append(s1);</span><br><span class="line">  sb.append(s2);</span><br><span class="line">  <span class="comment">//逃逸，放在堆里面</span></span><br><span class="line">  <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">craeteStringBuffer</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">  StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">  sb.append(s1);</span><br><span class="line">  sb.append(s2);</span><br><span class="line">  <span class="comment">//没有逃逸，放在栈里面</span></span><br><span class="line">  <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>怎么判断逃逸？</p></blockquote><p>new的对象实体是否在方法外被调用？</p><p>static局部变量也会发生逃逸</p><p><strong>结论：能使用局部变量就不要在方法外定义</strong></p><h4 id="使用逃逸分析优化代码"><a href="#使用逃逸分析优化代码" class="headerlink" title="使用逃逸分析优化代码"></a>使用逃逸分析优化代码</h4><p><strong>1、栈上分配</strong></p><p>将堆分配转化为栈分配</p><p>进行逃逸分析，如果没有发生逃逸，就可能被优化为栈上分配</p><p><strong>2、同步省略</strong></p><p>如果一个对象被发现只能从一个线程中被访问到，就不用同步了</p><ul><li>借助逃逸分析判断同步代码块所使用的锁对象是否只能够被一个线程访问，如果没有被其他线程访问，JIT编译器在编译这个同步块时就会取消同步，进行<strong>锁消除</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//优化前</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object hollis = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">synchronized</span>(hollis) &#123;</span><br><span class="line">      System.out.println(hollis);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//代码中对hollis这个对象进行加锁，但是hollis对象的生命周期只在f（）方法中</span></span><br><span class="line">  <span class="comment">//并不会被其他线程所访问控制，所以在JIT编译阶段就会被优化掉。</span></span><br><span class="line">  <span class="comment">//优化后</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object hollis = <span class="keyword">new</span> Object();</span><br><span class="line">    System.out.println(hollis);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、分离对象或标量替换</strong></p><p>有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分可以不用存储在堆空间中，而是存储在栈中</p><ul><li><p><strong>标量</strong>：无法被分解成更小的数据的数据，Java的原始数据类型就是标量</p></li><li><p><strong>聚合量</strong>：可以分解的数据，例如java中的对象</p></li></ul><p>在JIT阶段，经过逃逸分析发现一个对象不会被外界访问，经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量代替，这就是标量替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化前</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Point point = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化后</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。</p><blockquote><p> 那么标量替换有什么好处呢？</p></blockquote><p>可以大大减少堆内存的占用，因为一旦不需要创建对象了，那么就不再需要分配堆内存了。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>1、这项技术到如今也并不是十分成熟的</p><ul><li><strong>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。</strong></li></ul><p>2、一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p><p>3、虽然这项技术并不十分成熟，但是它也是<strong>即时编译器优化技术中一个十分重要的手段</strong></p><p>4、注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JVM设计者的选择。据我所知，Oracle HotspotJVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所<strong>以可以明确所有的对象实例都是创建在堆上。</strong></p><p>5、目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：<strong>对象实例都是分配在堆上</strong>。</p><hr/><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>1、<strong>年轻代是对象的诞生、生长、消亡的区域，一个对象在这里产生、应用、最后被垃圾回收器收集、结束生命</strong></p><p>2、<strong>老年代防止长生命周期对象，通常都是从Survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上，如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代</strong></p><p>3、<strong>当GC只发生在年轻代中，回收年轻对象的行为被称为MinorGC。当GC发生在老年代时则被称为MajorGC或者FullGC。一般的，MinorGC的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率大大低于年轻代</strong></p><blockquote><p>什么时候进入老年代？</p></blockquote><ul><li><p>策略一:将可能长期存活的对象直接放入老年代（超过阈值）</p></li><li><p>策略二:避免移区时的复制操作浪费资源（大对象）</p></li><li><p>策略三:不能将还有引用的对象当做垃圾回收掉（进行移区，被移动的对象大于区域的空间大小）</p></li><li><p>策略四:将可能长期存活的对象直接放入老年代</p><ul><li><p>如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，<strong>年龄大于或等于该年龄的对象可以直接进入到老年代</strong></p><p>例如：按照年龄划分了10批对象,对象年龄依次为1-10,现在年龄1到3这批对象的总大小大于Survivor空间一半,则对象为4-10的所有对象会被放入老年代</p></li></ul></li></ul><h1 id="运行时数据区（三）"><a href="#运行时数据区（三）" class="headerlink" title="运行时数据区（三）"></a>运行时数据区（三）</h1><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><h3 id="栈、堆、方法区交互关系"><a href="#栈、堆、方法区交互关系" class="headerlink" title="栈、堆、方法区交互关系"></a>栈、堆、方法区交互关系</h3><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de07f0a8ea3c~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de0bcde73307~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><h3 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h3><p>1、方法区在逻辑上属于堆的一部分，但是一些简单的实现可能不会选择进行垃圾收集或者进行压缩，但是对于HitSpotJVM而言，方法区还有个别名叫做非堆，目的就是要与堆分开。</p><p><strong>2、方法区看作是一块独立于Java堆的内存空间</strong></p><p>3、方法区是线程共享的区域</p><p>4、方法区在启动的时候被创建，实际物理内存可以不连续</p><p>5、方法区的大小可以选择固定大小或者可扩展</p><p>6、方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，会导致方法区溢出，报错<strong>java.lang.OutOfMemoryError:PermGen space 或者 java.lang,OutOfMemoryError:Metaspace</strong>，造成溢出的情况比如：</p><ul><li>加载大量的第三方jar包；</li><li>Tomcat部署的工程过多；</li><li>大量动态生成反射类；</li></ul><p><strong>7、方法区的历史演变</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de1aa1e29c4c~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><ul><li><p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代最大的区别在于：<strong>元空间不再虚拟机设置的内存中，而是使用本地内存</strong></p></li><li><p>永久代、元空间并不只是名字变了，内部结构也调整了</p></li><li><p>根据《Java虚拟机规范》得规定，如果方法区无法满足新的内存分配需求时，将抛出OOM异常.</p></li></ul><h3 id="设置方法区大小与OOM"><a href="#设置方法区大小与OOM" class="headerlink" title="设置方法区大小与OOM"></a>设置方法区大小与OOM</h3><p><strong>jdk7及以前：</strong></p><ul><li>通过<code>-XX:PermSize</code>来设置永久代初始分配空间。默认值是20.75M</li><li><code>-XX:MaxPermSize</code>来设定永久代最大可分配空间。32位机器默认是64M，64位机器模式是82M</li><li>当JVM加载的类信息容量超过了这个值，会报异常<code>OutOfMemoryError:PermGen space</code></li></ul><p><strong>jdk8及以后：</strong></p><ul><li>元数据区大小可以使用参数<code>-XX:MetaspaceSize</code>和<code>-XX:MaxMetaspaceSize</code>指定，替代上述原有的两个参数。</li><li>默认值依赖于平台。windows下，<code>-XX:MetaspaceSize</code>是21M，<code>-XX:MaxMetaspaceSize</code>的值是一1， 即没有限制。| I</li><li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。 如果元数据区发生溢出，虚拟机一样会拋出异常<code>OutOfMemoryError:Metaspace</code></li><li><code>-XX:MetaspaceSize</code>： 设置初始的元空间大小。对于一个64位的服务器端JVM来说， 其默认的<code>-XX:MetaspaceSize</code>值为21MB.这就是初始的高水位线，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过<code>MaxMetaspaceSize</code>时，适当提高该值。如果释放空间过多，则适当降低该值。</li><li>如果初始化的高水位线设置过低，.上 述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。为了避免频繁地GC，建议将<code>-XX:MetaspaceSize</code>设置为一个相对较高的值。</li></ul><hr/><p><strong>解决OOM</strong></p><p>1、要解决00M异常或heap space的异常，一般的手段是首先通过内存映像分析工具（如Eclipse Memory Analyzer） 对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory 0verflow） 。</p><p>2、如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots 的引用链。于是就能找到泄漏对象是通过怎样的路径与GCRoots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及GC Roots引用链的信息，就可以比较准确地定位出泄漏代码的位置。</p><p>3、如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（一Xmx与一Xms） ，与机器物理内存对比看是否还可以调大，从代码_上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</p><h3 id="方法区内部结构"><a href="#方法区内部结构" class="headerlink" title="方法区内部结构"></a>方法区内部结构</h3><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de2ebc0a6dce~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><p>它用于存储已被虚拟机加载的<strong>类型信息、常量、静态变量、即时编译器编译后的代码缓存</strong>等。 </p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de306a7ca881~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><h4 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h4><p>对每个加载的类型（ 类class、接口interface、枚举enum、注解annotation），JVM必 .须在方法区中存储以下类型信息：</p><ul><li>①这个类型的完整有效名称（全名&#x3D;包名.类名）</li><li>②这个类型直接父类的完整有效名（对于interface或是java. lang.Object，都没有父类）</li><li>③这个类型的修饰符（public， abstract， final的某个子集）</li><li>④这个类型直接接口的一个有序列表</li></ul><h4 id="域信息（成员变量）"><a href="#域信息（成员变量）" class="headerlink" title="域信息（成员变量）"></a>域信息（成员变量）</h4><ul><li>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</li><li>域的相关信息包括：域名称、 域类型、域修饰符（public， private， protected， static， final， volatile， transient的某个子集）</li></ul><h4 id="方法信息"><a href="#方法信息" class="headerlink" title="方法信息"></a>方法信息</h4><p>JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序：</p><ul><li>方法名称</li><li>方法的返回类型（或void）</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符（public， private， protected， static， final， synchronized， native ， abstract的一个子集）</li><li>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（ abstract和native 方法除外）</li><li>异常表（ abstract和native方法除外）<ul><li>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ul></li></ul><h4 id="non-final的类变量（static）"><a href="#non-final的类变量（static）" class="headerlink" title="non-final的类变量（static）"></a>non-final的类变量（static）</h4><ul><li>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分</li><li>类变量被类的所有实例所共享，即使没有类实例你也可以访问它。</li></ul><h4 id="全局常量-static-final"><a href="#全局常量-static-final" class="headerlink" title="全局常量 static final"></a><strong>全局常量 static final</strong></h4><p>被声明为final的类变量的处理方法则不同，每个全局常量在编译的时候就被分配了。(<strong>准备阶段赋值</strong>)</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p><strong>常量池</strong></p><p>1、方法区内部包含运行时常量池</p><p>2、字节码文件中包含常量池，加载到方法区之后称为运行时常量池</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de46fa20ca21~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><p>3、一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述信息外，还包含一项信息那就是常量池表（Constant Pool Table），<strong>包括各种字面量和对类型域和方法的符号引用</strong>。</p><blockquote><p>为什么需要常量池？</p></blockquote><p>一个 java 源文件中的类、接口，编译后产生一个字节码文件，而 Java 中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池这个字节码包含了指向常量池的引用，<strong>在动态链接的时候会用到运行时常量池</strong>。</p><p>4、几种在常量池内存储的数据类型包括：</p><ul><li><strong>数量值</strong></li><li><strong>字符串值</strong></li><li><strong>类引用</strong></li><li><strong>字段引用</strong></li><li><strong>方法引用</strong></li></ul><p><strong>常量池，可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名，方法名，参数类型、字面量等信息。</strong></p><hr/><p><strong>运行时常量池</strong></p><p>1、运行时常量池是方法区的一部分</p><p>2、<strong>常量池表是class文件的一部分，用于存放编译期生成的各种字面量和符号引用，这部分内容在类加载后存放到方法区的运行时常量池中</strong></p><p>3、JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</p><p>4、运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。<strong>此时不再是常量池中的符号地址了，这里换为真实地址。</strong></p><ul><li>运行时常量池，相对于Class文件常量池的另一重要特征是：<strong>具备动态性</strong>。<ul><li>String.intern()</li></ul></li></ul><h3 id="方法区演进细节"><a href="#方法区演进细节" class="headerlink" title="方法区演进细节"></a>方法区演进细节</h3><p>1、只有HostSpot才有永久代</p><p>2、Hotspot中 方法区的变化：</p><ul><li><strong>jdk1.6及之前</strong>：有永久代（permanent generation） ，静态变量存放在 永久代上</li><li><strong>jdk1.7</strong>：有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中</li><li><strong>jdk1.8及之后</strong>： <strong>无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆</strong></li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de5521ca1aa0~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de56a783aba0~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de5864bfe4c6~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><blockquote><p>为什么永久代被元空间替代？</p></blockquote><p><strong>1、为永久代设置空间大小很难确定</strong></p><ul><li>动态加载类过多容易产生OOM，在运行中产生很多类容易出现错误</li><li>元空间在本地内存中</li></ul><p><strong>2、对永久代进行调优很困难</strong></p><blockquote><p>为什么字符串常量池变化？</p></blockquote><p>jdk7中将StringTable放到了堆空间中。因为永久代的回收效率很低，在full gc的时候才会触发。而full GC 是老年代的空间不足、永久代不足时才会触发，<strong>这就导致了StringTable回收效率不高</strong>。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存。</p><blockquote><p>如何证明静态变量在哪里？</p></blockquote><p>1、只要是对象实例必然会在Java堆中分配</p><p>2、JDK7 及其以后版本的 Hotspot 虚拟机选择把静态变量与类型在 Java 语言一端的映射 Class 对象存放在一起，存储于Java 堆之中，从我们的实验中也明确验证了这一点.</p><h3 id="方法区的垃圾回收"><a href="#方法区的垃圾回收" class="headerlink" title="方法区的垃圾回收"></a>方法区的垃圾回收</h3><p>1、方法区的垃圾收集主要回收两部分内容：<strong>常量池中废奔的常量和不再使用的类型</strong></p><hr/><p><strong>常量池</strong></p><p>2、方法区内常量池之中主要存放的两大类常量：<strong>字面量和符号引用</strong>。 字面量比较接近Java语言层次的常量概念，如文本字符串、被声明为final的常量值等，而符号引用则属于编译原理方面的概念，包括下面三类常量：</p><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul><p>3、HotSpot虚拟机对<strong>常量池的回收策略是很明确的</strong>：只要常量池中的常量没有被任何地方引用，就可以被回收。</p><hr/><p><strong>类型</strong></p><p>4、判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了，需要同时满足下面三个条件：</p><ul><li>该类<strong>所有的实例都已经被回收</strong>，也就是Java堆中不存在该类及其任何派生子类的实例。</li><li>加载<strong>该类的类加载器已经被回收</strong>，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。</li><li><strong>该类对应的java.lang.Class对象没有在任何地方被引用</strong>，无法在任何地方通过反射访问该类的方法。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728de69bc18c8a5~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><h3 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h3><h4 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h4><p><strong>1、说一下JVM内存模型吧，有哪些区？分别干什么的？</strong></p><ul><li>虚拟机栈：Java栈是Java方法执行的内存模型，栈帧（局部变量表、操作数栈、动态链接、方法返回地址）</li><li>本地方法栈：调用本地的方法</li><li>程序计数器：存储指向下一条指令的地址，本地方法为undefined</li><li>堆：线程共享、对象和数组</li><li>方法区：存放类</li></ul><h4 id="蚂蚁金服"><a href="#蚂蚁金服" class="headerlink" title="蚂蚁金服"></a>蚂蚁金服</h4><p><strong>1、Java8的内存分代改进</strong></p><ul><li><p>将永久代转为元空间，从虚拟内存移到本地内存</p><p><strong>1、为永久代设置空间大小很难确定</strong></p><ul><li>动态加载类过多容易产生OOM，在运行中产生很多类容易出现错误</li><li>元空间在本地内存中</li></ul><p><strong>2、对永久代进行调优很困难</strong></p><hr/></li></ul><p><strong>3、JVM内存分布&#x2F;内存结构？栈和堆的区别？堆的结构？为什么两个survivor区？</strong></p><p>对于new的对象，栈中局部变量表只会存放在堆中的地址引用，具体实例变量的空间分配都在堆中</p><p><strong>为什么 Survivor 分区不能是 0 个？</strong></p><p>如果 Survivor 是 0 的话，也就是说新生代只有一个 Eden 分区，每次垃圾回收之后，存活的对象都会进入老生代，这样老生代的内存空间很快就被占满了，从而触发最耗时的 Full GC ，显然这样的收集器的效率是我们完全不能接受的。</p><p><strong>为什么 Survivor 分区不能是 1 个？</strong></p><p>如果 Survivor 分区是 1 个的话，假设我们把两个区域分为 1:1，那么任何时候都有一半的内存空间是闲置的，显然空间利用率太低不是最佳的方案。</p><p>但如果设置内存空间的比例是 8:2 ，只是看起来似乎“很好”，假设新生代的内存为 100 MB（ Survivor 大小为 20 MB ），现在有 70 MB 对象进行垃圾回收之后，剩余活跃的对象为 15 MB 进入 Survivor 区，这个时候新生代可用的内存空间只剩了 5 MB，这样很快又要进行垃圾回收操作，显然这种垃圾回收器最大的问题就在于，需要频繁进行垃圾回收。</p><p><strong>为什么 Survivor 分区是 2 个？</strong></p><p>如果 Survivor 分区有 2 个分区，我们就可以把 Eden、From Survivor、To Survivor 分区内存比例设置为 8:1:1 ，那么任何时候新生代内存的利用率都 90% ，这样空间利用率基本是符合预期的。再者就是虚拟机的大部分对象都符合“朝生夕死”的特性，所以每次新对象的产生都在空间占比比较大的 Eden 区，垃圾回收之后再把存活的对象方法存入 Survivor 区，如果是 Survivor 区存活的对象，那么“年龄”就 +1 ，当年龄增长到 15 （可通过 -XX:+MaxTenuringThreshold 设定）对象就升级到老生代。</p><hr/><p><strong>4、Eden和Survior的比例分配</strong></p><p>8:1:1</p><h4 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h4><p><strong>1、jvm内存分区，为什么要有新生代和老年代</strong></p><p>因为有的对象寿命长，有的对象寿命短。应该将寿命长的对象放在一个区，寿命短的对象放在一个区。不同的区采用不同的垃圾收集算法。寿命短的区清理频次高一点，寿命长的区清理频次低一点。提高效率。</p><h4 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h4><p><strong>2、讲讲jvm运行时数据区</strong></p><p><strong>3、什么时候对象会进入老年代？</strong></p><h4 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h4><p><strong>5、JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。</strong></p><p>如果没有Survivor区，那么Eden每次满了清理垃圾，存活的对象被迁移到老年区，老年区满了，就会触发Full GC，Full GC是非常耗时的</p><h4 id="天猫"><a href="#天猫" class="headerlink" title="天猫"></a>天猫</h4><p><strong>6、 Jvm内存模型以及分区，需要详细到每个区放什么。</strong><br><strong>7、 JVM的内存模型，Java8做了什么修改</strong></p><h4 id="拼多多"><a href="#拼多多" class="headerlink" title="拼多多"></a>拼多多</h4><p>8、JVM内存分哪几个区，每个区的作用是什么？</p><h4 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h4><p>9、java内存分配</p><p>10、jvm的永久代中会发生垃圾回收吗？</p><p>11、 jvm内存分区，为什么要有新生代和老年代？</p><blockquote><p>堆和栈的区别</p></blockquote><p><strong>（1</strong>）申请方式</p><p>stack:由系统自动分配。例如，声明在函数中一个局部变量 int b; 系统自动在栈中为 b 开辟空间</p><p>heap:需要程序员自己申请，并指明大小，在 c 中 malloc 函数，对于Java 需要手动 new Object()的形式开辟</p><p><strong>（2</strong>）申请后系统的响应</p><p>stack：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。</p><p>heap：首先应该知道操作系统有一个记录空闲内存地址的<a href="">链表</a>，当系统收到程序的申请时，会遍历该<a href="">链表</a>，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点<a href="">链表</a>中删除，并将该结点的空间分配给程序。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲<a href="">链表</a>中。</p><p><strong>（3</strong>）申请大小的限制</p><p>stack：栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在 WINDOWS 下，栈的大小是 2M（默认值也取决于虚拟内存的大小），如果申请的空间超过栈的剩余空间时，将提示 overflow。因此，能从栈获得的空间较小。</p><p>heap：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用<a href="">链表</a>来存储的空闲内存地址的， 自然是不连续的，而<a href="">链表</a>的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见， 堆获得的空间比较灵活，也比较大。</p><p><strong>（4</strong>）申请效率的比较</p><p>stack：由系统自动分配，速度较快。但程序员是无法控制的。</p><p>heap：由 new 分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便。</p><p><strong>（5</strong>）heap和stack中的存储内容</p><p>stack：在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址， 然后是函数的各个参数，在大多数的 C 编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。</p><p>当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。</p><p>heap：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。</p><h1 id="对象实例化"><a href="#对象实例化" class="headerlink" title="对象实例化"></a>对象实例化</h1><h2 id="对象的实例化"><a href="#对象的实例化" class="headerlink" title="对象的实例化"></a>对象的实例化</h2><h3 id="面试题-2"><a href="#面试题-2" class="headerlink" title="面试题"></a>面试题</h3><p>1、对象在JVM怎么存储的？</p><p>2、Java对象头里面有什么？</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728e4cbb14c0bd3~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><h3 id="对象创建的方式"><a href="#对象创建的方式" class="headerlink" title="对象创建的方式"></a>对象创建的方式</h3><p><strong>1、new</strong></p><ul><li>最常见的方式</li><li>变形1 ： Xxx的静态方法</li><li>变形2 ： XxBuilder&#x2F;XxoxFactory的静态方法</li></ul><p><strong>2、Class的newInstance（）</strong>：反射的方式，只能调用空参的构造器，权限必须是public</p><p><strong>3、Constructor的newInstance（Xxx）</strong>：反射的方式，可以调用空参、带参的构造器，权限没有要求</p><p><strong>4、使用clone（）</strong> ：不调用任何构造器，当前类需要实现Cloneable接口，实现clone（）</p><p><strong>5、使用反序列化</strong>：从文件中、从网络中获取一个对象的二进制流</p><p><strong>6、第三方库Objenesis</strong></p><h3 id="创建对象的步骤"><a href="#创建对象的步骤" class="headerlink" title="创建对象的步骤"></a>创建对象的步骤</h3><p><strong>1、判断对象对应的类是否加载、链接、初始化</strong></p><p><strong>2、为对象分配内存</strong></p><ul><li><p>如果内存规整一指针碰撞</p></li><li><p>如果内存不规整：</p><ul><li>虚拟机需要维护一个列表</li><li>空闲列表分配</li></ul></li></ul><p><strong>3、处理并发安全问题</strong></p><ul><li>采用CAS配上失败重试保证更新的原子性</li><li>每个线程预先分配一块TLAB</li></ul><p><strong>4、初始化分配到的空间一所有属性设置默认值，保证对象实例字段在不赋值时可以直接使用</strong></p><p><strong>5、设置对象的对象头</strong></p><p><strong>6、执行init方法进行初始化</strong></p><hr/><h4 id="1-判断对象对应的类是否加载、链接、初始化"><a href="#1-判断对象对应的类是否加载、链接、初始化" class="headerlink" title="1) 判断对象对应的类是否加载、链接、初始化"></a>1) 判断对象对应的类是否加载、链接、初始化</h4><p>虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化。（ 即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以ClassLoader+包名+类名为Key进行查找对应的.class文件。如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class类对象</p><h4 id="2-为对象分配内存"><a href="#2-为对象分配内存" class="headerlink" title="2) 为对象分配内存"></a>2) 为对象分配内存</h4><p>首先计算对象占用空间大小，接着在堆中划分一块内存给新对象。 如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小。</p><ul><li><p><strong>如果内存规整，使用指针碰撞，指针移动</strong></p><p>如果内存是规整的，那么虚拟机将采用的是指针碰撞法（BumpThePointer）来为对象分配内存。意思是所有用过的内存在一边，空闲的内存在另外一边，中间放着一个指针作为分界点的指示器，<strong>分配内存就仅仅是把指针向空闲那边挪动一段与对象大小相等的距离罢了</strong>。如果垃圾收集器选择的是Serial、ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带有compact （整理）过程的收集器时，使用指针碰撞。</p></li><li><p><strong>如果内存不规整，虚拟机需要维护一个列表，使用空闲列表分配</strong></p><p>如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虛拟机将采用的是空闲列表法来为对象分配内存。意思是虚拟机<strong>维护了一个列表，记录上哪些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容</strong>。这种分配方式成为“空闲列表（Free List） ”。</p></li></ul><p><strong>说明：选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</strong></p><p>给对象的属性赋值的操作：<br>① 属性的默认初始化<br>② 显式初始化<br>③ 代码块中初始化<br>④ 构造器中初始化</p><h4 id="3-处理并发安全问题"><a href="#3-处理并发安全问题" class="headerlink" title="3) 处理并发安全问题"></a>3) 处理并发安全问题</h4><p>在分配内存空间时，另外一个问题是及时保证new对象时候的线程安全性：创建对象是非常频繁的操作，虚拟机需要解决并发问题。虚拟机采用 了两种方式解决并发问题：</p><ul><li><strong>CAS （ Compare And Swap ）</strong>失败重试、<strong>区域加锁</strong>：保证指针更新操作的原子性；</li><li>TLAB把内存分配的动作按照线程划分在不同的空间之中进行，<strong>即每个线程在Java堆中预先分配一小块内存</strong>，称为本地线程分配缓冲区，（TLAB ，Thread Local Allocation Buffer） 虚拟机是否使用TLAB，可以通过一XX：+&#x2F;一UseTLAB参数来 设定。</li></ul><h4 id="4-初始化分配到的空间"><a href="#4-初始化分配到的空间" class="headerlink" title="4) 初始化分配到的空间"></a>4) 初始化分配到的空间</h4><p>内存分配结束，虚拟机将分配到的内存空间都初始化为零值（不包括对象头）。这一步保证了对象的实例字段在Java代码中可以不用赋初始值就可以直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><h4 id="5-设置对象的对象头"><a href="#5-设置对象的对象头" class="headerlink" title="5) 设置对象的对象头"></a>5) 设置对象的对象头</h4><p>将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。</p><h4 id="6-执行init方法进行初始化"><a href="#6-执行init方法进行初始化" class="headerlink" title="6) 执行init方法进行初始化"></a>6) 执行init方法进行初始化</h4><p>在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。 因此一般来说（由字节码中是否跟随有invokespecial指令所决定），new指令之 后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全创建出来。</p><p><strong>判断对象对应的类是否已经加载——》为对象分配空间——》处理并发安全问题——》初始化分配到的空间——》设置对象头——》初始化</strong></p><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>包括：<strong>运行时元数据、类型指针</strong></p><p><strong>1、运行时元数据</strong></p><ul><li>哈希值（hashcode）：地址值</li><li>GC分代年龄</li><li>锁状态标志</li><li>线程持有的锁</li><li>偏向线程ID</li><li>偏向时间戳</li></ul><p><strong>2、类型指针</strong></p><ul><li>指向方法区对象所属的class，确定对象所属的类型</li></ul><p><strong>如果创建的是数组，需要记录数组的长度</strong></p><h3 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h3><p>说明：它是对象真正存储的有效信息，包括程序代码中定义的各种类型的字段（包括从父类继承下来的和本身拥有的字段） </p><p>规则：</p><ul><li>相同宽度的字段总被分配在一起</li><li><strong>父类中定义的变量会出现在子类之前</strong></li><li>如果CompactFields参数为true（默认为true），子类的窄变量可能插入到父类变量的空隙</li></ul><h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h3><p>没有特别含义，占位符</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728e4d06baca2bf~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><blockquote><p>JVM是如何通过栈帧中的对象引用访问到内部的对象实例？</p></blockquote><p>通过栈上的引用访问</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728e4d419936de2~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:33%;" /><h3 id="对象访问的方式"><a href="#对象访问的方式" class="headerlink" title="对象访问的方式"></a>对象访问的方式</h3><h4 id="句柄访问"><a href="#句柄访问" class="headerlink" title="句柄访问"></a>句柄访问</h4><p>1、在Java堆开辟一个句柄池，记录<strong>到对象实例数据的指针和到对象类型数据的指针</strong></p><p>2、优缺点</p><ul><li>优点：在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要被修改</li><li>缺点：需要专门开辟空间，浪费空间；效率较低</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728e4d9d0cb81f4~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><h4 id="直接指针（默认）"><a href="#直接指针（默认）" class="headerlink" title="直接指针（默认）"></a>直接指针（默认）</h4><p>1、优缺点</p><ul><li>优点：速度快</li><li>缺点：对象移动时需要修改reference</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/7/1728e4de9c0c7bc9~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><h1 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>1、Java虚拟机核心的组成部分之一</p><p>2、虚拟机的执行引擎是由软件自行实现的</p><p>3、JVM的主要任务是负责<strong>装载字节码到其内部</strong>，但字节码不能够直接运行在操作系统之上，执行引擎的任务就是<strong>将字节码指令解释&#x2F;编译为对应平台的本地机器指令</strong></p><p><strong>工作过程</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/1729333fda0586ed~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><h2 id="Java代码编译和执行过程"><a href="#Java代码编译和执行过程" class="headerlink" title="Java代码编译和执行过程"></a>Java代码编译和执行过程</h2><p>大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过下面图中的各个步骤：</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/17293345b33057a0~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><p>Java代码编译是由Java源码编译器来完成，流程图如下所示：</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/172933480ac44fb8~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><p><strong>Java字节码的执行是由JVM执行引擎来完成，流程图如下所示：</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/1729334a1a335e4c~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><blockquote><p><strong>什么是解释器（ Interpreter），什么是JIT编译器？</strong></p></blockquote><p><strong>解释器</strong>：当Java虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p><p><strong>JIT （Just In Time Compiler）编译器（即时编译器）</strong>：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言。</p><blockquote><p> 为什么说Java是半编译半解释型语言？</p></blockquote><p>JDK1.0时代，将Java语言定位为“解释执行”还是比较准确的。再后来，Java也发展出可以直接生成本地代码的编译器。</p><p>现在JVM在执行Java代码的时候，通常都会将<strong>解释执行与编译执行二者结合起来进行</strong>。 </p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/172933531eb0cea7~tplv-t2oaga2asx-watermark.awebp" alt="a"></p><h2 id="机器码、指令、汇编语言"><a href="#机器码、指令、汇编语言" class="headerlink" title="机器码、指令、汇编语言"></a>机器码、指令、汇编语言</h2><h3 id="机器码"><a href="#机器码" class="headerlink" title="机器码"></a>机器码</h3><ul><li>各种用二进制编码方式表示的指令，叫做&#x3D;&#x3D;机器指令码&#x3D;&#x3D;。开始，人们就用它采编写程序，这就是机器语言。</li><li>机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。</li><li>用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快。</li><li>机器指令与CPU紧密相关，所以不同种类的CPU所对应的机器指令也就不同。</li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>由于机器码是有0和1组成的二进制序列，可读性实在太差，于是人们发明了指令。</li><li>指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov，inc等），可读性稍好</li><li>由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同。</li></ul><h4 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h4><ul><li>不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。</li><li>如常见的<ul><li>x86指令集，对应的是x86架构的平台</li><li>ARM指令集，对应的是ARM架构的平台</li></ul></li></ul><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><ul><li>由于指令的可读性还是太差，于是人们又发明了汇编语言。</li><li>在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbol）或标号（Label）代替指令或操作数的地址。</li><li>在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。<ul><li>由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行。</li></ul></li></ul><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><ul><li><p>为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。高级语言比机器语言、汇编语言更接近人的语言</p></li><li><p>当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做解释程序或编译程序。</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/1729335b173e3d31~tplv-t2oaga2asx-watermark.awebp" alt="6" style="zoom:50%;" /></li></ul><h4 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h4><ul><li>字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码</li><li>字节码主要为了实现特定软件运行和软件环境、与硬件环境无关。</li><li>字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。<ul><li>字节码的典型应用为Java bytecode</li></ul></li></ul><h4 id="C、C-源程序执行过程"><a href="#C、C-源程序执行过程" class="headerlink" title="C、C++源程序执行过程"></a>C、C++源程序执行过程</h4><p>编译过程又可以分成两个阶段：编译和汇编。</p><ul><li><p>编译过程：是读取源程序（字符流），对 之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码</p></li><li><p>汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。</p></li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/172933609774cda3~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom: 50%;" /><h2 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h2><p>JVM设计者们的初衷仅仅只是单纯地为了<strong>满足Java程序实现跨平台特性</strong>，因此避免采用静态编译的方式直接生成本地机器指令，从而诞生了实现解释器在运行时采用逐行解释字节码执行程序的想法。</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/172933694cc12661~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><ul><li>解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</li><li><strong>当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作。</strong></li></ul><hr/><p>  在Java的发展历史里，一共有两套解释执行器，即古老的字节码解释器、现在普遍使用的模板解释器。</p><ul><li>字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下。· - 而模板解释器将每一 条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。<ul><li>在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成。<ul><li>Interpreter模块：实现了解释器的核心功能</li><li>Code模块：用于管理HotSpot VM在运行时生成的本地机器指令</li></ul></li></ul></li></ul><h4 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h4><ul><li>由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如Python、 Perl、Ruby等。但是在今天，基于解释器执行已经沦落为低效的代名词，并且时常被一些C&#x2F;C+ +程序员所调侃。</li><li>为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升。</li><li>不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。</li></ul><h2 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h2><p><strong>1、Java代码的执行分类</strong></p><ul><li>源代码编译成字节码文件，在运行时通过解释器将字节码文件转为机器码执行</li><li>编译执行，现代虚拟机为了提高执行效率，会使用即使编译技术将方法编译成机器码后再执行</li></ul><p>2、HotSpot VM是目前市面上高性能虛拟机的代表作之一。它采用<strong>解释器与即时编译器并存的架构</strong>。在Java虛拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间。</p><blockquote><p>为什么还需要解释器？</p></blockquote><p><strong>首先明确</strong>：<br>当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。</p><p>编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但编译为本地代码后，执行效率高。</p><p><strong>所以</strong>：<br>尽管JRockitVM中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一一个平衡点。在此模式下。</p><p><strong>当Java虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率。</strong></p><p>同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”。</p><h3 id="JIT编译器-1"><a href="#JIT编译器-1" class="headerlink" title="JIT编译器"></a>JIT编译器</h3><h4 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h4><ul><li>Java 语言的“编译器” 其实是一段“不确定”的操作过程，因为它可能是指一个前端编译器（其实叫“编译器的前端” 更准确一些）把.java文件转变成.class文件的过程；</li><li>也可能是指虚拟机的<strong>后端运行期编译器</strong>（JIT 编译器，Just In Time Compiler）把字节码转变成机器码的过程。</li><li>还可能是指使用<strong>静态提前编译器</strong>（AOT 编译器，Ahead Of Time Compiler）直接把. java文件编译成本地机器代码的过程。</li></ul><p>前端编译器： Sun的Javac、 Eclipse JDT中的增量式编译器（ECJ）<br>JIT编译器： HotSpot VM的C1、C2编译器。<br>AOT编译器： GNU Compiler for the Java （GCJ） 、Excelsior JET。</p><h4 id="热点代码及探测方式"><a href="#热点代码及探测方式" class="headerlink" title="热点代码及探测方式"></a>热点代码及探测方式</h4><p>当然是否需要启动JIT编译器将字节码直接编译为对应平台的本地机器指令，则需要<strong>根据代码被调用执行的频率而定</strong>。关于那些需要被编译为本地代码的字节码，也被称之为“<strong>热点代码</strong>” ，JIT编译器在运行时会针对那些频繁被调用的“热点代码”做出深度优化，将其直接编译为对应平台的本地机器指令，以此提升Java程序的执行性能。</p><ul><li><strong>一个被多次调用的方法，或者是一个方法体内部循环次数较多的循环体都可以被称之为“热点代码”</strong>，因此都可以通过JIT编译器编译为本地机器指令。由于这种编译方式发生在方法的执行过程中，因此也被称之为<strong>栈上替换</strong>，或简称为OSR （On StackReplacement）编译。</li><li>一个方法究竟要被调用多少次，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT编译器才会将这些“热点代码”编译为本地机器指令执行。这里主要依靠<strong>热点探测功能</strong>。</li><li><strong>目前HotSpot VM所采用的热点探测方式是基于计数器的热点探测</strong></li><li>采用基于计数器的热点探测，HotSpot VM将会为每一个方法都建立2个不同类型的计数器，分别为方<strong>法调用计数器（Invocation Counter） 和回边计数器（BackEdge Counter）。</strong><ul><li>方法调用计数器用于统计方法的调用次数</li><li>回边计数器则用于统计循环体执行的循环次数</li></ul></li></ul><h5 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h5><ul><li>这个计数器就用于统计方法被调用的次数，它的默认阈值在Client 模式 下是1500 次，在Server 模式下是10000 次。超过这个阈值，就会触发JIT编译。</li><li>这个阈值可以通过虚拟机参数<code>-XX:CompileThreshold</code>来人为设定。</li><li>当一个方法被调用时， 会先检查该方法是否存在被JIT编译过的版本，如 果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阈值。如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/172933785afec215~tplv-t2oaga2asx-watermark.awebp" alt="10" style="zoom:50%;" /><p><strong>热度衰减</strong></p><ul><li>如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一一个相对的执行频率，即一段时间之内方法被调用的次数。当超过一定的时间限度， 如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被减少一半，这个过程称为方法调用计数器热度的衰减（Counter Decay） ，而这段时间就称为此方法统计的半衰周期（Counter Half Life Time）。</li><li>进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数 -XX：-UseCounterDecay来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。</li><li>另外， 可以使用-XX： CounterHalfLifeTime参数设置半衰周期的时间，单位是秒。</li></ul><h5 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h5><p>它的作用是统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边” （Back Edge）。显然，建立回边计数器统计的目的就是为了触发OSR编译。</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/8/1729337da4233b93~tplv-t2oaga2asx-watermark.awebp" alt="11" style="zoom:50%;" /><h4 id="HotSpot-VM-可以设置程序执行方式"><a href="#HotSpot-VM-可以设置程序执行方式" class="headerlink" title="HotSpot VM 可以设置程序执行方式"></a>HotSpot VM 可以设置程序执行方式</h4><p>缺省情况下HotSpot VM是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显式地为Java虚拟机指定在运行时到底是完全采用解释器执行，还是完全采用即时编译器执行。如下所示：</p><ul><li>-Xint： 完全采用解释器模式执行程序；</li><li>-Xcomp： 完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行。</li><li>-Xmixed：采用解释器+即时编译器的混合模式共同执行程序。</li></ul><h5 id="测试解释器模式和JIT编译模式"><a href="#测试解释器模式和JIT编译模式" class="headerlink" title="测试解释器模式和JIT编译模式"></a>测试解释器模式和JIT编译模式</h5><p>测试表明：</p><ul><li>纯解释器模式速度最慢（JVM1.0版本用的就是纯解释器执行）</li><li>混合模式速度更快</li></ul><h4 id="HotSpot-VM-中的JIT分类"><a href="#HotSpot-VM-中的JIT分类" class="headerlink" title="HotSpot VM 中的JIT分类"></a>HotSpot VM 中的JIT分类</h4><p>在HotSpot VM中内嵌有两个JIT编译器，分别为<strong>Client Compiler和Server Compiler</strong>，但大多数情况下我们简称为C1编译器和C2编译器。开发人员可以通过如下命.令显式指定Java虚拟机在运行时到底使用哪一种即时编译器，如下所示：</p><ul><li><strong>-client： 指定Java虚拟机运行在Client模式下，并使用C1编译器；</strong><ul><li>C1编译器会对字节码进行<strong>简单和可靠的优化，耗时短</strong>。以达到更快的编译速度。</li></ul></li><li><strong>-server： 指定Java虚拟机运行在Server模式下，并使用C2编译器。</strong><ul><li>C2进行<strong>耗时较长的优化，以及激进优化</strong>。但优化的代码执行效率更高。</li></ul></li></ul><h5 id="C1和C2编译器不同的优化策略"><a href="#C1和C2编译器不同的优化策略" class="headerlink" title="C1和C2编译器不同的优化策略"></a>C1和C2编译器不同的优化策略</h5><ul><li>在不同的编译器上有不同的优化策略，C1编译器上主要有方法<strong>内联，去虚拟化、冗余消除</strong>。<ul><li>方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程</li><li>去虚拟化：对唯一的实现类进行内联</li><li>冗余消除：在运行期间把一些不会执行的代码折叠掉</li></ul></li><li>C2的优化主要是在全局层面，<strong>逃逸分析</strong>是优化的基础。基于逃逸分析在C2.上有如下几种优化：（server模式下才会有这些优化，64位系统默认就是server模式）<ul><li>标量替换：用标量值代替聚合对象的属性值</li><li>栈上分配：对于未逃逸的对象分配对象在栈而不是堆</li><li>同步消除：清除同步操作，通常指synchronized</li></ul></li></ul><p>  <strong>分层编译（Tiered Compilation）策略</strong>：程序解释执行（不开启性能监控）可以触发C1编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2编译会根据性能监控信息进行激进优化。<br>  不过在Java7版本之后，一旦开发人员在程序中显式指定命令“一server”时，默认将会开启分层编译策略，由C1编译器和C2编译器相互协作共同来执行编译任务。</p><h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><ul><li>一般来讲，JIT编译出来的机器码性能比解释器高。</li><li>C2编译器启动时长比C1编译器慢，系统稳定执行以后，C2编译器执行速度远远快于C1编译器。</li></ul><h2 id="Graal编译器与AOT编译器"><a href="#Graal编译器与AOT编译器" class="headerlink" title="Graal编译器与AOT编译器"></a>Graal编译器与AOT编译器</h2><h3 id="Graal编译器"><a href="#Graal编译器" class="headerlink" title="Graal编译器"></a>Graal编译器</h3><ul><li>自JDK10起，HotSpot又加入一个全新的即时编译器： Graal编译器</li><li>编译效果短短几年时间就追评了C2编译器。未来可期。</li><li>目前，带着“实验状态”标签，需要使用开关参数 -XX： +UnlockExperimentalVMOptions 一XX： +UseJVMCICompiler去激活，才可以使用。</li></ul><h3 id="AOT编译器"><a href="#AOT编译器" class="headerlink" title="AOT编译器"></a>AOT编译器</h3><ul><li>jdk9引入了AOT编译器（静态提前编译器，Ahead Of Time Compiler）</li><li>Java 9引入了实验性AOT编译工具jaotc。它借助了Graal 编译器，将所输入的Java 类文件转换为机器码，并存放至生成的动态共享库之中。</li><li>所谓AOT编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。</li><li>最大好处： Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待即时编译器的预热，减少Java应用给人带来“第一次运行慢”的不良体验。</li><li>缺点：<ul><li>破坏了java”一次编译，到处运行”，必须为每个不同硬件、oS编译对应的发行包。</li><li>降低了Java链接过程的动态性，加载的代码在编译期就必须全部已知。</li><li>还需要继续优化中，最初只支持Linux x64 java base</li></ul></li></ul><h1 id="StringTable"><a href="#StringTable" class="headerlink" title="StringTable"></a>StringTable</h1><h2 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h2><p>1、String：字符串，使用一对””引起来表示。</p><ul><li>String sl &#x3D; “hello”；&#x2F;&#x2F;字面量的定义方式</li><li>String s2 &#x3D; new String（”hello”） ；</li></ul><p>2、String声明为<code>final</code>的， 不可被继承</p><p>3、String实现了<code>Serializable</code>接口：表示字符串是支持序列化的。 </p><p>4、实现了<code>Comparable</code>接口：表示String可以比较大小</p><p>5、String在jdk8及以前内部定义了<code>final char value[]</code>，value用于存储字符串数据，jdk9时改为<code>byte[]</code></p><ul><li><code>结论： String再也不用char[] 来存储，改成了byte[] 加上编码标记，节约了一些空间。StringBuffer和StringBuilder也做了一些修改</code></li></ul><p>6、String：代表<strong>不可变的字符序列</strong>，简称：不可变性。</p><ul><li><strong>当对字符串重新赋值时</strong>，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</li><li><strong>当对现有的字符串进行连接操作时</strong>，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li><strong>当调用String的replace（）方法修改指定字符或字符串时</strong>，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li></ul><p><strong>7、通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字面量</span></span><br><span class="line">String a = <span class="string">&quot;aa&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>8、字符串常量池中是不会存储相同内容的字符串的</strong></p><ul><li>String的String Pool 是一个固定大小的<code>Hashtable</code>，默认值大小长度是1009。如果放进StringPool的String非常多， 就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用<code>String. intern</code>时性能会大幅下降。</li><li>使用<code>-XX:StringTableSize</code>可设置StringTable的长度</li><li>在jdk6中StringTable是固定的，就是1009的长度，所以如果常量池中的字符串过多就会导致效率下降很快。StringTableSize设 置没有要求</li><li>在jdk7中，StringTable的长度默认值是60013</li><li>jdk8开始,1009是StringTable长度可设置的最小值</li></ul><h2 id="String的内存分配"><a href="#String的内存分配" class="headerlink" title="String的内存分配"></a>String的内存分配</h2><p>1、在Java语言中有8种基本数据类型和一种比较特殊的类型String。这些类型为了使它们在运行过程中速度更快、更节省内存，都提供了一种<strong>常量池</strong>的概念。</p><p>2、常量池就类似一个Java系统级别提供的缓存，8种基本数据类型的常量池都是系统协调的，<strong>String类型的常量池比较特殊</strong>，它的主要使用方法有两种：</p><ul><li><strong>直接使用双引号声明出来的String对象会直接存储在常量池中</strong><ul><li>比如： <code>String info = &quot;abc&quot;</code> ；</li></ul></li><li><strong>如果不是用双引号声明的String对象，可以使用String提供的<code>intern（）</code>方法</strong></li></ul><p>3、变化</p><ul><li><p>Java 6及以前，字符串常量池存放在永久代</p></li><li><p>Java 7中Oracle的工程师对字符串池的逻辑做了很大的改变，即将<strong>字符串常量池的位置调整到Java堆内</strong></p><ul><li>所有的字符串都保存在堆（Heap）中，和其他普通对象一样，这样在进行调优应用时仅需要调整堆大小就可以了</li><li>字符串常量池概念原本使用得比较多，但是这个改动使得我们有足够的理由让我们重新考虑在Java 7中使用<code>String. intern（）</code></li></ul></li><li><p>Java8元空间，字符串常量在<strong>堆</strong></p></li></ul><blockquote><p>为什么字符串常量池需要进行改变？</p></blockquote><p>1、永久代默认情况下比较小</p><p>2、永久代的回收效率较低，垃圾回收频率低</p><h2 id="String的基本操作"><a href="#String的基本操作" class="headerlink" title="String的基本操作"></a>String的基本操作</h2><p>例一：</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/16/172bac675fab2b1f~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><hr/><p>例2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;<span class="comment">//line 1</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;<span class="comment">//line 2</span></span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();<span class="comment">//line 3</span></span><br><span class="line">    Memory mem = <span class="keyword">new</span> Memory();<span class="comment">//line 4</span></span><br><span class="line">    mem.foo(obj);<span class="comment">//line 5</span></span><br><span class="line">  &#125;<span class="comment">//line 9</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(Object param)</span> </span>&#123;<span class="comment">//line 6</span></span><br><span class="line">    String str = param.toString();<span class="comment">//line 7</span></span><br><span class="line">    System.out.println(str);</span><br><span class="line">  &#125;<span class="comment">//line 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/16/172bac6cb643c9df~tplv-t2oaga2asx-watermark.awebp" alt="img" style="zoom:50%;" /><h2 id="String的拼接操作"><a href="#String的拼接操作" class="headerlink" title="String的拼接操作"></a>String的拼接操作</h2><p>1、常量与常量的拼接结果在常量池，原理是<strong>编译期优化</strong></p><p>2、常量池中不会存在相同内容的常量。</p><p>3、<strong>只要其中有一个是变量，结果就在堆中</strong>，变量拼接的原理是StringBuilder</p><p><strong>4、如果拼接的结果调用intern（）方法，则主动将常量池中还没有的字符串对象放入池中，并返回此对象地址</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  String s1 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span>;<span class="comment">//编译期优化：等同于&quot;abc&quot;</span></span><br><span class="line">  String s2 = <span class="string">&quot;abc&quot;</span>; <span class="comment">//&quot;abc&quot;一定是放在字符串常量池中，将此地址赋给s2</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 最终.java编译成.class,再执行.class</span></span><br><span class="line"><span class="comment">   * String s1 = &quot;abc&quot;;</span></span><br><span class="line"><span class="comment">   * String s2 = &quot;abc&quot;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  System.out.println(s1 == s2); <span class="comment">//true</span></span><br><span class="line">  System.out.println(s1.equals(s2)); <span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">  String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">  String s2 = <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line"></span><br><span class="line">  String s3 = <span class="string">&quot;javaEEhadoop&quot;</span>;</span><br><span class="line">  String s4 = <span class="string">&quot;javaEE&quot;</span> + <span class="string">&quot;hadoop&quot;</span>;<span class="comment">//编译期优化</span></span><br><span class="line">  <span class="comment">//如果拼接符号的前后出现了变量，则相当于在堆空间中new String()，具体的内容为拼接的结果：javaEEhadoop</span></span><br><span class="line">  String s5 = s1 + <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">  String s6 = <span class="string">&quot;javaEE&quot;</span> + s2;</span><br><span class="line">  String s7 = s1 + s2;</span><br><span class="line"></span><br><span class="line">  System.out.println(s3 == s4);<span class="comment">//true</span></span><br><span class="line">  System.out.println(s3 == s5);<span class="comment">//false</span></span><br><span class="line">  System.out.println(s3 == s6);<span class="comment">//false</span></span><br><span class="line">  System.out.println(s3 == s7);<span class="comment">//false</span></span><br><span class="line">  System.out.println(s5 == s6);<span class="comment">//false</span></span><br><span class="line">  System.out.println(s5 == s7);<span class="comment">//false</span></span><br><span class="line">  System.out.println(s6 == s7);<span class="comment">//false</span></span><br><span class="line">  <span class="comment">//intern():判断字符串常量池中是否存在javaEEhadoop值，如果存在，则返回常量池中javaEEhadoop的地址；</span></span><br><span class="line">  <span class="comment">//如果字符串常量池中不存在javaEEhadoop，则在常量池中加载一份javaEEhadoop，并返回次对象的地址。</span></span><br><span class="line">  String s8 = s6.intern();</span><br><span class="line">  System.out.println(s3 == s8);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p><strong>1、字符串拼接操作不一定使用StringBuilder</strong></p><ul><li>情况一：拼接符号左右两边都是字符串常量：<code>&quot;a&quot;+&quot;b&quot;</code></li><li>情况二：拼接符号左右两边都是常量引用：<code>final String a= &quot;a&quot;;final String b=&quot;b&quot;; a+b;</code></li></ul><p><strong>2、针对final修饰类、方法、基本数据类型、引用数据类型时，能使用final就使用final</strong></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/16/172bac74e1331d1d~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><p><strong>3、append的方式比拼接字符串更加高效</strong></p><ul><li>使用append的方式，从始至终只需要创建一个stringbuilder对象</li><li>使用字符串拼接，每次都需要创建stringbuilder对象、String对象，占用内存过多</li></ul><p>4、改进空间</p><ul><li>在实际开发中，如果基本确定需要添加字符串的长度，就可以自定义长度实例化stringbuilder</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder a = <span class="keyword">new</span> StringBuilder(<span class="number">10</span>)；</span><br></pre></td></tr></table></figure><h2 id="intern-方法"><a href="#intern-方法" class="headerlink" title="intern()方法"></a>intern()方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>1、如果不是用双引号声明的String对象，可以使用String提供的<code>intern</code>方法： <code>intern</code>方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中。</p><ul><li>比如： <code>String myInfo = new String(&quot;I love u&quot;).intern()；</code></li><li>也就是说，如果在任意字符串上调用String. intern方法，那么其返回结果所指向的那个类实例，必须和直接以常量形式出现的字符串实例完全相同。</li></ul><p>2、因此，下列表达式的值必定是true： </p><p><code>（&quot;a&quot; + &quot;b&quot; + &quot;c&quot;）.intern（）== &quot;abc&quot;;</code><br>通俗点讲，Interned String就是确保字符串在内存里只有一份拷贝，这样可以节约内存空间，加快字符串操作任务的执行速度。注意，这个值会被存放在字符串内部池（String Intern Pool）。</p><h3 id="new-String-创建几个对象？"><a href="#new-String-创建几个对象？" class="headerlink" title="new String()创建几个对象？"></a>new String()创建几个对象？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringNewTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str1 = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line">    String str2 = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210401145814662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 30%;" /><p><strong>注意：使用toString方法不会在常量池中生成</strong></p><h3 id="面试题-3"><a href="#面试题-3" class="headerlink" title="面试题"></a>面试题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如何保证变量s指向的是字符串常量池中的数据呢？</span></span><br><span class="line"><span class="comment"> * 有两种方式：</span></span><br><span class="line"><span class="comment"> * 方式一： String s = &quot;shkstart&quot;;//字面量定义的方式</span></span><br><span class="line"><span class="comment"> * 方式二： 调用intern()</span></span><br><span class="line"><span class="comment"> *         String s = new String(&quot;shkstart&quot;).intern();</span></span><br><span class="line"><span class="comment"> *         String s = new StringBuilder(&quot;shkstart&quot;).toString().intern();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringIntern</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    String s1 = s.intern();<span class="comment">//调用此方法之前，字符串常量池中已经存在了&quot;1&quot;</span></span><br><span class="line">    String s2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="comment">//s  指向堆空间&quot;1&quot;的内存地址</span></span><br><span class="line">    <span class="comment">//s1 指向字符串常量池中&quot;1&quot;的内存地址</span></span><br><span class="line">    <span class="comment">//s2 指向字符串常量池已存在的&quot;1&quot;的内存地址  所以 s1==s2</span></span><br><span class="line">    System.out.println(s == s2);<span class="comment">//jdk6：false   jdk7/8：false</span></span><br><span class="line">    System.out.println(s1 == s2);<span class="comment">//jdk6: true   jdk7/8：true</span></span><br><span class="line">    System.out.println(System.identityHashCode(s));<span class="comment">//491044090</span></span><br><span class="line">    System.out.println(System.identityHashCode(s1));<span class="comment">//644117698</span></span><br><span class="line">    System.out.println(System.identityHashCode(s2));<span class="comment">//644117698</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//s3变量记录的地址为：new String(&quot;11&quot;)</span></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="comment">//执行完上一行代码以后，字符串常量池中，是否存在&quot;11&quot;呢？答案：不存在！！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// jdk6:创建了一个新的对象&quot;11&quot;,也就有新的地址。</span></span><br><span class="line">    <span class="comment">// jdk7:此时常量中并没有创建&quot;11&quot;,而是创建一个指向堆空间中new String(&quot;11&quot;)的地址</span></span><br><span class="line">    s3.intern();</span><br><span class="line">    <span class="comment">//s4变量记录的地址：使用的是上一行代码代码执行时，在常量池中生成的&quot;11&quot;的地址</span></span><br><span class="line">    String s4 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//jdk6：false  jdk7/8：true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/16/172bac960ae887a7~tplv-t2oaga2asx-watermark.awebp" alt="6" style="zoom:50%;" /><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/16/172bac97d066c47d~tplv-t2oaga2asx-watermark.awebp" alt="7" style="zoom:50%;" /><p><strong>拓展</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringIntern1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);<span class="comment">//new String(&quot;11&quot;)</span></span><br><span class="line">    <span class="comment">//执行完上一行代码以后，字符串常量池中，是否存在&quot;11&quot;呢？答案：不存在！！</span></span><br><span class="line">    String s4 = <span class="string">&quot;11&quot;</span>;<span class="comment">//在字符串常量池中生成对象&quot;11&quot;</span></span><br><span class="line">    String s5 = s3.intern();</span><br><span class="line">    System.out.println(s3 == s4);<span class="comment">//false</span></span><br><span class="line">    System.out.println(s5 == s4);<span class="comment">//true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>jdk6中，将这个字符串对象尝试放入串池</p><ul><li>如果串池中有，则不会放入，返回已有的地址</li><li>如果没有，将此字符串对象复制一份放入，并返回对象地址</li></ul><p>jdk7后，将这个字符串对象尝试放入串池</p><ul><li>如果有，不会放入，返回已有的地址</li><li>如果没有，将字符串对象的引用地址复制一份放入，返回引用地址</li></ul><hr/><p>1、两个String拼接，因为最后stringBuilder调用了toString方法，所以返回的是一个new String（）地址</p><p>2、如果常量池里面没有拼接后的值，调用intern方法，常量池中放的是new String()的地址</p><p>3、如果常量池有拼接后的值，调用intern方法，就会返回常量池这个值的地址</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringExer1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;b&quot;</span>);<span class="comment">//new String(&quot;ab&quot;)</span></span><br><span class="line">    <span class="comment">//在上一行代码执行完以后，字符串常量池中并没有&quot;ab&quot;</span></span><br><span class="line"></span><br><span class="line">    String s2 = s.intern();<span class="comment">//jdk6中：在串池中创建一个字符串&quot;ab&quot;</span></span><br><span class="line">    <span class="comment">//jdk8中：串池中没有创建字符串&quot;ab&quot;,而是创建一个引用，指向new String(&quot;ab&quot;)，将此引用返回</span></span><br><span class="line"></span><br><span class="line">    System.out.println(s2 == <span class="string">&quot;ab&quot;</span>);<span class="comment">//jdk6:true  jdk8:true</span></span><br><span class="line">    System.out.println(s == <span class="string">&quot;ab&quot;</span>);<span class="comment">//jdk6:false  jdk8:true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jdk6</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/16/172bac9a78f97a95~tplv-t2oaga2asx-watermark.awebp" alt="8" style="zoom: 33%;" /><p><strong>jdk7&#x2F;8</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/16/172bacadb3c78aec~tplv-t2oaga2asx-watermark.awebp" alt="9" style="zoom: 33%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringExer1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String x = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;b&quot;</span>);<span class="comment">//new String(&quot;ab&quot;)</span></span><br><span class="line">    String s2 = s.intern();</span><br><span class="line"></span><br><span class="line">    System.out.println(s2 == x);<span class="comment">//true </span></span><br><span class="line">    System.out.println(s == x);<span class="comment">//false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/16/172bacaf267e7da0~tplv-t2oaga2asx-watermark.awebp" alt="10" style="zoom: 33%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringExer2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="keyword">new</span> String(<span class="string">&quot;ab&quot;</span>);<span class="comment">//执行完以后，会在字符串常量池中会生成&quot;ab&quot;</span></span><br><span class="line">    <span class="comment">//        String s1 = new String(&quot;a&quot;) + new String(&quot;b&quot;);////执行完以后，不会在字符串常量池中会生成&quot;ab&quot;</span></span><br><span class="line">    s1.intern();</span><br><span class="line">    String s2 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    System.out.println(s1 == s2); <span class="comment">//false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="intern-空间效率"><a href="#intern-空间效率" class="headerlink" title="intern()空间效率"></a>intern()空间效率</h2><p>大的网站平台，需要内存中存储大量的字符串。比如社交网站，很多人都存储：北京市、海淀区等信息。这时候如果字符串都调用 intern（）方法，就会明显降低内存的大小。</p><h2 id="G1中的String去重操作"><a href="#G1中的String去重操作" class="headerlink" title="G1中的String去重操作"></a>G1中的String去重操作</h2><ul><li>背景：对许多Java应用（有大的也有小的）做的测试得出以下结果：<ul><li>堆存活数据集合里面String对象占了25%</li><li>堆存活数据集合里面重复的String对象有13.5%</li><li>String对象的平均长度是45</li></ul></li><li>许多大规模的Java应用的瓶颈在于内存，测试表明，在这些类型的应用里面<strong>，Java堆中存活的数据集合差不多25%是String对象</strong>。更进一步，这里面差不多一半String对象是重复的，重复的意思是说： <code>string1. equals （string2）=true</code>。<strong>堆上存在重复的string对象必然是一种内存的浪费</strong>。这个项目将在G1垃圾收集器中实现自动持续对重复的String对象进行去重，这样就能避免浪费内存。</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>当垃圾收集器工作的时候，会访问堆上存活的对象。对每一个访问的对象都会检查是否是候选的要去重的String对象。</li><li>如果是，把这个对象的一个引用插入到队列中等待后续的处理。一个去重的线程在后台运行，处理这个队列。处理队列的一个元素意味着从队列删除这个元素，然后尝试去重它引用的String对象。</li><li>使用一个hashtable来记录所有的被String对象使用的不重复的char数组。 当去重的时候，会查这个hashtable，来看堆上是否已经存在一个一模一样的char数组。</li><li>如果存在，String对象会被调整引用那个数组，释放对原来的数组的引用，最终会被垃圾收集器回收掉。</li><li>如果查找失败，char数组会被插入到hashtable，这样以后的时候就可以共享这个数组了。</li></ul><h3 id="命令行选项"><a href="#命令行选项" class="headerlink" title="命令行选项"></a>命令行选项</h3><ul><li>UseStringDeduplication （bool） ：开启String去重，默认是不开启的，需要手动开启。</li><li>PrintStringDedupl icationStatistics （bool） ：打印详细的去重统计信息，</li><li>StringDedupl icationAgeThreshold （uintx） ：达到这个年龄的string对象被认.为是去重的候选对象</li></ul><h1 id="垃圾回收概述"><a href="#垃圾回收概述" class="headerlink" title="垃圾回收概述"></a>垃圾回收概述</h1><h2 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h2><p>1、<strong>垃圾是指运行程序中没有任何指针指向的对象</strong>，这个对象就是需要被回收的垃圾</p><p>2、如果不及时对内存中的垃圾进行清理，这些垃圾对象所占的内存空间会所占的内存空间会一直保留到应用程序结束，被保留的空间无法被其他对象使用，甚至可能导致<strong>内存溢出</strong></p><h3 id="内存溢出和内存泄露"><a href="#内存溢出和内存泄露" class="headerlink" title="内存溢出和内存泄露"></a>内存溢出和内存泄露</h3><p><strong>1、内存溢出</strong></p><p>从字面上的意思即<code>jvm</code>内存不够用了，目前无法存放创建的对象。</p><p><strong>2、内存泄露</strong></p><p>不再会被使用的对象不能被回收，就是内存泄露。说的通俗点就是：该对象已经需要被GC了，却没有这么做。</p><h3 id="大厂面试题"><a href="#大厂面试题" class="headerlink" title="大厂面试题"></a>大厂面试题</h3><ol><li><strong>蚂蚁金服</strong>：</li></ol><ul><li>你知道哪几种垃圾回收器，各自的优缺点，重点讲一下 cms和g1<ul><li>一面： JVM GC算法有哪些，目前的JDK版本采用什么回收算法</li><li>一面： （ G1回收器讲下回收过程</li></ul></li><li>GC是什么？为什么要有GC？<ul><li>一面： GC的两种判定方法？ CMS收集器与G1收集器的特点。</li></ul></li></ul><ol><li><strong>百度</strong>：</li></ol><ul><li>说一下GC算法，分代回收说下</li><li>垃圾收集策略和算法</li></ul><ol><li><strong>天猫</strong>：</li></ol><ul><li>一面： jvm GC原理，JVM怎么回收内存</li><li>一面： CMS特点，垃圾回收算法有哪些？各自的优缺点，他们共同的缺点是什么？</li></ul><ol><li><strong>滴滴</strong>：</li></ol><ul><li>一面： java的垃圾回收器都有哪些，说下g1的应用场景，平时你是如何搭配使用垃圾回收器的</li></ul><ol><li>京东：</li></ol><ul><li>你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。垃圾回收算法的实现原理。</li></ul><ol><li>阿里：</li></ol><ul><li>讲一讲垃圾回收算法。</li><li>什么情况下触发垃圾回收？</li><li>如何选择合适的垃圾收集算法？</li><li>JVM有哪三种垃圾回收器？</li></ul><ol><li>字节跳动：</li></ol><ul><li>常见的垃圾回收器算法有哪些，各有什么优劣？</li><li>system.gc （）和runtime.gc（）会做什么事情？</li><li>一面： Java GC机制？ GC Roots有哪些？</li><li>二面： Java对象的回收方式，回收算法。</li><li>CMS和G1了解么，CMS解决什么问题，说一下回收的过程。</li><li>CMS回收停顿了几次，为什么要停顿两次。</li></ul><h2 id="为什么需要GC"><a href="#为什么需要GC" class="headerlink" title="为什么需要GC"></a>为什么需要GC</h2><p>1、对于高级语言来说，一个基本认知是如果不进行垃圾回收，<strong>内存迟早都会被消耗完</strong>，因为不断地分配内存空间而不进行回收，就好像不停地生产生活垃圾而从来不打扫一样。</p><p>2、除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理将所占用的堆内存移到堆的一端，<strong>以便JVM将整理出的内存分配给新的对象</strong>。</p><p>3、随着应用程序所应付的业务越来越庞大、复杂，用户越来越多，<strong>没有GC就不能保证应用程序的正常进行</strong>。而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。</p><h2 id="早期垃圾回收"><a href="#早期垃圾回收" class="headerlink" title="早期垃圾回收"></a>早期垃圾回收</h2><p>1、在早期的C&#x2F;C++时代，垃圾回收基本上是手工进行的。开发人员可以使用 new关键字进行内存申请，并使用delete关键字进行内存释放，这种方式可以灵活控制内存释放的时间，但是会给开发人员带来<strong>频繁申请和释放内存的管理负担</strong>。倘若有一处内存区间由于程序员编码的问题忘记被回收，那么就会产生<strong>内存泄漏</strong>，垃圾对象永远无法被清除，随着系统运行时间的不断增长，垃圾对象所耗内存可能持续上升，直到出现内存溢出并造成<strong>应用程序崩溃</strong>。</p><p>2、现在，除了Java以外，C#、Python、 Ruby等语言都使用了自动垃圾回收的思想，也是未来发展趋势。可以说，这种自动化的内存分配和垃圾回收的方式己经成为现代开发语言必备的标准。</p><h2 id="Java垃圾回收机制"><a href="#Java垃圾回收机制" class="headerlink" title="Java垃圾回收机制"></a>Java垃圾回收机制</h2><p>1、自动内存管理，无需开发人员手动参与内存的分配与回收，这样<strong>降低内存泄漏和内存溢出的风险</strong></p><ul><li>没有垃圾回收器，java也会和cpp一样，各种悬垂指针，野指针，泄露问题让你头疼不已。</li></ul><p>2、自动内存管理机制，将程序员从繁重的内存管理中释放出来，<strong>可以更专心地专注于业务开发</strong></p><hr/><p><strong>担忧</strong></p><p>1、对于Java开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于 “自动”，那么这将会是一场灾难，最严重的就会<strong>弱化Java开发人员在程序出现内存溢出时定位问题和解决问题的能力。</strong></p><p>2、此时，了 解JVM的自动内存分配和内存回收原理就显得非常重要，只有在真 正了解JVM是如何管理内存后，我们才能够在遇见OutOfMemoryError时， 快速地根据错误异常日志定位问题和解决问题。</p><p>3、当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高 并发量的瓶颈时，我们就必须对这些“自动化”的技术<strong>实施必要的监控和调节</strong>。</p><hr/><p>垃圾回收器可以对年轻代回收，也可以对老年代回收，甚至是全堆和方法区的回收。</p><ul><li>其中<strong>Java堆是垃圾收集器的工作重点</strong></li></ul><p>从次数上讲：</p><ul><li>频繁收集：Young区</li><li>较少收集：old区</li><li>基本不动：Perm区（元空间）</li></ul><h1 id="垃圾回收算法（一）"><a href="#垃圾回收算法（一）" class="headerlink" title="垃圾回收算法（一）"></a>垃圾回收算法（一）</h1><p><strong>1、标记阶段：识别哪些是垃圾</strong></p><ul><li>引用计数算法</li><li>可达性分析算法</li></ul><p><strong>2、清除阶段：清除垃圾</strong></p><ul><li>标记-清除算法</li><li>复制算法</li><li>标记-压缩算法</li></ul><h2 id="标记阶段：引用计数算法（没有使用）"><a href="#标记阶段：引用计数算法（没有使用）" class="headerlink" title="标记阶段：引用计数算法（没有使用）"></a>标记阶段：引用计数算法（没有使用）</h2><p><strong>垃圾标记阶段：对象存活判断</strong></p><p>在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，<strong>首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象</strong>。只有被标记为己经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。</p><p>那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。</p><blockquote><p> 判断对象存活一般有两种方式：引用计数算法和可达性分析算法</p></blockquote><hr/><p>1、引用计数算法：<strong>对每个对象保存一个整型的引用计数器（和年龄计数器不同），用于记录对象被引用的情况</strong></p><ul><li>对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器加1，当引用失效时，引用计数器减1，只要对象A的引用计数器为0，就说明是垃圾，可以进行回收</li></ul><p><strong>2、优点：实现简单、垃圾对象便于辨识、判定效率高、回收没有延迟性</strong></p><p><strong>3、缺点：</strong></p><ul><li>需要单独的字段存储计数器，增加了存储<strong>空间的开销</strong></li><li>每次赋值都需要更新计数器，增加了<strong>时间开销</strong></li><li><strong>无法处理循环引用的情况，内存泄露问题（致命缺陷，导致Java的垃圾回收器没有使用这个算法）</strong></li></ul><p>4、Java没有使用引用计数算法</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d434109c5fa74c8e85ec8d95dc8dccbc~tplv-k3u1fbpfcp-watermark.awebp" alt="4" style="zoom:50%;" /><p><strong>5、Python使用引用计数算法，如何解决循环引用？</strong></p><ul><li>手动解除 ：在合适的时机，解除引用关系</li><li>使用<strong>弱引用</strong>weakref，weakref是Python提供的标准库，旨在解决循环引用</li></ul><h2 id="标记阶段：可达性分析算法"><a href="#标记阶段：可达性分析算法" class="headerlink" title="标记阶段：可达性分析算法"></a>标记阶段：可达性分析算法</h2><p>1、相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是<strong>该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生。</strong></p><p>2、相较于引用计数算法，这里的可达性分析就是Java、C#选择的。这种类型的垃圾收集通常也叫作<strong>追踪性垃圾收集</strong>（Tracing GarbageCollection）。</p><p><strong>3、”GC Roots”根集合：一组必须活跃的引用</strong></p><p>4、基本思路：</p><p>➢可达性分析算法是以根对象集合(GCRoots）为起始点，按照从上至下的方式搜索<strong>被根对象集合所连接的目标对象是否可达</strong>。</p><p>➢使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为<strong>引用链（Reference Chain）</strong></p><p>➢如果目标对象没有任何引用链相连，则是<strong>不可达的，就意味着该对象己经死亡</strong>，可以标记为垃圾对象。</p><p>➢在可达性分析算法中，<strong>只有能够被根对象集合直接或者间接连接的对象才是存活对象</strong>。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bca782c36a944f7ad0a619c29ede81a~tplv-k3u1fbpfcp-watermark.awebp" alt="5" style="zoom:50%;" /><h3 id="GC-Roots-1"><a href="#GC-Roots-1" class="headerlink" title="GC Roots"></a>GC Roots</h3><p>在Java语言中，GC Roots包括以下几类元素：</p><p><strong>1、虚拟机栈中引用的对象</strong></p><ul><li>比如：各个线程被调用的方法中使用到的参数、局部变量等。</li></ul><p><strong>2、本地方法栈内JNI（通常说的本地方法）引用的对象</strong></p><p><strong>3、方法区中类静态属性引用的对象</strong></p><ul><li>比如：Java类的引用类型静态变量</li></ul><p><strong>4、方法区中常量引用的对象</strong></p><ul><li>比如：字符串常量池（string Table） 里的引用</li></ul><p><strong>5、所有被同步锁synchronized持有的对象</strong></p><p><strong>6、Java虚拟机内部的引用</strong></p><ul><li>基本数据类型对应的Class对象，一些常驻的异常对象（如： NullPointerException、OutOfMemoryError） ，系统类加载器。</li></ul><p><strong>7、反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</strong></p><p>除了这些固定的GCRoots集合以外，根据用户所选用的垃圾收集器以及当 前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。<strong>比如：分代收集和局部回收（Partial GC）。</strong></p><ul><li>如果只针对Java堆中的某一块区域进行垃圾回收（比如：典型的只针 对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入GC Roots集合中去考虑，才能保证可达性分析的准确性。</li></ul><hr/><p>小技巧：由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个Root</p><p><strong>注意</strong></p><p>1、如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能<strong>保障一致性的快照中进行</strong>。这点不满足的话分析结果的准确性就无法保证。</p><p>2、这点也是导致GC进行时必须<code>“StopTheWorld&quot;</code>的一个重要原因。</p><ul><li>即使是号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</li></ul><h2 id="对象的finalization机制（复活）"><a href="#对象的finalization机制（复活）" class="headerlink" title="对象的finalization机制（复活）"></a>对象的finalization机制（复活）</h2><blockquote><p>确定是一个死亡对象，在销毁之前调用finalization方法进行自定义处理逻辑</p></blockquote><p>1、Java语言提供了对象终止（finalization）机制来允许开发人员提供<strong>对象被销毁之前的自定义处理逻辑</strong>。</p><p>2、<strong>垃圾回收此对象之前，总会先调用这个对象的<code>finalize（）</code>方法。</strong></p><p>3、<code>finalize（）</code>方法<strong>允许在子类中被重写</strong>，<strong>用于在对象被回收时进行资源释放</strong>。</p><ul><li>通常在这个方法中进行一些<strong>资源释放和清理的工作</strong>，比如关闭文件、套接字和数据库连接等。</li></ul><p>4、应该交给垃圾回收机制调用，永远不要主动调用某个对象的finalize （）方法，原因：</p><ul><li><p>在finalize（） 时<strong>可能会导致对象复活</strong>。</p></li><li><p>finalize（）方法的<strong>执行时间是没有保障</strong>的，它完全由GC线程决定，极端情况下，若不发生GC，则finalize（） 方法将没有执行机会。</p></li><li><p><strong>一个糟糕的finalize （）会严重影响GC的性能</strong>。</p></li></ul><h3 id="对象的三种状态"><a href="#对象的三种状态" class="headerlink" title="对象的三种状态"></a>对象的三种状态</h3><p>1、由于<code>finalize （）</code>方法的存在，<strong>虚拟机中的对象一般处于三种可能的状态：</strong></p><ul><li><strong>可触及的</strong>：从根节点开始，可以到达这个对象。</li><li><strong>可复活的</strong>：对象的所有引用都被释放，但是<strong>对象有可能在finalize（）中复活</strong></li><li><strong>不可触及的</strong>：对象的<code>finalize（）</code>被调用，并且<strong>没有复活，那么就会进入不可触及状态</strong>。不可触及的对象不可能被复活，因为<code>finalize（）</code> <strong>只会被调用一次</strong>。</li></ul><h3 id="判断对象回收的过程"><a href="#判断对象回收的过程" class="headerlink" title="判断对象回收的过程"></a>判断对象回收的过程</h3><p>1、判定一个对象objA是否可回收，<strong>至少要经历两次标记过程</strong>：</p><ul><li><p>可达性分析：如果对象objA到GC Roots没有引用链，则进行第一次标记</p></li><li><p>进行筛选，判断此对象是否有必要执行<code>finalize（）</code>方法</p><ul><li>如果对 象objA没有重写<code>finalize（）</code>方法，或者<code>finalize （）</code>方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA被判定为<strong>不可触及的</strong></li><li>如果对象objA重写了<code>finalize（）</code>方法，且还未执行过，那么objA会被插入到<strong>F-Queue队列</strong>中，由一个虚拟机自动创建的、低优先级的<strong>Finalizer线程</strong>触发其<code>finalize（）</code>方法执行。</li><li><code>finalize（）</code>方法是对象逃脱死亡的最后机会，稍后<strong>GC会对F-Queue队列中的对象进行第二次标记</strong><ul><li>如果objA在<code>finalize（）</code>方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出“即将回收”集合。</li><li>之后对象会再次出现没有引用存在的情况。在这个情况下，finalize方法不会被再次调用，<strong>对象会直接变成不可触及的状态</strong>，也就是说，<strong>一个对象的finalize方法只会被调用一次</strong>。</li></ul></li></ul></li></ul><p>2、两次标记：</p><ul><li>第一次标记：可达性分析，没有引用链，进行标记</li><li>第二次标记：Finalizer线程执行<code>finalize()</code>方法，进行标记，如果这个对象被救活了就被移除回收集合</li></ul><p>3、进入不可触及状态的原因：</p><ul><li>对象没有复活</li><li>对象复活了一次，再次进入可触及状态，直接进入不可触及状态</li></ul><h2 id="MAT与JProfiler的GC-Roots溯源"><a href="#MAT与JProfiler的GC-Roots溯源" class="headerlink" title="MAT与JProfiler的GC Roots溯源"></a>MAT与JProfiler的GC Roots溯源</h2><p>MAT是Memory Analyzer的简称，它是一款功能强大的Java堆内存分析器，用于查找内存泄漏以及查看内存消耗情况。</p><h1 id="垃圾回收算法（二）"><a href="#垃圾回收算法（二）" class="headerlink" title="垃圾回收算法（二）"></a>垃圾回收算法（二）</h1><p>当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存.</p><p>目前在JVM中比较常见的三种垃圾收集算法是</p><ul><li>标记一清除算法（ Mark一Sweep）</li><li>复制算法（Copying）</li><li>标记一压缩算法（Mark一Compact）</li></ul><h2 id="清除阶段：标记-清除算法"><a href="#清除阶段：标记-清除算法" class="headerlink" title="清除阶段：标记-清除算法"></a>清除阶段：标记-清除算法</h2><p>1、标记清除（Mark-Sweep）算法：非常基础和常见的垃圾收集算法</p><p><strong>2、执行过程</strong></p><p>当堆中的有效内存空间（available memory） 被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除。</p><ul><li><strong>标记</strong>：Collectors从引用根节点开始遍历，标记所有被引用的对象（可达对象），一般是在对象头中记录为可达对象</li><li><strong>清除</strong>：Collectors对堆内存从头到尾进行遍历，如果发现某个对象不是可达对象，就回收</li></ul><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b56b351ba0e486f98120ba3a4d01c28~tplv-k3u1fbpfcp-watermark.awebp" alt="12" style="zoom:33%;" /><p>3、缺点：</p><ul><li>效率不算高</li><li>进行GC的时候需要停止整个程序，用户体验差</li><li>这种方式整理出来的内存不连续，产生内存碎片；<strong>需要维护一个空闲列表（对象实例化为对象分配内存如果内存不规整就需要空闲列表）</strong></li></ul><p><strong>4、何为清除？</strong></p><p>不是置空，而是把需要清除的对象地址保存在空闲的地址列表里，需要使用就直接覆盖</p><h2 id="清除阶段：复制算法"><a href="#清除阶段：复制算法" class="headerlink" title="清除阶段：复制算法"></a>清除阶段：复制算法</h2><blockquote><p>为了解决标记-清除算法效率低的缺陷，发明了复制算法</p></blockquote><p><strong>1、核心思想：</strong></p><p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收。</p><p><strong>年轻代的幸存者区就是使用这种方式</strong></p><p><strong>使用指针碰撞的方式存放对象</strong></p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57ee7ec3c4d34a5085b49d399882a389~tplv-k3u1fbpfcp-watermark.awebp" alt="13" style="zoom:33%;" /><p>2、优点：</p><ul><li>实现简单，运行高效</li><li>空间连续，避免碎片问题</li></ul><p>3、缺点</p><ul><li>需要两倍的空间</li><li>对于G1这种拆分成为大量region的GC，复制而不是移动就意味着GC需要维护region之间对象引用关系，内存占用也不小</li></ul><p><strong>4、如果系统中的垃圾对象很多，复制算法不会很理想,复制算法需要复制的存活对象数量并不会太大，或者说非常低才行。</strong></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>coping算法一般是使用在<strong>新生代</strong>中，因为新生代中的对象一般都是朝生夕死的，存活对象的数量并不多，这样使用coping算法进行拷贝时效率比较高。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d871d3722d94c79b5ce6fc60da74332~tplv-k3u1fbpfcp-watermark.awebp" alt="14" style="zoom:50%;" /><h2 id="清除阶段：标记-压缩算法"><a href="#清除阶段：标记-压缩算法" class="headerlink" title="清除阶段：标记-压缩算法"></a>清除阶段：标记-压缩算法</h2><blockquote><p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下，这种情况在新生代中常常发生；但是在老年代更常见的情况是大部分对象都是存活对象，使用复制算法的成本很高</p><p>标记-清除算法的确可以使用在老年代，但是该算法执行效率低，内存回收后碎片化严重，所以需要进行优化改进</p><p>在许多现代的垃圾收集器中，人们都使用了标记一压缩算法或其改进版本</p></blockquote><p>1、执行过程：</p><ul><li>标记：和标记-清除算法一样，从根节点开始标记所有的被引用对象</li><li>压缩：将所有存活对象压缩到内存的一端，按顺序排放</li><li>清除边界外的空间</li></ul><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/debf4a13c0244e9bb4fc4a64d5095f9e~tplv-k3u1fbpfcp-watermark.awebp" alt="15" style="zoom:50%;" /><p>2、标记一压缩算法的最终效果等同于标记一清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为<strong>标记-清除-压缩（Mark-Sweep-Compact）算法</strong></p><p>3、二者的本质差异在于<strong>标记-清除算法是一种非移动式的回收算法，标记-压缩是移动式的</strong>，是否移动回收后的存活对象是一项优缺点并存的风险决策。</p><p>4、可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉，<strong>当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销</strong>。</p><p><strong>5、优点：</strong></p><ul><li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可</li><li>消除了复制算法当中，内存减半的高额代价</li></ul><p><strong>6、缺点：</strong></p><ul><li>效率低于复制算法</li><li>移动对象的同时如果对象被其他对象引用，需要调整引用的地址</li><li>移动过程中需要暂停用户应用程序，即STW</li></ul><h3 id="指针碰撞"><a href="#指针碰撞" class="headerlink" title="指针碰撞"></a>指针碰撞</h3><p>如果内存空间以<strong>规整和有序的方式分布</strong>，即已用和未用的内存都各自一边，彼此之间维系着一个记录下一次分配起始点的标记指针，当为新对象分配内存时，只需要通过修改指针的偏移量将新对象分配在第一个空闲内存位置上，这种分配方式就叫做指针碰撞（Bump the Pointer） </p><h2 id="对比三种算法"><a href="#对比三种算法" class="headerlink" title="对比三种算法"></a>对比三种算法</h2><img src="https://img-blog.csdnimg.cn/20210402094626797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>1、效率上，复制算法最高，但是浪费了太多内存</p><p>2、标记-整理算法相对来说更平滑一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记-清除多了一个整理内存的阶段。</p><p><strong>执行过程比较</strong></p><p><strong>1、标记-清除算法</strong></p><ul><li>遍历标记可达对象</li><li>遍历清除没有被标记的对象</li></ul><p><strong>2、复制算法</strong></p><ul><li>将活着的内存空间分为两块，每次只使用一块，将可达对象复制到另一块</li></ul><p><strong>3、标记-压缩算法</strong></p><ul><li>遍历标记可达对象</li><li>将可达对象进行压缩</li><li>清除边界外的空间（指针碰撞）</li></ul><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><blockquote><p>没有最好的算法,只有更合适的算法</p><p>前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。</p></blockquote><p>1、<strong>不同的对象的生命周期是不一样的</strong>，因此<strong>不同生命周期的对象可以采取不同的收集方式，以便提高回收效率</strong>，一般是把Java堆分为新生代和老年代，这样就可以<strong>根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率</strong>。</p><p>2、<strong>目前几乎所有的GC都是采用分代收集（Generational Collecting） 算法执行垃圾回收的</strong>。</p><hr/><p>在HotSpot中，基于分代的概念，GC所使用的内存回收算法必须结合年轻代和老年代各自的特点</p><p><strong>1、年轻代（Young Gen）</strong></p><ul><li>年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。</li><li>这种情况<strong>复制算法</strong>的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。</li></ul><p><strong>2、老年代（Tenured Gen）</strong></p><ul><li>老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。</li><li>这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由<strong>标记-清除</strong>或者是<strong>标记-清除与标记-整理的混合实现</strong>。<ul><li>Mark阶段的开销与存活对象的数量成正比。</li><li>Sweep阶段的开销与所管理区域的大小成正相关。</li><li>Compact阶段的开销与存活对象的数据成正比。</li></ul></li></ul><hr/><p>1、以HotSpot中的<strong>CMS回收器</strong>为例，CMS是基于标记—清除算法实现的，对于对象的回收效率很高。</p><p>2、对于碎片问题，CMS采用<strong>基于标记—压缩算法的Serial old回收器</strong>作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用Serial old执行Full GC以达到对老年代内存的整理。</p><p><strong>分代的思想被现有的虚拟机广泛使用，几乎所有的垃圾回收器都区分新生代和老年代</strong></p><h2 id="增量收集算法、分区算法"><a href="#增量收集算法、分区算法" class="headerlink" title="增量收集算法、分区算法"></a>增量收集算法、分区算法</h2><h3 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h3><blockquote><p>上述现有的算法在垃圾回收过程中，应用软件将处于一种stop the World的状态。在Stop the World状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了<strong>增量收集（Incremental Collecting） 算法的诞生</strong>。</p></blockquote><p><strong>1、基本思想</strong></p><p>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让<strong>垃圾收集线程和应用程序线程交替执行</strong>。每次，<strong>垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成</strong>。</p><p>总的来说，增量收集算法的基础仍是传统的标记—清除和复制算法。</p><p>增量收集算法<strong>通过对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作</strong>。</p><p><strong>2、缺点</strong></p><p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得<strong>垃圾回收的总体成本上升，造成系统吞吐量的下降</strong>。</p><h3 id="分区算法"><a href="#分区算法" class="headerlink" title="分区算法"></a>分区算法</h3><p>一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，有关GC产生的停顿也越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。</p><p>分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。</p><p>每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90f361cf2d744ee4abec8beb0085daa0~tplv-k3u1fbpfcp-watermark.awebp" alt="16" style="zoom:50%;" /><h1 id="垃圾回收相关概念"><a href="#垃圾回收相关概念" class="headerlink" title="垃圾回收相关概念"></a>垃圾回收相关概念</h1><h2 id="System-gc"><a href="#System-gc" class="headerlink" title="System.gc()"></a>System.gc()</h2><p>1、在默认情况下，通过<code>System.gc()</code>或者<code>Runtime.getRuntime().gc()</code>的调用，<strong>会显式触发Full GC</strong>，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。</p><p>2、<code>System.gc()</code>调用附带一个免责声明：**无法保证对垃圾收集器的调用(无法保证马上触发GC)**。</p><p>3、JVM实现者可以通过<code>system.gc（）</code>调用来决定JVM的GC行为，而一般情况下，垃圾回收应该是自动进行的，<strong>无须手动触发，否则就太过于麻烦了</strong>。在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用<code>System.gc（）</code>。</p><h2 id="内存溢出和内存泄露-1"><a href="#内存溢出和内存泄露-1" class="headerlink" title="内存溢出和内存泄露"></a>内存溢出和内存泄露</h2><h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><p>1、由于GC一直在发展，所有一般情况下除非应用程序占用的内存增长速度非常快，造成垃圾回收已经跟不上内存消耗的速度，否则不太容易出现O0M的情况。</p><p>2、大多数情况下，GC会进行各种年龄段的垃圾回收，实在不行了就放大招，来一次独占式的Full GC操作，这时候会回收大量的内存，供应用程序继续使用。</p><p>3、javadoc中对OutOfMemoryError的解释是，<strong>没有空闲内存，并且垃圾收集器也无法提供更多内存</strong>。</p><hr/><p><strong>没有空闲内存</strong></p><ul><li>Java虚拟机的堆内存设置不够</li><li>代码中创建了大量大对象，并且长时间不能被垃圾回收器收集（存在被引用）</li></ul><p><strong>垃圾回收后无法提供内存</strong></p><ul><li>在抛出OOM之前，通常垃圾收集器会被触发，尽其所能清理出空间<ul><li>例如：在引用机制分析中，涉及到JVM会去尝试回收<strong>软引用指向的对象</strong></li><li>在<code>java.nio.BIts.reserveMemory()</code>方法中，System.gc会被调用，清理空间</li></ul></li></ul><p><strong>如果分配一个超大对象，超过了堆的最大值，JVM可以判断出垃圾收集不能解决这个问题，直接抛出OOM</strong></p><blockquote><p>谈谈对 OOM 的认识？如何排查 OOM 的问题？</p></blockquote><p>除了程序计数器，其他内存区域都有 OOM 的风险。</p><ul><li>栈一般经常会发生 StackOverflowError，比如 32 位的 windows 系统单进程限制 2G 内存，无限创建线程就会发生栈的 OOM</li><li>Java 8 常量池移到堆中，溢出会出 java.lang.OutOfMemoryError: Java heap space，设置最大元空间大小参数无效；</li><li>堆内存溢出，报错同上，这种比较好理解，GC 之后无法在堆中申请内存创建对象就会报错；</li><li>方法区 OOM，经常会遇到的是动态生成大量的类、jsp 等；</li><li>直接内存 OOM，涉及到 -XX:MaxDirectMemorySize 参数和 Unsafe 对象对内存的申请。</li></ul><p>排查 OOM 的方法：</p><ul><li>增加两个参数 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath&#x3D;&#x2F;tmp&#x2F;heapdump.hprof，当 OOM 发生时自动 dump 堆内存信息到指定目录；</li><li>同时 jstat 查看监控 JVM 的内存和 GC 情况，先观察问题大概出在什么区域；</li><li>使用 MAT 工具载入到 dump 文件，分析大对象的占用情况，比如 HashMap 做缓存未清理，时间长了就会内存溢出，可以把改为弱引用 。</li></ul><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p><strong>1、严格意义上，内存泄露：对象不会再被程序用到，但是GC又不能回收他们</strong></p><p>2、实际情况很多时候一些不太好的实践（或疏忽）会<strong>导致对象的生命周期变得很长</strong>甚至导致0OM，也可以叫做<strong>宽泛意义上的“内存泄漏</strong></p><ul><li>将方法内使用的变量定义为成员变量</li></ul><p>3、尽管内存泄漏并不会立刻引起程序崩溃，但是一旦发生内存泄漏，程序中的可用内存就会被逐步蚕食，直至耗尽所有内存，最终出现0utOfMemory异常，导致程序崩溃。</p><p>注意，这里的存储空间并不是指物理内存，而是指虚拟内存大小，这个虚拟内存大小取决于磁盘交换区设定的大小</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/22/172daa92e77f06cb~tplv-t2oaga2asx-watermark.awebp" alt="1"></p><p>4、例子：</p><ul><li><p><strong>单例模式</strong></p><p>单例的生命周期和应用程序是一样长的，所以单例程序中，如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄漏的产生。</p></li><li><p>一些提供close的资源未关闭导致内存泄漏，比如：<strong>数据库连接，网络连接和io连接</strong>，必须手动close，否则是不能被回收的。</p></li></ul><h2 id="Stop-The-World（STW）"><a href="#Stop-The-World（STW）" class="headerlink" title="Stop The World（STW）"></a>Stop The World（STW）</h2><p>1、Stop一the一World，简称STW，指的是GC事件发生过程中，<strong>会产生应用程序的停顿</strong>。停顿产生时整个应用程序线程都会被暂停，没有任何响应，有点像卡死的感觉，这个停顿称为STW。</p><ul><li>可达性分析算法中枚举根节点（GC Roots）会导致所有Java执行线程停顿。<ul><li>分析工作必须在一个能<strong>确保一致性的快照中进行</strong></li><li>一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上</li><li><strong>如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证</strong></li></ul></li></ul><p>2、被STW中断的应用程序线程会在完成GC之后恢复，频繁中断会让用户感觉像是网速不快造成电影卡带一样， 所以我们<strong>需要减少STW的发生。</strong></p><p>3、<strong>STW事件和采用哪款GC无关，所有的GC都有这个事件</strong></p><p>4、哪怕是G1也不能完全避免Stop一the一world情况发生，只能说垃圾回收器越来越优秀，回收效率越来越高，尽可能地缩短了暂停时间。</p><p>5、STW是JVM在<strong>后台自动发起和自动完成</strong>的。在用户不可见的情况下，把用户正常的工作线程全部停掉。</p><p>6、开发中不要用<code>System.gc()</code>，会导致Stop一the一world的发生。</p><h2 id="垃圾回收的并行与并发"><a href="#垃圾回收的并行与并发" class="headerlink" title="垃圾回收的并行与并发"></a>垃圾回收的并行与并发</h2><h3 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h3><ul><li>并发，指的是多个事情，在同一时间段内同时发生了。</li><li>并行，指的是多个事情，在同一时间点上同时发生了。</li><li>并发的多个任务之间是互相抢占资源的。</li><li>并行的多个任务之间是不互相抢占资源的。</li><li>只有在多CPU或者一个CPU多核的情况中，才会发生并行。否则，看似同时发生的事情，其实都是并发执行的。</li></ul><h3 id="垃圾回收的并发与并行"><a href="#垃圾回收的并发与并行" class="headerlink" title="垃圾回收的并发与并行"></a>垃圾回收的并发与并行</h3><p>1、并行（Parallel） ：指<strong>多条垃圾收集线程并行工作</strong>，但此时用户线程仍处于等待状态。</p><ul><li>如：ParNew、 Parallel Scavenge、 Parallel old；</li></ul><p>2、串行（Serial）</p><ul><li><p>相较于并行的概念，<strong>单线程执行</strong>。</p></li><li><p>如果内存不够，则程序暂停，启动JVM垃圾回收器进行垃圾回收。回收完，再启动程序的线程。</p></li></ul><p>3、并发（Concurrent） ：指<strong>用户线程与垃圾收集线程同时执行</strong>（但<strong>不一定是并行的，可能会交替执行</strong>），垃圾回收线程在执行时不会停顿用户程序的运行。</p><ul><li>用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上；</li><li>如： CMS、G1</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/22/172daa9ceada7afc~tplv-t2oaga2asx-watermark.awebp" alt="2" style="zoom:50%;" /><h2 id="安全点与安全区域"><a href="#安全点与安全区域" class="headerlink" title="安全点与安全区域"></a>安全点与安全区域</h2><h3 id="安全点-Safepoint"><a href="#安全点-Safepoint" class="headerlink" title="安全点(Safepoint)"></a>安全点(Safepoint)</h3><p>1、程序执行时并非在所有地方都能停顿下来开始GC，<strong>只有在特定的位置才能停顿下来开始GC</strong>，这些位置称为“<strong>安全点</strong>（Safepoint） ”</p><p>2、Safe Point的选择很重要，<strong>如果太少可能导致GC等待的时间太长，如果太频繁可能导致运行时的性能问题</strong>。大部分指令的执行时间都非常短暂，通常会根据“<strong>是否具有让程序长时间执行的特征</strong>”为标准。</p><ul><li>比如：选择些执行时间较长的指令作为Safe Point， 如方法调用、循环跳转和异常跳转等。</li></ul><blockquote><p><strong>如何在GC发生时，检查所有线程都跑到最近的安全点停顿下来呢？</strong></p></blockquote><p>1、抢先式中断： （目前没有虚拟机采用了） 首先中断所有线程。如果还有线程不在安全点，就恢复线程，让线程跑到安全点。</p><p>2、主动式中断： 设置一个中断标志，各个线程运行到Safe Point的时候主动轮询这个标志，如果中断标志为真，则将自己进行中断挂起。</p><h3 id="安全区域-Safe-Region"><a href="#安全区域-Safe-Region" class="headerlink" title="安全区域(Safe Region)"></a>安全区域(Safe Region)</h3><p>1、Safepoint机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint 。但是，程序“不执行”的时候呢？例如线程处于Sleep 状态或Blocked状态，这时候线程无法响应JVM的中断请求，“走” 到安全点去中断挂起，JVM也不太可能等待线程被唤醒。对于这种情况，就需要安全区域（Safe Region）来解决。</p><p>2、<strong>安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始GC都是安全的</strong>。我们也可以把Safe Region 看做是被扩展了的Safepoint。</p><p><strong>实际执行时:</strong></p><p>1、当线程运行到Safe Region的代码时，首先标识已经进入了Safe Region，如果这段时间内发生GC，JVM会忽略标识为Safe Region状态 的线程；</p><p>2、当线程即将离开Safe Region时， 会检查JVM是否已经完成GC，如果完成了，则继续运行，否则线程必须等待直到收到可以安全离开SafeRegion的信号为止；</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>Reference子类中只有终结器引用是包内可见的，其他3种引用类型均为public，可以在应用程序中直接使用</p><ul><li><strong>强引用（StrongReference）</strong>：最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“<code>0bject obj=new object()</code>”这种引用关系。<strong>无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象</strong>。</li><li><strong>软引用（SoftReference）</strong> ：在系统将要发生内存溢出之前，将会把这些对象列入回收范围之中进行第二次回收，如果这次回收后还没有足够的内存，才会抛出内存溢出异常。</li><li><strong>弱引用（WeakReference）</strong> ：被弱引用关联的对象只能生存到下一次垃圾收集之前，<strong>当垃圾收集器工作时，无论内存空间是否足够，都会回收掉被弱引用关联的对象</strong>。</li><li><strong>虚引用（PhantomReference）</strong> ：一个对象是否有虛引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象的实例。<strong>为一个对象设置虛引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知(回收跟踪</strong>)。</li></ul><h3 id="强引用：不回收"><a href="#强引用：不回收" class="headerlink" title="强引用：不回收"></a>强引用：不回收</h3><p>1、最常见的引用类型（99%以上都是强引用），也就是我们最常见的普通对象引用，也是默认的引用类型。</p><p>2、当在Java语言中使用new操作符创建一个新的对象， 并将其赋值给一个变量的时候，这个变量就成为指向该对象的一个强引用。</p><p><strong>3、只要强引用的对象是可触及的，垃圾收集器就永远不会回收掉被引用的对象。</strong></p><p>4、对于一个普通的对象，如果<strong>没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为null</strong>，就是可以当做垃圾被收集了，当然具体回收时机还是要看垃圾收集策略。</p><p>5、<strong>软引用、 弱引用和虚引用的对象是软可触及、弱可触及和虛可触及的</strong>，在一定条件下，<strong>都是可以被回收的</strong>。所以，<strong>强引用是造成Java内存泄漏的主要原因之一。</strong></p><hr/><p><strong>例子</strong></p><p>1、<code>StringBuffer str = new StringBuffer (&quot;Hello,尚硅谷&quot;);</code></p><p>局部变量str指向StringBuffer实例所在堆空间，通过str可以操作该实例，那么str就是StringBuffer实例的强引用<br>对应内存结构：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/22/172daabab71a33cf~tplv-t2oaga2asx-watermark.awebp" alt="7"><br>此时,如果再运行一个赋值语句:<code>StringBuffer str1 = str;</code></p><p>对应内存结构:<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/22/172daac11e6cc19b~tplv-t2oaga2asx-watermark.awebp" alt="8"></p><p><strong>本例中的两个引用，都是强引用</strong>，<strong>强引用具备以下特点：</strong></p><ul><li><strong>强引用可以直接访问目标对象</strong></li><li><strong>强引用所指向的对象在任何时候都不会被系统回收，虚拟机宁愿抛出OOM异常，也不会回收强引用所指向对象</strong></li><li><strong>强引用可能导致内存泄漏</strong></li></ul><h3 id="软引用：内存不足就回收"><a href="#软引用：内存不足就回收" class="headerlink" title="软引用：内存不足就回收"></a>软引用：内存不足就回收</h3><p>1、软引用是用来描述一 些还有用，但非必需的对象。<strong>只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收（第一次回收：不可触及对象）</strong>，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p><p>2、软引用通常用来实现内存敏感的缓存。比如：<strong>高速缓存就有用到软引用</strong>。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p><p>3、垃圾回收器在某个时刻决定回收软可达的对象的时候，会清理软引用，并可选地把引用存放到一个<strong>引用队列（ Reference Queue）</strong>。</p><p>类似弱引用，只不过Java虚拟机会尽量让软引用的存活时间长一些，迫不得已才清理。</p><p><strong>4、总结：</strong></p><ul><li>当内存足够: 不会回收软引|用的可达对象</li><li>当内存不够时: 会回收软引用的可达对象</li></ul><p>5、在JDK 1. 2版之后提供了java.lang.ref.SoftReference类来实现软引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> object（）； <span class="comment">//声明强引用</span></span><br><span class="line">SoftReference&lt;0bject&gt; sf = <span class="keyword">new</span> SoftReference&lt;0bject&gt;（obj）；<span class="comment">//创建软引用</span></span><br><span class="line">obj = <span class="keyword">null</span>； <span class="comment">//销毁强引用，这样就只有一个软引用了</span></span><br></pre></td></tr></table></figure><p>6、创建软引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line">SoftReference&lt;User&gt; userSoftRef = <span class="keyword">new</span> SoftReference&lt;User&gt;(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;songhk&quot;</span>));</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line">User u1 = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;songhk&quot;</span>);</span><br><span class="line">SoftReference&lt;User&gt; userSoftRef = <span class="keyword">new</span> SoftReference&lt;User&gt;(u1);</span><br><span class="line">u1 = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="弱引用：发现即回收"><a href="#弱引用：发现即回收" class="headerlink" title="弱引用：发现即回收"></a>弱引用：发现即回收</h3><p>1、弱引用也是用来描述那些非必需对象，<strong>被弱引用关联的对象只能生存到下一次垃圾收集发生为止</strong>。在系统GC时，只要发现弱引用，不管系统堆空间使用是否充足，都会回收掉只被弱引用关联的对象。</p><p>2、由于垃圾回收器的线程通常优先级很低，因此，并不一 定能很快地发现持有弱引用的对象。在这种情况下，<strong>弱引用对象可以存在较长的时间。</strong></p><p>3、弱引用和软引用一样，在构造弱引用时，也可以指定一个<strong>引用队列</strong>，当弱引用对象被回收时，就会加入指定的引用队列，通过这个队列可以跟踪对象的回收情况。</p><p>4、<strong>软引用、弱引用都非常适合来保存那些可有可无的缓存数据</strong>。</p><ul><li>当系统内存不足时，这些缓存数据会被回收，不会导致内存溢出。</li><li>当内存资源充足时，这些缓存数据又可以存在相当长的时间，从而起到加速系统的作用。</li></ul><p>在JDK1.2版之后提后了<code>java.lang.ref.WeakReference</code>类来实现弱引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> object（）； <span class="comment">//声明强引用</span></span><br><span class="line">WeakReference&lt;0bject&gt; sf = <span class="keyword">new</span> WeakReference&lt;0bject&gt;（obj）；</span><br><span class="line">obj = <span class="keyword">null</span>； <span class="comment">//销毁强引用</span></span><br></pre></td></tr></table></figure><p><strong>弱引用对象与软引用对象区别：</strong></p><ul><li>软：当GC在进行回收时，需要通过算法检查是否回收软引用对象</li><li>弱：GC总是进行回收</li></ul><blockquote><p>你开发中使用过WeakHashMap吗？</p></blockquote><p>通过查看WeakHashMap源码,可以看到其内部类Entry使用的就是弱引用</p><h3 id="虚引用：对象回收跟踪"><a href="#虚引用：对象回收跟踪" class="headerlink" title="虚引用：对象回收跟踪"></a>虚引用：对象回收跟踪</h3><p>1、虚引用(Phantom Reference),也称为“幽灵引用”或者“幻影引用”，<strong>是所有引用类型中最弱的一个。</strong></p><p>2、一个对象是否有虚引用的存在，<strong>完全不会决定对象的生命周期</strong>。<strong>如果一个对象仅持有虚引用，那么它和没有引用几乎是一样的，随时都可能被垃圾回收器回收。</strong></p><p>3、它不能单独使用，也无法通过虚引用来获取被引用的对象。当试图通过虚引用的get（）方法取得对象时，总是null。</p><p><strong>4、为一个对象设置虚引用关联的唯一目的在于跟踪垃圾回收过程。比如：能在这个对象被收集器回收时收到一个系统通知。</strong></p><p>5、<strong>虚引用必须和引用队列一起使用</strong>。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它还有虛引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况。</p><p>6、由于虚引用可以跟踪对象的回收时间，因此，也可以将一些资源释放操作放置在虛引用中执行和记录。</p><p>在JDK 1. 2版之后提供了<code>PhantomReference</code>类来实现虚引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">object obj = <span class="keyword">new</span> object();</span><br><span class="line">ReferenceQueuephantomQueue = <span class="keyword">new</span> ReferenceQueue( ) ;</span><br><span class="line">PhantomReference&lt;object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;object&gt;(obj, phantomQueue); </span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h3><ul><li>它用以实现对象的finalize（）方法，也可以称为终结器引用。</li><li>无需手动编码， 其内部配合引用队列使用。</li><li>在GC时， 终结器引用入队。由Finali zer线程通过终结器引用找到被引用对象并调用它的finalize（）方法，第二次GC时才能回收被引用对象。</li></ul><h1 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h1><h2 id="GC分类与性能指标"><a href="#GC分类与性能指标" class="headerlink" title="GC分类与性能指标"></a>GC分类与性能指标</h2><h3 id="GC分类"><a href="#GC分类" class="headerlink" title="GC分类"></a>GC分类</h3><p>1、按照<strong>线程数</strong>分：</p><ul><li><strong>串行垃圾回收器</strong>：同一时间段只允许有一个cpu用于执行垃圾回收操作，此时工作线程被暂停，直到垃圾收集工作结束<ul><li>在单cpu的场合，串行垃圾回收器的性能表现优于并行回收器和并发回收器</li><li><strong>默认被应用在客户端的Client模式下的JVM</strong></li></ul></li><li><strong>并行垃圾回收器</strong>：运用多个cpu同时执行垃圾回收，因此提升了应用的吞吐量<ul><li>独占式，使用STW机制</li></ul></li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f886ddbb6f49a~tplv-t2oaga2asx-watermark.awebp" alt="1" style="zoom:33%;" /><p>2、按照<strong>工作模式</strong>分：</p><ul><li><strong>并发式垃圾回收器</strong>：并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间</li><li><strong>独占式垃圾回收器</strong>：一旦运行就停止所有的用户线程</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f8873dadc3689~tplv-t2oaga2asx-watermark.awebp" alt="2" style="zoom:33%;" /><p>3、按<strong>碎片处理方式</strong>分：</p><ul><li><strong>压缩式垃圾回收器</strong>：会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片<ul><li>再分配对象空间使用：指针碰撞</li></ul></li><li><strong>非压缩式垃圾回收器</strong>：不进行压缩<ul><li>在分配对象空间使用：空闲列表</li></ul></li></ul><p>4、按照<strong>工作的内存空间</strong>分：</p><ul><li><strong>年轻代垃圾回收器</strong></li><li><strong>老年代垃圾回收器</strong></li></ul><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><p><strong><span style="background: yellow;">1、吞吐量：运行用户代码的时间占总运行时间的比例</span></strong></p><ul><li>（总运行时间：程序的运行时间 + 内存回收的时间）</li></ul><p>2、垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例</p><p><strong><span style="background: yellow;">3、暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间</span></strong></p><p>4、收集频率：相对于应用程序的执行，收集操作发生的频率</p><p><strong><span style="background: yellow;">5、内存占用： Java堆区所占的内存大小</span></strong></p><p>6、快速：一个对象从诞生到被回收所经历的时间</p><hr/><p>吞吐量、暂停时间、内存占用三者共同构成一个“不可能三角”，三者总体的表现会随着技术进步而越来越好，<strong>一款优秀的收集器通常最多同时满足其中的两项。</strong></p><p>这三项里，暂停时间的重要性日益凸显，因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量，而内存的扩大，对延迟反而带来负面效果。</p><p><strong>简单来说，主要抓住两点：</strong></p><ul><li><strong>吞吐量</strong></li><li><strong>暂停时间</strong></li></ul><h4 id="吞吐量（throughput）"><a href="#吞吐量（throughput）" class="headerlink" title="吞吐量（throughput）"></a>吞吐量（throughput）</h4><p>1、吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值</p><ul><li><code>吞吐量 = 运行用户代码时间 /（运行用户代码时间+垃圾收集时间）</code></li><li>比如：虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%</li></ul><p>2、这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的。</p><h4 id="暂停时间（pause-time）"><a href="#暂停时间（pause-time）" class="headerlink" title="暂停时间（pause time）"></a>暂停时间（pause time）</h4><p>1、“暂停时间”是指一个时间段内应用程序线程暂停，让GC线程执行的状态</p><ul><li>例如，GC期间100毫秒的暂停时间意味着在这100毫秒期间内没有应用程序线程是活动的。.</li></ul><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><strong>吞吐量优先</strong>，意味着在单位时间内，<strong>STW的总时间最短</strong>： 0.2 + 0.2 &#x3D; 0.4</p><p><strong>暂停时间优先</strong>，意味着尽可能让<strong>单次STW的时间最短</strong>： 0.1 + 0.1 + 0.1 + 0.1+0.1&#x3D;0.5</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88838b4a0d54~tplv-t2oaga2asx-watermark.awebp" alt="3" style="zoom:33%;" /><p>1、<strong>高吞吐量较好</strong>因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快。</p><p>2、<strong>低暂停时间（低延迟）较好</strong>因为从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的200毫秒暂停都可能打断终端用户体验。因此，具有低的较大暂停时间是非常重要的，特别是对于一一个交互式应用程序。</p><p><strong>3、不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标（矛盾）</strong></p><ul><li>因为如果选择以吞吐量优先，那么必然需要<strong>降低内存回收的执行频率</strong>，但是这样会导致GC需要更长的暂停时间来执行内存回收。</li><li>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能<strong>频繁地执行内存回收</strong>，但这又引起了年轻代内存的缩诚和导致程序吞吐量的下降。</li></ul><p>4、在设计（或使用） GC算法时，我们必须确定我们的目标： 一个GC算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折中。</p><p><strong><span style="background: yellow;">5、现在标准：在最大吞吐量优先的情况下，降低停顿时间</span></strong></p><h2 id="不同的垃圾回收器概述"><a href="#不同的垃圾回收器概述" class="headerlink" title="不同的垃圾回收器概述"></a>不同的垃圾回收器概述</h2><h3 id="垃圾收集器发展史"><a href="#垃圾收集器发展史" class="headerlink" title="垃圾收集器发展史"></a>垃圾收集器发展史</h3><p>有了虚拟机，就一定需要收集垃圾的机制，这就是Garbage Collection， 对应的产品我们称为Garbage Collector.</p><ul><li><p>1999年随 JDK1.3.1一 起来的是<strong>串行方式的Serial GC</strong>，它是第一款GC，<strong>ParNew垃圾收集器是Serial收集器的多线程版本</strong></p></li><li><p>2002年2月26日，<strong>Parallel GC和Concurrent Mark Sweep GC</strong>跟随 JDK1.4.2一起发布</p></li><li><p><strong>Parallel GC在JDK6之后成为HotSpot默认GC</strong></p></li><li><p>2012年，在JDK1.7u4版本中，<strong>G1可用</strong>。</p></li><li><p>2017年，JDK9中<strong>G1变成默认的垃圾收集器</strong>，以替代CMS。</p></li><li><p>2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。</p><p>———–分水岭————</p></li><li><p>2018年9月，JDK11发布。<strong>引入Epsilon垃圾回收器</strong>，又被称为”No一Op （无操作） “回收器。<strong>同时，引入ZGC</strong>：可伸缩的低延迟垃圾回收器（Experimental）。</p></li><li><p>2019年3月，JDK12发布。 增强G1，自动返回未用堆内存给操作系统。同时，引入<strong>Shenandoah GC</strong>：低停顿时间的GC （Experimental）。</p></li><li><p>2019年9月，JDK13发布。增强ZGC，自动返回未用堆内存给操作系统。</p></li><li><p>2020年3月，JDK14发布。删除CMS垃圾回收器。扩展ZGC在macOS和Windows.上的应用</p></li></ul><h3 id="7种经典垃圾回收器"><a href="#7种经典垃圾回收器" class="headerlink" title="7种经典垃圾回收器"></a>7种经典垃圾回收器</h3><p>串行回收器：Serial、Serial Old</p><p>并行回收器：ParNew、Paeallel Scavenge、Parallel Old</p><p>并发垃圾回收器：CMS、G1</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f888c00412b4c~tplv-t2oaga2asx-watermark.awebp" alt="4" style="zoom:33%;" /><h3 id="垃圾回收器和垃圾分代的关系"><a href="#垃圾回收器和垃圾分代的关系" class="headerlink" title="垃圾回收器和垃圾分代的关系"></a>垃圾回收器和垃圾分代的关系</h3><ul><li><p>新生代收集器： Serial、 ParNew、Parallel Scavenge</p></li><li><p>老年代收集器： Serial Old、 Parallel Old、 CMS</p></li><li><p>整堆收集器（新生代+老年代）： G1</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88913bd8914c~tplv-t2oaga2asx-watermark.awebp" alt="5"></p></li></ul><h3 id="垃圾回收器的组合关系"><a href="#垃圾回收器的组合关系" class="headerlink" title="垃圾回收器的组合关系"></a>垃圾回收器的组合关系</h3><p>1、两个收集器间有连线，表明它们可以搭配使用： </p><ul><li>Serial、Serial Old</li><li>Serial、CMS</li><li>ParNew、Serial Old</li><li>ParNew、CMS</li><li>Parallel Scavenge、Serial Old</li><li>Parallel Scavenge、Parallel Old</li><li>G1</li></ul><p>2、其中Serial 0ld作为CMS 出现”Concurrent Mode Failure”失败的后 备预案。 </p><p>3、（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、 ParNew+Serial Old这两个组合声明为废弃 ，并在JDK 9中完全取消了这些组合的支持，即：移除。</p><p>4、（绿色虚线）JDK 14中：弃用Parallel Scavenge和SerialOld GC组合</p><p>5、（青色虚线）JDK 14中：删除CMS垃圾回收器</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88972faa533c~tplv-t2oaga2asx-watermark.awebp" alt="6" style="zoom:50%;" /><blockquote><p>为什么要有很多收集器个不够吗？ </p></blockquote><p>因为Java的使用场景很多， 移动端，服务器等；所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。</p><h3 id="如何查看默认的垃圾回收器"><a href="#如何查看默认的垃圾回收器" class="headerlink" title="如何查看默认的垃圾回收器"></a>如何查看默认的垃圾回收器</h3><ul><li><code>-XX：+PrintCommandLineFlags</code>： 查看命令行相关参数（包含使用的垃圾收集器）</li><li>使用命令行指令： <code>jinfo -flag  相关垃圾回收器参数   进程ID</code></li></ul><p><strong>JDK8：默认Parallel GC + Parallel Old GC</strong></p><p><strong>JDK9：默认G1</strong></p><h2 id="Serial回收器：串行回收"><a href="#Serial回收器：串行回收" class="headerlink" title="Serial回收器：串行回收"></a>Serial回收器：串行回收</h2><p>1、Jdk1.3之前回收新生代唯一的选择</p><p>2、Serial收集器是HotSpot中<strong>client模式</strong>下的<strong>默认新生代垃圾回收器</strong></p><p>3、年轻代垃圾回收器：<strong>Serial回收器</strong>，采用<strong>复制算法、串行回收、STW机制</strong>的方式执行内存回收</p><p>4、老年代垃圾回收器：<strong>Serial Old回收器</strong>，采用<strong>标记-压缩算法、串行回收、STW机制</strong></p><ul><li>Client模式下默认的老年代垃圾回收器</li><li>Server模式下主要有两个用途：<ul><li>与新生代的Parallel Scavenge配合使用</li><li>作为CMS的后备方案</li></ul></li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88af4c12170b~tplv-t2oaga2asx-watermark.awebp" alt="9"></p><p>这个收集器是一个<strong>单线程的收集器</strong>，“单线程”的意义：</p><ul><li>说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作</li><li>它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束（Stop The World ）。</li></ul><p>5、<strong>优势</strong>：简单高效（与其他收集器的单线程比，节省切换cpu的时间），运行在Client模式下比较适合</p><p>6、使用<code>+XX:+UseSerialGC</code>指定年轻代和老年代使用串行收集器（年轻：Serial，老年：Serial Old）</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li>这种垃圾收集器了解即可，现在已经不用串行的了，而且在限定单核cpu才可以用，现在都不是单核的了。</li><li>对于交互较强的应用而言，这种垃圾收集器是不能接受的，一般在Javaweb应用程序中是不会采用串行垃圾收集器的。</li></ul><h2 id="ParNew回收器：并行回收"><a href="#ParNew回收器：并行回收" class="headerlink" title="ParNew回收器：并行回收"></a>ParNew回收器：并行回收</h2><p>1、如果说Serial GC是年轻代中的单线程垃圾收集器，那么ParNew收集器则是Serial收集器的多线程版本。</p><ul><li>Par是Parallel的缩写，New： <strong>只能处理新生代</strong></li></ul><p>2、ParNew收集器除了采用<strong>并行回收</strong>的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。</p><p>3、ParNew收集器在年轻代中同样也是采用<strong>复制算法、”Stop一 the一World”机制</strong>。</p><p><strong>4、ParNew是很多JVM运行在Server模式下新生代的默认垃圾收集器</strong> </p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88b5da16f393~tplv-t2oaga2asx-watermark.awebp" alt="10"></p><ul><li><p>对于新生代，回收次数频繁，使用并行方式高效。</p></li><li><p>对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）</p></li></ul><blockquote><p>ParNew收集器是基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比Serial收集器更高效？</p></blockquote><ul><li><p>ParNew 收集器运行在多CPU的环境下，由于可以充分利用多CPU、 多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。</p></li><li><p>但是在<strong>单个CPU的环境下，ParNew收集器不比Serial收集器更高效</strong>。虽然Serial收集器是基于串行回收，但是由于CPU不需要频繁地做任务切换，因此可以有效避免多线程交互过程中产生的一些额外开销。</p></li></ul><p><strong>5、组合方式</strong></p><ul><li>Serial old + ParNew（JDK8移除）</li><li>CMS + ParNew（JDK14移除）</li></ul><p>6、使用”<code>XX:+UseParNewGC</code>手动指定使用ParNew收集器执行内存回收任务，它<strong>表示年轻代使用并行收集器，不影响老年代</strong></p><p><code>-XX:ParallelGCThreads </code>限制线程数量，默认开启和CPU数据相同的线程数。</p><h2 id="Parallel回收器：吞吐量优先"><a href="#Parallel回收器：吞吐量优先" class="headerlink" title="Parallel回收器：吞吐量优先"></a>Parallel回收器：吞吐量优先</h2><p>1、HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外， Parallel Scavenge收集器同样也采用了<strong>复制算法、并行回收和”Stop the World”机制。</strong></p><blockquote><p>那么Parallel收集器的出现是否多此一举？</p></blockquote><ul><li>区别1：Parallel Scavenge收集器的<strong>目标是达到一个可控制的吞吐量（Throughput）</strong>，它也被称为吞吐量优先的垃圾收集器。</li><li>区别2：<strong>自适应调节策略</strong></li></ul><p>2、高吞吐量则可以高效率地利用CPU 时间，尽快完成程序的运算任务，主要<strong>适合在后台运算而不需要太多交互的任务</strong>。因此，常见在<strong>服务器环境中使用</strong>。例如，那些<strong>执行批量处理、订单处理、工资支付、科学计算的应用程序</strong>。</p><p>3、Parallel收集器在JDK1.6时提供了用于执行老年代垃圾收集的 <strong>Parallel Old收集器</strong>，用来代替老年代的Serial Old收集器（串行会拖累性能）。</p><hr/><p><strong>工作原理</strong></p><p>4、Parallel 0ld收集器采用了<strong>标记一压缩算法，但同样也是基于并行回收和”Stop一the一World”机制</strong>。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88bd8272c80d~tplv-t2oaga2asx-watermark.awebp" alt="11"></p><p>在程序吞吐量优先的应用场景中，Parallel 收集器和Parallel 0ld收集器的组合，在Server模式下的内存回收性能很不错。</p><p><strong>在Java8中，默认是此垃圾收集器</strong></p><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><ul><li><code>-XX:+UseParallelGC</code>：手动指定 年轻代使用Parallel并行收集器执行内存回收任务。</li><li><code>-XX:+UseParallelOldGc</code>：手动指定老年代都是使用并行回收收集器。<ul><li>分别适用于新生代和老年代，默认jdk8是开启的。</li><li>上面两个参数，<strong>默认开启一个，另一个也会被开启（互相激活）</strong></li></ul></li><li><code>-XX:ParallelGCThreads</code>：设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。<ul><li>在默认情况下，当CPU数量小于8个， ParallelGCThreads 的值等于CPU数量</li><li>当CPU数量大于8个， ParallelGCThreads的值等于3+[5*CPU_ Count]&#x2F;8]</li></ul></li><li><code>-XX:MaxGCPauseMillis</code>：设置垃圾收集器最大停顿时间（即STW的时间），单位是毫秒<ul><li>为了尽可能地把停顿时间控制在MaxGCPauseMills以内，收集器在工作时会调整Java堆大小或者其他一些参数</li><li>对于用户来讲，停顿时间越短体验越好。但是<strong>在服务器端，我们注重高并发，整体的吞吐量，所以服务器端适合Parallel</strong>，进行控制</li></ul></li><li><code>-XX:GCTimeRatio</code>：垃圾收集时间占总时间的比例（&#x3D; 1 &#x2F; （N + 1））用于衡量吞吐量的大小。<ul><li>取值范围（0， 100），<strong>默认值99，也就是垃圾回收时间不超过1%</strong></li><li>与前一个<code>-XX:MaxGCPauseMillis</code>参数有一定矛盾性，暂停时间越长，Radio参数就容易超过设定的比例。</li></ul></li><li><code>-XX:+UseAdaptiveSizePolicy</code>：设置Parallel Scavenge收集器具有<strong>自适应调节策略</strong><ul><li>在这种模式下，<strong>年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整</strong>，已达到在堆大小、吞吐量和停顿时间之间的平衡点。</li><li>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定<strong>虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMills），让虚拟机自己完成调优工作</strong></li></ul></li></ul><h2 id="CMS回收器：低延迟"><a href="#CMS回收器：低延迟" class="headerlink" title="CMS回收器：低延迟"></a>CMS回收器：低延迟</h2><p>1、CMS（Concurrent - Mark - Sweep，并发-标记-清除）收集器：<strong>第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作</strong></p><p>2、CMS收集器的关注点：<strong>低延迟</strong></p><ul><li><p>停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验</p></li><li><p>目前很大一部分的Java应用集中在互联网站或者B&#x2F;S系统的服务端上，这类应用尤其<strong>重视服务的响应速度</strong>，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。</p></li></ul><p>3、CMS的垃圾 收集算法采用<strong>标记一清除算法，并且也会” stop一the一world”</strong></p><p>4、CMS 作为老年代的收集器<strong>，新生代只能选择ParNew或者Serial收集器</strong></p><p>5、在G1出现之前，CMS使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS GC。</p><hr/><p><strong>工作原理</strong></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88c4cd91d748~tplv-t2oaga2asx-watermark.awebp" alt="12"></p><p>整个过程分为4个主要阶段：<strong>初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段</strong></p><p><strong>1、初始标记（STW、时间短）</strong></p><p>工作线程因为“Stop一the一World”机制而出现暂停，这个阶段的主要任务<strong>仅仅只是标记出GCRoots能直接关联到的对象</strong>。一旦标记完成之后就会恢复之前被暂停的所有应用线程，由于直接关联对象比较小，所以这里的<strong>速度非常快</strong></p><p><strong>2、并发标记（并发、时间长）</strong></p><p><strong>从GC Roots的直接关联对象开始遍历整个对象图的过程</strong>，这个过程<strong>耗时较长但是不需要停顿用户线程</strong>，可以与垃圾收集线程一起并发运行。</p><p><strong>3、重新标记（STW、时间中等）</strong></p><p>由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了<strong>修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录</strong>，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</p><p><strong>4、并发清除（并发）</strong></p><p>此阶段清理<strong>删除掉标记阶段判断的已经死亡的对象</strong>，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的，会存在碎片问题</p><hr/><p>1、由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的</p><p>2、由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是<strong>当堆内存使用率达到某一阈值时，便开始进行回收</strong>，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。</p><p>要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：<strong>临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</strong></p><p>3、CMS收集器的垃圾收集算法采用的是<strong>标记一清除算法</strong>，这意味着每次执行完内存回收后不可避免地将会产生一些<strong>内存碎片</strong>。 那么CMS在为新对象分配内存空间时只能够选择<strong>空闲列表（Free List） 执行内存分配。</strong></p><blockquote><p>为什么不使用标记压缩算法呢？</p></blockquote><p>因为清除阶段是并发的，标记压缩需要进行整理内存（会改变对象地址），这样会影响用户线程</p><p><strong>4、优点</strong></p><ul><li>并发收集</li><li>低延迟</li></ul><p><strong>5、弊端</strong></p><ul><li>内存碎片：碎片化严重，导致无法分配大对象，提前触发full gc</li><li>对CPU资源敏感：在并发阶段会因为占用一部分线程导致应用程序变慢，吞吐量降低</li><li>无法处理浮动垃圾：可能出现“Concurrent Mode Failure” 失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS将 无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，从而只能在下一次执行GC时释放这些之前未被回收的内存空间。</li></ul><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>如果你想要最小化地使用内存和并行开销，请选Serial GC；<br>如果你想要最大化应用程序的吞吐量，请选Parallel GC；<br>如果你想要最小化GC的中断或停顿时间，请选CMS GC。</p><h2 id="G1回收器：区域化分代式"><a href="#G1回收器：区域化分代式" class="headerlink" title="G1回收器：区域化分代式"></a>G1回收器：区域化分代式</h2><blockquote><p><strong>既然我们已经有了前面几个强大的GC，为什么还要发布Garbage First （G1）GC？</strong></p></blockquote><p>原因就在于应用程序所应对的业务越来越庞大、复杂，用户越来越多，没有GC就不能保证应用程序正常进行，而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。G1 （Garbage一First） 垃圾回收器是在Java7 update4之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。</p><p>与此同时，为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间（pause time） ，同时兼顾良好的吞吐量。</p><p><strong>官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望</strong></p><blockquote><p><strong>为什么名字叫做Garbage First （G1）呢？</strong></p></blockquote><p>1、因为G1是一个<strong>并行回收器</strong>，它<strong>把堆内存分割为很多不相关的区域（Region）</strong>（物理上不连续的），<strong>使用不同的Region来表示Eden、幸存者0区，幸存者1区，老年代等。</strong></p><p>2、G1 GC有计划地避免在整个Java 堆中进行全区域的垃圾收集。G1跟踪各个Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。</p><p>3、由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给G1一个名字：垃圾优先（Garbage First） 。</p><p>4、G1 （Garbage一First） 是一款<strong>面向服务端应用</strong>的垃圾收集器，<strong>主要针对配备多核CPU及大容量内存的机器</strong>，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。</p><p>5、在JDK1. 7版本正式启用，移除了Experimental的标识，<strong>是JDK 9以后的默认垃圾回收器</strong>，取代了CMS回收器以及Parallel + Parallel Old组合。被Oracle官方称为<strong>“全功能的垃圾收集器”</strong> 。</p><p>6、与此同时，CMS已经在JDK 9中被标记为废弃（deprecated） ，在jdk8中G1 GC还不是默认的垃圾回收器，需要使用<code>-XX:+UseG1GC</code>来启用。</p><h3 id="优势和缺点"><a href="#优势和缺点" class="headerlink" title="优势和缺点"></a>优势和缺点</h3><p>与其他GC收集器相比，G1使用了全新的分区算法，其特点如下所示：</p><p><strong>1、兼具并行与并发</strong></p><ul><li><strong>并行性</strong>： G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力，此时用户线程STW</li><li><strong>并发性</strong>： G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况</li></ul><p><strong>2、分代收集</strong></p><ul><li>从分代上看，<strong>G1依然属于分代型垃圾回收器</strong>，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构，上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。</li><li><strong>将堆空间分为若干个区域（Region） ，这些区域中包含了逻辑上的年轻代和老年代</strong></li><li>和之前的各类回收器不同，它同时<strong>兼顾年轻代和老年代</strong>。对比其他回收器，或者工作在年轻代，或者工作在老年代；</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88d5eaac9036~tplv-t2oaga2asx-watermark.awebp" alt="14" style="zoom: 33%;" /><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88dad2adfacc~tplv-t2oaga2asx-watermark.awebp" alt="15" style="zoom:33%;" /><p><strong>3、空间整合（针对碎片化问题）</strong></p><ul><li>CMS： “标记一清除”算法、内存碎片、若干次GC后进行一次碎片整理</li><li>G1：将内存划分为一个个的region， 内存的回收是以region作为基本单位的。<strong>Region之间是复制算法</strong>，但<strong>整体上实际可看作是标记一压缩（Mark一Compact）算法</strong>，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。</li></ul><p><strong>4、可预测的停顿时间模型（即：软实时soft real一time）</strong> </p><p>这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p><ul><li>由于分区的原因，G1可以只选取部分区域进行内存回收，这样<strong>缩小了回收的范围</strong>，因此对于全局停顿情况的发生也能得到较好的控制。</li><li>G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个<strong>优先列表</strong>，<strong>每次根据允许的收集时间，优先回收价值最大的Region</strong>。保证了G1 收集器在有限的时间内可以<strong>获取尽可能高的收集效率</strong>。</li><li>相比于CMS GC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。</li></ul><hr/><p><strong>缺点</strong></p><p>相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint） 还是程序运行时的额外执行负载（overload） 都要比CMS要高。</p><p>从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用，上则发挥其优势。平衡点在6一8GB之间。</p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><p><code>-XX:+UseG1GC</code> 手动指定使用G1收集器执行内存回收任务。</p><p><code>-XX:G1HeapRegionSize</code> 设置每个Region的大小，<strong>值是2的幂，范围是1MB 到32MB之间</strong>，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1&#x2F;2000。</p><p><code>-XX:MaxGCPauseMillis</code> 设置期望达到的最大GC<strong>停顿时间指标</strong>（JVM会尽力实现，但不保证达到），默认值是200ms</p><p><code>-XX:ParallelGCThread</code> 设置sTw.工作线程数的值，最多设置为8</p><p><code>-XX:ConcGCThreads</code> 设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGCThreads）的1&#x2F;4左右。</p><p><code>-XX:InitiatingHeapOccupancyPercent</code> 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。</p><h4 id="常见操作步骤"><a href="#常见操作步骤" class="headerlink" title="常见操作步骤"></a>常见操作步骤</h4><p>设计原则：简化JVM调优</p><p>第一步：开启G1垃圾收集器</p><p>第二步：设置堆的最大内存（-xmx、-xms）</p><p>第三步：设置最大停顿时间（<code>-XX:MaxGCPauseMillis</code>）</p><p><strong>G1提供三种垃圾回收模式：Young GC、Mixed GC、Full GC</strong></p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>1、服务端应用，具有大内存、多处理器的机器</p><p>2、需要<strong>低GC延迟</strong>，并具有<strong>大堆</strong>的应用程序提供解决方案</p><ul><li>如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒（ G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次GC停顿时间不会过长）</li></ul><p><strong>3、用来替换掉JDK1.5中的CMS收集器：</strong></p><p> 在下面的情况时，使用G1可能比CMS好：</p><ul><li><p>超过50%的Java堆被活动数据占用；</p></li><li><p>对象分配频率或年代提升频率变化很大；</p></li><li><p>GC停顿时间过长（长于0. 5至1秒）。</p></li></ul><p>4、HotSpot垃圾收集器里，除了G1以外，其他的垃圾收集器使用内置的JVM线程执行 GC的多线程操作，而<strong>G1 GC可以采用应用线程承担后台运行的GC工作</strong>，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。</p><h3 id="Region"><a href="#Region" class="headerlink" title="Region"></a>Region</h3><p>使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB， 2MB， 4MB， 8MB， 1 6MB， 32MB。</p><p>可以通过<code>-XX:G1HeapRegionSize</code>设定。所有的Region大小相同，且在JVM生命周期内不会被改变。</p><p>虽然还保留有新生代和老年代的概念，但<strong>新生代和老年代不再是物理隔离的</strong>了，它们都是一部分Region （不需要连续）的集合。通过Region的动态分配方式实现逻辑上的连续。 </p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88e292405e6f~tplv-t2oaga2asx-watermark.awebp" alt="16"></p><p>角色：</p><ul><li>E：Eden区</li><li>S：Survivor区</li><li>O：Old区</li><li>H：Humongous区，存储超过0.5个region的大对象<ul><li>默认大对象被分配给Old区，但是如果这个对象短期存在，就会对垃圾收集器造成负面影响</li><li>如果一个H区装不下，就会寻找连续的H区存储</li><li>为了能找到连续的H区，有时候不得不启动Full GC</li><li>G1的大多数行为都把H区作为老年代的一部分来看待</li></ul></li><li>空白：未使用的内存空间</li></ul><p>每一个分配的Region，都可以分成两个部分：<strong>已分配的和未被分配的</strong>。它们之间的<strong>界限被称为top</strong>。总体上来说，把一个对象分配到Region内，只需要简单增加top的值，这个做法实际上就是bump-the-pointer（指针碰撞），过程如下：</p><img src="https://upload-images.jianshu.io/upload_images/2579123-edee235835bfb8ac.png?imageMogr2/auto-orient/strip|imageView2/2/w/476" alt="img" style="zoom:67%;" /><p>Region可以说是G1回收器一次回收的最小单元，即<strong>每一次回收都是回收N个Region</strong>。这个N是多少，主要受到G1回收的效率和用户设置的软实时目标有关</p><p>每一次的回收，<strong>G1会选择可能回收最多垃圾的Region进行回收</strong>。与此同时，G1回收器会维护一个空间Region的链表。每次回收之后的Region都会被加入到这个链表中</p><p>每一次都只有一个Region处于被分配的状态中，被称为current region。<strong>在多线程的情况下，这会带来并发的问题。G1回收器采用和CMS一样的TLABs的手段</strong>。即为每一个线程分配一个Buffer，线程分配内存就在这个Buffer内分配。但是当线程耗尽了自己的Buffer之后，需要申请新的Buffer，这个时候依然会带来并发的问题，G1回收器采用的是CAS（Compate And Swap）操作</p><blockquote><p>为线程分配Buffer的过程大概是：</p><ol><li>记录top值；</li><li>准备分配；</li><li>比较记录的top值和现在的top值，如果一样，则执行分配，并且更新top的值；否则，重复1；</li></ol></blockquote><h3 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h3><p>1、初始标记（STW）：暂停其他线程，记录下gc roots直接引用的对象</p><p>2、并发标记：同CMS</p><p>3、最终标记（STW）：同CMS</p><p>4、筛选回收（STW）：首先对各个Region的回收价值和成本进行排序，根据用户期望的GC停顿STW时间制定回收计划，<strong>回收算法主要使用复制算法，将一个region中的存活对象复制到另外一个region中</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e960608c62274e6eaa135547320501ac~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="G1垃圾收集分类"><a href="#G1垃圾收集分类" class="headerlink" title="G1垃圾收集分类"></a>G1垃圾收集分类</h3><blockquote><p>三个环节：</p><ul><li>年轻代GC（Young GC）</li><li>老年代并发标记过程（Concurrent Marking）</li><li>混合回收（Mixed GC）</li><li>如果需要，单线程、独占式、高强度的Full GC还是会继续存在，针对GC的评估失败提供了一种失败保护机制，即强力回收</li></ul></blockquote><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88e82e57b525~tplv-t2oaga2asx-watermark.awebp" alt="17"></p><p>顺时针， young gc 一&gt; young gc + concurrent mark 一&gt; Mixed GC顺序，进行垃圾回收</p><p>1、应用程序分配内存，当年轻代的Eden区用尽时开始年轻代回收过程； G1的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1 GC暂停所有应用程序线程，启动多线程执行年轻代回收。<strong>然后从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。</strong></p><p>2、当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。</p><p>3、标记完成马上开始<strong>混合回收过程</strong>，对于一个混合回收期，G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，<strong>G1的老年代回收器不需要整个老年代被回收，一次只需要扫描&#x2F;回收一小部分老年代的Region就可以了</strong>。同时，这个老年代Region是和年轻代一起被回收的。</p><hr/><p><strong>回收过程一：年轻代GC</strong></p><p>JVM启动时，G1 先准备好Eden区，程序在运行过程中不断创建对象到Eden区，<strong>当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。</strong></p><p><strong>年轻代垃圾回收只会回收Eden区和Survivor区。</strong></p><p>YGC时，首先G1停止应用程序的执行（Stop一The一World），G1创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88f5d8bec04e~tplv-t2oaga2asx-watermark.awebp" alt="19" style="zoom:50%;" /><p>回收过程：</p><ul><li><p><strong>第一阶段，扫描根</strong></p><p>根引用连同记忆集记录的外部引用作为扫描存活对象的入口</p></li><li><p><strong>第二阶段，更新记忆集</strong></p><p>处理dirty card queue中的card，更新RSet。 此阶段完成后，<strong>记忆集可以准确的反映老年代对所在的内存分段中对象的引用</strong></p></li><li><p><strong>第三阶段，处理记忆集</strong></p><p>识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象</p></li><li><p><strong>第四阶段，复制对象</strong></p><p>遍历对象树</p><ul><li>Eden区内存段中存活的对象会被复制到Survivor区中空的内存分段</li><li>Survivor区内存段中存活的对象如果年龄未达阈值，年龄会加1</li><li>达到阀值会被会被复制到Old区中空的内存分段</li><li>如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间</li></ul></li><li><p><strong>第五阶段，处理引用</strong></p><p>处理Soft，Weak， Phantom， Final， JNI Weak等引用</p><p>最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。</p></li></ul><hr/><p><strong>回收过程二：并发标记过程</strong></p><p><strong>1、初始标记阶段</strong>：标记从根节点直接可达的对象，这个阶段是STW的，并且会<strong>触发一次年轻代GC</strong></p><p><strong>2、根区域扫描（Root Region Scanning）</strong> ： G1 GC 扫描Survivor区 直接可达的老年代区域对象，并标记被引用的对象。这一过程必 须在young GC之前完成。</p><p><strong>3、并发标记（Concurrent Marking）</strong>： 在整个堆中进行并发标记（和应用程序并发执行），此过程可能被young GC中断。在并发标记阶段，<strong>若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收</strong>。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。</p><p><strong>4、再次标记（Remark）</strong>： 由 于应用程序持续进行，需要修正上一次的标记结果。是STW的。G1中采用了比CMS更快的初始快照算法：snapshot一at一the一beginning （SATB）。</p><p><strong>5、独占清理（cleanup，STW）</strong>：计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是STW的。</p><p>这个阶段并不会实际上去做垃圾的收集</p><p><strong>并发清理阶段：</strong>识别并清理完全空闲的区域。</p><hr/><p><strong>回收过程三：混合回收</strong></p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f8907bb964563~tplv-t2oaga2asx-watermark.awebp" alt="20" style="zoom:33%;" /><p>当越来越多的对象晋升到老年代old region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC， 该算法并不是一个Old GC，除了回收整个Young Region，还会回收一部分的Old Region。</p><p>这里需要注意：<strong>是一部分老年代， 而不是全部老年代</strong>。可以选择哪些OldRegion进行收集，从而可以对垃圾回收的耗时时间进行控制</p><hr/><p><strong>Full GC</strong></p><p>G1的初衷就是要避免Full GC的出现。但是如果上述方式不能正常工作，G1会停止应用程序的执行（Stop一 The一World），使用单线程的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。</p><p>要避免Full GC的发生，一旦发生需要进行调整。什么时候会发生Full GC呢？比如堆内存太小，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到full gc， 这种情况可以通过增大内存解决。</p><p>导致G1Full GC的原因可能有两个：</p><ul><li>Evacuation的时候没有足够的to一 space来存放晋升的对象；</li><li>并发处理过程完成之前空间耗尽。</li></ul><h3 id="记忆集"><a href="#记忆集" class="headerlink" title="记忆集"></a>记忆集</h3><p>一个对象被不同区域引用的问题(<strong>分代引用问题</strong>)</p><blockquote><p>一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？</p></blockquote><p>在其他的分代收集器，也存在这样的问题（ 而G1更突出）</p><p>回收新生代也不得不同时扫描老年代？</p><p>这样的话会降低MinorGC的效率；</p><p><strong>解决方法：</strong></p><ul><li>无论G1还是其他分代收集器，JVM都是使用RememberedSet来避免全局扫描：</li><li><strong>每个Region都有一个对应的Remembered Set；</strong></li><li>每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作； .</li><li>然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region （其他收集器：检查老年代对象是否引用了新生代对象） ；</li><li>如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中；</li><li>当进行垃圾收集时，<strong>在GC根节点的枚举范围加入Remembered Set</strong>；就可以保证<strong>不进行全局扫描，也不会有遗漏</strong>。</li></ul><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f88f075afe7cf~tplv-t2oaga2asx-watermark.awebp" alt="18" style="zoom:50%;" /><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/28/172f890f1baad386~tplv-t2oaga2asx-watermark.awebp" alt="21"></p><p><strong>怎么选择垃圾回收器</strong></p><p>1、Java垃圾收集器的配置对于JVM优化来说是一个很重要的选择，选择合适的垃圾收集器可以让JVM的性能有一个很大的提升。</p><p>2、怎么选择垃圾收集器？</p><ul><li>优先调整堆的大小让JVM自适应完成。</li><li>如果内存小于100M，使用串行收集器</li><li>如果是单核、单机程序，并且没有停顿时间的要求，串行收集器</li><li>如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择</li><li>如果是多CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用），使用并发收集器</li></ul><p>官方推荐G1，性能高。现在互联网的项目，基本都是使用G1</p><h2 id="ZGC回收器"><a href="#ZGC回收器" class="headerlink" title="ZGC回收器"></a>ZGC回收器</h2><p>ZGC与Shenandoah目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的低延迟。</p><p>ZGC收集器是一款<strong>基于Region内存布局的</strong>，<strong>（暂时） 不设分代的</strong>，使用了<strong>读屏障、染色指针和内存多重映</strong>射等技术来实现可并发的<strong>标记一压缩算法</strong>的，以<strong>低延迟为首要目标</strong>的一款垃圾收集器。</p><p>ZGC的工作过程可以分为4个阶段：<strong>并发标记一并发预备重分配一并发重分配一并发重映射等</strong></p><h1 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>1、在Java中数据类型分为基本数据类型和引用数据类型。<strong>基本数据类型由虚拟机预先定义，引用数据类型则需要进行类的加载</strong></p><p>2、类的整个生命周期包括如下7个阶段:</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/977a64c89d7047c392641647b211d386~tplv-k3u1fbpfcp-watermark.image" alt="61" style="zoom: 33%;" /><p>其中，验证+准备+解析&#x3D;链接</p><p>从程序中类的使用过程看:</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9215e7fc89634f54ac5a77fbff1eaf9e~tplv-k3u1fbpfcp-watermark.image" alt="62" style="zoom: 33%;" /><h2 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h2><p><strong>加载的理解</strong></p><p><strong>将Java类的字节码文件加载到机器内存中，并在内存中构建出Java类的原型一一类模板对象</strong></p><p>所谓类模板对象，其实就是Java类在JVM内存中的一个快照，<strong>JVM将从字节码文件中解析出的常量池、类字段、类方法等信息存储到类模板中</strong>，这样JVM在运行期便能通过类模板而获取Java类中的任意信息，能够对Java类的成员变量进行遍历，也能进行Java方法的调用。</p><p><strong>反射的机制即基于这一基础，如果JVM没有将Java类的声明信息存储起来，则JVM在运行期也无法反射。</strong></p><hr/><p><strong>加载完成的操作</strong></p><p>加载阶段，简言之：<strong>查找并加载类的二进制数据，生成Class的实例。</strong></p><p>在加载类时，Java虚拟机必须完成以下3件事情:</p><ul><li>通过类的全名，获取类的二进制数据流。</li><li>解析类的二进制数据流为<strong>方法区内的数据结构（Java类模型）</strong></li><li><strong>创建java.lang.Class类的实例</strong>，表示该类型，作为方法区这个类的各种数据的访问入口</li></ul><h3 id="获取二进制数据流"><a href="#获取二进制数据流" class="headerlink" title="获取二进制数据流"></a>获取二进制数据流</h3><p>对于类的二进制数据流，虚拟机可以通过多种途径产生或获得。（只要所读取的字节码符合JVM规范即可）</p><ul><li><strong>虚拟机可能通过文件系统读入一个class后缀的文件</strong>（最常见）</li><li>读入jar、zip等归档数据包，提取类文件</li><li>事先存放在数据库中的类的二进制数据</li><li>使用类似于HTTP之类的协议通过网络进行加载</li><li>在运行时生成一段Class的二进制信息等</li></ul><p>在获取到类的二进制信息后，Java虚拟机就会处理这些数据，并最终转为一个java.lang.Class的实例。</p><p>如果输入数据不是ClassFile的结构，则会抛出ClassFormatError（比如如果不是cafebabe开头，就会抛出ClassFormatError）</p><h3 id="类模型与Class实例"><a href="#类模型与Class实例" class="headerlink" title="类模型与Class实例"></a>类模型与Class实例</h3><p><strong>1、类模型的位置</strong></p><p>加载的类在JVM中创建相应的类结构，类结构会存储在<strong>方法区</strong>（JDK1.8之前：永久代；JDK1.8及之后：元空间） </p><p><strong>2、Class实例的位置</strong></p><p>类将.class文件加载至元空间后，会<strong>在堆中创建一个Java.lang.Class对象</strong>，用来封装类位于方法区内的数据结构，该Class对象是在加载类的过程中创建的，每个类都对应有一个Class类型的对象。（instanceKlass -&gt; mirror : Class的实例） </p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f60f27a2c764f628b0dc60dbcf9e1b4~tplv-k3u1fbpfcp-watermark.image" alt="63" style="zoom:30%;" /><p><strong>外部可以通过访问代表Order类的Class对象来获取Order的类数据结构</strong></p><p>Class类的构造方法是私有的，只有JVM才可以创建</p><p><strong>java.lang.Class实例是访问类型元数据的接口，也是实现反射的关键数据、入口。</strong>通过Class类提供的接口，可以获得目标类所关联的.class文件中具体的数据结构:方法、字段等信息。</p><h3 id="数组类的加载"><a href="#数组类的加载" class="headerlink" title="数组类的加载"></a>数组类的加载</h3><p>创建数组类的情况稍微有些特殊，因为<strong>数组类本身并不是由类加载器负责创建</strong>，而是由JVM在运行时根据需要而直接创建的，但<strong>数组的元素类型仍然需要依靠类加载器去创建</strong>。</p><p>创建数组类（下述简称A）的过程:</p><ul><li><p>如果数组的元素类型是引用类型（<code>String[]</code>），那么就遵循定义的加载过程递归加载和创建数组A的元素类型（加载String）；</p></li><li><p>JVM使用指定的元素类型和数组维度来创建新的数组类</p></li></ul><p>如果数组的元素类型是引用类型，数组类的可访问性就由元素类型的可访问性决定</p><p>如果数组的元素类型是基本数据类型，类的可访问性将被缺省定义为public</p><h2 id="链接阶段"><a href="#链接阶段" class="headerlink" title="链接阶段"></a>链接阶段</h2><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>1、目的：保证加载的字节码是合法、合理并符合规范的</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab04b80d35714acbad1c9cb0a8a018ed~tplv-k3u1fbpfcp-watermark.image" alt="64" style="zoom:23%;" /><p>说明：</p><p><strong>1、格式验证：</strong>和加载阶段一起运行</p><p>下面三个验证是针对方法区的类模版对象：</p><p><strong>2、语义检查：</strong>查看语法是否符合规范</p><ul><li>是否所有的类都有父类的存在</li><li>是否继承final</li><li>非抽象的类是否实现了抽象方法或者接口方法</li></ul><p><strong>3、字节码检查</strong></p><p><strong>4、符号引用验证：</strong>符号引用的直接引用是否存在</p><ul><li><p>如果一个需要使用类无法在系统中找到，则会抛出NoClassDefFoundError，如果一个方法无法被找到，则会抛出NoSuchMethodError.</p></li><li><p><strong>此阶段在解析环节才会执行</strong></p></li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><strong>1、为类的静态变量分配内存，并初始化默认值</strong></p><p><strong>2、这里不包含基本数据类型的字段用<code>static final</code>修饰的情况，因为final在编译的时候就会分配了，准备阶段会显式赋值。</strong></p><p>3、注意这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中</p><p>4、在这个阶段并不会像初始化阶段中那样会有初始化或者代码被执行</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>1、<strong>将类、接口、字段和方法的符号引用转为直接引用</strong></p><p>2、<strong>符号引用</strong>：就是一些字面量的引用，和虚拟机的内部数据结构和和内存布局无关。</p><p>比较容易理解的就是在Class类文件中，通过常量池进行了大量的符号引用。但是在程序实际运行时，只有符号引用是不够的，比如当如下println（）方法被调用时，系统需要明确知道该方法的位置。</p><p>举例: 输出操作<code>System.out.println()</code>对应的字节码</p><p><code>invokevirtual #24 &lt;java/io/PrintStream.println&gt;</code></p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b2f65e2689c431b8849ae33fb44ea85~tplv-k3u1fbpfcp-watermark.image" alt="66" style="zoom:23%;" /> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/61f829cbe60348659d39267c7aaa03f6~tplv-k3u1fbpfcp-watermark.image" alt="67" style="zoom: 87%;" /><p>以方法为例，Java虚拟机为每个类都准备了一张方法表，将其所有的方法都列在表中，当需要调用一个类的方法的时候，只要知道这个方法在方法表中的偏移量就可以直接调用该方法。<strong>通过解析操作，符号引用就可以转变为目标方法在类中方法表中的位置，从而使得方法被成功调用</strong>。</p><p><strong>2.小结</strong><br>所谓解析就是将<strong>符号引用转为直接引用</strong>，也就是得到类、字段、方法在内存中的<strong>指针或者偏移量</strong>。因此，如果直接引用存在，那么可以肯定系统中存在该类、方法或者字段。但只存在符号引用，不能确定系统中一定存在该结构。</p><p>不过Java虚拟机规范并没有明确要求解析阶段一定要按照顺序执行。在HotSpot VM中，加载、验证、准备和初始化会按照顺序有条不紊地执行，但<strong>链接阶段中的解析操作往往会伴随着JVM在执行完初始化之后再执行</strong>。</p><h2 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h2><p><strong>1、初始化静态变量，赋予正确的值</strong></p><p><strong>2、初始化阶段才开始执行类中定义的java程序代码</strong></p><p>3、重要工作：**<code>&lt;clint&gt;()</code>**方法</p><ul><li>该方法自动生成</li><li><strong>类静态变量的赋值语句+静态代码块语句</strong></li></ul><p>4、父类的**<code>&lt;clint&gt;()</code><strong>方法优先于子类的</strong><code>&lt;clint&gt;()</code>**方法</p><blockquote><p>什么情况下不生成**<code>&lt;clint&gt;()</code>**方法？</p></blockquote><ul><li>没有声明类变量、静态代码块</li><li>有类变量，但没有显式赋值</li><li>只有静态常量<code>static final</code>（在准备阶段就显式赋值了）</li></ul><p>5、static+final搭配问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 结论：</span></span><br><span class="line"><span class="comment"> * 在链接阶段的准备环节赋值的情况：</span></span><br><span class="line"><span class="comment"> * 1. 对于基本数据类型的字段来说，如果使用static final修饰，则显式赋值(直接赋值常量，而非调用方法）通常是在链接阶段的准备环节进行</span></span><br><span class="line"><span class="comment"> * 2. 对于String来说，如果使用字面量的方式赋值，使用static final修饰的话，则显式赋值通常是在链接阶段的准备环节进行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在初始化阶段&lt;clinit&gt;()中赋值的情况：</span></span><br><span class="line"><span class="comment"> * 排除上述的在准备环节赋值的情况之外的情况。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 最终结论：使用static + final修饰，且显示赋值中不涉及到方法或构造器调用的基本数据类型或String类型的显式赋值，是在链接阶段的准备环节进行。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializationTest2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INT_CONSTANT = <span class="number">10</span>;<span class="comment">//在链接阶段的准备环节赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer INTEGER_CONSTANT1 = Integer.valueOf(<span class="number">100</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer INTEGER_CONSTANT2 = Integer.valueOf(<span class="number">1000</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String s0 = <span class="string">&quot;helloworld0&quot;</span>;<span class="comment">//在链接阶段的准备环节赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String s1 = <span class="keyword">new</span> String(<span class="string">&quot;helloworld1&quot;</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s2 = <span class="string">&quot;helloworld2&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM = <span class="number">2</span>;<span class="comment">//字面量，在链接阶段的准备环节赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM1 = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);<span class="comment">//在初始化阶段&lt;clinit&gt;()中赋值，编译阶段确定不了具体值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、**<code>&lt;clint&gt;()</code>**线程安全性问题</p><p>虚拟机会保证一个类的**<code>&lt;clint&gt;()</code><strong>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的</strong><code>&lt;clint&gt;()</code><strong>方法，其他线程都需要</strong>阻塞等待<strong>，直到活动线程执行</strong><code>&lt;clint&gt;()</code>**方法完毕。</p><p>正是因为**<code>&lt;clint&gt;()</code><strong>带锁线程安全的，因此，如果在一个类的</strong><code>&lt;clint&gt;()</code>**方法中有耗时很长的操作，就可能造成多个线程阻塞，引发死锁，并且这种死锁是很难发现的，因为看起来它们并没有可用的锁信息。</p><p>如果之前的线程成功加载了类，则等在队列中的线程就没有机会再执行**<code>&lt;clint&gt;()</code>**方法了。那么，当需要使用这个类时虚拟机会直接返回给它已经准备好的信息</p><h3 id="类的主动使用和被动使用"><a href="#类的主动使用和被动使用" class="headerlink" title="类的主动使用和被动使用"></a>类的主动使用和被动使用</h3><h4 id="主动使用"><a href="#主动使用" class="headerlink" title="主动使用"></a>主动使用</h4><p><strong>会调用类的<code>&lt;clint&gt;()</code>方法</strong></p><p>如果出现如下的情况，则会对类进行初始化操作，而<strong>初始化操作之前的加载、验证、准备已经完成：</strong></p><p>1、当<strong>创建一个类的实例</strong>时，比如使用new关键字，或者通过反射、克隆、反序列化。</p><p>2、当<strong>调用类的静态方法</strong>时，即当使用了字节码invokestatic指令。</p><p>3、当<strong>使用类、接口的静态字段</strong>时（final修饰特殊考虑），比如，使用getstatic或者putstatic指令。（对应访问变量、赋值变量操作）</p><p>4、当<strong>使用java.lang.reflect包中的方法反射类的方法</strong>时。比如:Class.forName（”com.atguigu.java.Test”）</p><p>5、当<strong>初始化子类时，如果发现其父类还没有进行过初始化</strong>，则需要先触发其父类的初始化。</p><p>6、如果一个接口定义了default方法，那么直接实现或者间接实现该接口的类的初始化，该接口要在其之前被初始化。</p><p>7、当虚拟机启动时，用户需要指定一个<strong>要执行的主类（包含main（）方法的那个类），虚拟机会先初始化这个主类</strong>。</p><p>8、当初次调用 MethodHandle实例时，初始化该MethodHandle指向的方法所在的类。（涉及解析REF_getStatic、REF_putStatic、REF_invokeStatic方法句柄对应的类）</p><h4 id="被动使用"><a href="#被动使用" class="headerlink" title="被动使用"></a>被动使用</h4><p>也就是说:并不是在代码中出现的类，就一定会被加载或者初始化。如果不符合主动使用的条件，类就不会初始化。</p><p>1、当访问一个静态字段时，只有真正声明这个字段的类才会被初始化</p><ul><li><strong>当通过子类引用父类的静态变量，不会导致子类初始化</strong></li></ul><p>2、通过数组定义类引用，不会触发此类的初始化</p><ul><li>类作为数组的类型，如：<code>record[] test = new record[10];</code></li></ul><p>3、引用常量不会触发此类或接口的初始化，因为常量在链接阶段就已经被显式赋值了。</p><p>4、调用ClassLoader类的<code>loadClass（）</code>方法加载一个类，并不是对类的主动使用，不会导致类的初始化。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>开发人员可以在程序中访问和调用它的静态类成员信息（比如:静态字段、静态方法），或者使用new关键字为其创建对象实例。</p><p><strong>例：加载一个类时，以Order类为例：</strong></p><ul><li>方法区：存放Order类模板数据&#x2F;对象</li><li>堆空间：创建一个Order类的Class实例，这个实例指向了方法区中的类模板对象</li><li>栈中（栈帧的局部变量表中）中：声明了一个class对象，class对象指向了堆空间中的Class实例</li><li>Order的对象实例存放在堆中</li></ul><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b042f4c4eda2497c8e85273d9fd2d699~tplv-k3u1fbpfcp-watermark.image" alt="69" style="zoom:70%;" /><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>类存在于方法区中，jdk8中方法区的落地实现是元空间，元空间使用的是系统内存，所以当类没有被及时卸载时，可能会出现方法区的OOM</p><h3 id="类、类的加载器、类的实例"><a href="#类、类的加载器、类的实例" class="headerlink" title="类、类的加载器、类的实例"></a>类、类的加载器、类的实例</h3><p><strong>1、某个类的Class实例与其类的加载器之间为双向关联关系</strong></p><ul><li><p>在<strong>类加载器的内部实现</strong>中，用一个<strong>Java集合来存放所加载类的引用</strong></p></li><li><p>一个Class对象总是会引用它的类加载器，调用Class对象的<code>getClassLoader（）</code>方法，就能获得它的类加载器</p></li></ul><p>2、类的实例总是引用代表这个类的Class对象，在0bject类中定义了<code>getClass（）</code>方法，这个方法返回代表对象所属类的Class对象的引用。</p><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p>1、当Sample类被加载、链接和初始化后，它的生命周期就开始了。</p><p>2、当代表Sample类的Class对象不再被引用，即<strong>不可触及时</strong>，Class对象就会结束生命周期，Sample类在方法区内的数据也会被卸载，从而结束Sample类的生命周期。</p><p><strong>一个类何时结束生命周期，取决于代表它的Class对象何时结束生命周期。</strong></p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ea80ceb63f748a0b451f93dd7f31317~tplv-k3u1fbpfcp-watermark.image" alt="70" style="zoom:50%;" /> <p>1、loader1变量和obj变量间接应用代表Sample类的Class对象，而objClass变量则直接引用它</p><p>2、如果程序运行过程中，将上图左侧三个引用变量都置为<code>null</code></p><ul><li>Sample对象结束生命周期</li><li>Myclass Loader对象结束生命周期</li><li>SampleClass类的对象也结束生命周期</li><li>Sample类在方法区内的二进制数据被<strong>卸载</strong></li></ul><p>3、当再次有需要时，会检查Sample类的Class对象是否存在</p><ul><li>如果存在会直接使用</li><li>如果不存在 Sample类会被重新加载，在Java虚拟机的堆区会生成一个新的代表 SampleClass类的实例。</li></ul><h3 id="回顾：方法区的垃圾回收"><a href="#回顾：方法区的垃圾回收" class="headerlink" title="回顾：方法区的垃圾回收"></a>回顾：方法区的垃圾回收</h3><p><strong>方法区的垃圾收集主要回收两部分内容:常量池中废弃的常量和不再使用的类型。</strong></p><p>HotSpot虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收。</p><p>判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了，需要同时满足下面三个条件:</p><ul><li><strong>该类所有的实例都已经被回收</strong><ul><li>也就是Java堆中不存在该类及其任何派生子类的实例</li></ul></li><li><strong>加载该类的类加载器已经被回收</strong><ul><li>这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是<strong>很难达成的</strong></li></ul></li><li>该类对应的<code>java.lang.Class</code>对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li></ul><p>Java虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。</p><h3 id="类的卸载"><a href="#类的卸载" class="headerlink" title="类的卸载"></a>类的卸载</h3><p>1、<strong>启动类加载器</strong>加载的类型在整个运行期间是<strong>不可能被卸载</strong>的(jvm和jls规范)</p><p>2、被<strong>系统类加载器和扩展类加载器</strong>加载的类型在运行期间<strong>不太可能被卸载</strong>，因为系统类加载器实例或者扩展类的实例基本上在整个运行期间总能直接或者间接的访问的到，其达到 unreachable的可能性极小。</p><p>3、<strong>被开发者自定义的类加载器实例加载的类型只有在很简单的上下文环境中才能被卸载，</strong>而且一般还要借助于强制调用虚拟机的垃圾收集功能才可以做到。可以预想，稍微复杂点的应用场景中被加载的类型在运行期间也是几乎不太可能被卸载的(至少卸载的时间是不确定的)。</p><p>综合以上三点，<strong>一个已经加载的类型被卸载的几率很小至少被卸载的时间是不确定的</strong>。同时我们可以看的出来,开发者在开发代码时候，不应该对虚拟机的类型卸载做任何假设的前提下，来实现系统中的特定功能。</p><h1 id="类的加载器"><a href="#类的加载器" class="headerlink" title="类的加载器"></a>类的加载器</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>1、类加载器是JVM执行类加载机制的前提</p><p><strong>2、ClassLoader</strong></p><ul><li>所有的class都是由ClassLoader加载的</li><li>负责通过各种方式将class信息的二进制数据流读入JVM内部，转为一个与目标类对应的java.lang.Class对象实例</li></ul><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/796fea317b914501b7cd00442ae41f7b~tplv-k3u1fbpfcp-watermark.image" alt="71" style="zoom:33%;" /><p><strong>3、类的加载分类</strong></p><ul><li>显式加载：在代码中通过调用ClassLoader加载Class对象，如：<code>Class.forName(name)</code></li><li>隐式加载：不直接在代码中调用ClassLoader的方法加载class对象，而是通过虚拟机自动加载到内存中，如：在加载某个类的class文件时，该类的class文件中引用了另外一个类的对象，此时额外引用的类将通过JVM自动加载到内存中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(); <span class="comment">//隐式加载</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">&quot;com.dsh.jvmp2.chapter04.java.User&quot;</span>); <span class="comment">//显式加载</span></span><br><span class="line">            ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;com.dsh.jvmp2.chapter04.java.User&quot;</span>);<span class="comment">//显式加载</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、类的加载器的必要性</strong></p><p>一般情况下， Java开发人员并不需要在程序中显式地使用类加载器，但是了解类加载器的加载机制却显得至关重要。从以下几个方面说:</p><ul><li><p>避免在开发中遇到<code>java.lang.ClassNotFoundException</code>异常或<code>java.lang.NoClassDefFoundError</code>异常时，手足无措。只有了解类加载器的加载机制才能够在出现异常的时候快速地根据错误异常日志定位问题和解决问题</p></li><li><p>需要支持类的动态加载或需要对编译后的字节码文件进行加解密操作时，就需要与类加载器打交道了。</p></li><li><p>开发人员可以在程序中编写自定义类加载器来重新定义类的加载规则，以便实现一些自定义的处理逻辑。</p></li></ul><p><strong>5、类的唯一性？</strong></p><p>对于任意一个类，<strong>都需要由加载它的类加载器和这个类本身一同确认其在Java虚拟机中的唯一性</strong>。</p><p>每一个类加载器，都拥有一个独立的类名称空间：<strong>比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提下才有意义</strong>。否则，即使这两个类源自同一个Class文件，被同一个虚拟机加载，只要加载他们的类加载器不同，那这两个类就必定不相等。</p><p><strong>6、命名空间</strong></p><ul><li>每个类加载器都有自己的命名空间，由该类加载器及所有的父加载器所加载的类组成</li><li>在同一命名空间中，不会出现类的完整名字相同的两个类</li><li>在不同的命名空间中，可能会出现类的完整名字相同的两个类</li></ul><p>在大型应用中，我们往往借助这一特性运行同一个类的不同版本</p><p><strong>7、类加载器三个基本特征</strong></p><ul><li><p>双亲委派模型</p></li><li><p>可见性：子类加载器可以访问父类加载器，反过来是不允许的</p></li><li><p>单一性：父加载器加载过的类型在子加载器中不会重复加载</p></li></ul><h2 id="类的加载器分类"><a href="#类的加载器分类" class="headerlink" title="类的加载器分类"></a>类的加载器分类</h2><p>1、JVM支持两种类型的类加载器，分别为<strong>引导类加载器</strong>和<strong>自定义类加载器</strong></p><ul><li>Java虚拟机规范将所有派生于抽象类<code>ClassLoader</code>的类加载器都划分为自定义类加载器</li></ul><p>3、无论类加载器的类型如何划分，在程序中我们最常见的类加载器结构主要是如下情况:</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c680a3cec134b0ab5f115e1a7dcd0a8~tplv-k3u1fbpfcp-watermark.image" alt="img" style="zoom:33%;" /><ul><li>除了顶层的启动类加载器外，其余的类加载器都应当有自己的“父类”加载器。</li><li>不同类加载器看似是继承关系，实际上<strong>是包含关系</strong>，在下层加载器中包含着上层加载器的引用，如代码所示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    ClassLoader parent;<span class="comment">//父类加载器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChildClassLoader</span><span class="params">(ClassLoader parent)</span></span>&#123;<span class="comment">//parent = new ParentClassLoader()</span></span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParentClassLoader</span><span class="params">(ClassLoader parent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChildClassLoader</span><span class="params">(ClassLoader parent)</span></span>&#123;<span class="comment">//parent = new ParentClassLoader();</span></span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><p>1、这个类加载<strong>使用C&#x2F;C++语言实现</strong>的，嵌套在JVM内部。</p><p>2、它用来加载Java的核心库（JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jarbsun.boot.class.path路径下的内容）。用于提供JVM自身需要的类。</p><p>3、并不继承自<code>java.lang.ClassLoader</code>，没有父加载器。</p><p>4、出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</p><p><strong>5、加载扩展类和应用程序类加载器，并指定为他们的父类加载器</strong></p><h3 id="扩展类加载器-1"><a href="#扩展类加载器-1" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h3><p>1、Java语言编写，由<code>sun.misc.Launcher$ExtClassLoader</code>实现。</p><p><strong>2、继承于ClassLoader类</strong></p><p><strong>3、父类加载器为启动类加载器</strong></p><p>4、从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre&#x2F;lib&#x2F;ext子目录下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8e4fc57433444a6b91ce484098fece9~tplv-k3u1fbpfcp-watermark.image" alt="75" style="zoom:50%;" /><h3 id="系统类加载器-1"><a href="#系统类加载器-1" class="headerlink" title="系统类加载器"></a>系统类加载器</h3><p>1、java语言编写，由<code>sun.misc.Launcher$AppClassLoader</code>实现</p><p><strong>2、继承于ClassLoader类</strong></p><p><strong>3、父类加载器为扩展类加载器</strong></p><p>4、它负责加载环境变量<code>classpath</code>或系统属性<code>java.class.path</code>指定路径下的类库</p><p><strong>5、应用程序中的类加载器默认是系统类加载器</strong></p><p><strong>6、它是用户自定义类加载器的默认父加载器</strong></p><p>7、通过ClassLoader的<code>getSystemClassLoader（）</code>方法可以获取到该类加载器</p><h3 id="用户自定义类加载器-1"><a href="#用户自定义类加载器-1" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h3><p>1、Java开发者可以自定义类加载器来实现类库的动态加载，加载源可以是本地的JAR包，也可以是网络上的远程资源。</p><p>2、<strong>通过类加载器可以实现非常绝妙的插件机制</strong>，这方面的实际应用案例举不胜举。例如,著名的SGI组件框架,再如Eclipse的插件机制。类加载器为应用程序提供了一种动态增加新功能的机制，这种机制无须重新打包发布应用程序就能实现。</p><p>3、<strong>自定义加载器能够实现应用隔离</strong>，例如 Tomcat、Spring等中间件和组件框架都在内部实现了自定义的加载器，并通过自定义加载器隔离不同的组件模块。这种机制比C&#x2F;C++程序要好太多，想不修改C&#x2F;C++程序就能为其新增功能，几乎是不可能的，仅仅一个兼容性便能阻挡住所有美好的设想。</p><p>5、<strong>自定义类加载器通常需要继承于classLoader</strong></p><h2 id="测试不同的类加载器"><a href="#测试不同的类加载器" class="headerlink" title="测试不同的类加载器"></a>测试不同的类加载器</h2><p>每个Class对象都会包含一个定义它的ClassLoader的一个引用</p><p><strong>获取classLoader的途径</strong></p><table><thead><tr><th>途径</th></tr></thead><tbody><tr><td>获得当前类的ClassLoader -&gt; clazz.getClassLoader()</td></tr><tr><td>获得当前线程上下文的ClassLoader -&gt; Thread.currentThread().getContextClassLoader()</td></tr><tr><td>获得系统的ClassLoader -&gt; ClassLoader.getSystemClassLoader()</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取系统类加载器</span></span><br><span class="line">ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取扩展类加载器</span></span><br><span class="line">ClassLoader parent = systemClassLoader.getParent();</span><br><span class="line">System.out.println(parent);<span class="comment">//sun.misc.Launcher$ExtClassLoader@5cad8086</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取引导类加载器</span></span><br><span class="line">ClassLoader parent1 = parent.getParent();</span><br><span class="line">System.out.println(parent1);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">ClassLoader classLoader = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>).getClassLoader();</span><br><span class="line">System.out.println(classLoader);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">ClassLoader tt = Class.forName(<span class="string">&quot;tt&quot;</span>).getClassLoader();</span><br><span class="line">System.out.println(tt);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br></pre></td></tr></table></figure><h3 id="数组类型的加载"><a href="#数组类型的加载" class="headerlink" title="数组类型的加载"></a>数组类型的加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组类型的加载</span></span><br><span class="line">String[] test = <span class="keyword">new</span> String[<span class="number">7</span>];</span><br><span class="line">System.out.println(test.getClass().getClassLoader());<span class="comment">//null</span></span><br></pre></td></tr></table></figure><p>1、数组类的Class对象，不是由类加载器去创建的，而是在Java运行期JVM根据需要自动创建的</p><p>2、对于数组类的类加载器来说，<strong>通过<code>Class.getClassLoader（）</code>返回的与数组当中元素类型的类加载器是一样的</strong></p><p><strong>3、如果数组当中的元素类型是基本数据类型，数组类是没有类加载器的</strong></p><h2 id="ClassLoader源码"><a href="#ClassLoader源码" class="headerlink" title="ClassLoader源码"></a>ClassLoader源码</h2><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64c18b556f3f4398b6527782f3ff0ac5~tplv-k3u1fbpfcp-watermark.image" alt="76" style="zoom:50%;" /><p>除了以上虚拟机自带的加载器外，用户还可以定制自己的类加载器</p><p><strong>Java提供了抽象类java.lang.ClassLoader，所有用户自定义的类加载器都应该继承ClassLoader类</strong></p><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><p>抽象类 classLoader的主要方法：(内部没有抽象方法)</p><p>1、<code>public final classLoader getParent()</code>：返回该类加载器的超类加载器</p><p>2、<code>public Class&lt;?&gt; loadclass(String name)</code> ：加载名称为name的类，返回结果为java.lang.Class类的实例。如果找不到类，则返回classNotFoundException异常，该方法中的逻辑就是双亲委派模式的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">  <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)<span class="comment">//resolve：加载class的同时进行解析操作</span></span><br><span class="line">  <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<span class="comment">//保证只能加载一次</span></span><br><span class="line">    <span class="comment">// 检查class是否已经加载同名的类</span></span><br><span class="line">    Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前类加载器的父类加载器</span></span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">//加载父类加载器，双亲委派机制</span></span><br><span class="line">          c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//父类加载器是引导类加载器</span></span><br><span class="line">          c = findBootstrapClassOrNull(name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//情况一：当前类加载器的父类加载器未加载此类</span></span><br><span class="line">      <span class="comment">//情况二：当前类加载器未加载此类</span></span><br><span class="line">      <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//调用当前classloader的findclass方法</span></span><br><span class="line">        <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">        c = findClass(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">        sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">        sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">        sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;<span class="comment">//是否进行解析操作</span></span><br><span class="line">      resolveClass(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、<code>protected Class&lt;?&gt; findclass（String name）</code>：查找二进制名称为name的类，返回结果为<code>java.lang.Class</code>类的实例。这是一个受保护的方法，JVM鼓励我们重写此方法，需要自定义加载器遵循双亲委托机制，该方法会在检查完父类加载器之后被<code>loadClass()</code>方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.2之前，在自定义类加载时，总会去继承ClassLoader类并重写loadClass方法，从而实现自定义的类加载类。但是在IDK1.2之后已不再建议用户去覆盖<code>loadClass（）</code>方法，而是建议把自定义的类加载逻辑写在<code>findClass（）</code>方法中.</p><p>​    <code> findClass（）</code>方法是在<code>loadClass（）</code>方法中被调用的，当 <code>loadClass（）</code>方法中父加载器加载失败后，则会调用自己的<code>findClass（）</code>方法来完成类加载，这样就可以保证自定义的类加载器也符合双亲委托模式。 </p><p>需要注意的是ClassLoader类中并没有实现<code>findClass（）</code>方法的具体代码逻辑，取而代之的是抛出 ClassNotFoundException异常，同时应该知道的是findClass方法通常是和defineClass方法一起使用的。一般情况下，在自定义类加载器时，会直接覆盖ClassLoader的<code>findClass（）</code>方法并编写加载规则，取得要加载类的字节码后转换成流，然后调用<code>defineClass（）</code>方法生成类的Class对象。</p><p>4、<code>protected final Class&lt;?&gt; defineClass（String name， byte[] b， int off， int len）</code></p><p>根据给定的字节数组b转换为Class的实例，off和len参数表示实际Class信息在byte数组中的位置和长度，其中byte数组b是ClassLoader从外部获取的。<strong>这是受保护的方法，只有在自定义ClassLoader子类中可以使用</strong>。</p><p><code>defineClass（）</code>方法是用来将byte字节流解析成JVM能够识别的Class对象（ClassLoader中己实现该方法逻辑），通过这个方法不仅能够通过class文件实例化class对象，也可以通过其他方式实例化class对象，如通过网络接收一个类的字节码，然后转换为byte字节流创建对应的Class对象。 </p><p><code>defineClass（）</code>方法通常与<code>findClass（）</code>方法一起使用，一般情况下，在自定义类加载器时，会直接覆盖 ClassLoader的<code>findClass（）</code>方法并编写加载规则，取得要加载类的字节码后转换成流，然后调用<code>defineClass()</code>方法生成类的Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findclass（String name） <span class="keyword">throws</span> ClassNotFoundException&#123; </span><br><span class="line">  <span class="comment">//获取类的字节数组 </span></span><br><span class="line">  <span class="keyword">byte</span>[] classData = getclassData（name）; </span><br><span class="line">  <span class="keyword">if</span> （classData == <span class="keyword">null</span>） &#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException（）； </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="comment">//使用defineClass生成class对象 </span></span><br><span class="line">    <span class="keyword">return</span> defineclass（name， classData， <span class="number">0</span>， classData.length）; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、<code>protected final void resolveclass(Class&lt;?&gt; c)</code>：链接指定的一个Java类。使用该方法可以使用类的Class对象创建完成的同时也被解析。前面我们说链接阶段主要是对字节码进行验证，为类变量分配内存并设置初始值同时将字节码文件中的符号引用转换为直接引用。</p><p>6、<code>protected final Class&lt;?&gt; findLoadedClass(String name)</code>：查找名称为name的已经被加载过的类，返回结果为java.lang.Class类的实例。这个方法是final方法，无法被修改。</p><p>7、<code>private final ClassLoader parent;</code>：它也是一个ClassLoader的实例，这个字段所表示的ClassLoader也称为这个ClassLoader的双亲。在类加载的过程中，ClassLoader可能会将某些请求交予自己的双亲处理。</p><h3 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h3><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64c18b556f3f4398b6527782f3ff0ac5~tplv-k3u1fbpfcp-watermark.image" alt="76" style="zoom:50%;" /><h4 id="SecureClassLoader与URLClassLoader"><a href="#SecureClassLoader与URLClassLoader" class="headerlink" title="SecureClassLoader与URLClassLoader"></a>SecureClassLoader与URLClassLoader</h4><p>接着SecureClassLoader扩展了ClassLoader，新增了几个与使用相关的代码源（对代码源的位置及其证书的验证）和权限定义类验证（主要指对class源码的访问权限）的方法，一般我们不会直接跟这个类打交道，<strong>更多是与它的子类 URLClassLoader有所关联</strong>。</p><p>ClassLoader是一个抽象类，很多方法是空的没有实现，比如 <code>findClass（）</code>、<code>findResource（）</code>等</p><p>URLClassLoader这个实现类为这些方法提供了具体的实现。并新增了URLClassPath类协助取得Class字节码流等功能。在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass（）方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</p><h4 id="ExtClassLoader与AppClassLoader"><a href="#ExtClassLoader与AppClassLoader" class="headerlink" title="ExtClassLoader与AppClassLoader"></a>ExtClassLoader与AppClassLoader</h4><p>这两个类都继承自URLClassLoader，是<code>sun.misc.Launcher</code>的静态内部类。 sun.misc.Launcher主要被系统用于启动主应用程序，ExtClassLoader和AppClassLoader都是由sun.misc.Launcher创建的，其类主要类结构如下:</p><p>我们发现<strong>ExtClassLoader并没有重写loadClass（）方法，这足矣说明其遵循双亲委派机制</strong>，而AppClassLoader重载了loadClass（）方法，但最终调用的还是父类loadClass（）方法，因此<strong>依然遵守双亲委派模式</strong>。</p><h4 id="Class-forName-与ClassLoader-loadClass"><a href="#Class-forName-与ClassLoader-loadClass" class="headerlink" title="Class.forName()与ClassLoader.loadClass()"></a>Class.forName()与ClassLoader.loadClass()</h4><p>1、<code>Class.forName（）</code>:是一个静态方法，最常用的是<code>Class.forName（String className）</code>；根据传入的类的全限定名返回一个Class对象。</p><p><strong>该方法在将 Class 文件加载到内存的同时，会执行类的初始化。（主动使用）</strong>如：Class.forName（”com.atguigu.java.HelloWorld”）；</p><p>2、<code>ClassLoader.loadClass（）</code>:这是一个实例方法，需要一个ClassLoader对象来调用该方法。</p><p><strong>该方法将Class文件加载到内存时，并不会执行类的初始化，直到这个类第一次使用时才进行初始化。（被动使用）</strong></p><p>该方法因为需要得到一个ClassLoader对象，所以可以根据需要指定使用哪个类加载器.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader cl=......；</span><br><span class="line"></span><br><span class="line">cl.loadClass（<span class="string">&quot;com.atguigu.java.HelloWorld&quot;</span>）；</span><br></pre></td></tr></table></figure><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><h3 id="定义和本质"><a href="#定义和本质" class="headerlink" title="定义和本质"></a>定义和本质</h3><p><strong>1.定义</strong></p><p>如果一个类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就成功返回。只有父类加载器无法完成此加载任务时，才自己去加载。</p><p><strong>2.本质</strong></p><p>规定了类加载的顺序是：</p><p>引导类加载器先加载，若加载不到，由扩展类加载器加载，若还加载不到，才会由系统类加载器或自定义的类加载器进行加载。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83455067e36d42f6b96e406323d6bf07~tplv-k3u1fbpfcp-watermark.image" alt="77" style="zoom:50%;" /> <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a336d9bf8ea84c519c2ae58c51e3baf9~tplv-k3u1fbpfcp-watermark.image" alt="78" style="zoom:53%;" /><h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><p>1、避免类的重复加载，确保一个类的全局唯一性</p><p><strong>Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，</strong>当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。</p><p>2、保护程序安全，防止核心API被随意篡改</p><h3 id="代码支持"><a href="#代码支持" class="headerlink" title="代码支持"></a>代码支持</h3><p>双亲委派机制在<code>java.lang.ClassLoadelr.loadClass（String，boolean）</code>接口中体现。该接口的逻辑如下:</p><p>（1）先在当前加载器的缓存中查找有无目标类，如果有，直接返回。</p><p>（2）判断当前加载器的父加载器是否为空，如果不为空，则调用<code>parent.loadClass（name， false）</code>接口进行加载。</p><p>（3）反之，如果当前加载器的父类加载器为空，则调用<code>findBootstrapClassOrNull（name）</code>接口，让引导类加载器进行加载。</p><p>（4）如果通过以上3条路径都没能成功加载，则调用<code>findClass（name）</code>接口进行加载，该接口最终会调用</p><p>java.lang.ClassLoader接口的<code>defineClass</code>系列的native接口加载目标Java类， 双亲委派的模型就隐藏在这第2和第3步中。</p><p><strong>举例</strong></p><p>假设当前加载的是<code>java.lang.Object</code>这个类，很显然，该类属于JDK中核心得不能再核心的一个类，因此一定只能由引导类加载器进行加载。当JVM准备加载<code>javaJang.Object</code>时，JVM默认会使用系统类加载器去加载，按照上面4步加载的逻辑，在第1步从系统类的缓存中肯定查找不到该类，于是进入第2步。由于从系统类加载器的父加载器是扩展类加载</p><p><strong>思考</strong></p><blockquote><p>如果在自定义的类加载器中重写java.lang.ClassLoader.loadClass（String）或 java.lang.ClassLoader.loadClass（String， boolean）方法，抹去其中的双亲委派机制，仅保留上面这4步中的第1步与第4步，那么是不是就能够加载核心类库了呢？</p></blockquote><p>这也不行！因为JDK还为核心类库提供了一层保护机制。不管是自定义的类加载器，还是系统类加载器或扩展类加载器，最终都必须调用<code>java.lang.ClassLoader.defineClass（String， byte[]， int， int，ProtectionDomain）</code>方法，而该方法会执行<code>preDefineClass（）</code>接口，该接口中提供了对JDK核心类库的保护。</p><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>检查类是否加载的委托过程是单向的，这个方式虽然从结构上说比较清晰，使各个ClassLoader的职责非常明确，但是同时会带来一个问题，即<strong>顶层的ClassLoader无法访问底层的ClassLoader所加载的类</strong>。</p><p>通常情况下，启动类加载器中的类为系统核心类，包括一些重要的系统接口，而在应用类加载器中，为应用类。按照这种模式，<strong>应用类访问系统类自然是没有问题，但是系统类访问应用类就会出现问题</strong>。比如在系统类中提供了一个接口，该接口需要在应用类中得以实现，该接口还绑定一个工厂方法，用于创建该接口的实例，而接口和工厂方法都在启动类加载器中。这时，就会出现该工厂方法无法创建由应用类加载器加载的应用实例的问题。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>由于Java虚拟机规范并没有明确要求类加载器的加载机制一定要使用双亲委派模型，只是建议采用这种方式而已。</strong></p><p>比如在Tomcat中，类加载器所采用的加载机制就和传统的双亲委派模型有一定区别，当缺省的类加载器接收到一个类的加载任务时，首先会由它自行加载，当它加载失败时，才会将类的加载任务委派给它的超类加载器去执行，这同时也是Servlet规范推荐的一种做法。</p><h2 id="Tomcat类加载器"><a href="#Tomcat类加载器" class="headerlink" title="Tomcat类加载器"></a>Tomcat类加载器</h2><blockquote><p>按照 Servlet 规范的建议，Webapp 加载器略有不同，它首先会在自己的资源库中搜索，而不是向上委托，打破了标准的委托机制，来看下 Tomcat 的设计和实现。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/9/19/16d483f4eabaca7b?imageView2/0/w/1280/h/960/ignore-error/1" alt="Tomcat 类加载器结构"></p><p>1、 JDK 内部提供的类加载器分别是：</p><ul><li><strong>Bootstrap</strong> - 启动类加载器，属于 JVM 的一部分，加载 <JAVA_HOME>&#x2F;lib&#x2F; 目录下特定的文件</li><li><strong>Extension</strong> - 扩展类加载器，加载 <JAVA_HOME>&#x2F;lib&#x2F;ext&#x2F; 目录下的类库</li><li><strong>Application</strong> - 应用程序类加载器，也叫系统类加载器，加载 CLASSPATH 指定的类库</li></ul><p>2、Tomcat 自定义实现的类加载器分别是：</p><ul><li><strong>Common</strong> - 父加载器是 AppClassLoader，默认加载 ${catalina.home}&#x2F;lib&#x2F; 目录下的类库</li><li><strong>Catalina</strong> - 父加载器是 Common 类加载器，加载 catalina.properties 配置文件中 server.loader 配置的资源，一般是 Tomcat 内部使用的资源</li><li><strong>Shared</strong> - 父加载器是 Common 类加载器，加载 catalina.properties 配置文件中 shared.loader 配置的资源，一般是所有 Web 应用共享的资源</li><li><strong>WebappX</strong> - 父加载器是 Shared 加载器，加载<code> /WEB-INF/classes</code> 的 class 和 <code>/WEB-INF/lib/</code> 中的 jar 包</li><li><strong>JasperLoader</strong> - 父加载器是 Webapp 加载器，加载 work 目录应用编译 JSP 生成的 class 文件</li></ul><p>3、<code>WebappClassLoader </code>则按规范实现以下顺序的查找并加载：</p><ul><li>从 JVM 内部的 Bootstrap 仓库加载</li><li>从应用程序加载器路径，即 CLASSPATH 下加载</li><li>从 Web 程序内的 <code>/WEB-INF/classes</code> 目录</li><li>从 Web 程序内的 <code>/WEB-INF/lib</code> 中的 jar 文件</li><li>从容器 Common 加载器仓库，即所有 Web 程序共享的资源加载</li></ul><blockquote><p>那么Tomcat为什么要自定义类加载器呢？</p></blockquote><ul><li>隔离不同应用：部署在同一个Tomcat中的不同应用A和B，例如A用了Spring2.5。B用了Spring3.5，那么这两个应用如果使用的是同一个类加载器，那么Web应用就会因为jar包覆盖而无法启动。</li><li>灵活性：Web应用之间的类加载器相互独立，那么就可以根据修改不同的文件重建不同的类加载器替换原来的。从而不影响其他应用。</li><li>性能：如果在一个Tomcat部署多个应用，多个应用中都有相同的类库依赖。那么可以把这相同的类库让Common类加载器进行加载。</li></ul><p>Tomcat自定义了WebAppClassLoader类加载器。打破了双亲委派的机制，<strong>即如果收到类加载的请求，会尝试自己去加载，如果找不到再交给父加载器去加载</strong>，目的就是为了优先加载Web应用自己定义的类。我</p><h2 id="打破双亲委派机制"><a href="#打破双亲委派机制" class="headerlink" title="打破双亲委派机制"></a>打破双亲委派机制</h2><h3 id="第一次：JDK1-2之前"><a href="#第一次：JDK1-2之前" class="headerlink" title="第一次：JDK1.2之前"></a>第一次：JDK1.2之前</h3><p>双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前一一即JDK1.2面世以前的“远古”时代。</p><p>由于双亲委派模型在JDK1.2之后才被引入，但是类加载器的概念和抽象类java.lang.ClassLoader则在Java的第一个版本中就已经存在，面对已经存在的用户自定义类加载器的代码，Java设计者们引入双亲委派模型时不得不做出一些妥协。</p><p><strong>为了兼容这些已有代码，无法再以技术手段避免loadClass（）被子类覆盖的可能性</strong>，只能在IDK1.2之后的java.lang.ClassLoader中添加一个新的protected方法<code>findClass（）</code>，并引导用户编写的类加载逻辑时尽可能去重写这个方法，而不是在<code>loadClass（）</code>中编写代码。</p><p>上节我们已经分析过<code>loadClass（）</code>方法，双亲委派的具体逻辑就实现在这里面，按照<code>loadClass（）</code>方法的逻辑，如果父类加载失败，会自动调用自己的<code>findClass（）</code>方法来完成加载，这样既不影响用户按照自己的意愿去加载类，又可以保证新写出来的类加载器是符合双亲委派规则的。</p><h3 id="第二次：线程上下文类加载器"><a href="#第二次：线程上下文类加载器" class="headerlink" title="第二次：线程上下文类加载器"></a>第二次：线程上下文类加载器</h3><blockquote><p><strong>双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的</strong>，双亲委派很好地解决了各个类加载器协作时基础类型的一致性问题（<strong>越基础的类由越上层的加载器进行加载</strong>），基础类型之所以被称为“基础”，是因为它们总是作为被用户代码继承、调用的API存在，但程序设计往往没有绝对不变的完美规则，如果有基础类型又要调用回用户的代码，那该怎么办呢？</p></blockquote><p>一个典型的例子便是JNDI服务，JNDI现在已经是Java的标准服务，它的代码由启动类加载器来完成加载（在JDK1.3时加入到rt.jar的），肯定属于Java中很基础的类型了。但JNDI存在的目的就是对资源进行查找和集中管理，它需要调用由其他厂商实现并部署在应用程序的ClassPath下的INDI服务提供者接口（ Service Provider Interface， SPI）的代码，现在问题来了，<strong>启动类加载器是绝不可能认识、加载这些代码的，那该怎么办？</strong>（SPI:在Java平台中，通常把核心类rt.jar中提供外部服务、可由应用层自行实现的接口称为SPI）</p><hr/><p><strong>线程上下文类加载器（Thread ContextClassLoader）</strong></p><p>这个类加载器可以通过<code>java.lang.Thread类</code>的<code>setContextClassLoader（）</code>方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那<strong>这个类加载器默认就是应用程序类加载器</strong>。</p><p>JNDI服务使用这个线程上下文类加载器去加载所需的SPI服务代码，<strong>这是一种父类加载器去请求子类加载器完成类加载的行为，这种行为实际上是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型的一般性原则</strong>，但也是无可奈何的事情。Java中涉及SPI的加载基本上都采用这种方式来完成，例如<strong>JNDI、JDBC、JCE、JAXB和JBI</strong>等。不过，当SPI的服务提供者多于一个的时候，代码就只能根据具体提供者的类型来硬编码判断，为了消除这种极不优雅的实现方式，在JDK 6时，JDK提供了java.util.ServiceLoader类，以META-INF&#x2F; services中的配置信息，辅以责任链模式，这才算是给SPI的加载提供了一种相对合理的解决方案。 </p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d74960adf919423ea521917eef993be3~tplv-k3u1fbpfcp-watermark.image" alt="79" style="zoom:50%;" /><p><strong>默认上下文加载器就是应用类加载器</strong>，这样以上下文加载器为中介，使得启动类加载器中的代码也可以访问应用类加载器中的类。</p><h3 id="第三次：OSGI"><a href="#第三次：OSGI" class="headerlink" title="第三次：OSGI"></a>第三次：OSGI</h3><p>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的。如:<strong>代码热替换（Hot Swap）、模块热部署（Hot Deployment）等</strong></p><p>IBM公司主导的JSR一291 （即OSGiR4.2）实现模块化热部署的关键是<strong>它自定义的类加载器机制的实现</strong>，每一个程序模块（OSGi中称为Bundle）都有一个自己的类加载器，当需要更换一个Bundle时，就把Bundle连同类加载器一起换掉以实现代码的热替换。<strong>在OSGi环境下，类加载器不再双亲委派模型推荐的树状结构，而是进一步发展为更加复杂的网状结构。</strong></p><p>当收到类加载请求时，OSGi将按照下面的顺序进行类搜索:</p><p>*<em>1）将以java.<em>开头的类，委派给父类加载器加载。</em></em></p><p><strong>2）否则，将委派列表名单内的类，委派给父类加载器加载。</strong></p><p>3）否则，将Import列表中的类，委派给Export这个类的Bundle的类加载器加载。</p><p>4）否则，查找当前Bundle的ClassPath，使用自己的类加载器加载。</p><p>5）否则，查找类是否在自己的Fragment Bundle中，如果在，则委派给Fragment Bundle的类加载器加载。</p><p>6）否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载。</p><p>7）否则，类查找失败。</p><p>说明：只有开头两点仍然符合双亲委派模型的原则，其余的类查找都是在平级的类加载器中进行的</p><p><strong>小结:</strong><br>这里，我们使用了“被破坏”这个词来形容上述不符合双亲委派模型原则的行为，但这里“被破坏”并不一定是带有贬义的。只要有明确的目的和充分的理由，突破旧有原则无疑是一种创新。</p><p>正如：OSGi中的类加载器的设计不符合传统的双亲委派的类加载器架构，且业界对其为了实现热部署而带来的额外的高复杂度还存在不少争议，但对这方面有了解的技术人员基本还是能达成一个共识，认为<strong>OSGi中对类加载器的运用是值得学习的，完全弄懂了0SGi的实现，就算是掌握了类加载器的精粹</strong>。</p><h3 id="热替换的实现"><a href="#热替换的实现" class="headerlink" title="热替换的实现"></a>热替换的实现</h3><p>热替换是指在程序的运行过程中，<strong>不停止服务，只通过替换程序文件来修改程序的行为</strong>。<strong>热替换的关键需求在于服务不能中断</strong>，修改必须立即表现正在运行的系统之中。基本上大部分脚本语言都是天生支持热替换的，比如:PHP，只要替换了PHP源文件，这种改动就会立即生效，而无需重启Web服务器。</p><p>但对Java来说，热替换并非天生就支持，如果一个类已经加载到系统中，通过修改类文件，并无法让系统再来加载并重定义这个类。因此，在Java中实现这一功能的一个可行的方法就是灵活运用ClassLoader。</p><p><strong>注意：由不同ClassLoader加载的同名类属于不同的类型，不能相互转换和兼容。即两个不同的ClassLoader加载同一个类，在虚拟机内部，会认为这2个类是完全不同的。</strong></p><p>根据这个特点，可以用来模拟热替换的实现，基本思路如下图所示: </p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54e178062f0041e49c6723ed3d8f0ac3~tplv-k3u1fbpfcp-watermark.image" alt="80" style="zoom:30%;" /><p>例子</p><ul><li><p>首先在Demo1中定义输出方法，使用javac编译为class</p></li><li><p>运行程序，输出<code>OldDemo1</code></p></li><li><p>修改Demo1中的输出方法，使用javac再次编译为class文件，此时class文件发生了替换</p></li><li><p>观察程序输出,程序输出了<code>OldDemo1---&gt; NewDemo1</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义类的加载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String rootDir;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(String rootDir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootDir = rootDir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String className) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class clazz = <span class="keyword">this</span>.findLoadedClass(className);</span><br><span class="line">        FileChannel fileChannel = <span class="keyword">null</span>;</span><br><span class="line">        WritableByteChannel outChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == clazz) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String classFile = getClassFile(className);</span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">                fileChannel = fis.getChannel();</span><br><span class="line">                ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                outChannel = Channels.newChannel(baos);</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = fileChannel.read(buffer);</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span> || i == -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    outChannel.write(buffer);</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = baos.toByteArray();</span><br><span class="line">                clazz = defineClass(className, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fileChannel != <span class="keyword">null</span>)</span><br><span class="line">                        fileChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (outChannel != <span class="keyword">null</span>)</span><br><span class="line">                        outChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类文件的完全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getClassFile</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootDir + <span class="string">&quot;/&quot;</span> + className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="沙箱安全机制-1"><a href="#沙箱安全机制-1" class="headerlink" title="沙箱安全机制"></a>沙箱安全机制</h2><p>1、沙箱安全机制</p><ul><li>保证程序安全</li><li>保护Java原生的JDK代码</li></ul><p><strong>2、Java安全模型的核心就是Java沙箱（sandbox）</strong>。</p><blockquote><p>什么是沙箱？</p></blockquote><p>沙箱是一个限制程序运行的环境，沙箱机制就是将Java代码<strong>限定在虚拟机（JVM）特定的运行范围中，并且严格限制代码对本地系统资源访问</strong>。通过这样的措施来保证对代码的有限隔离，防止对本地系统造成破坏。</p><p><strong>沙箱主要限制系统资源访问</strong>，那系统资源包括什么？CPU、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。</p><p>所有的Java程序运行都可以指定沙箱，可以定制安全策略</p><p><strong>1. JDK1.0时期</strong><br>在Java中将执行程序分成本地代码和远程代码两种，本地代码默认视为可信任的，而远程代码则被看作是不受信的。对于授信的本地代码，可以访问一切本地资源。而对于非授信的远程代码在早期的Java实现中，安全依赖于沙箱（ Sandbox）机制。如下图所示IDK1.0安全模型</p><p><strong>2. JDK1.1时期</strong><br>JDK1.0中如此严格的安全机制也给程序的功能扩展带来障碍，比如当用户希望远程代码访问本地系统的文件时候，就无法实现。</p><p>因此在后续的Java1.1版本中，针对安全机制做了改进，增加了安全策略。允许用户指定代码对本地资源的访问权限。如下图所示JDK1.1安全模型</p><p><strong>3. JDK1.2时期</strong><br>在Java1.2版本中,再次改进了安全机制,增加了代码签名。不论本地代码或是远程代码,都会按照用户的安全策略设定,由类加载器加载到虚拟机中权限不同的运行空间,来实现差异化的代码执行权限控制。如下图所示JDK1.2安全模型：</p><p><strong>4. JDK1.6时期</strong><br>当前最新的安全机制实现，则引入了域（Domain）的概念。</p><p>虚拟机会把所有代码加载到不同的系统域和应用域。系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域（Protected Domain），对应不一样的权限 （Permission）。存在于不同域中的类文件就具有了当前域的全部权限，如下图所示，最新的安全模型（jdk1.6） </p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1cd787f2548488590427b01a6e15aae~tplv-k3u1fbpfcp-watermark.image" alt="img" style="zoom: 50%;" /><h1 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><strong>1、目的</strong></p><ul><li><p>为了避免出现OOM</p></li><li><p>解决OOM</p></li><li><p>减少full gc出现的频率</p></li></ul><p><strong>2、监控的依据</strong></p><ul><li>运行日志</li><li>异常堆栈</li><li>GC日志</li><li>线程快照</li><li>堆转储快照</li></ul><p><strong>3、步骤</strong></p><ul><li><strong>发现问题：性能监控</strong><ul><li>GC频繁</li><li>cpu load过高</li><li>OOM</li><li>内存泄漏</li><li>死锁</li><li>程序响应时间长</li></ul></li><li><strong>排除问题：性能分析</strong><ul><li>打印GC日志</li><li>使用命令行工具，jstack、jmap、jinfo等</li><li>dump堆，使用mat分析</li><li>jstack查看堆栈信息</li></ul></li><li><strong>解决问题：性能调优</strong><ul><li>适当增加内存、根据业务背景选择垃圾回收器</li><li>优化代码</li><li>增加机器</li><li>合理设置线程池线程数量</li></ul></li></ul><p>4、性能测试指标</p><ul><li>停顿时间<ul><li>系统：提交请求和返回响应的间隔时间</li><li>垃圾回收：STW时间</li></ul></li><li>吞吐量<ul><li>系统：单位时间完成的工作量</li><li>GC：运行用户代码的时间占总运行时间的比例</li></ul></li><li>并发数</li><li>内存占用</li><li>相互间的关系</li></ul><h2 id="监控诊断工具（命令行）"><a href="#监控诊断工具（命令行）" class="headerlink" title="监控诊断工具（命令行）"></a>监控诊断工具（命令行）</h2><h3 id="jps：查看正在运行的java进程"><a href="#jps：查看正在运行的java进程" class="headerlink" title="jps：查看正在运行的java进程"></a>jps：查看正在运行的java进程</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">jps [-q] [-mlvV] [&lt;hostid&gt;]</span><br><span class="line"></span><br><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jps -q</span><br><span class="line"><span class="number">53575</span></span><br><span class="line"><span class="number">92569</span></span><br><span class="line"><span class="number">92491</span></span><br><span class="line"><span class="number">92492</span></span><br><span class="line"></span><br><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jps -l </span><br><span class="line"><span class="number">53575</span> </span><br><span class="line"><span class="number">92491</span> org.jetbrains.jps.cmdline.Launcher</span><br><span class="line"><span class="number">92587</span> jdk.jcmd/sun.tools.jps.Jps</span><br><span class="line"><span class="number">92492</span> com.tao.test</span><br><span class="line"></span><br><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jps -m</span><br><span class="line"><span class="number">53575</span> </span><br><span class="line"><span class="number">92491</span> Launcher /Applications/IntelliJ IDEA.app/Contents/lib/netty-common-<span class="number">4</span>.<span class="number">1</span>.<span class="number">52</span>.Final.jar:/Applications/IntelliJ IDEA.app/Contents/lib/netty-resolver-<span class="number">4</span>.<span class="number">1</span>.<span class="number">52</span>.Final.jar:/Applications/IntelliJ IDEA.app/Contents/plugins/java/lib/javac2.jar:/Applications/IntelliJ IDEA.app/Contents/lib/httpclient-<span class="number">4</span>.<span class="number">5</span>.<span class="number">12</span>.jar:/Applications/IntelliJ IDEA.app/Contents/lib/plexus-component-annotations-<span class="number">1</span>.<span class="number">7</span>.<span class="number">1</span>.jar:/Applications/IntelliJ IDEA.app/Contents/lib/maven-resolver-spi-<span class="number">1</span>.<span class="number">3</span>.<span class="number">3</span>.jar:/Applications/IntelliJ IDEA.app/Contents/lib/util.jar:/Applications/IntelliJ IDEA.app/Contents/lib/platform-api.jar:/Applications/IntelliJ IDEA.app/Contents/lib/qdox-<span class="number">2</span>.<span class="number">0</span>-M10.jar:/Applications/IntelliJ IDEA.app/Contents/lib/asm-all-<span class="number">9</span>.<span class="number">0</span>.jar:/Applications/IntelliJ IDEA.app/Contents/lib/commons-lang3-<span class="number">3</span>.<span class="number">10</span>.jar:/Applications/IntelliJ IDEA.app/Contents/lib/jna.jar:/Applications/IntelliJ IDEA.app/Contents/lib/trove4j.jar:/Applications/IntelliJ IDEA.app/Contents/lib/nanoxml-<span class="number">2</span>.<span class="number">2</span>.<span class="number">3</span>.jar:/Applications/IntelliJ IDEA.app/Contents/lib/maven-resolver-api</span><br><span class="line"><span class="number">92603</span> Jps -m</span><br><span class="line"><span class="number">92492</span> test hello //传递参数，输出传递给main的参数</span><br><span class="line"></span><br><span class="line">jps -v：列出JVM参数</span><br></pre></td></tr></table></figure><h3 id="jstat：查看JVM统计信息"><a href="#jstat：查看JVM统计信息" class="headerlink" title="jstat：查看JVM统计信息"></a>jstat：查看JVM统计信息</h3><p>1、用于监控JVM运行状态的信息，显示本地或者远程虚拟机进程的类装载、内存、GC、JIT编译等运行数据</p><p><strong>2、常用于检测垃圾回收问题以及内存泄漏问题</strong></p><p>3、基本语法</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]   </span><br></pre></td></tr></table></figure><p>4、<code>option参数</code></p><ul><li>类装载相关</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jstat -class <span class="number">92492</span></span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     <span class="built_in">Time</span>   </span><br><span class="line">   <span class="number">675</span>  <span class="number">1349</span>.<span class="number">5</span>        <span class="number">0</span>     <span class="number">0</span>.<span class="number">0</span>       <span class="number">0</span>.<span class="number">13</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>垃圾回收相关</strong></p><ul><li><code>-gc</code>：显示与GC相关的堆信息，包括Eden区、S区、O区、永久代等的容量、已用空间、GC时间合计等信息</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jstat -gc <span class="number">92492</span> </span><br><span class="line"></span><br><span class="line">第一个S区大小、第二个S区大小、第一个S区使用大小、第二个S区使用大小、Eden区大小、Eden区使用大小</span><br><span class="line">老年代大小、老年代使用大小</span><br><span class="line">方法区大小、方法区使用大小、压缩类空间大小、压缩类空间使用大小</span><br><span class="line">ygc的次数、ygc消耗的时间、fullgc次数、fullgc消耗时间、gc总时间</span><br><span class="line"></span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT   </span><br><span class="line"><span class="number">5120</span>.<span class="number">0</span> <span class="number">5120</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>   <span class="number">33280</span>.<span class="number">0</span>   <span class="number">4671</span>.<span class="number">6</span>   <span class="number">87552</span>.<span class="number">0</span>      <span class="number">0</span>.<span class="number">0</span>     <span class="number">4480</span>.<span class="number">0</span> <span class="number">781</span>.<span class="number">0</span>  <span class="number">384</span>.<span class="number">0</span>   <span class="number">76</span>.<span class="number">6</span>       <span class="number">0</span>    <span class="number">0</span>.<span class="number">000</span>   <span class="number">0</span>      <span class="number">0</span>.<span class="number">000</span>   -          -    <span class="number">0</span>.<span class="number">000</span></span><br></pre></td></tr></table></figure><ul><li><code>-gccapacity</code>：与-gc基本相同，主要关注java堆各个区域使用到的最大、最小空间</li><li><code>-gcutil</code>：与-gc基本相同，输出主要关注已使用空间占总空间的百分比</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jstat -gcutil <span class="number">92492</span></span><br><span class="line">S0 - S0区域的使用比例</span><br><span class="line">S1 - S1区域的使用比例</span><br><span class="line">E - Eden区域的使用比例</span><br><span class="line">O - Old区域的使用比例</span><br><span class="line">M - 元数据区域的使用比例</span><br><span class="line">CCS - Compressed class空间的使用比例</span><br><span class="line"></span><br><span class="line">S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT   </span><br><span class="line"><span class="number">0</span>.<span class="number">00</span>   <span class="number">0</span>.<span class="number">00</span>  <span class="number">14</span>.<span class="number">04</span>   <span class="number">0</span>.<span class="number">00</span>  <span class="number">17</span>.<span class="number">43</span>  <span class="number">19</span>.<span class="number">94</span>      <span class="number">0</span>    <span class="number">0</span>.<span class="number">000</span>     <span class="number">0</span>    <span class="number">0</span>.<span class="number">000</span>     -        -    <span class="number">0</span>.<span class="number">000</span></span><br></pre></td></tr></table></figure><ul><li><code>-gccause</code>：与-gcutil功能一样，额外输出导致最后一次或当前GC产生的原因</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jstat -gccause <span class="number">92492</span></span><br><span class="line"></span><br><span class="line">LGCC - 上次GC的原因</span><br><span class="line">GCC - 当前GC的原因</span><br><span class="line">  </span><br><span class="line">S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT    LGCC                 GCC                 </span><br><span class="line"><span class="number">0</span>.<span class="number">00</span>   <span class="number">0</span>.<span class="number">00</span>  <span class="number">14</span>.<span class="number">04</span>   <span class="number">0</span>.<span class="number">00</span>  <span class="number">17</span>.<span class="number">43</span>  <span class="number">19</span>.<span class="number">94</span>      <span class="number">0</span>    <span class="number">0</span>.<span class="number">000</span>     <span class="number">0</span>    <span class="number">0</span>.<span class="number">000</span>     -        -    <span class="number">0</span>.<span class="number">000</span> No GC                No GC  </span><br></pre></td></tr></table></figure><ul><li><code>-gcnew</code>：显示新生代GC状况</li><li><code>-gcnewcapacity</code>：与-gcnew基本相同，主要关注使用到的最大、最小空间</li><li><code>-gcold</code>：显示老年代GC状况</li><li><code>-gcoldcapacity</code>：与-gcold基本相同，主要关注使用到的最大、最小空间</li><li><code>-gcpermcapacity</code>：显示永久代使用的最大最小空间</li></ul></li><li><p>JIT相关</p></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">显示JIT编译器编译过的方法、耗时等信息</span><br><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jstat -compiler <span class="number">92492</span>         </span><br><span class="line">Compiled Failed Invalid   <span class="built_in">Time</span>   FailedType FailedMethod</span><br><span class="line">      <span class="number">85</span>      <span class="number">0</span>       <span class="number">0</span>     <span class="number">0</span>.<span class="number">03</span>          <span class="number">0</span>   </span><br><span class="line">      </span><br><span class="line">输出已经被JIT编译的方法</span><br><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jstat -printcompilation <span class="number">92492</span> </span><br><span class="line">Compiled  Size  <span class="built_in">Type</span> Method</span><br><span class="line">      <span class="number">85</span>     <span class="number">20</span>    <span class="number">1</span> java/lang/StringBuilder &lt;init&gt;</span><br></pre></td></tr></table></figure><p>5、<code>interval参数</code>：指定输出统计数据的周期，单位为毫秒</p><p>6、<code>count参数</code>：指定查询的次数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jstat -class <span class="number">92492</span> <span class="number">1000</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>7、<code>-t 参数</code>：显示程序的运行时间</p><ul><li><strong>比较Java进程的启动时间以及GC时间（-gc的GCT列），或者两次测量的间隔时间以及总gc时间的增量，来得出GC的时间占比</strong><ul><li><strong>如果大于20%，说明堆的压力较大，超过90%说明堆几乎没有可用空间，随时可能抛出OOM异常</strong></li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jstat -class -t <span class="number">92492</span>     </span><br><span class="line">Timestamp       Loaded  Bytes  Unloaded  Bytes     <span class="built_in">Time</span>   </span><br><span class="line">          <span class="number">683</span>.<span class="number">5</span>    <span class="number">675</span>  <span class="number">1349</span>.<span class="number">5</span>        <span class="number">0</span>     <span class="number">0</span>.<span class="number">0</span>       <span class="number">0</span>.<span class="number">13</span></span><br></pre></td></tr></table></figure><p>8、<code>-h 参数</code>：每隔3个打印一次表头</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jstat -class -h3 <span class="number">92492</span> <span class="number">1000</span></span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     <span class="built_in">Time</span>   </span><br><span class="line">   <span class="number">675</span>  <span class="number">1349</span>.<span class="number">5</span>        <span class="number">0</span>     <span class="number">0</span>.<span class="number">0</span>       <span class="number">0</span>.<span class="number">13</span></span><br><span class="line">   <span class="number">675</span>  <span class="number">1349</span>.<span class="number">5</span>        <span class="number">0</span>     <span class="number">0</span>.<span class="number">0</span>       <span class="number">0</span>.<span class="number">13</span></span><br><span class="line">   <span class="number">675</span>  <span class="number">1349</span>.<span class="number">5</span>        <span class="number">0</span>     <span class="number">0</span>.<span class="number">0</span>       <span class="number">0</span>.<span class="number">13</span></span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     <span class="built_in">Time</span>   </span><br><span class="line">   <span class="number">675</span>  <span class="number">1349</span>.<span class="number">5</span>        <span class="number">0</span>     <span class="number">0</span>.<span class="number">0</span>       <span class="number">0</span>.<span class="number">13</span></span><br><span class="line">   <span class="number">675</span>  <span class="number">1349</span>.<span class="number">5</span>        <span class="number">0</span>     <span class="number">0</span>.<span class="number">0</span>       <span class="number">0</span>.<span class="number">13</span></span><br><span class="line">   <span class="number">675</span>  <span class="number">1349</span>.<span class="number">5</span>        <span class="number">0</span>     <span class="number">0</span>.<span class="number">0</span>       <span class="number">0</span>.<span class="number">13</span></span><br></pre></td></tr></table></figure><blockquote><p>判断内存泄漏</p></blockquote><p>使用jstat获取多行性能数据，并取这几行数据的OU列（已占用的老年代内存）的最小值</p><p>每隔一段时间重复上述操作，如果这些值呈现上涨趋势，说明老年代内存在不断上涨，意味着无法回收的对象在不断增加，可能出现内存泄漏</p><h3 id="jinfo：查看和修改JVM参数"><a href="#jinfo：查看和修改JVM参数" class="headerlink" title="jinfo：查看和修改JVM参数"></a>jinfo：查看和修改JVM参数</h3><p>查看JVM参数，也可以调整JVM参数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo &lt;option&gt; &lt;pid&gt;</span><br></pre></td></tr></table></figure><p>1、option参数</p><ul><li><p><strong>查看</strong></p><ul><li><code>-sysprops</code></li><li><code>-flags</code>：查看曾经赋值过的一些参数</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jinfo -flags <span class="number">92492</span></span><br><span class="line">VM Flags:</span><br><span class="line">-XX:CICompilerCount=<span class="number">4</span> -XX:InitialHeapSize=<span class="number">134217728</span> -XX:MaxHeapSize=<span class="number">2147483648</span> -XX:MaxNewSize=<span class="number">715653120</span> -XX:MinHeapDeltaBytes=<span class="number">524288</span> -XX:NewSize=<span class="number">44564480</span> -XX:OldSize=<span class="number">89653248</span> -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC </span><br></pre></td></tr></table></figure><ul><li><code>-flag 具体参数</code>：查看某个java进程的具体参数</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangtao@zhangtaodeMacBook-Pro test % jinfo -flag UseParallelGC <span class="number">92492</span></span><br><span class="line">-XX:+UseParallelGC</span><br></pre></td></tr></table></figure></li><li><p><strong>修改</strong></p><ul><li>针对boolean类型：<code>-flag [+|-]具体参数</code></li><li>非boolean：<code>-flag 具体参数=具体参数值</code></li></ul></li></ul><h3 id="jmap：导出内存映像文件-amp-内存使用情况"><a href="#jmap：导出内存映像文件-amp-内存使用情况" class="headerlink" title="jmap：导出内存映像文件&amp;内存使用情况"></a>jmap：导出内存映像文件&amp;内存使用情况</h3><p><code>-dump：生成Java堆转储快照：dump文件</code></p><p><code>-heap：输出整个堆空间的详细信息，包括GC的使用、堆配置信息、内存的使用信息等</code></p><p><code>-histo：输出堆中对象的统计信息、包括类、实例数量和合集容量</code></p><p><strong>1、导出内存映像文件</strong></p><ul><li>手动：<code>jmap -dump:format=b,file=/tmp/a.prof pid</code></li><li>自动：<code>-XX:+HeapDumpOnOutOfMemoryError</code>、<code>-XX:HeapDumpPath=/tmp/a.hprof</code></li></ul><p><strong>2、显示堆内存相关进行</strong></p><ul><li><code>jmap -heap pid</code></li><li><code>jmap -histo pid </code></li></ul><h3 id="jhat：JDK自带堆分析工具"><a href="#jhat：JDK自带堆分析工具" class="headerlink" title="jhat：JDK自带堆分析工具"></a>jhat：JDK自带堆分析工具</h3><p>分析生成的dump文件 </p><h3 id="jstack：打印JVM中线程快照"><a href="#jstack：打印JVM中线程快照" class="headerlink" title="jstack：打印JVM中线程快照"></a>jstack：打印JVM中线程快照</h3><p>生成虚拟机指定进程当前时刻的线程快照</p><p>用于定位线程出现长时间停顿的原因</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="/2022/02/07/Zookeeper/"/>
      <url>/2022/02/07/Zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><h2 id="C、A、P"><a href="#C、A、P" class="headerlink" title="C、A、P"></a>C、A、P</h2><p>1、C（Consistency）：一致性</p><ul><li>在一个分布式的系统中，<strong>同一个数据</strong>的<strong>所有备份</strong>，在<strong>同一时刻</strong>是否有相同的值。也就是，对于同一个数据的读写，是否立刻对于所有副本都能看到一致的结果。一种比较常见的强一致性实现就是，在看到一致的结果之前，写请求不返回，读请求阻塞或者超时。</li><li>需要满足原子一致性，也就是任何读写都是具有原子性的，也就是对于同一个数据的写之后的读取，一定能读取到写的值，也就是<strong>最新的值</strong></li></ul><p>2、A（Avaliability）：可用性</p><ul><li>在集群中一些节点故障时，集群还可以<strong>响应读写请求</strong>。</li><li>对于所有成功的请求，都需要在有限的时间内返回，也就是成功请求是有效的，可终止的。</li></ul><p>3、P（Partition-tolerance）：分区容忍性</p><ul><li>分布式系统具有多个节点，如果节点间网络中断，就会造成<strong>分区</strong>。</li><li>可能<strong>节点间传输丢失一些消息</strong>。</li></ul><blockquote><p>CAP并不能全部满足，一般选择两个满足</p></blockquote><h2 id="CA、CP、AP"><a href="#CA、CP、AP" class="headerlink" title="CA、CP、AP"></a>CA、CP、AP</h2><h3 id="CA（不选择）"><a href="#CA（不选择）" class="headerlink" title="CA（不选择）"></a>CA（不选择）</h3><p>如果选择了CA而放弃了P，若发生分区现象，为了保证C，系统需要禁止写入，此时就与A发生冲突，如果是为了保证A，则会出现正常的分区可以写入数据，有故障的分区不能写入数据，则与C就冲突了。</p><p>因此分布式系统理论上不可能选择CA架构，而必须选择CP或AP架构。</p><h3 id="CP"><a href="#CP" class="headerlink" title="CP"></a>CP</h3><p>1、不要求高可用性，要求强一致性的系统</p><ul><li>哪怕当前业务不可用也不能出现数据不一致的情况，如果节点间传输消息丢失导致没有同步成功，回滚更新需求</li></ul><p>2、应用：<span style="color:red">分布式锁</span></p><ul><li>一般，如果没有获取到锁，或者获取锁失败都会选择阻塞等待或者直接失败，分布式锁必须保持所有节点看到的锁状态一致，否则认为获取锁失败</li></ul><p>3、大部分分布式数据库都是CP系统，但是他们的一致性协议方案不同，例如：2PC、3PC等</p><h3 id="AP"><a href="#AP" class="headerlink" title="AP"></a>AP</h3><p>1、要求高可用性不要求强一致性的系统</p><ul><li>一旦分区发生，节点间的数据可能会不一致，每个节点使用自己的本地数据继续提供服务，这种情况下数据可能会出现不一致，系统一般会实现<span style="color:red">最终一致性</span>（在分区结束后通过一些机制将数据同步）</li></ul><p>2、应用：具有多层缓存的系统，例如DNS、客户端缓存、浏览器缓存、进程缓存等</p><h2 id="业务场景选择"><a href="#业务场景选择" class="headerlink" title="业务场景选择"></a>业务场景选择</h2><h3 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h3><blockquote><p>服务注册中心需要解决的问题：</p><ul><li>服务注册：实例将自身服务信息注册到注册中心，包括服务的主机IP和服务的Port，以及暴露服务自身状态和访问协议信息等</li><li>服务发现：实例请求注册中心所依赖的服务信息，服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求他们的服务</li></ul></blockquote><p><strong>1、zookeeper选择CP</strong></p><ul><li>对于注册请求采用过半写和2PC的同步机制，只有更新成功这个注册请求才成功，这样读取每个节点都会读取到这个更新请求，否则会<span style="color:red">回滚已经更新的节点</span>。</li><li>每个节点的数据是一致的，<span style="color:red">如果过半的节点不可用，那么整个集群都不能处理注册实例请求以及读取实例的请求</span>。</li><li>从实际情况来分析，在使用zookeeper获取服务列表时，如果zk正在选举或者zk集群中半数以上的机器不可用，那么将无法获取数据。所以说，zk不能保证服务可用性。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af3b174fc0094103807bab3de6e8d3f4~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p><p><strong>2、Eureka选择AP</strong></p><ul><li>注册请求发送到一个Eureka实例上之后，这个Eureka会转发到集群内其他Eureka节点</li><li>即使某些节点失败，也不会回滚已经更新的，<span style="color:red">无论集群内哪些Eureka挂了也不会影响其他Eureka继续服务工作</span>，虽然可能读取到的数据会不一致</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56ac64f4176441af8e365eac36c8d60e~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p><p><strong>3、Zookeeper和eureka的数据一致性问题</strong></p><p>先要明确一点，eureka的创建初心就是为一个注册中心，但是zk更多是作为分布式协调服务的存在，只不过因为它的特性被dubbo赋予了注册中心，它的职责更多是保证数据（配置数据，状态数据）在管辖下的所有服务之间保持一致，所有这个就不难理解为何zk被设计成CP而不是AP，<strong>zk最核心的算法ZAB，就是为了解决分布式系统下数据在多个服务之间一致同步的问题。</strong></p><p>更深层的原因，zookeeper是按照CP原则构建，也就是说它必须保持每一个节点的数据都保持一致，如果zookeeper下节点断开或者集群中出现网络分割（例如交换机的子网间不能互访），那么zk会将它们从自己的管理范围中剔除，外界不能访问这些节点，即使这些节点是健康的可以提供正常的服务，所以导致这些节点请求都会丢失。</p><p>而eureka则完全没有这方面的顾虑，它的节点都是相对独立，不需要考虑数据一致性的问题，这个应该是eureka的诞生就是为了注册中心而设计，相对zk来说剔除了leader节点选取和事务日志极致，这样更有利于维护和保证eureka在运行的健壮性。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d05888fc2f78b3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>再来看看，数据不一致性在注册服务中中会给eureka带来什么问题，无非就是某一个节点被注册的服务多，某个节点注册的服务少，在某一个瞬间可能导致某些ip节点被调用数少，某些ip节点调用数少的问题。也有可能存在一些本应该被删除而没被删除的脏数据。</p><p><strong>4、小结：服务注册应该选择AP还是CP</strong></p><p>对于服务注册来说，针对同一个服务，即使注册中心的不同节点保存的服务注册信息不相同，也并不会造成灾难性的后果，对于服务消费者来说，能消费才是最重要的，就算拿到的数据不是最新的数据，消费者本身也可以进行尝试失败重试。总比为了追求数据的一致性而获取不到实例信息整个服务不可用要好。</p><p>所以，对于服务注册来说，可用性比数据一致性更加的重要，选择AP。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>这里实现分布式锁的方式选取了三种：</p><ul><li><p>基于数据库实现分布式锁</p></li><li><p>基于redis实现分布式锁</p></li><li><p>基于zookeeper实现分布式锁</p></li></ul><h4 id="基于数据库"><a href="#基于数据库" class="headerlink" title="基于数据库"></a>基于数据库</h4><p>创建表lock</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `lock` (</span><br><span class="line">  `method_lock` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`method_lock`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>利用<code>method_lock</code>作为唯一主键，当进行上锁的时候进行insert动作，数据库成功录入则认为上锁成功，当数据库报出<code>Duplicate entry</code> 则表示无法获取该锁</p><p>不过这种方式对于单主却无法自动切换主从的mysql来说，基本就无法现实P分区容错性，（Mysql自动主从切换在目前并没有十分完美的解决方案）。可以说这种方式强依赖于数据库的可用性，数据库写操作是一个单点，一旦数据库挂掉，就导致锁的不可用。这种方式基本不在CAP的一个讨论范围。</p><h4 id="基于Redis（AP）"><a href="#基于Redis（AP）" class="headerlink" title="基于Redis（AP）"></a>基于Redis（AP）</h4><p>redis单线程串行处理天然就是解决串行化问题，用来解决分布式锁是再适合不过。</p><p>实现方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setnx key <span class="keyword">value</span> Expire_time</span><br><span class="line">获取到锁 返回 <span class="number">1</span> ， 获取失败 返回 <span class="number">0</span></span><br></pre></td></tr></table></figure><p>为了解决数据库锁的无主从切换的问题，可以选择redis集群，或者是 sentinel 哨兵模式，实现主从故障转移，当master节点出现故障，哨兵会从slave中选取节点，重新变成新的master节点。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d05889f092fb7f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>哨兵模式故障转移是由sentinel集群进行监控判断，当maser出现异常即复制中止，重新推选新slave成为master，sentinel在重新进行选举并不在意主从数据是否复制完毕具备一致性。</p><p><strong>所以redis的复制模式是属于AP的模式</strong>。保证可用性，在主从复制中“主”有数据，但是可能“从”还没有数据，这个时候，一旦主挂掉或者网络抖动等各种原因，可能会切换到“从”节点，这个时候可能会导致两个业务县城同时获取得两把锁</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d05889f24be477?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>这个过程如下：</p><ol><li>业务线程-1 向主节点请求锁</li><li>业务线程-1 获取锁</li><li>业务线程-1 获取到锁并开始执行业务</li><li>这个时候redis刚生成的锁在主从之间还未进行同步</li><li>redis这时候主节点挂掉了</li><li>redis的从节点升级为主节点</li><li>业务线程-2 想新的主节点请求锁</li><li>业务线程-2 获取到新的主节点返回的锁</li><li>业务线程-2 获取到锁开始执行业务</li><li>这个时候 业务线程-1 和 业务线程-2 同时在执行任务</li></ol><p>上述的问题其实并不是redis的缺陷，只是<span style="color:red">redis采用了AP模型，它本身无法确保我们对一致性的要求</span>。</p><p>redis官方推荐redlock算法来保证，问题是redlock至少需要三个redis主从实例来实现，维护成本比较高，相当于redlock使用三个redis集群实现了自己的另一套一致性算法，比较繁琐，在业界也使用得比较少。</p><blockquote><h5 id="能否使用redis作为分布式锁？"><a href="#能否使用redis作为分布式锁？" class="headerlink" title="能否使用redis作为分布式锁？"></a>能否使用redis作为分布式锁？</h5></blockquote><p>能不能使用redis作为分布式锁，这个本身就不是redis的问题，还是取决于业务场景，我们先要自己确认我们的场景是适合 AP 还是 CP ，<span style="color:red">如果在社交发帖等场景下，我们并没有非常强的事务一致性问题，redis提供给我们高性能的AP模型是非常适合的，但如果是交易类型，对数据一致性非常敏感的场景，我们可能要寻在一种更加适合的 CP 模型</span></p><h4 id="基于zookeeper（CP）"><a href="#基于zookeeper（CP）" class="headerlink" title="基于zookeeper（CP）"></a>基于zookeeper（CP）</h4><p>redis其实无法确保数据的一致性，先来看zookeeper是否合适作为我们需要的分布式锁，首先zk的模式是CP模型，也就是说，当zk锁提供给我们进行访问的时候，在zk集群中能确保这把锁在zk的每一个节点都存在。</p><p><strong>1、zk锁实现的原理</strong></p><p>特性：</p><ul><li>有序节点<ul><li>当在一个父目录下如 &#x2F;lock 下创建 有序节点，节点会按照严格的先后顺序创建出自节点 lock000001,lock000002,lock0000003,以此类推，有序节点能严格保证各个自节点按照排序命名生成。</li></ul></li><li>临时节点<ul><li>客户端建立了一个临时节点，在客户端的会话结束或会话超时，zookepper会自动删除该节点</li></ul></li><li>事件监听<ul><li>在读取数据时，我们可以对节点设置监听，当节点的数据发生变化时，zookeeper会通知客户端。</li></ul></li></ul><p>结合这几个特点，来看下<strong>zk是怎么组合分布式锁的</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588a51620561?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><ol><li>业务线程-1、业务线程-2 分别向zk的&#x2F;lock目录下，申请创建有序的临时节点</li><li>业务线程-1 抢到&#x2F;lock0001 的文件，也就是在整个目录下最小序的节点，也就是线程-1获取到了锁</li><li>业务线程-2 只能抢到&#x2F;lock0002的文件，并不是最小序的节点，线程2未能获取锁</li><li>业务线程-1 与 lock0001 建立了连接，并维持了心跳，维持的心跳也就是这把锁的租期</li><li>当业务线程-1 完成了业务，将释放掉与zk的连接，也就是释放了这把锁</li></ol><p><strong>2、zk分布式锁的代码实现</strong></p><p>zk官方提供的客户端并不支持分布式锁的直接实现，我们需要自己写代码去利用zk的这几个特性去进行实现。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588a68844a5a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><h4 id="使用CP还是AP的分布式锁？"><a href="#使用CP还是AP的分布式锁？" class="headerlink" title="使用CP还是AP的分布式锁？"></a>使用CP还是AP的分布式锁？</h4><p>首先得了解清楚我们使用分布式锁的场景，为何使用分布式锁，用它来帮我们解决什么问题，先聊场景后聊分布式锁的技术选型。</p><p>无论是redis，zk，例如redis的AP模型会限制很多使用场景，但它却拥有了几者中最高的性能，zookeeper的分布式锁要比redis可靠很多，但他繁琐的实现机制导致了它的性能不如redis，而且zk会随着集群的扩大而性能更加下降。</p><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>如果说到事务，ACID是传统数据库常用的设计理念，追求强一致性模型，关系数据库的ACID模型拥有高一致性+可用性，所以很难进行分区，<span style="color:red">所以在微服务中ACID已经是无法支持，我们还是回到CAP去寻求解决方案</span>，不过根据上面的讨论，CAP定理中，要么只能CP，要么只能AP，如果我们追求数据的一致性而忽略可用性这个在微服务中肯定是行不通的，如果我们追求可用性而忽略一致性，那么在一些重要的数据（例如支付，金额）肯定出现漏洞百出，这个也是无法接受；所以我们既要一致性，也要可用性。</p><p><span style="color:red">都要是无法实现的</span>，但我们能不能在一致性上作出一些妥协，不追求强一致性，转而<span style="color:red">追求最终一致性</span>，所以<span style="color:red">引入BASE理论</span></p><blockquote><p>BASE理论：</p><p>在分布式事务中，BASE最重要是为CAP提出了最终一致性的解决方案，BASE强调牺牲高一致性，从而获取可用性，数据允许在一段时间内不一致，只要保证最终一致性就可以了。</p></blockquote><h4 id="实现最终一致性"><a href="#实现最终一致性" class="headerlink" title="实现最终一致性"></a>实现最终一致性</h4><p><strong>1、弱一致性</strong>：系统不能保证后续访问返回更新的值。需要在一些条件满足之后，更新的值才能返回。从更新操作开始，到系统保证任何观察者总是看到更新的值的这期间被称为不一致窗口。</p><p><strong>2、最终一致性</strong>：这是弱一致性的特殊形式；存储系统保证如果没有对某个对象的新更新操作，最终所有的访问将返回这个对象的最后更新的值。</p><h4 id="BASE模型"><a href="#BASE模型" class="headerlink" title="BASE模型"></a>BASE模型</h4><p>BASE模型是传统ACID模型的反面，不同与ACID，<span style="color:red">BASE强调牺牲高一致性，从而获得可用性</span>，数据允许在一段时间内的不一致，只要保证最终一致就可以了。</p><ul><li>Basically Available：基本可用，支持分区失败</li><li>Soft state：软状态，状态可以有一段时间不同步</li><li>Eventually consistent：最终一致，最终数据是一致的就可以了，而不是时时一致</li></ul><h4 id="分布式事务-1"><a href="#分布式事务-1" class="headerlink" title="分布式事务"></a>分布式事务</h4><p>在分布式系统中，要实现分布式事务，无外乎几种解决方案。方案各有不同，不过其实都是遵循BASE理论，是最终一致性模型。</p><ul><li>两阶段提交（2PC）</li><li>补偿事务（TCC）</li><li>本地消息表</li><li>MQ事务消息</li></ul><p><strong>1、两阶段提交（2PC）</strong></p><p>其实还有一个数据库的XA事务，不过目前在真正的互联网中实际的应用基本很少，两阶段提交就是使用XA原理。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588a87ee0c96?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>在 XA 协议中分为两阶段：</p><ol><li>事务管理器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是否可以提交。</li><li>事务协调器要求每个数据库提交数据，或者回滚数据。</li></ol><p>说一下，为何在互联网的系统中没被改造过的两阶段提交基本很少被业界应用，最最大的缺点就是同步阻塞问题，在资源准备就绪之后，资源管理器中的资源就一直处于阻塞，直到提交完成之后，才进行资源释放。这个在互联网高并发大数据的今天，两阶段的提交是不能满足现在互联网的发展。</p><p>还有就是两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，例如：</p><ul><li>比如在第二阶段中，假设协调者发出了事务 Commit 的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了 Commit 操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。</li></ul><p><strong>2、补偿事务（TCC）</strong></p><p>TCC是服务化的两阶段变成模型，每个业务服务都必须实现 try，confirm，calcel三个方法，这三个方式可以对应到SQL事务中Lock，Commit，Rollback。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588aa354cd70?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>相比两阶段提交，TCC解决了几个问题</p><p>同步阻塞，引入了超时机制，超时后进行补偿，并不会像两阶段提交锁定了整个资源，将资源转换为业务逻辑形式，粒度变小。 因为有了补偿机制，可以由业务活动管理器进行控制，保证数据一致性。</p><p>1). try阶段</p><p>try只是一个初步的操作，进行初步的确认，它的主要职责是完成所有业务的检查，预留业务资源</p><p>2). confirm阶段</p><p>confirm是在try阶段检查执行完毕后，继续执行的确认操作，必须满足幂等性操作，如果confirm中执行失败，会有事务协调器触发不断的执行，直到满足为止</p><p>3). cancel是取消执行，在try没通过并释放掉try阶段预留的资源，也必须满足幂等性，跟confirm一样有可能被不断执行</p><p>一个下订单，生成订单扣库存的例子：</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588aa9cf1fed?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>接下来看看，我们的下单扣减库存的流程怎么加入TCC</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588ab8cd2a20?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>在try的时候，会让库存服务预留n个库存给这个订单使用，让订单服务产生一个“未确认”订单，同时产生这两个预留的资源， 在confirm的时候，会使用在try预留的资源，在TCC事务机制中认为，如果在try阶段能正常预留的资源，那么在confirm一定能完整的提交</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588ab8c51652?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>在try的时候，有任务一方为执行失败，则会执行cancel的接口操作，将在try阶段预留的资源进行释放。</p><p>这个并不是重点要论tcc事务是怎么实现，重点还是讨论分布式事务在CAP+BASE理论的应用。实现可以参考：<a href="https://link.juejin.cn/?target=https://github.com/changmingxie/tcc-transaction">github.com&#x2F;changmingxi…</a></p><p><strong>3、本地消息表</strong></p><p>本地消息表这个方案最初是 eBay 提出的，eBay 的完整方案 <a href="https://link.juejin.cn/?target=https://queue.acm.org/detail.cfm?id=1394128%E3%80%82">queue.acm.org&#x2F;detail.cfm?…</a></p><p>本地消息表这种实现方式应该是业界使用最多的，其核心思想是将分布式事务拆分成本地事务进行处理。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588acde414a6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>对于本地消息队列来说，核心就是将大事务转变为小事务，还是用上面下订单扣库存的例子说说明</p><ol><li>当我们去创建订单的时候，我们新增一个本地消息表，把创建订单和扣减库存写入到本地消息表，放在同一个事务（依靠数据库本地事务保证一致性）</li><li>配置一个定时任务去轮训这个本地事务表，扫描这个本地事务表，把没有发送出去的消息，发送给库存服务，当库存服务收到消息后，会进行减库存，并写入服务器的事务表，更新事务表的状态。</li><li>库存服务器通过定时任务或直接通知订单服务，订单服务在本地消息表更新状态。</li></ol><p>这里须注意的是，对于一些扫描发送未成功的任务，会进行重新发送，所以必须保证接口的幂等性。</p><p>本地消息队列是BASE理论，是最终一致性模型，适用对一致性要求不高的情况。</p><p><strong>4、MQ事务</strong></p><p>RocketMq在4.3版本已经正式宣布支持分布式事务，在选择Rokcetmq做分布式事务请务必选择4.3以上的版本。</p><p>RocketMQ中实现了分布式事务，实际上是对本地消息表的一个封装，将本地消息表移动到了MQ内部。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588ae2844970?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>事务消息作为一种异步确保型事务， 将两个事务分支通过 MQ 进行异步解耦，RocketMQ 事务消息的设计流程同样借鉴了两阶段提交理论，整体交互流程如下图所示：</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588aeba679cf?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>MQ事务是对本地消息表的一层封装，将本地消息表移动到了MQ内部，所以也是基于BASE理论，是最终一致性模式，对强一致性要求不那么高的事务适用，同时MQ事务将整个流程异步化了，也非常适合在高并发情况下使用。</p><h1 id="基本理论"><a href="#基本理论" class="headerlink" title="基本理论"></a>基本理论</h1><h2 id="什么是ZooKeeper？"><a href="#什么是ZooKeeper？" class="headerlink" title="什么是ZooKeeper？"></a>什么是ZooKeeper？</h2><p><code>ZooKeeper</code> 是一个开源的分布式应用程序协调服务器，其为分布式系统提供一致性服务。其一致性是通过基于 <code>Paxos</code> 算法的 <code>ZAB</code> 协议完成的。其主要功能包括：<span style="color:red">配置维护、分布式同步、集群管理、分布式事务等</span>。</p><blockquote><p>分布式和集群？</p></blockquote><p>比如，我现在有一个秒杀服务，并发量太大单机系统承受不住，那我加几台服务器也 <strong>一样</strong> 提供秒杀服务，这个时候就是 <strong><code>Cluster</code> 集群</strong> 。</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/10/16f8ed577f3e9b9e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="cluster"></p><p>但是，我现在换一种方式，我将一个秒杀服务 <strong>拆分成多个子服务</strong> ，比如创建订单服务，增加积分服务，扣优惠券服务等等，<strong>然后我将这些子服务都部署在不同的服务器上</strong> ，这个时候就是  <strong><code>Distributed</code> 分布式</strong> 。</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/10/16f8ed5781c6af29?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="distributed"></p><p>加机器更加适用于构建集群，因为它真是只有加机器。</p><p>对于分布式来说，首先需要将业务进行拆分，然后再加机器（不仅仅是加机器那么简单），同时还要去解决分布式带来的一系列问题，比如各个分布式组件如何协调起来，如何减少各个系统之间的耦合度，分布式事务的处理，如何去配置整个分布式系统等等。<code>ZooKeeper</code> 主要就是解决这些问题的。</p><h2 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a><strong>一致性问题</strong></h2><blockquote><p>分布式系统必然存在的问题：CAP问题</p><p>例子：把一个班级当成一个系统，学生是系统中独立的子系统，小红和小明谈恋爱被小花发现了，小花告诉了周围的人，消息在班级里传播起来了。在消息传播过程中，你抓到一个同学问他情况，如果他不知道说明系统出现了消息不一致问题；如果他不回答你，说明系统出现了可用性问题。</p></blockquote><p>为了解决数据一致性问题，出现了很多一致性协议和算法，比如2PC、3PC、Paxos算法等。</p><h3 id="2PC（两阶段提交）"><a href="#2PC（两阶段提交）" class="headerlink" title="2PC（两阶段提交）"></a><strong>2PC（两阶段提交）</strong></h3><p>涉及两个角色：协调者、参与者</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/6/16d0588a87ee0c96?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="image"></p><p>第一阶段：当要执行一个分布式事务的时候</p><ul><li>事务<code>发起者</code>首先向<code>协调者</code>发起事务请求</li><li>然后<code>协调者</code>给所有的<code>参与者</code>发送<code>prepare</code>请求（告诉参与者你们需要执行事务了，如果能执行就先执行但是不提交，执行后给我回复）</li><li><code>参与者</code>收到<code>prepare</code>消息后，开始执行事务（但是不提交），并将<code>Undo</code>和<code>Redo</code>信息记入事务日志中，之后<code>参与者</code>向<code>协调者反馈</code>是否准备好（<code>ready</code>或<code>not ready</code>）</li></ul><p>第二阶段：协调者根据反馈者的反馈决定接下来是否可以进行事务的提交</p><ul><li>如果<code>所有的参与者</code>都返回<code>ready</code>消息，这个时候就进行事务的提交，<code>协调者</code>给所有的<code>参与者</code>发送<code>commit</code>请求，<code>参与者</code>收到<code>commit</code>请求时会执行事务的提交操作，提交完毕后给协调者发送提交成功的响应</li><li>如果不是所有参与者返回<code>ready</code>消息，协调者给所有的参与者发送<code>rollback</code>请求</li></ul><p><strong>带来的问题</strong></p><ul><li>单点故障：如果协调者挂了，整个系统都不可用了</li><li>阻塞问题：当协调者发送<code>prepare</code>请求，参与者如果可以处理就会进行事务处理但是不提交，就会一直占用资源，如果协调者挂了，这些资源也不会被释放</li><li>数据不一致问题：在第二阶段，协调者只发送一部分的<code>commit</code>请求就挂了，那么就意味着部分参与者会进行事务提交，这个时候就会出现不一致问题</li></ul><hr/><h3 id="3PC（三阶段提交）"><a href="#3PC（三阶段提交）" class="headerlink" title="3PC（三阶段提交）"></a><strong>3PC（三阶段提交）</strong></h3><p><img src="https://user-gold-cdn.xitu.io/2020/1/10/16f8ed57b11d15d5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="3PC流程"></p><p>CanCommit阶段：协调者向所有参与者发送<code>CanCommit</code>请求，参与者收到请求后根据自己的情况查看是否能执行事务，如果可以则返回<code>yes</code>响应并进入预备状态，否则返回<code>no</code>；</p><p>PreCommit阶段：</p><ul><li>协调者根据参与者返回的响应来决定是否可以进行下面的<code>preCommit</code>操作。</li><li>如果参与者返回的都是<code>yes</code>，那么协调者将向所有参与者发送<code>preCommit</code>预提交请求，参与者收到预提交请求后会进行事务的执行操作，并将<code>Undo</code>和<code>Redo</code>信息记入事务日志中，最后如果参与者顺利执行了就返回成功的响应。</li><li>如果第一阶段协调者收到了一个<code>no</code>的信息，或者在一定时间没有收到全部参与者的响应，那么就会中断事务，向所有参与者发送中断请求，参与者一定时间没有收到协调者的请求也会中断；</li></ul><p>DoCommit阶段：</p><ul><li>如果协调者收到了所有参与者的<code>yes</code>请求，那么协调者就会给所有参与者发送<code>DoCommit</code>请求，参与者收到请求后进行事务的提交，完成则会返回响应，协调者收到所有的成功响应后则完成事务。</li><li>若协调者在 <code>PreCommit</code> 阶段 <strong>收到了任何一个 NO 或者在一定时间内没有收到所有参与者的响应</strong> ，那么就会进行中断请求的发送，参与者收到中断请求后则会 <strong>通过上面记录的回滚日志</strong> 来进行事务的回滚操作，并向协调者反馈回滚状况，协调者收到参与者返回的消息后，中断事务。</li></ul><p><strong>带来的问题</strong></p><p>3PC缓解了阻塞问题，但是一致性没有得到根本的解决，比如在PreCommit阶段，当一个参与者收到请求后其他参与者和协调者挂了或者出现了网络分区，这个时候收到消息的参与者都会进行事务提交，出现数据不一致问题。</p><hr/><h3 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a><strong>Paxos算法</strong></h3><p>Paxos算法是基于<strong>消息传递且具有高度容错特性</strong>的一致性算法，其解决的问题就是在分布式系统中就某个值达成一致</p><p><strong>三个角色：Proposer（提案者）、Acceptor（表决者）、Learner（学习者）</strong></p><p>阶段：</p><p><strong>perpare阶段：</strong></p><ul><li>Proposer（提案者）：提出proposal，每个提案者提出提案时都会首先获得到一个具有全局唯一性的、递增的提案编号N，即在整个集群中是唯一的编号N，然后将该变好赋予其要提出的提案，<strong>在第一阶段只将提案编号发送给所有表决者</strong></li><li>Acceptor（表决者）：每个表决者在accept某个提案后，记录编号N在本地，这样每个表决者保存的已经被accept的提案中会存在一个编号最大的提案MaxN。每个表决者只会accept编号比本地MaxN大的提案，在批准提案时表决者会将以前接受过的最大编号的提案作为响应反馈给提案者</li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/1/10/16f8ed57b5e9efa4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="paxos第一阶段"></p><p><strong>accepet阶段：</strong></p><ul><li>当一个提案被Proposer提出后，如果Proposer收到了超过半数的Acceptor的批准，那么此时Proposer会给所有的Acceptor发送真正的提案，发送内容和编号</li><li>Acceptor收到提案请求后再次比较本身已经批准过的最大提案编号和该提案编号，如果该提案编号大于等于已经批准的最大编号，就accept该提案，执行提案内容不提交，随后将情况返回给Proposer，如果不满足则不回应或者返回NO</li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/1/10/16f8ed57b724fad4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="paxos第二阶段1"></p><ul><li><p>当 <code>Proposer</code> 收到超过半数的 <code>accept</code> ，那么它这个时候会向所有的 <code>acceptor</code> 发送提案的提交请求。需要注意的是，因为上述仅仅是超过半数的 <code>acceptor</code> 批准执行了该提案内容，其他没有批准的并没有执行该提案内容，所以这个时候需要<strong>向未批准的 <code>acceptor</code> 发送提案内容和提案编号并让它无条件执行和提交</strong>，而对于前面已经批准过该提案的 <code>acceptor</code> 来说 <strong>仅仅需要发送该提案的编号</strong> ，让 <code>acceptor</code> 执行提交就行了。</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/10/16f8ed57da927091?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="paxos第二阶段2"></p></li></ul><p>而如果 <code>Proposer</code> 如果没有收到超过半数的 <code>accept</code> 那么它将会将 <strong>递增</strong> 该 <code>Proposal</code> 的编号，然后 <strong>重新进入 <code>Prepare</code> 阶段</strong> 。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka</title>
      <link href="/2022/02/07/kafka/"/>
      <url>/2022/02/07/kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>1、Kafka是一个多分区、多副本且基于 ZooKeeper 协调的分布式消息系统，是一个<strong>分布式</strong>流式处理平台，以高吞吐、可持久化、可水平扩展、支持数据处理等多种特性被广泛使用</p><p>2、Kafka是一个<strong>分布式</strong>的<strong>基于发布&#x2F;订阅模式</strong>的消息队列</p><p>2、三大角色：</p><ul><li><strong>消息系统：</strong>系统解耦、冗余存储、流量削峰、缓冲、异步通信、扩展性、可恢复性等功能，还提供了消息顺序性保障和回溯消费功能</li><li><strong>存储系统：</strong>持久化功能和多副本机制</li><li><strong>流式处理平台：</strong>提供一个完整的流式处理类库，比如窗口、连接、变换、聚合等操作</li></ul><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>1、应用场景—异步处理</p><p><img src="https://img-blog.csdnimg.cn/c4101c2f41a84adfa9c87e26d6b6ed99.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>2、好处</strong></p><ul><li>解耦<ul><li>允许你独立的扩展或修改两边的处理过程，只需要确保它们遵守同样的接口约束</li></ul></li><li>可恢复性<ul><li>系统的一部分组件失效时，不会影响整个系统，消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列的消息仍然可以在系统恢复后被处理</li></ul></li><li>缓冲<ul><li>有助于控制和优化数据流经过系统的速度，解决生产和消费处理速度不一致的问题</li></ul></li><li>灵活性 &amp; 峰值处理能力<ul><li>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而崩溃</li></ul></li><li>异步通信<ul><li>用户不需要立刻处理信息，消息队列提供了异步处理机制，允许用户把一个消息放入队列，但是不立刻处理。</li></ul></li></ul><p><strong>3、消息队列的两种模式</strong></p><ul><li><p><strong>点对点模式</strong>（一对一，消费者主动拉取数据，消息收到后消息清除）</p><ul><li>消息生产者生产消息后发送到queue中，然后消费者从queue中取出并且消费消息。消息被消费后queue中不再有存储，所以<strong>消费者不能消费到已经被消费的消息</strong>。queue支持存在多个消费者，但是对于一个消息只有一个消费者可以消费</li></ul><p><img src="https://img-blog.csdnimg.cn/279331ccc8a64fbc8c43f3163fc7e93e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><strong>发布&#x2F;订阅模式</strong>（一对多，消费者消费后不会清除消息）</p><ul><li>消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息，和点对点的方式不同，发布到topic的消息会被所有订阅者消费</li><li>两种方式：<ul><li>类似于公众号，topic队列进行主动推送</li><li>消费者<strong>主动拉取</strong>（Kafka），消费者可以控制自己的消费速度，但是需要长轮询来询问是否有新消息，比较浪费资源</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/c2dff56beed64df381d1846e10913f1b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="Kafka基本概念"><a href="#Kafka基本概念" class="headerlink" title="Kafka基本概念"></a>Kafka基本概念</h2><p>Kafka体系结构：</p><ul><li><p>若干<strong>生产者</strong>（Producer）：将数据发送到Broker</p></li><li><p><strong>消费者</strong>：从Broker订阅并消费信息</p><ul><li><strong>消费者组</strong>：同一个消费者组内的不同消费者不能消费同一个分区数据<ul><li>好处：提高消费能力</li></ul></li></ul></li><li><p><strong>Kafka 集群</strong>（Kafka Cluster）包含若干<strong>Broker</strong>：将收到的消息存储到<strong>磁盘</strong>中（默认保存7天）</p><ul><li>Topic <strong>主题</strong></li><li>Partition <strong>分区</strong>：为了实现拓展性，一个topic可以分布到多个broker上，每个partition是一个有序队列</li><li>Replica <strong>副本</strong>：为了保证集群中某个节点发生故障时，该节点上的partition数据不丢失，且kafka能过继续工作，一个topic的每个分区都有若干副本（<strong>一个Leader和多个Follower</strong>）<ul><li>Leader：主，生产者发送数据的对象和消费者消费数据的对象</li><li>Follower：从，实时从leader同步数据，保持和leader数据同步</li></ul></li><li><strong>AR</strong>：分区中所有的副本</li><li><strong>ISR</strong>：与leader副本保持一定程度同步的副本（包括leader副本）</li><li><strong>HW</strong>：高水位，标识特定的消息偏移量，消费者只能拉取这个offset之前的消息</li><li><strong>LEO</strong>：标识当前日志文件下一条写入消息的offset</li></ul><blockquote><p>ISR、HW、LEO的关系</p><ul><li>初始状态：<ul><li>Leader消息：0、1、2</li><li>follower1消息：0、1、2</li><li>follower2消息：0、1、2</li></ul></li><li>发送消息3、4（情况1：follower2只收到3）<ul><li>Leader消息：0、1、2、3、4</li><li>follower1消息：0、1、2、3、4</li><li>follower2消息：0、1、2、3</li><li>HW：4 ；LEO：5</li></ul></li><li>发送消息3、4（情况2）<ul><li>Leader消息：0、1、2、3、4</li><li>follower1消息：0、1、2、3、4</li><li>follower2消息：0、1、2、3、4</li><li>HW：5 ；LEO：5</li></ul></li></ul></blockquote></li><li><p><strong>Zookeeper</strong>：</p><ul><li>帮助kafka集群存储一些信息</li><li>帮助消费者存储消费的位置信息offset<ul><li>0.9版本之前存储在zk</li><li>0.9版本之后存储在kafka本地</li></ul></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/23a2ec6a4edd4847a930ca7c31ad5eba.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="mac下Kafka的安装"><a href="#mac下Kafka的安装" class="headerlink" title="mac下Kafka的安装"></a>mac下Kafka的安装</h2><p>1、<code>brew install kafka</code></p><p>2、修改配置文件，目录：<code>/usr/local/etc/kafka/server.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># broker的全局唯一编号，不能重复，int类型</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 允许日志存储路径</span></span><br><span class="line"><span class="meta">log.dirs</span>=<span class="string">/usr/local/var/lib/kafka-logs</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 存储时间：168个小时</span></span><br><span class="line"><span class="meta">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置zookeeper</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">localhost:2181/kafka</span></span><br></pre></td></tr></table></figure><p>3、启动zookeeper</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure><p>4、启动kafka</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-server-start -daemon /usr/<span class="built_in">local</span>/etc/kafka/server.properties</span><br></pre></td></tr></table></figure><p>5、常见命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 列出所有topic</span><br><span class="line">kafka-topics --zookeeper localhost:2181/kafka --list</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 创建topic</span><br><span class="line">kafka-topics --zookeeper localhost:2181/kafka --create --replication-factor 1 --partitions 3 --topic <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">--topic 定义topic名字</span><br><span class="line">--replication-factor 定义副本数</span><br><span class="line">--partitions 分区数</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除topic</span><br><span class="line">kafka-topics --zookeeper localhost:2181/kafka --delete --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 详情</span><br><span class="line">kafka-topics --zookeeper localhost:2181/kafka --describe --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 生产者</span><br><span class="line">kafka-console-producer --topic <span class="built_in">test</span> --broker-list localhost:9092</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 消费者</span><br><span class="line">kafka-console-consumer --topic <span class="built_in">test</span> --bootstrap-server localhost:9092 --from-beginning</span><br><span class="line"></span><br><span class="line">--from-beginning 从开头进行消费</span><br></pre></td></tr></table></figure><h1 id="kafka入门"><a href="#kafka入门" class="headerlink" title="kafka入门"></a>kafka入门</h1><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h3 id="消息层次"><a href="#消息层次" class="headerlink" title="消息层次"></a>消息层次</h3><p><strong>1、第一层：主题层</strong></p><ul><li>每个topic可以配置M个partition，每个partition可以设置N个副本</li></ul><p><strong>2、第二层：分区层</strong></p><ul><li>每个partition的N个副本中只能有一个充当领导的角色，对外提供服务；其他N-1个副本是追随者副本，只是提供数据冗余之用</li></ul><p><strong>3、第三层：消息层</strong></p><ul><li>partition包含若干条消息，每条消息的<strong>位移</strong>从0开始，依次递增</li></ul><h3 id="持久化数据"><a href="#持久化数据" class="headerlink" title="持久化数据"></a>持久化数据</h3><p><strong>1、消息日志（Log）</strong></p><ul><li>kafka使用log（<strong>磁盘上一个只能追加写的物理文件，避免了缓慢的随机I&#x2F;O，该用性能较好的顺序I&#x2F;O</strong>）来保存数据</li><li>Kafka定期删除消息以回收磁盘<ul><li><strong>日志段机制（Log Segment）</strong>：将日志细分为多个日志段，消息被追加写入搭配当前最新的日志段中，写满一个日志段就自动切分一个新的日志段，将老的日志段封存起来，kakfa在后台有定时任务定期检查老的日志段是否能够被删除</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/75698a26aee845eaa0adcec32d0fc045.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p><strong>1、点对点模型（P2P）</strong></p><ul><li><strong>消费者组（Consumer group）</strong>：把多个消费者实例（可以是一个进程，也可以是一个线程）共同组成一个组来消费一组主题<ul><li><strong>可以提高消费者端的吞吐量，多个消费者实例同时消费，加速整个消费端的吞吐量（TPS）</strong></li><li><strong>重平衡</strong>：消费者组里所有的消费者彼此协助，如果某个实例挂了，就会把这个实例负责的分区转移给其他消费者，<strong>kafka消费者实现高可用的重要手段</strong></li></ul></li></ul><p><strong>2、消费位移（offset）</strong></p><ul><li>随时变化，表示消费者的消费进度</li><li>每个消费者都有自己的消费者位移</li></ul><h2 id="是消息引擎系统也是分布式流处理平台"><a href="#是消息引擎系统也是分布式流处理平台" class="headerlink" title="是消息引擎系统也是分布式流处理平台"></a>是消息引擎系统也是分布式流处理平台</h2><p><strong>1、Kafka设计之初的目的是为了提供三个方面的特性</strong></p><ul><li>提供一套API实现生产者和消费者</li><li>降低网络传输和磁盘存储开销</li><li>实现高伸缩性架构</li></ul><p><strong>2、kafka Streams</strong></p><ul><li>在大数据工程领域，Kafka在承接上下游、串联数据管道方面发挥重要的作用</li><li>Kafka于0.10.0.0版本推出流处理组件<strong>Kafka Streams</strong></li></ul><p><strong>3、Kafka Streams的优势</strong></p><ul><li><strong>容易实现端到端的正确性</strong>：处理一条消息有且只有一次机会能够影响系统状态<ul><li>其他框架只能保证在读取kafka消息之后的计算对于状态的影响只有一次，但是计算结果可能多次写入kafka</li></ul></li><li><strong>对于流式计算的定位</strong></li></ul><p>4、<strong>分布式存储系统</strong></p><h1 id="kafka基本使用"><a href="#kafka基本使用" class="headerlink" title="kafka基本使用"></a>kafka基本使用</h1><h2 id="Kafka线上集群部署方案"><a href="#Kafka线上集群部署方案" class="headerlink" title="Kafka线上集群部署方案"></a>Kafka线上集群部署方案</h2><blockquote><p>集群：多个kafka节点机器</p></blockquote><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><strong>1、部署在Linux系统</strong></p><ul><li>I&#x2F;O模型的使用</li><li>数据网络传输效率</li><li>社区支持度</li></ul><p><strong>2、I&#x2F;O模型的使用</strong></p><ul><li>I&#x2F;O模型就是操作系统执行I&#x2F;O指令的方法</li><li><strong>主流I&#x2F;O模型：阻塞式I&#x2F;O、非阻塞式I&#x2F;O、I&#x2F;O多路复用、信号驱动I&#x2F;O、异步I&#x2F;O</strong><ul><li>java的Socket阻塞模式和非阻塞模式：阻塞式I&#x2F;O、非阻塞式I&#x2F;O</li><li>Linux系统的select函数：I&#x2F;O多路复用</li><li>epoll系统调用：介于I&#x2F;O多路复用、信号驱动I&#x2F;O之间</li></ul></li><li><strong>kafka客户端使用java的selector，在linux的实现机制是epoll，在windows实现机制是select，因此部署在linux优势在于能够获得更高效的I&#x2F;O性能</strong></li></ul><p><strong>3、网络传输效率</strong></p><ul><li>kafka生产消费的消息都是通过网络传输的，消息保存在磁盘，因此kafka需要在磁盘和网络间大量数据传输</li><li><strong>Linux 零拷贝（zero copy）技术</strong>：避免将数据从磁盘复制到缓冲区，再将缓冲区数据发送到socket的性能损耗</li></ul><blockquote><p>RocketMQ 选择了 <code>mmap + write</code> 这种零拷贝方式，适用于业务级消息这种小块文件的数据持久化和传输；</p><p>Kafka 采用的是 <code>sendfile</code> 这种零拷贝方式，<strong>适用于系统日志消息这种高吞吐量的大块文件的数据持久化和传输</strong>。但是值得注意的一点是，Kafka 的索引文件使用的是 <code>mmap + write</code> 方式，数据文件使用的是 <code>sendfile</code> 方式。</p><img src="https://img-blog.csdnimg.cn/ab51fbf1c25448d2add180fcc23cee26.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /></blockquote><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p><strong>1、机械磁盘 or 固态硬盘？</strong></p><ul><li>机械磁盘：成本低且容量大，但是容易损坏</li><li>固态硬盘：性能优势大，但是成本高</li><li><strong>选择机械硬盘即可</strong><ul><li>kafka使用的方式多是顺序读写，一定程度上规避了机械磁盘的劣势（随机读写操作慢）</li><li>kafka在软件方面可以保证机械硬盘因易损坏造成的可靠性差等缺陷</li></ul></li></ul><p><strong>2、是否使用磁盘阵列（RAID）？</strong></p><ul><li>使用RAID的优势：提供冗余的磁盘存储空间、提供负载均衡</li><li><strong>kafka自身实现了冗余机制，通过分区也可以实现负载均衡</strong></li></ul><p><strong>3、建议：</strong></p><ul><li>追求性价比的公司可以不搭建 RAID，使用普通磁盘组成存储空间即可</li><li>使用机械磁盘完全能够胜任 Kafka 线上环境。</li></ul><h3 id="磁盘容量"><a href="#磁盘容量" class="headerlink" title="磁盘容量"></a>磁盘容量</h3><p><strong>1、需要多大存储空间？</strong></p><ul><li>kafka需要把消息存储在磁盘，默认存储一段时间后自动删除</li><li>kafka集群出了消息数据还有其它类型数据，比如索引数据等</li><li><strong>例子</strong>：假设消息平均大小1KB，每天1亿条1KB消息，保存两份且留存两周，总的空间大小等于200GB，加上为其他数据预留的10%磁盘空间，共220GB，保存两周后整体容量大约3TB左右，kafka支持消息压缩，假设压缩0.75，即需要2.25TB空间</li></ul><p><strong>2、kafka规划磁盘容量需要考虑的因素</strong></p><ul><li>新增消息数量</li><li>消息留存时间</li><li>平均消息大小</li><li>备份数量</li><li>是否启用压缩</li></ul><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>1、<strong>带宽容易成为瓶颈</strong></p><ul><li>kafka通过网络大量进行数据传输</li><li><strong>在真实案例当中，带宽资源不足导致 Kafka 出现性能问题的比例至少占 60% 以上，如果还涉及跨机房传输，那么情况可能就更糟了</strong></li></ul><blockquote><p>一般公司网络使用普通以太网的1Gbps千兆网络，如何进行带宽资源的规划？</p></blockquote><p><strong>真正需要规划的是kafka服务器的数量</strong></p><p>假设机房环境是千兆网络，即 1Gbps，现在的业务目标是在 1 小时内处理 1TB 的业务数据。需要多少台 Kafka 服务器来完成这个业务呢？</p><ul><li><strong>带宽1Gbps，即每秒处理1Gb数据</strong>，假设每台kafka服务器都在专属机器上，没有其他服务。通常kafka会用到70%的带宽资源（需要为其他进程留资源，超70%的阈值会出现网络丢包），也就是说<strong>kafka服务器最多使用大约700Mb的带宽资源</strong></li><li>kafka服务器不能常规性使用这么多带宽资源，通常需要额外流出2&#x2F;3的资源，即<strong>每台服务器使用带宽240Mbps</strong></li><li>如果需要1小时处理1TB数据，每秒需要处理2336Mb数据，除以240，约等于10台服务器，如果消息还需要额外复制两份，那么总的服务器需要乘以3，即30台</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="https://img-blog.csdnimg.cn/3f2237c2b1a84ae087daeba33f8750ca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="集群参数配置"><a href="#集群参数配置" class="headerlink" title="集群参数配置"></a>集群参数配置</h2><img src="https://img-blog.csdnimg.cn/81fc0670ce294627aba9212935e91dc1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:40%;" /><img src="https://img-blog.csdnimg.cn/2f21c4f5351441898ac30e526c6b614f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:40%;" /><h1 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String brokerList = <span class="string">&quot;localhost:9092&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">intConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, brokerList);</span><br><span class="line">        props.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;client.id&quot;</span>, <span class="string">&quot;producer.client.id.demo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties props = intConfig();</span><br><span class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">        ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> ProducerRecord&lt;&gt;(topic, <span class="string">&quot;hello, Kafka 1&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RecordMetadata recordMetadata = producer.send(record).get();</span><br><span class="line">            System.out.println(recordMetadata.partition());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><p>1、生产者发送消息的三种方式：Fire and Fogret、同步、异步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;RecordMetadata&gt; <span class="title">send</span><span class="params">(ProducerRecord&lt;K, V&gt; record)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;RecordMetadata&gt; <span class="title">send</span><span class="params">(ProducerRecord&lt;K, V&gt; record, Callback callback)</span></span></span><br></pre></td></tr></table></figure><ul><li><p><strong>Fire and Fogret</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">&quot;my-topic&quot;</span>, Integer.toString(i), Integer.toString(i)));</span><br></pre></td></tr></table></figure></li><li><p><strong>同步</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式一：producer.send(record).get()</span><br><span class="line">方式二：  </span><br><span class="line">Future&lt;RecordMetadata&gt; future = producer.send(record) ; </span><br><span class="line">RecordMetadata metadata = future.get();</span><br><span class="line">System out.println(<span class="function">metadata <span class="title">top</span> <span class="params">()</span> + &quot;-&quot; + metadata.<span class="title">partition</span><span class="params">()</span> + &quot;:&quot; + metadata.<span class="title">offset</span><span class="params">()</span> )</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>异步</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">producer.send(myRecord,<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e != <span class="keyword">null</span>) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;The offset of the record we just sent is: &quot;</span> + metadata.offset());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>源码分析</strong></p><ul><li><p>异步：调用dosend方法（<strong>同步的send，callback传了null，还是走了这个方法</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;RecordMetadata&gt; <span class="title">send</span><span class="params">(ProducerRecord&lt;K, V&gt; record, Callback callback)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// intercept the record, which can be potentially modified; this method does not throw exceptions</span></span><br><span class="line">  ProducerRecord&lt;K, V&gt; interceptedRecord = <span class="keyword">this</span>.interceptors.onSend(record);</span><br><span class="line">  <span class="keyword">return</span> doSend(interceptedRecord, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Future&lt;RecordMetadata&gt; <span class="title">doSend</span><span class="params">(ProducerRecord&lt;K, V&gt; record, Callback callback)</span> </span>&#123;</span><br><span class="line">  TopicPartition tp = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    throwIfProducerClosed();</span><br><span class="line">    <span class="comment">// first make sure the metadata for the topic is available</span></span><br><span class="line">    <span class="keyword">long</span> nowMs = time.milliseconds();</span><br><span class="line">    ClusterAndWaitTime clusterAndWaitTime;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//这个方法就是一直在等一个条件，这个条件达到了就返回，否则一直等待超时退出。而这个条件就是当前的版本号要大于上个版本号。</span></span><br><span class="line">      clusterAndWaitTime = waitOnMetadata(record.topic(), record.partition(), nowMs, maxBlockTimeMs);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (KafkaException e) &#123;</span><br><span class="line">      .....</span><br><span class="line">    &#125;</span><br><span class="line">    nowMs += clusterAndWaitTime.waitedOnMetadataMs;</span><br><span class="line">    <span class="keyword">long</span> remainingWaitMs = Math.max(<span class="number">0</span>, maxBlockTimeMs - clusterAndWaitTime.waitedOnMetadataMs);</span><br><span class="line">    Cluster cluster = clusterAndWaitTime.cluster;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//序列化key、value</span></span><br><span class="line">    <span class="keyword">byte</span>[] serializedKey;</span><br><span class="line">    serializedKey = keySerializer.serialize(record.topic(), record.headers(), record.key());</span><br><span class="line">    <span class="keyword">byte</span>[] serializedValue;</span><br><span class="line">    serializedValue = valueSerializer.serialize(record.topic(), record.headers(), record.value());</span><br><span class="line">    <span class="keyword">int</span> partition = partition(record, serializedKey, serializedValue, cluster);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分区</span></span><br><span class="line">    tp = <span class="keyword">new</span> TopicPartition(record.topic(), partition);</span><br><span class="line"></span><br><span class="line">    setReadOnly(record.headers());</span><br><span class="line">    Header[] headers = record.headers().toArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> serializedSize = AbstractRecords.estimateSizeInBytesUpperBound(apiVersions.maxUsableProduceMagic(),</span><br><span class="line">                                                                       compressionType, serializedKey, serializedValue, headers);</span><br><span class="line">    ensureValidRecordSize(serializedSize);</span><br><span class="line">    <span class="keyword">long</span> timestamp = record.timestamp() == <span class="keyword">null</span> ? nowMs : record.timestamp();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// callback</span></span><br><span class="line">    Callback interceptCallback = <span class="keyword">new</span> InterceptorCallback&lt;&gt;(callback, <span class="keyword">this</span>.interceptors, tp);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//result，添加到消息累加器</span></span><br><span class="line">    RecordAccumulator.RecordAppendResult result = accumulator.append</span><br><span class="line">      (tp, timestamp, serializedKey,serializedValue, headers, interceptCallback, remainingWaitMs, <span class="keyword">true</span>, nowMs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果是新的批次</span></span><br><span class="line">    <span class="keyword">if</span> (result.abortForNewBatch) &#123;</span><br><span class="line">      <span class="keyword">int</span> prevPartition = partition;</span><br><span class="line">      partitioner.onNewBatch(record.topic(), cluster, prevPartition);</span><br><span class="line">      partition = partition(record, serializedKey, serializedValue, cluster);</span><br><span class="line">      tp = <span class="keyword">new</span> TopicPartition(record.topic(), partition);</span><br><span class="line">      </span><br><span class="line">      interceptCallback = <span class="keyword">new</span> InterceptorCallback&lt;&gt;(callback, <span class="keyword">this</span>.interceptors, tp);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//result，添加到消息累加器</span></span><br><span class="line">      result = accumulator.append(tp, timestamp, serializedKey,</span><br><span class="line">                                  serializedValue, headers, interceptCallback, remainingWaitMs, <span class="keyword">false</span>, nowMs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    。。。。。。</span><br><span class="line">    <span class="keyword">return</span> result.future;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2、如果想使用同步方式，其实是<strong>通过异步方式间接实现</strong>，因为异步方式返回的是一个future对象，<strong>在这对象上调用get方法</strong>，将被阻塞直到返回结果。</p><ul><li><strong>Future</strong>：表示一个任务的生命周期，并提供相应的方法判断任务是否已经完成或取消，以及获取任务的结果和取消任务等。</li></ul><p>3、producer一般有两种类型异常：可重试异常、不可重试异常</p><ul><li>可重试异常：网络异常、分区leader副本不可用</li><li>不可重试异常：消息太大</li></ul><p>4、通常一个producer不会只负责发送单条消息，更多是发送多条消息，发送完这些消息后需要调用kafkaProducer的close方法回收资源</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">long</span> timeout , TimeUnit timeUnit)</span></span></span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>生产者需要使用序列化器（serializer）把对象转换成字节数组才能通过网络发送给kafka；消费者需要使用反序列化器（deserializer）把从kafka收到的字节数组转换成相应的对象</p><h2 id="分区器"><a href="#分区器" class="headerlink" title="分区器"></a>分区器</h2><blockquote><p>消息通过send方法发往broker过程中，有可能需要经过<strong>拦截器（非必需）、序列化器、分区器</strong>的一系列作用之后才能被真正发往broker</p></blockquote><p>1、消息通过序列化之后需要确定它发往的分区，<strong>如果消息ProducerRecord没有指定partition字段，那么就需要依赖分区器，根据key这个字段来计算partition的值</strong>。</p><ul><li>分区器的作用：为消息分配分区</li></ul><p>2、默认分区器：<code>org.apache.kafka.clients.producer.internals.DefaultPartitioner</code>，实现了<code>org.apache.kafka.clients.producer.Partitioner</code>接口，定义了2个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic,Object key,<span class="keyword">byte</span>[] keyBytes,Object value,<span class="keyword">byte</span>[] valueBytes,Cluster cluster)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li>partition方法：计算分区号，返回int类型</li><li>close方法：关闭分区器的时候回收一些资源</li></ul><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>1、两种拦截器</p><ul><li>生产者拦截器：在消息发送前做一些准备工作、发送回调逻辑前做一些定制化需求</li><li>消费者拦截器</li></ul><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><img src="https://img-blog.csdnimg.cn/afdbd91d7e194646a651da2cc6c56a14.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:80%;" /><p>1、整个生产者客户端由两个线程协调运行：<strong>主线程、sender线程</strong></p><ul><li>主线程：KafkaProducer创建消息，通过可能的拦截器、序列化器、分区器的作用后缓存到消息累加器</li><li>sender线程：从消息累加器中获取消息发送到kafka中</li></ul><p><strong>2、消息累加器</strong></p><ul><li>缓存消息以便sender线程可以批量发送，减少网络传输的资源消耗</li><li>缓存大小可以通过生产者客户端参数buffer.memory配置，默认32MB</li><li>如果生产者发送速度超过发往服务器的速度，就会导致生产者空间不足，这个时候send方法要么阻塞要么异常</li><li>主线程发送的消息会被追加到消息累加器的某个双端队列（Deque）中，队列的内容就是ProducerBatch，包含多个ProducerRecord</li></ul><p><strong>3、sender线程</strong></p><ul><li>获取消息后，进一步将原来<code>&lt;分区,Deque&lt;ProducerBatch&gt;&gt;</code>转换为<code>&lt;Node,List&lt;ProducerBatch&gt;&gt;</code>的形式，其中node表示kafka的broker节点</li><li>sender进一步封装成<code>&lt;Node,Request&gt;</code>的形式，发往各个node</li><li>sender发送之前会保存到InFightRequest中，保持对象的形式是<code>Map&lt;NodeId,Deque&lt;Request&gt;&gt;</code>，主要是<strong>缓存已经发出去但是还没有收到响应的请求</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/d72981631bb74f6abcd20a2b31414c2b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h2><p><strong>1、acks</strong></p><ul><li>指定分区中必须有多少副本收到这条消息，之后生产者才认为消息是成功写入的</li><li>1：只要leader写入就会响应</li><li>0：不需要等待服务端响应</li><li>-1或者all：ISR中副本都成功写入就会响应</li></ul><p><strong>2、max.request.size</strong></p><ul><li>限制生产者发送消息的最大值，默认1MB</li></ul><p><strong>3、retries</strong></p><ul><li>生产者重试次数，默认0</li></ul><p><strong>4、linger.ms</strong></p><ul><li>生产者发送ProducerBatch之前等待更多消息（ProducerRecord）加入的时间，默认0</li></ul><h2 id="生产者消息分区机制"><a href="#生产者消息分区机制" class="headerlink" title="生产者消息分区机制"></a>生产者消息分区机制</h2><h3 id="为什么分区？"><a href="#为什么分区？" class="headerlink" title="为什么分区？"></a>为什么分区？</h3><p>1、kafka的消息组织方式</p><ul><li>主题：主题下每条消息只会保存在某一个分区（<strong>同一topic消息不保证数据顺序性</strong>）</li><li>分区</li><li>消息</li></ul><img src="https://img-blog.csdnimg.cn/2f3e26b9e3224fe98075ec7aff19277f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、分区的作用：<strong>负载均衡、实现系统的高伸缩性</strong></p><ul><li>不同分区被放置到不同节点的机器上，数据的读写操作也是针对分区这个粒度进行的，每个节点的机器能够独立执行各自分区的读写请求</li></ul><h3 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h3><blockquote><p>分区策略：决定生产者把消息发送到哪个分区的算法</p></blockquote><p><strong>1、自定义配置分区策略</strong></p><ul><li>编写生产者程序时，编写具体的类实现<code>org.apache.kafka.clients.producer.Partitioner</code>接口<ul><li>两个方法：<code>partition()</code>和<code>close()</code></li><li>topic、key、keyBytes、value和valueBytes都属于消息数据，cluster则是集群信息（比如当前 Kafka 集群共有多少主题、多少 Broker 等）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>2、轮询策略</strong></p><ul><li>比如3个分区，那么第一条消息发送到分区0，第二条到分区1，第三条道分区2，以此类推。</li><li><strong>Kafka Java 生产者API的默认分区策略</strong></li><li><strong>有非常优秀的负载均衡表现，最常用的策略之一</strong></li></ul><img src="https://img-blog.csdnimg.cn/e4fc46dc7c4b40c8a0f7f231f7854574.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>3、随机策略</strong></p><ul><li><p>随机把消息放置到任意一个分区</p></li><li><p>实现的partition方法：获取分区List，返回一个小于分区数量的随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line"><span class="keyword">return</span> ThreadLocalRandom.current().nextInt(partitions.size());</span><br></pre></td></tr></table></figure></li><li><p><strong>把数据均匀打散，逊色于轮询策略</strong></p></li></ul><p><strong>4、按消息键保序策略</strong></p><ul><li><p>允许为每个消息定义消息key</p></li><li><p>保证一个key的消息放入一个分区，分区下的消息处理都是有序的</p></li><li><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line"><span class="keyword">return</span> Math.abs(key.hashCode()) % partitions.size();</span><br></pre></td></tr></table></figure></li><li><p><strong>Kafka默认分区策略</strong></p><ul><li>如果指定key，默认按消息键保序策略</li><li>不指定key，使用轮询策略</li></ul></li></ul><blockquote><p>如何保证消息的顺序？</p><ul><li>设置单分区，保证全局的顺序性，但是丧失了多分区的高吞吐量和负载均衡优势</li><li>按照消息的特点设置自定义分区策略，保证一个特点的消息发送到同一个分区，保证了消息的顺序</li></ul></blockquote><p><strong>5、其他分区策略</strong></p><ul><li>按照地理位置分区<ul><li>针对跨城市、跨国家的集群</li></ul></li></ul><h2 id="生产者压缩算法"><a href="#生产者压缩算法" class="headerlink" title="生产者压缩算法"></a>生产者压缩算法</h2><p><strong>1、压缩（compression）</strong></p><ul><li>时间换空间</li><li>用cpu时间换磁盘空间或网络I&#x2F;O传输量</li></ul><h3 id="怎么压缩？"><a href="#怎么压缩？" class="headerlink" title="怎么压缩？"></a>怎么压缩？</h3><p>1、Kafka有两大消息格式：V1版本、V2版本（Kafka 0.11.0.0 中正式引入）</p><p><strong>2、Kafka消息层次</strong></p><ul><li>消息集合（message set）</li><li>消息（message）</li><li><strong>Kafka通常不会直接操作具体一条条消息，总是在消息集合这个层面进行写入操作</strong></li></ul><p><strong>3、V1和V2版本区别</strong></p><ul><li>v1：message、message set</li><li>v2：record、record batch</li><li>v2把消息的公共部分抽取出来放到外层消息集合，这样就不用每条消息都保存这些信息了</li></ul><blockquote><p>V1版本每条消息都需要执行CRC校验，但有些情况下消息的 CRC 值是会发生变化的，对每条消息都执行 CRC 校验就有点没必要了，<strong>不仅浪费空间还耽误 CPU 时间</strong>，因此在 V2 版本中，<strong>消息的 CRC 校验工作就被移到了消息集合这一层</strong></p></blockquote><ul><li><strong>保存压缩消息的方法发生了变化</strong></li></ul><blockquote><p>V1 版本中保存压缩消息的方法是把多条消息进行压缩然后保存到外层消息的消息体字段中；而 V2 版本的做法是对整个消息集合进行压缩</p></blockquote><p>4、对两个版本分别做了一个简单的测试，结果显示，在相同条件下，不论是否启用压缩，V2 版本都比 V1 版本节省磁盘空间。当启用压缩时，这种节省空间的效果更加明显。</p><h3 id="什么时候压缩？"><a href="#什么时候压缩？" class="headerlink" title="什么时候压缩？"></a>什么时候压缩？</h3><p>1、可能发生的两个地方：生产者、Broker</p><p><strong>2、生产者端压缩</strong></p><ul><li><p>配置 compression.type 参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>);</span><br><span class="line">props.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">props.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">props.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line"><span class="comment">// 开启GZIP压缩</span></span><br><span class="line">props.put(<span class="string">&quot;compression.type&quot;</span>, <span class="string">&quot;gzip&quot;</span>);</span><br><span class="line"></span><br><span class="line">Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br></pre></td></tr></table></figure></li><li><p>比较关键的代码行是 props.put(“compression.type”, “gzip”)，它表明该 Producer 的压缩算法使用的是 GZIP。<strong>这样 Producer 启动后生产的每个消息集合都是经 GZIP 压缩过的</strong>，故而能很好地节省网络传输带宽以及 Kafka Broker 端的磁盘占用。</p></li></ul><p><strong>3、Broker端压缩</strong></p><ul><li>出现的情况：<ul><li>Broker与Producer使用的压缩算法不同，Broker会解压然后重新压缩;</li><li>Broker 端发生了消息格式转换（为了兼容老版本引入）</li></ul></li></ul><h3 id="什么时候解压？"><a href="#什么时候解压？" class="headerlink" title="什么时候解压？"></a>什么时候解压？</h3><p><strong>1、Producer端压缩、Broker端保持、Consumer端解压</strong></p><ul><li>kafka将使用的消息压缩算法封装到消息集合中</li></ul><p><strong>2、Broker端解压</strong></p><ul><li>目的：对消息执行各种验证</li></ul><h3 id="压缩算法对比"><a href="#压缩算法对比" class="headerlink" title="压缩算法对比"></a>压缩算法对比</h3><p>1、2.1.0 版本之前，Kafka 支持 3 种压缩算法：<strong>GZIP、Snappy 和 LZ4</strong>。</p><p>2、从 2.1.0 开始，Kafka 正式支持 <strong>Zstandard</strong> 算法（简写为 zstd）。它是 Facebook 开源的一个压缩算法，能够提供超高的<strong>压缩比</strong>（compression ratio）。</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>1、启用压缩的比较合适的时机</p><ul><li>Producer程序运行机器上的cpu资源充足</li><li>带宽资源有限</li><li>如果客户端机器 CPU 资源有很多富余，强烈建议你开启 <strong>zstd 压缩</strong>，这样能极大地节省网络资源消耗</li></ul><p>2、解压</p><ul><li>对不可抗拒的解压缩无能为力，但至少能规避掉那些意料之外的解压缩（比如：<strong>为了兼容老版本引入的解压操作</strong>）</li></ul><h2 id="Java生产者管理TCP连接"><a href="#Java生产者管理TCP连接" class="headerlink" title="Java生产者管理TCP连接"></a>Java生产者管理TCP连接</h2><h3 id="为何采用TCP？"><a href="#为何采用TCP？" class="headerlink" title="为何采用TCP？"></a>为何采用TCP？</h3><blockquote><p>Apache Kafka通信都是基于TCP的</p></blockquote><p>1、原因</p><ul><li>从社区角度来看，在开发客户端时，人们能够利用 TCP 本身提供的一些高级功能，比如<strong>多路复用请求以及同时轮询多个连接的能力</strong>。</li></ul><p><strong>2、多路复用请求</strong></p><ul><li>将多个数据流合并到底层单一物理连接</li><li>TCP的多路复用请求会在一条物理连接上创建若干虚拟连接，每个虚拟连接负责流转对应的数据流</li></ul><h3 id="Kafka-生产者程序概览"><a href="#Kafka-生产者程序概览" class="headerlink" title="Kafka 生产者程序概览"></a>Kafka 生产者程序概览</h3><p>Kafka的Java生产者API主要对象就是<code>KafkaProducer</code>，通常开发生产者的步骤有4步：</p><ul><li>构造生产者对象所需参数</li><li>利用参数创建<code>KafkaProducer</code>对象实例</li><li>使用<code>KafkaProducer</code>的send方法发送消息<ul><li><strong>同步生产者</strong>：这个生产者写一条消息的时候，它就立马发送到某个分区去。follower还需要从leader拉取消息到本地，follower再向leader发送确认，leader再向客户端发送确认。由于这一套流程之后，客户端才能得到确认，所以很慢。</li><li><strong>异步生产者</strong>：这个生产者写一条消息的时候，先是写到某个缓冲区，这个缓冲区里的数据还没写到broker集群里的某个分区的时候，它就返回到client去了。虽然效率快，但是不能保证消息一定被发送出去了。</li></ul></li><li>调用<code>KafkaProducer</code>的close方法关闭生产者并释放资源</li></ul><blockquote><p>当我们开发一个 Producer 应用时，生产者会向 Kafka 集群中指定的主题（Topic）发送消息，这必然涉及与 Kafka Broker 创建 TCP 连接。那么，Kafka 的 Producer 客户端是如何管理这些 TCP 连接的呢？</p></blockquote><h3 id="何时创建TCP连接？"><a href="#何时创建TCP连接？" class="headerlink" title="何时创建TCP连接？"></a>何时创建TCP连接？</h3><p>1、时间：<strong>创建<code>KafkaProducer</code>对象实例的时候建立与Broker的TCP连接</strong></p><ul><li><strong>在创建 KafkaProducer 实例时，生产者应用会在后台创建并启动一个名为 Sender 的线程，该 Sender 线程开始运行时首先会创建与 Broker 的连接</strong></li><li>创建时会与<code>bootstrap.servers</code>（producer的一个参数）所有的broker建立连接<ul><li>通常指定3～4台即可，因为一旦连接到一台broker就可以拿到整个集群的broker消息（<strong>发送METADATA请求，metadata消息</strong>）</li></ul></li></ul><p>2、<code>KafkaProducer</code>类是<strong>线程安全</strong>的</p><ul><li>KafkaProducer 实例创建的线程和前面提到的 Sender 线程共享的可变数据结构只有 RecordAccumulator 类，故维护了 RecordAccumulator 类的线程安全，也就实现了 KafkaProducer 类的线程安全。<ul><li>主要的数据结构是一个 ConcurrentMap。TopicPartition 是 Kafka 用来表示主题分区的 Java 对象，本身是不可变对象。而 RecordAccumulator 代码中用到 Deque 的地方都有锁的保护，所以基本上可以认定 RecordAccumulator 类是线程安全的</li></ul></li></ul><p><strong>3、总结：TCP连接的创建时间</strong></p><ul><li>创建<code>KafkaProducer</code>实例时</li><li>更新元数据后（可能创建）<ul><li>发现新的broker加入集群，<strong>需要和没有创建连接的Broker建立TCP连接</strong></li><li>场景：<ul><li>当producer尝试给一个不存在的topic发送信息，broker会告诉producer这个topic不存在，producer会发送<strong>METADATA请求</strong>给kafka集群获取最新的元数据信息</li><li>Producer 通过 metadata.max.age.ms 参数定期地去更新元数据信息（默认5分钟）</li></ul></li></ul></li><li>消息发送时（可能创建）<ul><li>发现broker还没有建立连接</li></ul></li></ul><h3 id="何时关闭TCP连接？"><a href="#何时关闭TCP连接？" class="headerlink" title="何时关闭TCP连接？"></a>何时关闭TCP连接？</h3><p>1、关闭方式</p><ul><li>用户主动关闭：<code>producer.close()</code></li><li>kafka自动关闭</li></ul><p>2、Kafka自动关闭</p><ul><li>与参数connections.max.idle.ms 的值有关（默认9分钟）</li><li>9分钟没有任何请求经过某个TCP连接，Kafka会主动关闭（Broker端发起），客户端会出现大量CLOSE_WAIT连接（客户端可能会hold住这个连接）</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1、KafkaProducer 实例创建时启动 Sender 线程，从而创建与 bootstrap.servers 中所有 Broker 的 TCP 连接。</p><p>2、KafkaProducer 实例首次更新元数据信息之后，还会再次创建与集群中所有 Broker 的 TCP 连接。</p><p>3、如果 Producer 端发送消息到某台 Broker 时发现没有与该 Broker 的 TCP 连接，那么也会立即创建连接。</p><p>4、如果设置 Producer 端 connections.max.idle.ms 参数大于 0，则步骤 1 中创建的 TCP 连接会被自动关闭；如果设置该参数 &#x3D;-1，那么步骤 1 中创建的 TCP 连接将无法被关闭，从而成为“僵尸”连接。</p><h2 id="幂等生产者和事务生产者"><a href="#幂等生产者和事务生产者" class="headerlink" title="幂等生产者和事务生产者"></a>幂等生产者和事务生产者</h2><blockquote><p>Kafka消息交付可靠性保障以及精确处理一次语义的实现</p></blockquote><p><strong>1、可靠性保障</strong>：kafka对生产者和消费者需要处理的消息提供的承诺</p><ul><li><strong>最多一次：</strong>消息可能会丢失，但是绝对不会重复</li><li><strong>至少一次</strong>：消息不会丢失，可能会重复（<strong>Kafka默认</strong>）</li><li><strong>精确一次</strong>：消息不会丢失，不会重复</li></ul><p><strong>2、至少一次（at least once）</strong></p><ul><li>只有生产者获得broker的应答才算发送成功，如果没有应答就会重试发送，可能会出现消息重复发送</li></ul><p><strong>3、最多一次（at most once）</strong></p><ul><li>禁止producer重试</li></ul><p><strong>4、精确一次（exactly once）</strong></p><ul><li>Kafka通过两个机制来实现<ul><li><strong>幂等性（Idempotence）</strong></li><li><strong>事务（Transaction）</strong></li></ul></li></ul><h3 id="什么是幂等性？"><a href="#什么是幂等性？" class="headerlink" title="什么是幂等性？"></a>什么是幂等性？</h3><p>1、概念</p><ul><li>在命令式编程语言（比如 C）中，若一个子程序是幂等的，那它必然不能修改系统状态。这样不管运行这个子程序多少次，与该子程序关联的那部分系统状态保持不变。</li><li>在函数式编程语言（比如 Scala 或 Haskell）中，很多纯函数（pure function）天然就是幂等的，它们不执行任何的 side effect</li></ul><p>2、好处</p><ul><li><strong>可以安全的重试，反正也不会破坏系统状态</strong></li></ul><h3 id="幂等性-Producer"><a href="#幂等性-Producer" class="headerlink" title="幂等性 Producer"></a>幂等性 Producer</h3><p>1、在Kafka 中，Producer 默认不是幂等性的</p><p><strong>2、创建幂等性 Producer</strong></p><ul><li><code>props.put(“enable.idempotence”, ture)</code></li><li>Kafka自动帮你做消息的重复去重</li></ul><p><strong>3、底层原理</strong></p><ul><li>空间换时间：在Broker多保存一些字段：<code>ProducerID</code>、<code>SequenceNumber</code><ul><li><code>ProducerID</code>：每个producer初始化时会被分配一个唯一的id，对客户端不可见</li><li><code>SequenceNumber</code>：producer发送的每个topic和partition都对应一个从0开始递增的值</li></ul></li></ul><p>4、作用范围</p><ul><li>只能保证某个topic的一个partition不出现重复消息，无法实现多个分区的幂等</li><li>只能实现单会话的幂等</li></ul><h3 id="事务型-Producer"><a href="#事务型-Producer" class="headerlink" title="事务型 Producer"></a>事务型 Producer</h3><p><strong>1、事务</strong></p><ul><li>Kafka 自 0.11 版本开始也提供了对事务的支持，目前主要是在 <strong>read committed 隔离级别</strong>上做事情。<strong>它能保证多条消息原子性地写入到目标分区，同时也能保证 Consumer 只能看到事务成功提交的消息</strong>。</li></ul><p>2、设置方法</p><ul><li><p>开启 <code>enable.idempotence = true</code>。</p></li><li><p>设置 Producer 端参数 <code>transactional.id</code>，<strong>可以穿越多次对话</strong></p></li><li><p><strong>实现机制：两阶段提交（2PC）、事务协调器</strong></p></li><li><p>代码调整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化事务</span></span><br><span class="line">producer.initTransactions();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//开启事务</span></span><br><span class="line">  producer.beginTransaction();</span><br><span class="line">  producer.send(record1);</span><br><span class="line">  producer.send(record2);</span><br><span class="line">  <span class="comment">//提交事务</span></span><br><span class="line">  producer.commitTransaction();</span><br><span class="line">&#125; <span class="keyword">catch</span> (KafkaException e) &#123;</span><br><span class="line">  <span class="comment">//终止事务</span></span><br><span class="line">  producer.abortTransaction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上述代码，Record1和Record2被当作一个事务提交，同时写入成功或失败，但是kafka还是会写入底层日志，也就是说消费者还是可以看见这些消息，因此需要设置消费者读取消息的参数：</p><ul><li><code>read_uncommitted</code>：这是默认值，表明 Consumer 能够读取到 Kafka 写入的任何消息，不论事务型 Producer 提交事务还是终止事务，其写入的消息都可以读取。很显然，如果你用了事务型 Producer，那么对应的 Consumer 就不要使用这个值。</li><li><code>read_committed</code>：表明 Consumer 只会读取事务型 Producer 成功提交事务写入的消息。当然了，它也能看到非事务型 Producer 写入的所有消息。</li></ul></li></ul><h1 id="Kafka副本机制"><a href="#Kafka副本机制" class="headerlink" title="Kafka副本机制"></a>Kafka副本机制</h1><p>1、副本机制的概念</p><ul><li>分布式系统在多台网络互联的机器上保存有相同的数据拷贝</li></ul><p>2、副本机制好处</p><ul><li><strong>提供数据冗余</strong></li><li><strong>提供高伸缩性</strong>：支持横向扩展，能够通过增加机器的方式来提升读性能</li><li><strong>改善数据局部性</strong>：允许将数据放入与用户地理位置相近的地方</li></ul><blockquote><p>Kafka的副本机制<strong>只提供了数据冗余</strong></p></blockquote><h2 id="副本定义"><a href="#副本定义" class="headerlink" title="副本定义"></a>副本定义</h2><p>1、副本的概念实际上是在分区层级下定义的，每个分区有若干副本</p><p><strong>2、本质：只能追加写消息的提交日志</strong></p><ul><li>同一个分区下的所有副本保存相同的消息序列，分散在不同的broker上</li></ul><p>3、相关概念</p><ul><li><strong>AR</strong>：分区中所有副本</li><li><strong>ISR</strong>：与leader保持同步的副本集合</li><li><strong>LEO</strong>：标识每个分区最后一条消息的下一个位置，每个副本都有自己的LEO</li><li><strong>HW</strong>：ISR最小的LEO，消费者只能拉取到HW之前的消息</li></ul><h2 id="副本角色"><a href="#副本角色" class="headerlink" title="副本角色"></a>副本角色</h2><blockquote><p>如何保证副本中所有消息都一致？</p><p>解决：<strong>基于领导者的副本机制</strong></p></blockquote><p>1、工作原理</p><img src="https://img-blog.csdnimg.cn/bdee31404be1498fb034ac4291f608fa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li><strong>副本分为两类</strong>：领导者副本（每个分区创建时选举）、追随者副本</li><li><strong>追随者副本不对外提供服务</strong>，<strong>唯一的任务</strong>：从领导者副本异步拉取消息，写入自己的提交日志</li><li>当领导者副本宕机时，zookeeper提供的监控功能能够实时感知到，并立即开始新一轮的领导者选举</li></ul><p><strong>2、为什么要这么设计？</strong></p><ul><li><p><strong>方便实现“Read-your-writes”</strong></p><ul><li>Read-your-writes：当使用生产者API向kafka成功写入消息后，马上使用消费者API去读取生产的消息</li></ul></li><li><p><strong>方便实现单调读</strong></p><ul><li>单调读：对于一个消费者用户在多次消费消息时不会看到某条消息一会村庄一会不存在（一致性）</li></ul></li></ul><h2 id="In-sync-Replicas（ISR）"><a href="#In-sync-Replicas（ISR）" class="headerlink" title="In-sync Replicas（ISR）"></a>In-sync Replicas（ISR）</h2><blockquote><p>追随者副本异步拉取领导者副本的消息，<strong>异步就会存在不可能与Leader实时同步的风险</strong></p></blockquote><p><strong>1、ISR副本集合</strong></p><ul><li>ISR副本都是和Leader同步的副本，不在ISR的副本就是不同步的</li><li>Leader副本必然在ISR中</li><li>动态调整</li></ul><p><strong>2、判断是否同步的标准</strong></p><ul><li>Broker参数：<code>replica.lag.time.max.ms</code>，表示追随者副本能够落后领导者副本的最长时间间隔，默认10s；<strong>只要不连续超过10s就认为是同步的</strong></li></ul><h2 id="Unclean-领导者选举"><a href="#Unclean-领导者选举" class="headerlink" title="Unclean 领导者选举"></a>Unclean 领导者选举</h2><blockquote><p>ISR是动态调整的，自然会出现ISR为空的情况，即leader副本挂了，<strong>kafka需要选举一个新的leader</strong>，但是ISR为空，如何选举呢？</p></blockquote><p>1、Kafka把所有不在ISR的存活副本称为非同步副本，在kafka中选举这种副本的过程称为<strong>Unclean领导者选举</strong></p><p>2、设置：Broker参数<code>unclean.leader.election.enable</code>（建议不开启）</p><p>3、可能会造成数据丢失，但是至少不至于停止对外服务，<strong>因此提高了高可用性</strong></p><p>4、CAP理论</p><ul><li>C：一致性</li><li>A：可用性</li><li>P：分区容错性</li></ul><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><p>1、Controller是kafka最核心的组件</p><ul><li>为集群所有主题分区选举领导者副本</li><li>承载集群的全部元数据信息，并负责将这些信息同步到其他broker上</li></ul><p><strong>2、Controller启动</strong>：kafka集群中<strong>每个broker启动时</strong>会实例化一个kafkaController类，该类会执行一系列业务逻辑，选举出主题分区的Leader节点，步骤如下：</p><ul><li>第一个启动的代理节点，会在Zookeeper系统里面创建一个临时节点&#x2F;controller，并写入该节点的注册信息，使该节点成为控制器；</li><li>其他的代理节点陆续启动时，也会尝试在Zookeeper系统中创建&#x2F;controller节点，但是由于&#x2F;controller节点已经存在，所以会抛出“创建&#x2F;controller节点失败异常”的信息。创建失败的代理节点会根据返回的结果，判断出在Kafka集群中已经有一个控制器被成功创建了，所以放弃创建&#x2F;controller节点，这样就确保了<strong>Kafka集群控制器的唯一性</strong>；</li><li>其他的代理节点，会在控制器上注册相应的监听器，各个监听器负责监听各自代理节点的状态变化。当监听到节点状态发生变化时，会触发相应的监听函数进行处理。</li></ul><p><strong>3、Kafka Contoller本质上就是一个broker</strong></p><p>4、Broker选举的过程是在zk创建&#x2F;controller临时节点，每个broker会对&#x2F;controller节点添加监听器，以此坚挺此节点的数据变化，当&#x2F;controller节点发生变化就会触发选举</p><p><strong>5、分区Leader选举</strong></p><ul><li>基本策略：按照AR集合（全部副本）中副本的顺序查找第一个存活的副本，并且这个副本在ISR集合中</li><li>AR副本顺序不变，ISR副本顺序可能会改变</li></ul><h1 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testConsumer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String brokerList = <span class="string">&quot;localhost:9092&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String topic = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String groupid = <span class="string">&quot;group.demo&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicBoolean isRunning =<span class="keyword">new</span> AtomicBoolean(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">initConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">    props.put(<span class="string">&quot;key.deserializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">    props.put(<span class="string">&quot;value.deserializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);</span><br><span class="line">    props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, brokerList);</span><br><span class="line">    <span class="comment">//消费组名称</span></span><br><span class="line">    props.put(<span class="string">&quot;group.id&quot;</span>, groupid);</span><br><span class="line">    <span class="comment">//对应客户端id</span></span><br><span class="line">    props.put(<span class="string">&quot;client.id&quot;</span>,<span class="string">&quot;consumer.client.id.demo&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> props;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Properties props = initConfig();</span><br><span class="line">    KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">    consumer.subscribe(Arrays.asList(topic));</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (isRunning.get())&#123;</span><br><span class="line">        ConsumerRecords&lt;String ,String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">1000</span>));</span><br><span class="line">        <span class="keyword">for</span>(ConsumerRecord&lt;String,String&gt; record : records)&#123;</span><br><span class="line">          System.out.println(record.value());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      consumer.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h2><p><strong>1、什么是消费者组？</strong></p><ul><li>Kafka提供的可扩展且具有容错性的消费者机制</li><li>组内多个消费者共享一个Group ID</li><li><strong>消费者组内所有消费者消费topic的所有partition，但是每个partition只能被一个消费者消费</strong></li><li><strong>同一个分区也可以被其他消费者组消费</strong></li></ul><p><strong>2、消息引擎模型：P2P、发布&#x2F;订阅模型</strong></p><ul><li>P2P：伸缩性差，下游多个消费者需要抢消息</li><li>发布&#x2F;订阅模型：伸缩性不够，每个订阅者需要订阅所有分区</li><li><strong>消费者组解决了这个缺陷</strong><ul><li>如果所有实例都是一个group（<strong>每个消息只被组内的一个消费者消费</strong>），那么实现的就是消息队列模型</li><li>如果实例不是一个group（<strong>不同组的消费者可以同时消费一个消息</strong>），实现发布&#x2F;订阅模型</li></ul></li></ul><p><strong>3、group下消费者的数量</strong></p><ul><li>理想情况下，消费者数量和topic的partition数量一致</li></ul><p><strong>4、针对消费组，kafka如何管理offset？</strong></p><ul><li><p>消费者在消费过程中需要记录自己消费了多少数据，即消费位置信息</p></li><li><p><strong>对于消费者组，offset是一组KV（key是分区，V是该分区的最新位移）</strong>，但是kafka源码的数据结构比这个复杂的多</p></li><li><p>对于老版本，位移保存在Zookeeper中，减少了broker端的状态保存开销</p></li><li><p><strong>在新版本中，位移保存在kafka内部topic中</strong>（__consumer_offsets）</p></li></ul><p><strong>5、重平衡（Rebalance）</strong></p><ul><li><p>本质上是一种协议，规定了一个group下所有消费者如何达成一致，来分配订阅topic的每个分区；</p><ul><li>比如一个有20个consumer的group订阅了一个100个partition的topic，正常情况下kafka会为每个consumer分配5个partition，这个分配过程为重平衡</li></ul></li><li><p><strong>触发条件</strong></p><ul><li>conusmer实例数量发生变化</li><li>订阅的topic数量发生变化</li><li>订阅的topic的partition数量发生变化</li></ul></li><li><p><strong>分配策略（consumer如何知道应该消费哪些分区）</strong></p><ul><li><strong>Range分配策略</strong>：对同一个topic的partition按照序号进行排序，按照消费者线程的字母顺序进行排序，然后用分区数量除以消费者线程数量，剩下的前面几个消费者多消费一个分区</li><li><strong>RoundRobin分配策略</strong>：将消费者和partition按照字典序排序，然后通过轮询算法诸葛分配给每个消费者</li><li><strong>Sticky分配策略</strong></li></ul></li><li><p><strong>缺点</strong></p><ul><li>重平衡的时候所有消费者实例会停止消费</li><li>目前的设计所有的消费者都需要参与重平衡，不够高效</li><li>速度慢</li></ul></li></ul><h2 id="订阅主题和分区"><a href="#订阅主题和分区" class="headerlink" title="订阅主题和分区"></a>订阅主题和分区</h2><p>1、方法：<code>subscribe()</code>，可以订阅多个主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Collect on&lt;String&gt; toplics, ConsumerRebalanceListener listener)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//集合</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Collection&lt;String&gt; topics)</span> </span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span> <span class="params">(Pattern pattern, ConsumerRebalanceListener listener)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//正则表达式</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span> <span class="params">(Pattern pattern)</span></span></span><br></pre></td></tr></table></figure><p>2、方法：<code>assign()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assign</span><span class="params">(Collection&lt;TopicPartition&gt; partition)</span></span></span><br></pre></td></tr></table></figure><ul><li>指定需要订阅的分区集合</li><li>ToplicPartition：partition、topic属性</li></ul><p>3、区别</p><ul><li><code>subscribe()</code>方法支持消费者重平衡</li></ul><h2 id="消息消费"><a href="#消息消费" class="headerlink" title="消息消费"></a>消息消费</h2><p>1、kafka消息消费是一个不断轮询的过程，消费者需要重复调用<code>poll()</code>方法，返回的是订阅的一组消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConsumerRecords&lt;K, V&gt; <span class="title">poll</span><span class="params">(<span class="keyword">final</span> Duration timeout)</span></span></span><br></pre></td></tr></table></figure><ul><li>timeout：控制方法的阻塞时间，在没有可用数据的时候会发生阻塞，<strong>设为0会立刻返回，不管是否有消息</strong></li></ul><p><strong>2、ConsumerRecord</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerRecord</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123; </span><br><span class="line">  <span class="comment">//主题名称</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String topic; </span><br><span class="line">  <span class="comment">//分区编号</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> partition; </span><br><span class="line">  <span class="comment">//消息偏移量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> offset; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestamp; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> TimestampType timestampType; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> serial zedKeySize;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> serializedValueSize; </span><br><span class="line">  <span class="comment">//消息头部内容</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Headers headers; </span><br><span class="line">  <span class="comment">//消息的键</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> K key ; </span><br><span class="line">  <span class="comment">//消息的值</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> V value ; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> Long checksum; </span><br><span class="line">  <span class="comment">//省略若干方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、ConsumerRecords</strong></p><ul><li>poll方法返回的是<code>ConsumerRecords</code>，表示一次拉取操作获得的消息集，内部包含若干<code>ConsumerRecord</code>，提供了一个<code>iterator()</code>方法遍历消息内部的消息</li><li>可以按照分区维度获取消息，提供了<code>records(TopicPartition)</code>方法获取消息中指定分区的消息，<code>partitions()</code>获取消息集中所有分区</li></ul><h2 id="位移主题"><a href="#位移主题" class="headerlink" title="位移主题"></a>位移主题</h2><p>1、主题名称：<code>__consumer_offsets</code></p><p><strong>2、出现背景</strong></p><ul><li>老版本的位移存储在zk中，但是zk不适合高频写的操作，因此新版本中使用位移主题管理位移</li></ul><p><strong>3、位移管理机制</strong></p><ul><li>将consumer的位移数据作为一条普通的kafka消息提交到<code>__consumer_offsets</code>中</li><li>这就是个普通的kafka主题，<strong>但是消息格式是kafka自定义的</strong>，用户不能修改，也就是说不能往这个主题随意写消息，如果写的话broker会出现崩溃（消息格式不一致）</li></ul><p><strong>4、消息格式</strong></p><ul><li><strong>格式1：存储格式可以简单理解为KV对</strong><ul><li>key保存的内容：<strong>group id、topic、partition号</strong></li><li>value保存的内容：位移值、时间戳等元数据</li></ul></li><li><strong>格式2：保存消费者组信息的消息，注册group</strong></li><li><strong>格式3：tombstone 消息（墓碑消息）</strong><ul><li>用于删除group过期位移、删除group的消息</li><li>一旦group下的所有consumer都停止了，并且他们的位移数据都被删除时会写入这个消息，表示彻底删除group</li></ul></li></ul><p><strong>5、什么时候创建？</strong></p><ul><li>Kafka集群第一个consumer程序启动时自动创建</li><li>分区数：50；副本数：3</li></ul><p><strong>6、consumer如何提交位移？</strong></p><ul><li><strong>自动提交</strong>：只要consumer一直启动就会一直写入消息，无消费的时候也会一直写入这个位移<ul><li>默认每隔5s拉取每个分区最大的消息位移进行提交</li><li>问题：延时提交、重复提交</li></ul></li><li><strong>手动提交</strong>：调用API<ul><li>异步提交、同步提交</li></ul></li></ul><p><strong>7、删除过期消息</strong></p><ul><li>方法：整理（compaction）</li><li>使用Compact策略删除位移主题的过期消息，<strong>避免该主题无限膨胀</strong></li><li><strong>如何定义过期？</strong><ul><li>同一个key的两条消息M1和M2，M1发送时间早，那么就是过期消息</li></ul></li><li>过程<ul><li>扫描日志所有信息，剔除过期消息，整理剩下的消息</li></ul></li><li><strong>定期巡检等待整理主题的线程：Log Cleaner</strong></li></ul><h2 id="重平衡"><a href="#重平衡" class="headerlink" title="重平衡"></a>重平衡</h2><p>1、新版的消费者客户端对此进行了重新设计，将全部消费组分成多个子集，每个消费组的子集在服务端对应一个 <code>GroupCoordinator </code>进行管理， <code>GroupCoordinator</code>是Kafka 服务端中用于管理消费组的组件。而消费者客户端中的 <code>ConsumerCoordinator </code>组件负责与 <code>GroupCoordinator</code>交互</p><ul><li><code>ConsumerCoordinator</code>和<code>GroupCoordinator</code>之间最重要的职责就是负责执行消费者重平衡的操作，包括分区分配工作也是在重平衡期间完成</li></ul><p><strong>2、触发重平衡的操作</strong></p><ul><li>有新的消费者加入消费者组</li><li>消费者下线，不一定真的下线，可能是长时间GC、网络延迟导致消费者长时间没有向GroupCorrdinator发送心跳</li><li>消费者退出（<code>leaveGroupRequest</code>请求）</li><li>消费者的<code>GroupCoorinator</code>节点发生变化</li><li>消费者组订阅的任一topic或者partition数量发生变化</li></ul><blockquote><p>当有消费者加入消费者组时，消费者、消费组及协调器会经历以下阶段</p></blockquote><p><strong>3、第一阶段（find_coordinator）</strong></p><ul><li>目的：<strong>消费者需要确定所属消费组对应的groupCoordinator所在的broker，并与该broker创建相互通信的网络连接</strong></li><li>步骤：<ul><li>如果消费者已经保存了对应协调器节点的信息就进入第二阶段</li><li>向<strong>集群负载最小的节点</strong>发送<code>FindCoordinatorRequest</code>请求来查找对应的<code>GroupCoordinator</code><ul><li><code>FindCoordinatorRequest</code>请求体：消费组名称（<code>group id</code>）</li></ul></li><li>kafka收到<code>FindCoordinatorRequest</code>请求后<strong>根据groupid查找对应的<code>GroupCoordinator</code>节点</strong>，如果找到对应的就会返回其对应的node_id、host、port信息<ul><li>查找方法：<ul><li>根据<code>groupid</code>的哈希值计算<code>__consumer_offsets</code>中分区的编号</li><li>寻找此分区leader副本所在的broker节点，该节点就是为这个groupid所对应的<code>GroupCoordinator</code>节点</li></ul></li></ul></li><li><strong>消费者组groupid最终的分区方案及组内消费者所提交的消费位移信息都会发送给此分区leader副本所在的broker节点</strong></li></ul></li></ul><p><strong>4、第二阶段（join_group）</strong></p><ul><li>目的：<strong>加入消费组</strong></li><li>步骤：<ul><li>向<code>groupCoordinator</code>发送<code>JoinGroupRequest</code>请求<ul><li>参数：<ul><li><code>groupId</code></li><li><code>session_timeout</code>（心跳时间）</li><li><code>rebalance_timeout</code>（重平衡的时候GroupCoordinator等待各个消费者重新加入的最长等待时机）</li><li><code>member_id</code>（消费者id，第一次发送时为null）</li></ul></li></ul></li><li>服务端接收到请求后交给<code>GroupCoordinator</code>处理；对请求进行合法性校验，给第一次请求加入的消费者生成member_id</li><li><strong>选举消费组的leader</strong><ul><li>如果还没有leader，第一个加入消费组的消费者为leader</li><li>如果leader退出了消费组，会进行重新选举，过程很随意<ul><li>在GroupCoordinator中消费者信息以HashMap存储，key为消费者id，value为元数据</li><li>选举时取hashMap第一个键值对</li></ul></li></ul></li><li><strong>选举分区分配策略</strong><ul><li>每个消费者都可以设置自己的分区分配策略，消费组的策略需要进行选举投票，过程如下：<ul><li>收集各个消费者支持的所有分配策略，组成候选集candidates</li><li>每个消费者从候选集中找出第一个自身支持的策略，投上一票</li><li>得分多的策略为消费组的策略</li></ul></li></ul></li></ul></li></ul><p><strong>5、第三阶段（sync_group）</strong></p><ul><li>目的：转发同步分区分配方案；各个消费者给GroupCoordinator发送SyncGroupRequest请求来同步分配方案</li></ul><p><strong>6、第四阶段（heartbeat）</strong></p><ul><li>目的：消费者确定拉取消息的其实位置</li><li>消费者通过向GroupCoordinator发送心跳来维持他们与消费组的从属关系，心跳线程是一个独立的线程；如果消费者停止发送心跳的时间足够长整个会话就会判定过期</li></ul><h2 id="能够避免重平衡吗？"><a href="#能够避免重平衡吗？" class="headerlink" title="能够避免重平衡吗？"></a>能够避免重平衡吗？</h2><p>1、在Rebalance 过程中，所有 Consumer 实例共同参与，在<strong>协调者组件</strong>的帮助下，完成订阅主题分区的分配，<strong>整个过程中所有实例都不能消费任何消息</strong>，因此它对 Consumer 的 TPS 影响很大。</p><p><strong>2、协调者（Coordinator）</strong></p><ul><li>专门为group服务，负责group执行重平衡以及提供位移管理等</li><li>consumer提交位移时是向coordinator所在的broker提交位移</li><li>当 Consumer 应用启动时，也是向 Coordinator 所在的 Broker 发送各种请求，然后由 Coordinator 负责执行消费者组的注册、成员管理记录等元数据管理操作</li><li><strong>所有的broker都有自己的coordinator组件</strong></li><li><strong>group如何确定为它服务的coordinator在哪个broker上？</strong><ul><li>确定位移主题__consumer_offsets的哪个分区保存该group的数据</li><li>找到该分区leader副本所在的broker，该broker即对应的coordinator</li></ul></li></ul><p>3、目前，无法解决重平衡慢的问题，所以选择<strong>避免重平衡</strong>，重平衡发生的时机有三个：</p><ul><li>group成员数量变化<ul><li>增加：通常都是计划内的，不属于需要避免的不必要重平衡</li><li>减少：除了计划内的，<strong>某些情况下协调者会错误认为消费者已经停止</strong><ul><li>consumer需要定期给coordinator发送心跳请求，如果不能及时发送就会被误认为这个consumer挂了，默认10s</li><li>consumer消费时间过长（默认5分钟），可以预留足够的时间避免这个情况</li></ul></li></ul></li><li>topic数量变化</li><li>partition数量变化</li></ul><h2 id="多线程开发消费者实例"><a href="#多线程开发消费者实例" class="headerlink" title="多线程开发消费者实例"></a>多线程开发消费者实例</h2><h3 id="Kafka-Java-Consumer设计原理"><a href="#Kafka-Java-Consumer设计原理" class="headerlink" title="Kafka Java Consumer设计原理"></a>Kafka Java Consumer设计原理</h3><p><strong>1、单线程设计，从0.10.1.0版本开始变为双线程（用户主线程+心跳线程）</strong></p><ul><li>用户主线程：启动Consumer应用程序main方法的那个线程</li><li>心跳线程：负责定期给broker机器发送心跳请求</li></ul><p>2、单线程的设计容易实现</p><h3 id="多线程方案"><a href="#多线程方案" class="headerlink" title="多线程方案"></a>多线程方案</h3><p><strong>1、KafkaConsumer类不是线程安全的</strong></p><ul><li>所有的I&#x2F;O处理都发生在用户主线程中，因此你需要确保线程安全</li></ul><p>2、<strong>方案一</strong>：消费者启动多个线程，每个线程维护专属的KafkaConsumer实例，负责完整的消息获取、处理</p><p>3、<strong>方案二</strong>：消费者使用单或多线程获取消息，同时创建多个消费线程执行消费处理逻辑</p><img src="https://img-blog.csdnimg.cn/26c1e20bb8014deeae4e4c244258cf9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="消费者管理TCP连接"><a href="#消费者管理TCP连接" class="headerlink" title="消费者管理TCP连接"></a>消费者管理TCP连接</h2><h3 id="什么时候创建TCP连接？"><a href="#什么时候创建TCP连接？" class="headerlink" title="什么时候创建TCP连接？"></a>什么时候创建TCP连接？</h3><p>1、消费者的入口是KafkaConsumer类，<strong>和生产者不同，创建实例时没有创建TCP连接</strong></p><p>2、<strong>TCP连接在调用<code>KafkaConsumer.poll</code>方法时被创建</strong></p><p>3、在poll方法内部有3个时机可以创建TCP连接</p><ul><li><strong>发起<code>FindCoordinator</code>请求时</strong><ul><li>当消费者程序首次启用调用poll方法时，需要向kafka集群发送<code>FindCoordinator</code>请求，希望kafka告诉他哪个broker是管理它的协调者</li></ul></li><li><strong>连接协调者时</strong><ul><li>broker处理完上一步发送的请求后会返回response，告诉消费者哪个是协调者，因此在这一步消费者会创建连向该broker的TCP连接</li></ul></li><li><strong>消费数据时</strong><ul><li>消费者会为每个要消费的分区创建与该分区leader副本所在broker连接的TCP</li></ul></li></ul><h3 id="创建多少个TCP连接？"><a href="#创建多少个TCP连接？" class="headerlink" title="创建多少个TCP连接？"></a>创建多少个TCP连接？</h3><p>1、通常来说，消费者程序会创建 3 类 TCP 连接：</p><ul><li>确定协调者和获取集群元数据。</li><li>连接协调者，令其执行组成员管理操作。</li><li>执行实际的消息获取。</li></ul><h3 id="删除TCP连接"><a href="#删除TCP连接" class="headerlink" title="删除TCP连接"></a>删除TCP连接</h3><p>和生产者类似，消费者关闭 Socket 也分为<strong>主动关闭和 Kafka 自动关闭</strong></p><ul><li><strong>主动关闭</strong>：是指你显式地调用消费者 API 的方法去关闭消费者，具体方式就是手动调用 <code>KafkaConsumer.close() </code>方法，或者是执行 Kill 命令，不论是 Kill -2 还是 Kill -9；</li><li><strong>自动关闭</strong>：是由消费者端参数 <code>connection.max.idle.ms</code> 控制的，该参数现在的默认值是 9 分钟，即如果某个 Socket 连接上连续 9 分钟都没有任何请求“过境”的话，那么消费者会强行“杀掉”这个 Socket 连接。<ul><li>和生产者有些不同的是，如果使用了循环的方式来调用 poll 方法消费消息，那么上面提到的所有请求都会被定期发送到 Broker，因此这些 Socket 连接上总是能保证有请求在发送，从而也就实现了“长连接”的效果。</li></ul></li></ul><p>针对上面提到的三类 TCP 连接，你需要注意的是，当第三类 TCP 连接成功创建后，消费者程序就会废弃第一类 TCP 连接，之后在定期请求元数据时，它会改为使用第三类 TCP 连接。也就是说，最终你会发现，第一类 TCP 连接会在后台被默默地关闭掉。对一个运行了一段时间的消费者程序来说，只会有后面两类 TCP 连接存在。</p><h2 id="重要参数-1"><a href="#重要参数-1" class="headerlink" title="重要参数"></a>重要参数</h2><p><strong>1、fetch.min.bytes</strong></p><ul><li>拉取的最小数据量，默认1B</li><li>如果小于这个值就需要进行等待</li></ul><p><strong>2、fetch.max.bytes</strong></p><ul><li>拉取的最大数据量，默认50MB</li></ul><p><strong>3、fetch.max.wait.ms</strong></p><ul><li>指定kafka等待的时间，默认500ms</li></ul><p><strong>4、max.poll.records</strong></p><ul><li>一次拉取的最大消息数量，默认500条</li></ul><p><strong>5、heartbeat.interval.ms</strong></p><ul><li>使用kafka分组管理时，心跳到消费者协调器之间的预计时间</li><li>默认3000ms</li></ul><p><strong>6、connections.max.idle.ms</strong></p><ul><li>指定多久之后关闭限制的连接，默认9分钟</li></ul><h1 id="实现无消息丢失配置"><a href="#实现无消息丢失配置" class="headerlink" title="实现无消息丢失配置"></a>实现无消息丢失配置</h1><blockquote><p> kafka在什么情况下能保证消息不丢失？</p></blockquote><p><strong>只对已提交的消息做有限度的持久化保证</strong></p><ul><li><strong>已提交</strong>：kafka集群收到消息并写入日志</li><li><strong>有限度</strong>：在保证存放消息的broker至少有一个存活的前提下保证消息成功持久化</li></ul><h2 id="“消息丢失”案例"><a href="#“消息丢失”案例" class="headerlink" title="“消息丢失”案例"></a>“消息丢失”案例</h2><h4 id="生产者程序丢失数据"><a href="#生产者程序丢失数据" class="headerlink" title="生产者程序丢失数据"></a>生产者程序丢失数据</h4><blockquote><p>目前<strong>Kafka Producer是异步发送消息</strong>的，调用的是<code>producer.send(msg)</code>这个API，通常会立刻返回，但是此时不能认为消息成功发送</p></blockquote><p><strong>导致发送失败的因素：</strong></p><ul><li>网络抖动，消息未到broker</li><li>消息不合格，broker拒绝接受（比如消息过大等）</li></ul><p><strong>解决方案</strong></p><ul><li>Producer永远要使用带回调通知的发送API，使用<code>producer.send(msg,callback)</code>这个API，<code>callback</code>可以准备告诉你消息是否提交成功</li></ul><h4 id="消费者程序丢失数据"><a href="#消费者程序丢失数据" class="headerlink" title="消费者程序丢失数据"></a>消费者程序丢失数据</h4><blockquote><p>Conusmer端要消费的消息不见了</p></blockquote><p>Consumer 程序有个“<strong>位移（offset）</strong>”的概念，表示的是这个 Consumer 当前消费到的 Topic 分区的位置</p><img src="https://img-blog.csdnimg.cn/c421cd69e6a04ed4afc2ab026fe0de18.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:40%;" /><ul><li>如上图，对于Consumer A 而言，它当前的位移值就是 9；Consumer B 的位移值是 11</li></ul><p><strong>1、使用位移的步骤（顺序不能颠倒）</strong></p><ul><li>读取数据</li><li>更新位移</li><li><strong>顺序颠倒会导致消息丢失</strong></li><li>问题：<strong>消息重复处理</strong></li></ul><p><strong>2、消费者程序丢失消息的原因</strong></p><ul><li>先更新位移后读取数据</li><li>多线程异步处理消息，如果某个线程运行失败了，位移已经被更新了<ul><li>解决：手动提交位移</li></ul></li></ul><h2 id="最佳实践-1"><a href="#最佳实践-1" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>1、不要使用 producer.send(msg)，而要使用 producer.send(msg, callback)。记住，<strong>一定要使用带有回调通知的 send 方法</strong>。</p><p>2、设置 <code>acks = all</code>。acks 是 Producer 的一个参数，代表了你对“已提交”消息的定义。如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。</p><p>3、设置 retries 为一个较大的值。这里的 retries 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries &gt; 0 的 Producer 能够<strong>自动重试消息发送</strong>，避免消息丢失。</p><p>4、设置 replication.factor &gt;&#x3D; 3。这也是 Broker 端的参数。其实这里想表述的是，<strong>最好将消息多保存几份</strong>，毕竟目前防止消息丢失的主要机制就是冗余。</p><p>5、设置 min.insync.replicas &gt; 1。这依然是 Broker 端参数，<strong>控制的是消息至少要被写入到多少个副本才算是“已提交”</strong>。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。</p><p>6、确保 replication.factor &gt; min.insync.replicas。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 replication.factor &#x3D; min.insync.replicas + 1。</p><p>7、确保消息消费完成再提交。Consumer 端有个参数 enable.auto.commit，最好把它设置成 false，并采用手动提交位移的方式。就像前面说的，这对于单 Consumer 多线程处理的场景而言是至关重要的。</p><img src="https://img-blog.csdnimg.cn/e9ef26374b784fe5a47b6b33b493b952.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:40%;" />]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从尾到头打印链表</title>
      <link href="/2022/02/04/1%E3%80%81%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/02/04/1%E3%80%81%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220109120347589.png" alt="image-20220109120347589"  /><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*    public class ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        ListNode next = null;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*        ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">*            this.val = val;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*    &#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">while</span>(listNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(listNode.val);</span><br><span class="line">            listNode = listNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Integer&gt; l = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=list.size()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">            l.add(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li>&#x3D;&#x3D;在ArrayList插入数据时，只会进行正向插入，导致需要多进行一次循环将集合倒序。&#x3D;&#x3D;</li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>非递归方法，循环遍历链表时将数据倒序插入集合之中。</p><ul><li><strong>&#x3D;&#x3D;ArrayList 中有个方法是 add(index,value)，可以指定 index 位置插入 value 值。&#x3D;&#x3D;</strong><br>所以我们在遍历 listNode 的同时将每个遇到的值插入到 list 的 0 位置，最后输出 listNode 即可得到逆序链表。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ListNode tmp = listNode;</span><br><span class="line">        <span class="keyword">while</span>(tmp!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(<span class="number">0</span>,tmp.val);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(n)</p></li><li><p>空间复杂度：O(n)</p></li></ul><h3 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h3><p>由于最终要求**&#x3D;&#x3D;先进后出，想到利用栈&#x3D;&#x3D;**。利用递归方法，用系统的栈帮忙打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(listNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            printListFromTailToHead(listNode.next);</span><br><span class="line">            list.add(listNode.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(n)</p></li><li><p>空间复杂度：O(n)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个栈实现队列</title>
      <link href="/2022/02/04/29%E3%80%81%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>/2022/02/04/29%E3%80%81%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208164040931.png" alt="image-20220208164040931"  /><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li>没有明白题意，对Java的Stack类不够熟悉。</li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="模拟法"><a href="#模拟法" class="headerlink" title="模拟法"></a>模拟法</h3><p>如果我知道队列是FIFO，栈是FILO，但是这道题我还是不知道怎么写怎么办？<br>对于这种感觉不难，但是又不会写的，方法就是模拟。<br>比如有如下操作：(pop操作确保栈中有元素）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">push(<span class="number">1</span>);push(<span class="number">2</span>);pop(<span class="number">3</span>);push(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/284295_1585400497769_0C4ABEBEC33645F04FC3BE80560A19CA.png" alt="284295_1585400497769_0C4ABEBEC33645F04FC3BE80560A19CA"></p><p>根据队列的特性，只能pop(1),pop(2),pop之后的结果</p><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/284295_1585400552969_2BD71B6015DA622EC901AE9E8EF11B09.png" alt="284295_1585400552969_2BD71B6015DA622EC901AE9E8EF11B09"></p><p>上述是队列的操作。</p><p>当push的时候，我们必须要用一个stack来存，假设用stack1来存。</p><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/284295_1585400791591_E15AD689EC5617B74FCBAB036DB5F203.png" alt="284295_1585400791591_E15AD689EC5617B74FCBAB036DB5F203"></p><p>那么push操作解决了。那么pop操作怎么办呢？<br>如果pop(1)，但是此时在stack1的栈底，如果要pop，必须再将stack1中的数据push到stack2中，然后再pop，如图</p><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/284295_1585401602901_0711311756A500BE23FE8ED82FCA5FF3.png" alt="284295_1585401602901_0711311756A500BE23FE8ED82FCA5FF3"></p><p>这样直接弹出stack2的栈顶就可以了。<br>如果要继续pop，那就继续弹出stack2就可以了</p><p>但是现在总感觉哪里还是有点问题。如果是这样就继续测试几个例子。<br>如果push(5)，</p><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/284295_1585401399745_2DA9470B0EA9FAE77932FA8176C79036.png" alt="284295_1585401399745_2DA9470B0EA9FAE77932FA8176C79036"></p><p><strong>所以最后总结一下：push操作就直接往stack1中push， pop操作需要分类一下：如果stack2为空，那么需要将stack1中的数据转移到stack2中，然后在对stack2进行pop，如果stack2不为空，直接pop就ok。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack2.isEmpty()&amp;stack1.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列中没有元素，无法删除！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack2.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(1)</p></li><li><p>空间复杂度：O(n)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 栈和队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并两个排序的链表</title>
      <link href="/2022/02/04/3%E3%80%81%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/02/04/3%E3%80%81%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220208161344185.png" alt="image-20220208161344185"  /><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</span><br><span class="line">        ListNode node,p;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1.val&lt;=list2.val)&#123;</span><br><span class="line">            node = list1;</span><br><span class="line">            list1 = list1.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node = list2;</span><br><span class="line">            list2 = list2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = node;</span><br><span class="line">        <span class="keyword">while</span>(list1!=<span class="keyword">null</span>&amp;list2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(list1.val&lt;=list2.val)&#123;</span><br><span class="line">                    node.next = list1;</span><br><span class="line">                    list1 = list1.next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    node.next = list2;</span><br><span class="line">                    list2 = list2.next;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            node.next = list2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node.next = list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li><p>没有考虑到开始时如果存在空链表的情况应该怎么办</p></li><li><p>在链表连接后向后遍历时，过程过于复杂</p></li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h3><p>思路与上述解决方法一致</p><ul><li>技巧：<strong>一般创建单链表，都会设一个虚拟头结点，也叫哨兵，因为这样每一个结点都有一个前驱结点。</strong></li></ul><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(m+n)，m，n分别为两个单链表的长度</li><li>空间复杂度：O(1)</li></ul><h3 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(list2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list2.val&gt;list1.val)&#123;</span><br><span class="line">            list1.next = Merge(list1.next,list2);</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            list2.next = Merge(list1,list2.next);</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(m+n)</li><li>空间复杂度：O(m+n)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2022/02/04/2%E3%80%81%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/02/04/2%E3%80%81%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/image-20220109142655600.png" alt="image-20220109142655600"></p><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">//         空链表直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode temp = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode node = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</span><br><span class="line">                temp.val = head.next.val;</span><br><span class="line">                temp.next = head;</span><br><span class="line">                node = temp;</span><br><span class="line">                temp = head.next;</span><br><span class="line">                head.next = <span class="keyword">null</span>;</span><br><span class="line">                head = temp.next;</span><br><span class="line">                temp.next = <span class="keyword">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp.val = head.val;</span><br><span class="line">                temp.next = node;</span><br><span class="line">                node  = temp;</span><br><span class="line">                temp = head;</span><br><span class="line">                <span class="keyword">if</span>(temp.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    head = temp.next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    head = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                temp.next = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><ul><li>想要通过只创建一到两个新结点的方法利用循环解决问题以减少空间复杂度，但是没有考虑到头结点在开始、结束以及中间位置时情况不同导致的算法复用率较低的问题，是代码极为繁琐。</li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="使用栈解决"><a href="#使用栈解决" class="headerlink" title="使用栈解决"></a>使用栈解决</h3><p>由于反转链表类似于倒序输出的问题，我们可以先顺序遍历链表并将链表节点压入栈中，然后出栈并修改后继节点即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    Stack&lt;ListNode&gt; stack= <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="comment">//把链表节点全部摘掉放到栈中</span></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.push(head);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stack.isEmpty())</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode node = stack.pop();</span><br><span class="line">    ListNode dummy = node;</span><br><span class="line">    <span class="comment">//栈中的结点全部出栈，然后重新连成一个新的链表</span></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        ListNode tempNode = stack.pop();</span><br><span class="line">        node.next = tempNode;</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后一个结点就是反转前的头结点，一定要让他的next</span></span><br><span class="line">    <span class="comment">//等于空，否则会构成环</span></span><br><span class="line">    node.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> dummy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建新链表"><a href="#构建新链表" class="headerlink" title="构建新链表"></a>构建新链表</h3><p>思想类似于我的代码，将原链表的节点一个一个全部从表中摘掉，并让他成为新链表的头结点即可。</p><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/6B7B002EA5774E94CC51CBCB0EC7B06C.png" alt="6B7B002EA5774E94CC51CBCB0EC7B06C" style="zoom:67%;" /><img src="https://gitee.com/stitch618/StitchPicGo/raw/master/pic/9F0348C9DC1A70ED7D678E4F4C56E04C.png" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//新链表</span></span><br><span class="line">    ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//先保存访问的节点的下一个节点，保存起来</span></span><br><span class="line">        <span class="comment">//留着下一步访问的</span></span><br><span class="line">        ListNode temp = head.next;</span><br><span class="line">        <span class="comment">//每次访问的原链表节点都会成为新链表的头结点，</span></span><br><span class="line">        <span class="comment">//其实就是把新链表挂到访问的原链表节点的</span></span><br><span class="line">        <span class="comment">//后面就行了</span></span><br><span class="line">        head.next = newHead;</span><br><span class="line">        <span class="comment">//更新新链表</span></span><br><span class="line">        newHead = head;</span><br><span class="line">        <span class="comment">//重新赋值，继续访问</span></span><br><span class="line">        head = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回新链表</span></span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归解决"><a href="#递归解决" class="headerlink" title="递归解决"></a>递归解决</h3><p>我们再来回顾一下递归的模板，终止条件，递归调用，逻辑处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(参数<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    逻辑处理（可能有，也可能没有，具体问题具体分析）</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归调用</span></span><br><span class="line">    ListNode reverse = reverseList(参数<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    逻辑处理（可能有，也可能没有，具体问题具体分析）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终止条件就是链表为空，或者是链表没有尾结点的时候，直接返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">return</span> head;</span><br></pre></td></tr></table></figure><p>递归调用是要从当前节点的下一个结点开始递归。逻辑处理这块是要把当前节点挂到递归之后的链表的末尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">//保存当前节点的下一个结点</span></span><br><span class="line">    ListNode next = head.next;</span><br><span class="line">    <span class="comment">//从当前节点的下一个结点开始递归调用</span></span><br><span class="line">    ListNode reverse = ReverseList(next);</span><br><span class="line">    <span class="comment">//reverse是反转之后的链表，因为函数reverseList</span></span><br><span class="line">    <span class="comment">// 表示的是对链表的反转，所以反转完之后next肯定</span></span><br><span class="line">    <span class="comment">// 是链表reverse的尾结点，然后我们再把当前节点</span></span><br><span class="line">    <span class="comment">//head挂到next节点的后面就完成了链表的反转。</span></span><br><span class="line">    next.next = head;</span><br><span class="line">    <span class="comment">//这里head相当于变成了尾结点，尾结点都是为空的，</span></span><br><span class="line">    <span class="comment">//否则会构成环</span></span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为递归调用之后head.next节点就会成为reverse节点的尾结点，我们可以直接让head.next.next &#x3D; head;，这样代码会更简洁一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode reverse = ReverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种递归往下传递的时候基本上没有逻辑处理，当往回反弹的时候才开始处理，也就是从链表的尾端往前开始处理的。我们还可以再来改一下，在链表递归的时候从前往后处理，处理完之后直接返回递归的结果，这就是所谓的尾递归，这种运行效率要比上一种好很多。这种处理方法的思想类似于我自己写的代码的处理思想，即从前往后处理，先断链再连新链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reverseListInt(head, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">reverseListInt</span><span class="params">(ListNode head, ListNode newHead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    ListNode next = head.next;</span><br><span class="line">    head.next = newHead;</span><br><span class="line">    <span class="keyword">return</span> reverseListInt(next, head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2022/02/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/02/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><img src="https://img-blog.csdnimg.cn/20210420195750208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>1、概念：<strong>同一时间间隔内执行和调度多个程序的能力</strong></p><p>2、特点：</p><ul><li><p>宏观上，处理机同时执行多道程序</p></li><li><p>微观上，处理机在多道程序间高速切换</p></li><li><p>关注单个处理机在多道程序间高速切换</p></li></ul><h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><p>1、概念：<strong>系统中的资源可以被多个并发进程共同使用</strong></p><p>2、有两种共享方式：</p><ul><li><strong>互斥共享</strong>：资源称为临界资源，例如打印机等</li><li><strong>同时共享</strong>：同一时段允许多个程序同时访问共享资源</li></ul><blockquote><p>并发和共享互为前提</p><ul><li>共享要求OS中同时运行多个程序</li><li>并发性难以避免地导致多道程序同时访问同一个资源</li></ul></blockquote><h3 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h3><p>1、概念：使用虚拟技术把一个物理实体转换为多个逻辑实体</p><p>2、两种虚拟技术：</p><ul><li><strong>时（时间）分复用技术</strong><ul><li>虚拟处理机技术：四核八线程</li><li>虚拟设备技术：虚拟打印机</li></ul></li><li><strong>空（空间）分复用技术</strong><ul><li>虚拟磁盘技术：将一个硬盘虚拟出若干个卷</li><li>虚拟存储器技术</li></ul></li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>1、多道程序环境下，允许多个程序并发执行；单处理机环境下，多个程序分时交替执行</p><p>2、宏观上一气呵成，微观上走走停停</p><p>3、原因：程序执行的不可预知性</p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>1、进程是资源分配的基本单位。</p><p>2、结构：</p><ul><li>控制块（PCB）：识别进程的唯一标志，描述进程的基本信息和运行状态</li><li>数据段：存放原始数据、中间数据</li><li>程序段：存放在文本区域，<strong>可被多个进程共享（同一个程序的进程）</strong></li></ul><p>3、特征：</p><ul><li>动态性：由创建而生，撤销而亡</li><li>并发性</li><li>独立性</li><li>异步性</li></ul><blockquote><p>和线程的区别</p></blockquote><p>什么是线程？</p><ul><li>进程的轻型实体，是一系列活动按照事先设定好的顺序执行的过程，是一系列指令的集合</li><li>是一条执行路径，不能单独存在，必须包含在进程中</li><li>是OS中运算调度的最小单位</li></ul><p>为什么需要线程？</p><ul><li>提高OS的并发性</li></ul><p>区别：</p><ul><li><strong>拥有资源</strong>：进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。</li><li><strong>调度</strong>：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</li><li><strong>系统开销</strong>：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I&#x2F;O 设备等，所付出的开销远大于创建或撤销线程时的开销，而线程切换时只需保存和设置少量寄存器内容，开销很小。</li><li><strong>通信方面</strong>：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。</li></ul><p><strong>4、状态</strong></p><p>new、ready、blocked、running、terminated</p><img src="https://img-blog.csdnimg.cn/20210420203157453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>5、进程控制</strong></p><p>OS通过<strong>原语操作</strong>实现进程控制</p><ul><li>原子操作</li><li>在内核态执行</li><li>是内核三大支撑概念（中断处理、时钟管理、原语操作）之一</li></ul><p>原语：</p><ul><li>创建：create</li><li>阻塞：block</li><li>唤醒：wakeup</li><li>撤销：destroy</li></ul><img src="https://img-blog.csdnimg.cn/20210420203705524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><p>为了系统和用户观察和分析进程</p><p>将暂时不能运行的进程调到外存，进程状态为挂起状态（阻塞挂起、就绪挂起）</p><ul><li><p>挂起：suspend</p></li><li><p>激活：active</p></li></ul><h2 id="CPU调度"><a href="#CPU调度" class="headerlink" title="CPU调度"></a>CPU调度</h2><blockquote><p>处理机调度：根据一定的算法和原则将处理机资源进行重新分配的过程</p><p>目的：提高资源利用率</p></blockquote><h3 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h3><p>1、<strong>周转时间</strong>：任务结束时间—任务进入时间</p><p>2、<strong>吞吐量</strong>：单位时间完成的作业</p><h3 id="CPU调度算法"><a href="#CPU调度算法" class="headerlink" title="CPU调度算法"></a>CPU调度算法</h3><h4 id="FCFS"><a href="#FCFS" class="headerlink" title="FCFS"></a>FCFS</h4><p>1、先来先服务</p><p>2、非抢占的算法</p><p>3、优点：公平、算法实现简单</p><p>4、缺点：带权周转时间很长，对长作业有利，对短作业不利</p><h4 id="SJF"><a href="#SJF" class="headerlink" title="SJF"></a>SJF</h4><p>1、短作业优先</p><p>2、非抢占的算法</p><h4 id="SRTN"><a href="#SRTN" class="headerlink" title="SRTN"></a>SRTN</h4><p>最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。</p><h4 id="时间片轮转"><a href="#时间片轮转" class="headerlink" title="时间片轮转"></a>时间片轮转</h4><p>抢占式的算法</p><p><strong>保证响应时间</strong></p><h4 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h4><p>1、思想：根据任务的紧急程度决定</p><p><strong>2、可能导致饥饿</strong></p><h4 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h4><p>1、思想：折中权衡（RR+优先级调度）</p><p>2、内容：</p><ul><li>设置多个按优先级排序的就绪队列</li><li>优先级从高到低，时间片从小到大</li><li>新进程采用队列降级法<ul><li>进入第一级队列，按FCFS分时间片</li><li>没有执行完，降级</li></ul></li><li>前面的队列不为空不执行后续队列进程</li></ul><p>3、优点：公平、新到达进程很快响应</p><p>4、调度方式：抢占式</p><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><blockquote><p>进程之间的信息交换</p><p>进程是资源分配的基本单位，各进程内存空间独立</p></blockquote><h3 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h3><p>1、允许多个进程共享一个给定的存储区</p><p>2、因为数据不需要在进程之间复制，所以这是最快的一种 IPC</p><p>3、分类：</p><ul><li>基于共享数据结构的通信方式：效率低</li><li>基于共享存储区的通信方式：效率高</li></ul><h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3><p><strong>1、直接通信：点到点发送</strong></p><img src="https://img-blog.csdnimg.cn/20210420205923596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>2、间接通信：广播信箱</strong></p><img src="https://img-blog.csdnimg.cn/20210420210231671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><p>1、半双工通信</p><p>2、用于连接读&#x2F;写进程的共享文件（pipe文件），本质是内存中固定大小的缓冲区</p><h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h2><blockquote><p>协调进程间的相互制约关系，使它们按照预期的方式执行的过程</p></blockquote><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>1、通过使用OS提供的一对原语对信号量进行操作（PV操作）</p><p>2、分类：</p><ul><li>整型信号量</li><li>记录型信号量</li></ul><h4 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h4><p>用整数表示资源的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(s&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    s=s-<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">  s=s+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h4><p>信号量为正：资源数量</p><p>信号量为负：等待线程数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value;<span class="comment">//剩余资源数量</span></span><br><span class="line">Queue process L;<span class="comment">//等待队列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(Semphore S)</span></span>&#123;</span><br><span class="line">  S.value--;</span><br><span class="line">  <span class="keyword">if</span>(S.value&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    block(S.L);<span class="comment">//阻塞</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(Semphore S)</span></span>&#123;</span><br><span class="line">  S.value++;</span><br><span class="line">  <span class="keyword">if</span>(S.value&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="function">wake <span class="title">up</span><span class="params">(S.L)</span></span>;<span class="comment">//唤醒一个进程</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现进程互斥"><a href="#实现进程互斥" class="headerlink" title="实现进程互斥"></a>实现进程互斥</h4><p>初始值为1</p><p>在临界区之前执行P，在临界区之后执行V</p><h4 id="实现进程同步"><a href="#实现进程同步" class="headerlink" title="实现进程同步"></a>实现进程同步</h4><p>初始值为0</p><p>在前操作之后执行V，在后操作之前执行P</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">P1&#123;</span><br><span class="line">  前操作;</span><br><span class="line">  V(S);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P2&#123;</span><br><span class="line">  P(S);</span><br><span class="line">  后操作;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote><p>什么是内存？</p></blockquote><p>内存是用于存放数据的硬件，程序执行前需要先放到内存才能被<strong>CPU处理</strong></p><blockquote><p>在多道程序环境下，系统中会有多个程序并发执行，也就是说会有多个程序的数据需要同时放到内存中，那么如何区分各个程序的数据存放的地方呢？</p></blockquote><p>给内存的<strong>存储单元</strong>编地址</p><p><img src="https://img-blog.csdnimg.cn/8135ba5c278546c8ad5cac9b81af0618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>4GB内存，什么意思？</p></blockquote><p>指的是该内存中可以存放4* 2的30次方个字节，如果是按照字节编址的话，也就是有4* 2的30次方个字节</p><blockquote><p>逻辑地址</p></blockquote><p>根据起始位置获得绝对地址</p><p><img src="https://img-blog.csdnimg.cn/30cdc95ec8ee4994896f7182b5acf39d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>装入的三种方式</p></blockquote><p><strong>1、绝对装入</strong></p><ul><li>在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代码，装入程序按照地址将程序和数据装入内存</li><li>编译、链接后得到的指令直接使用绝对地址</li><li>只适合单道程序环境</li></ul><p><strong>2、静态重定位</strong></p><ul><li>编译、链接后的地址是逻辑地址，装入时对地址进行重定位，将逻辑地址转为物理地址</li><li>由装入程序进行</li><li>一个作业装入内存时必须分配其要求的所有内存空间，如果没有足够内存就不能装入作业</li></ul><p><strong>3、动态重定位</strong></p><ul><li>程序真正执行时进行地址转换</li><li>借助<strong>重定位寄存器</strong>，存放装入模块的起始位置</li><li>特点：<ul><li>允许程序在内存中移动（只需要修改重定位寄存器的值）</li><li>可以将程序分配到不连续的存储区</li><li>在程序运行前只需要装入部分代码，在程序运行期间可以动态申请分配内存</li><li>便于程序段的共享，可以向用户提供比存储空间更大的地址空间</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码分析</title>
      <link href="/2022/01/28/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2022/01/28/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p>底层是数组</p><h2 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a><strong>有参构造</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//创建一个数组</span></span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                       initialCapacity);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//将集合转成数组</span></span><br><span class="line">  elementData = c.toArray();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 再次进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">      <span class="comment">//数组的创建和拷贝</span></span><br><span class="line">      elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 空数组的地址赋值给集合存元素的数组</span></span><br><span class="line">    <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">  <span class="comment">//调用数组工具类的方法</span></span><br><span class="line">  <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h2><h3 id="add-E-e"><a href="#add-E-e" class="headerlink" title="add(E e)"></a>add(E e)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//添加元素之后，默认容量大小为10</span></span><br><span class="line">  <span class="comment">//如果没有向集合添加元素时，容量为0</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">//存放元素的数组</span></span><br><span class="line">  <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">  <span class="comment">//实际元素个数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//添加元素add方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断是不是空数组</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">      <span class="comment">//10和1比大小，返回10</span></span><br><span class="line">      <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//增长实际修改集合个数</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//判断需不需要扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="comment">//数组扩容</span></span><br><span class="line">      grow(minCapacity);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//数组扩容</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取长度 </span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// &gt;&gt;：右移，右移几位就相当于除以2的几次幂</span></span><br><span class="line">    <span class="comment">//新的容量 ，扩容的核心算法：原来容量的1.5倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="comment">//把10赋值给newCapacity</span></span><br><span class="line">      newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">      newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">//复制长度为新容量的数组</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index, E element)"></a>add(int index, E element)</h3><ul><li><code>public void add(int index, E element)</code>：指定位置添加元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//检查索引越界</span></span><br><span class="line">  rangeCheckForAdd(index);</span><br><span class="line">  <span class="comment">//可能会扩容（在容量不够的情况下）</span></span><br><span class="line">  ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">//数组元素的拷贝</span></span><br><span class="line">  System.arraycopy(elementData, <span class="comment">//原数组</span></span><br><span class="line">                   index, <span class="comment">//从哪里开始拷贝</span></span><br><span class="line">                   elementData, <span class="comment">//目标数组</span></span><br><span class="line">                   index + <span class="number">1</span>,<span class="comment">//目标数组的开始位置</span></span><br><span class="line">                   size - index);<span class="comment">//需要拷贝多少个元素</span></span><br><span class="line">  <span class="comment">//添加元素</span></span><br><span class="line">  elementData[index] = element;</span><br><span class="line">  <span class="comment">//增加size</span></span><br><span class="line">  size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="addAll-Collection-lt-extends-E-gt-c"><a href="#addAll-Collection-lt-extends-E-gt-c" class="headerlink" title="addAll(Collection&lt;? extends E&gt; c)"></a>addAll(Collection&lt;? extends E&gt; c)</h3><ul><li><code>public boolean addAll(Collection&lt;? extends E&gt; c)</code>：将指定集合的Iterator返回的顺序将指定集合中的所有元素追加到列表的末尾</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">  Object[] a = c.toArray();</span><br><span class="line">  <span class="comment">//获取集合长度</span></span><br><span class="line">  <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">  <span class="comment">//判断需不需要扩容</span></span><br><span class="line">  ensureCapacityInternal(size + numNew);</span><br><span class="line">  <span class="comment">//数组元素拷贝</span></span><br><span class="line">  System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">  <span class="comment">//增加size</span></span><br><span class="line">  size += numNew;</span><br><span class="line">  <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="addAll-int-index-Collection-lt-extends-E-gt-c"><a href="#addAll-int-index-Collection-lt-extends-E-gt-c" class="headerlink" title="addAll(int index, Collection&lt;? extends E&gt; c)"></a>addAll(int index, Collection&lt;? extends E&gt; c)</h3><ul><li><code>public boolean addAll(int index, Collection&lt;? extends E&gt; c)</code>：将指定集合中所有元素从指定位置插入到集合中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//索引越界检查</span></span><br><span class="line">  rangeCheckForAdd(index);</span><br><span class="line"> </span><br><span class="line">  Object[] a = c.toArray();</span><br><span class="line">  <span class="comment">//获取集合长度</span></span><br><span class="line">  <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">  <span class="comment">//判断需不需要扩容</span></span><br><span class="line">  ensureCapacityInternal(size + numNew); </span><br><span class="line">  <span class="comment">//需要移动的元素的个数</span></span><br><span class="line">  <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">  <span class="comment">//把索引后面的元素往后移动</span></span><br><span class="line">  <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">    System.arraycopy(elementData, <span class="comment">//原数组</span></span><br><span class="line">                     index, <span class="comment">//开始移动的索引</span></span><br><span class="line">                     elementData, <span class="comment">//目标数组</span></span><br><span class="line">                     index + numNew,<span class="comment">//目标数组的开始位置</span></span><br><span class="line">                     numMoved);<span class="comment">//需要移动的元素的数量</span></span><br><span class="line">  <span class="comment">//把数组的元素移动进去</span></span><br><span class="line">  System.arraycopy(a, <span class="comment">//原数组</span></span><br><span class="line">                   <span class="number">0</span>, <span class="comment">//开始移动的索引</span></span><br><span class="line">                   elementData, <span class="comment">//目标数组</span></span><br><span class="line">                   index, <span class="comment">//目标数组的开始位置</span></span><br><span class="line">                   numNew);<span class="comment">//需要移动元素的数量</span></span><br><span class="line">  <span class="comment">//增加size</span></span><br><span class="line">  size += numNew;</span><br><span class="line">  <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//索引越界检查</span></span><br><span class="line">  rangeCheck(index);</span><br><span class="line">  <span class="comment">//获得原始元素值</span></span><br><span class="line">  E oldValue = elementData(index);</span><br><span class="line">  <span class="comment">//更改元素值</span></span><br><span class="line">  elementData[index] = element;</span><br><span class="line">  <span class="comment">//返回原是元素值</span></span><br><span class="line">  <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//越界检查</span></span><br><span class="line">  rangeCheck(index);</span><br><span class="line">  <span class="comment">//返回数组的指定索引的值</span></span><br><span class="line">  <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取迭代器</span></span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="comment">//如果没有元素</span></span><br><span class="line">    <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">    <span class="comment">//使用StringBuilder进行字符串拼接</span></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      E e = it.next();</span><br><span class="line">      sb.append(e == <span class="keyword">this</span> ? <span class="string">&quot;(this Collection)&quot;</span> : e);</span><br><span class="line">      <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">        <span class="keyword">return</span> sb.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">      sb.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代器（并发修改异常）"><a href="#迭代器（并发修改异常）" class="headerlink" title="迭代器（并发修改异常）"></a>迭代器（并发修改异常）</h2><blockquote><p>需求：有一个集合list，里面三个元素：hello、world、java，遍历集合得到每一个元素，看看有没有world，如果有就添加一个javaee元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">String s = it.next();</span><br><span class="line"><span class="keyword">if</span>(s.equals(<span class="string">&quot;world&quot;</span>))&#123;</span><br><span class="line">list.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错：Exception in thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br></pre></td></tr></table></figure><p>2、源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//获取迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//光标 默认0</span></span><br><span class="line">    <span class="keyword">int</span> cursor;      </span><br><span class="line">    <span class="comment">//记录 -1</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; </span><br><span class="line">    <span class="comment">//将集合实际修改次数赋值给预期修改次数</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断集合是否有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取下一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      checkForComodification();</span><br><span class="line">      <span class="comment">//将光标赋值给i</span></span><br><span class="line">      <span class="keyword">int</span> i = cursor;</span><br><span class="line">      <span class="comment">//判断，如果大于size说明没有元素了</span></span><br><span class="line">      <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">      <span class="comment">//把集合存储数组的地址复制给该方法的局部变量</span></span><br><span class="line">      Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">      <span class="comment">//进行判断，条件满足抛出并发修改异常</span></span><br><span class="line">      <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">      <span class="comment">//光标自增</span></span><br><span class="line">      cursor = i + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//返回局部变量数组的元素</span></span><br><span class="line">      <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//校验预期修改次数和实际修改次数是否一致</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="comment">//抛出并发修改异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">报错行：String s = it.next();</span><br><span class="line"></span><br><span class="line">由于ArrayList的内部类Itr的next方法中首先调用了checkForComodification方法，而这个方法中如果modCount不等于expectedModCount的话就会抛出异常；</span><br><span class="line"></span><br><span class="line">在add操作中，会在ensureExplicitCapacity方法中对modCount进行++，因此，modeCount不等于expectedModCount了，所以会抛出异常</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：</p><ul><li><strong>当要删除的元素在集合的倒数第二个元素的位置，不会发生并发修改异常</strong><ul><li>原因：调用hasnext方法时，光标的值和集合的长度一样，就会返回false，因此不会再去调用next方法，不会产生并发修改异常</li></ul></li></ul><p><strong>解决方案：使用Itr的remove方法即可</strong></p><h2 id="迭代器的删除方法"><a href="#迭代器的删除方法" class="headerlink" title="迭代器的删除方法"></a>迭代器的删除方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">  <span class="comment">//删除前检查并发修改异常</span></span><br><span class="line">  checkForComodification();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//根据索引删除元素</span></span><br><span class="line">    ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">    <span class="comment">//将光标变成删除元素的索引，-1</span></span><br><span class="line">    cursor = lastRet;</span><br><span class="line">    lastRet = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    expectedModCount = modCount;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="清空方法"><a href="#清空方法" class="headerlink" title="清空方法"></a>清空方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//增加实际修改次数</span></span><br><span class="line">  modCount++;</span><br><span class="line">  <span class="comment">//把所有值设置为null</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">//修改size</span></span><br><span class="line">  size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="包含方法"><a href="#包含方法" class="headerlink" title="包含方法"></a>包含方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用for循环遍历数组完成操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断是否为空"><a href="#判断是否为空" class="headerlink" title="判断是否为空"></a>判断是否为空</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="ArrayList如何扩容？"><a href="#ArrayList如何扩容？" class="headerlink" title="ArrayList如何扩容？"></a>ArrayList如何扩容？</h3><p>答：在第一次使用add方法时，由于size为0，所以调用<code>calculateCapacity</code>方法使得参数为10，10大于当前集合中数组的长度，所以需要进行扩容，扩容到10；在以后的每次add方法时，都需要先进行判断是否需要扩容（<strong>需要的容量和集合存储的数组长度比大小</strong>），如果需要扩容就扩容1.5倍。</p><h3 id="ArrayList频繁扩容导致添加性能下降，如何处理？"><a href="#ArrayList频繁扩容导致添加性能下降，如何处理？" class="headerlink" title="ArrayList频繁扩容导致添加性能下降，如何处理？"></a>ArrayList频繁扩容导致添加性能下降，如何处理？</h3><p>答：使用带参构造方法构造指定容量的空列表</p><h3 id="ArrayList插入或者删除元素一定比LinkedList慢吗？"><a href="#ArrayList插入或者删除元素一定比LinkedList慢吗？" class="headerlink" title="ArrayList插入或者删除元素一定比LinkedList慢吗？"></a>ArrayList插入或者删除元素一定比LinkedList慢吗？</h3><p>答：不是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArrayList的删除方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  rangeCheck(index);</span><br><span class="line"></span><br><span class="line">  modCount++;</span><br><span class="line">  E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//进行元素的复制</span></span><br><span class="line">  <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">    System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                     numMoved);</span><br><span class="line">  elementData[--size] = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LinkedList的删除方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  checkElementIndex(index);</span><br><span class="line">  <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//判断索引是否小于集合长度的一半</span></span><br><span class="line">  <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="comment">//如果小于把第一个节点赋值给x</span></span><br><span class="line">    Node&lt;E&gt; x = first;</span><br><span class="line">    <span class="comment">//从头向后找</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">      <span class="comment">//获取下一个节点</span></span><br><span class="line">      x = x.next;</span><br><span class="line">    <span class="comment">//返回找到的节点</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//把最后一个节点赋值给x</span></span><br><span class="line">    Node&lt;E&gt; x = last;</span><br><span class="line">    <span class="comment">//从后往前找</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">      <span class="comment">//获取前一个节点</span></span><br><span class="line">      x = x.prev;</span><br><span class="line">    <span class="comment">//返回找到的节点</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// assert x != null;</span></span><br><span class="line">  <span class="keyword">final</span> E element = x.item;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">    first = next;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    prev.next = next;</span><br><span class="line">    x.prev = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">    last = prev;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next.prev = prev;</span><br><span class="line">    x.next = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  x.item = <span class="keyword">null</span>;</span><br><span class="line">  size--;</span><br><span class="line">  modCount++;</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList是线程安全的吗？"><a href="#ArrayList是线程安全的吗？" class="headerlink" title="ArrayList是线程安全的吗？"></a>ArrayList是线程安全的吗？</h3><p>不是线程安全的</p><h3 id="如何复制ArrayList到另外一个ArrayList中？"><a href="#如何复制ArrayList到另外一个ArrayList中？" class="headerlink" title="如何复制ArrayList到另外一个ArrayList中？"></a>如何复制ArrayList到另外一个ArrayList中？</h3><p>1、clone方法</p><p>2、使用ArrayList的构造方法</p><p>3、使用addAll方法</p><h3 id="已知成员变量集合存储N多用户名称，在多线程的环境下，使用迭代器在读取集合数据的同时保证正常的写入数据到集合？"><a href="#已知成员变量集合存储N多用户名称，在多线程的环境下，使用迭代器在读取集合数据的同时保证正常的写入数据到集合？" class="headerlink" title="已知成员变量集合存储N多用户名称，在多线程的环境下，使用迭代器在读取集合数据的同时保证正常的写入数据到集合？"></a>已知成员变量集合存储N多用户名称，在多线程的环境下，使用迭代器在读取集合数据的同时保证正常的写入数据到集合？</h3><p>使用读写分离<code>CopyOnWriteArrayList</code></p><h3 id="ArrayList和LinkedList区别？"><a href="#ArrayList和LinkedList区别？" class="headerlink" title="ArrayList和LinkedList区别？"></a>ArrayList和LinkedList区别？</h3><p><strong>ArrayList</strong></p><ul><li>基于动态数组的数据结构</li><li>对于随机访问的get和set，ArrayList要优于LinkedList</li><li>对于随机操作的add和remove，ArrayList不一定比LinkedList慢</li></ul><p><strong>LinkedList</strong></p><ul><li>基于链表的数据结构</li><li>对于顺序操作，LinkedList不一定比ArrayList慢</li><li>对于随机操作，LinkedList效率明显低</li></ul><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p><p>链表的分类：<strong>单链表、双链表、循环链表</strong></p><ul><li>链表：由链将一个个元素连接，每一个元素我们通常称其为Node节点（<strong>优势：用多少空间申请多少空间</strong>）</li><li>Node节点：由两部分组成<ul><li>数据值的变量</li><li>Node next存放下一个节点的Node对象</li></ul></li></ul><p><strong>因为没有索引，链表查询速度非常慢（和数组相比）</strong></p><img src="https://img-blog.csdnimg.cn/20210321215638751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 67%;" /><img src="https://img-blog.csdnimg.cn/20210321220230708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%;" /><h2 id="自定义单向链表"><a href="#自定义单向链表" class="headerlink" title="自定义单向链表"></a>自定义单向链表</h2><img src="https://img-blog.csdnimg.cn/20210321220650871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"  /><p>目的：为了体系的完整，以及代码的复用，设计出以下结构：</p><p><strong>需要实现的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">conatins</span><span class="params">(E element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><p>含有共性的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbstractList抽象类"><a href="#AbstractList抽象类" class="headerlink" title="AbstractList抽象类"></a>AbstractList抽象类</h3><p>实现共性的方法，实现List</p><p>因为只实现了部分方法，所以是abstract类，其余的具有特性的方法交给集合自己实现</p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p><img src="https://img-blog.csdnimg.cn/20210321222356920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p><strong>Node类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在最后添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">  last = newNode;</span><br><span class="line">  <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">    first = newNode;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    l.next = newNode;</span><br><span class="line">  size++;</span><br><span class="line">  modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// assert succ != null;</span></span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">  succ.prev = newNode;</span><br><span class="line">  <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">    first = newNode;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    pred.next = newNode;</span><br><span class="line">  size++;</span><br><span class="line">  modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取指定索引的node</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">    Node&lt;E&gt; x = first;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">      x = x.next;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Node&lt;E&gt; x = last;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">      x = x.prev;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//x:要删除的元素</span></span><br><span class="line">  <span class="comment">//获取要删除元素的值</span></span><br><span class="line">  <span class="keyword">final</span> E element = x.item;</span><br><span class="line">  <span class="comment">//获取要删除元素下一个node</span></span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">  <span class="comment">//获取要删除元素上一个node</span></span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">    first = next;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    prev.next = next;</span><br><span class="line">    x.prev = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">    last = prev;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next.prev = prev;</span><br><span class="line">    x.next = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  x.item = <span class="keyword">null</span>;</span><br><span class="line">  size--;</span><br><span class="line">  modCount++;</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">      <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">      index++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="conatins"><a href="#conatins" class="headerlink" title="conatins"></a>conatins</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> listIterator();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> listIterator(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; lastReturned;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; next;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        next = (index == size) ? <span class="keyword">null</span> : node(index);</span><br><span class="line">        nextIndex = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextIndex &lt; size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">if</span> (!hasNext())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">      </span><br><span class="line">        lastReturned = next;</span><br><span class="line">        next = next.next;</span><br><span class="line">        nextIndex++;</span><br><span class="line">        <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>节点node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">  E item;</span><br><span class="line">  Node&lt;E&gt; next;</span><br><span class="line">  Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">  Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">    <span class="keyword">this</span>.item = element;</span><br><span class="line">    <span class="keyword">this</span>.next = next;</span><br><span class="line">    <span class="keyword">this</span>.prev = prev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、获得第一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> f.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、获得最后一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> l.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、删除第一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、删除最后一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、添加第一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  linkFirst(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">  first = newNode;</span><br><span class="line">  <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">    last = newNode;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    f.prev = newNode;</span><br><span class="line">  size++;</span><br><span class="line">  modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、添加最后一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  linkLast(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">  last = newNode;</span><br><span class="line">  <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">    first = newNode;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    l.next = newNode;</span><br><span class="line">  size++;</span><br><span class="line">  modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>1、HashMap基于哈希表的Map接口实现，以key-value的存储形式存在。</p><p>2、HashMap的实现不是同步的，这意味着<strong>它不是线程安全的</strong></p><p>3、JDK1.8之前HashMap是由<strong>数组+链表</strong>组成的，数组是HashMap的主体，链表主要是为了解决哈希冲突（两个对象调用的hashcode方法计算的哈希值一致导致计算的数组索引值相同）而存在的（“拉链法”解决冲突）</p><p>4、JDK1.8之后，解决哈希冲突的方法发生变化，当链表长度大于某个值（或者红黑树的边界值，默认为8）并且当前数组的长度大于64时，此时索引位置上的所有数据改为使用<strong>红黑树存储</strong></p><p>注意：将链表转换成红黑树前会判断，即使大于8，但是数组长度小于64，此时不会将链表变为红黑树，<strong>而是选择对数组进行扩容</strong></p><p>这样做的目的是因为数组比较小，尽量避开红黑树结构，这种情况下红黑树结构反而会降低效率，因为红黑树需要进行左旋、右旋，变色这些操作来保持平衡。同时数组长度小于64时，搜索时间相对快一点，<strong>所以当底层阙值大于8并且数组长度大于64，才会转换</strong>。（<strong>treeifyBin</strong>）</p><p>5、<strong>特点：</strong></p><ul><li>存取无序</li><li>键和值位置都可以为null</li><li>键位置是唯一的，底层的数据结构控制键</li><li><strong>jdk1.8前，链表+数组；jdk1.8后，链表+数组+红黑树</strong></li></ul><h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><h3 id="数据结构存储数据的过程"><a href="#数据结构存储数据的过程" class="headerlink" title="数据结构存储数据的过程"></a>数据结构存储数据的过程</h3><p><strong>1、创建HashMap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Integer&gt; a = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>创建HashMap集合对象时</p><ul><li>jdk8前，构造方法中创建一个长度为16的<code>Entry[] table</code>来存储键值对数据；</li><li>jdk8后，不是在HashMap的构造方法底层创建数组了，是在第一次调用put方法时创建数组， <code>Node[] table</code>存储键值对数据</li></ul><p><strong>2、put数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.put(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>根据a调用String类中重写之后的<code>hashCode()</code>方法计算出值，然后结合数组长度采用某种算法计算出向Node数组中存储数据的空间的索引值；如果计算出的索引空间没有数据，就直接存储到数组中</p><p>3、向哈希表存储数据b-2，假设b计算出的hashcode方法结合数组长度计算出的索引值与a相同，那么此时数组空间不是null，此时底层会比较a和b的哈希值是否一致：</p><ul><li><strong>hash值不相等</strong>，在此空间上划出一个节点来存储键值对数据b-2（拉链法）</li><li><strong>hash值相等（哈希冲突）</strong>，进一步调用元素的<code>equals</code>方法，比较Key的内容是否一致<ul><li>如果Key的值一致，就会将原来的value值覆盖</li><li>如果Key的值不一致，就会在当前索引位置上划分一个节点来存储当前的元素</li><li><strong>链表长度大于8，数组长度大于64，转为红黑树</strong></li></ul></li></ul><p>3、在不断添加数据的过程中，会涉及到扩容的问题，超出临界值（且要存放的位置非空）时，扩容。</p><p><strong>默认的扩容方式</strong>：扩容为原来容量的两倍，并将原有的数据复制过来</p><img src="https://img-blog.csdnimg.cn/20210322094242632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:150%;" /><p>说明：</p><p>1、size表示HashMap中K-V的实时数量，这个不是数组的长度</p><p>2、<strong>threshold（临界值）&#x3D; capacity（容量）*loadFactor（加载因子，0.75）</strong>，这个值是当前已占有数组长度的最大值，size超过这个临界值就重新resize（扩容），<strong>扩容后的HashMap容量是之前容量的两倍。</strong></p><h2 id="HashMap继承关系"><a href="#HashMap继承关系" class="headerlink" title="HashMap继承关系"></a>HashMap继承关系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>Cloneable：空接口，表示可以克隆</li><li>Serializable：序列化接口</li><li>AbstractMap：父类提供了Map实现接口，减少实现此接口所需要完成的工作</li></ul><blockquote><p>java集合框架的创始人描述这样的写法是一个失误，后面的工程师认为这个失误不值得去修改，所以就保存下来了</p></blockquote><h2 id="HashMap集合类的成员"><a href="#HashMap集合类的成员" class="headerlink" title="HashMap集合类的成员"></a>HashMap集合类的成员</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p><strong>1、序列化版本号</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br></pre></td></tr></table></figure><p><strong>2、集合的初始化容量（必须是2的n次幂）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><p>见面试题6和7</p><p>小结：</p><ul><li>当我们根据key的hash确定其在数组的位置时，如果n为2的幂次方，<strong>可以保证数据的均匀插入</strong>，如果n不是2的幂次方，可能数组的一些位置永远不会插入数据，浪费数组的空间，加大hash冲突</li><li>取余数的方式性能不如&amp;运算，而且当n是2的幂次方时：<strong>hash&amp;(length-1) &#x3D;&#x3D; hash%length</strong></li><li>HashMap容量为2的幂次方是为了数据的均匀分布，减少hash冲突</li><li><strong>如果创建HashMap对象时，输入的数组长度为10，不是2的幂次方，HashMap通过位运算和或运算得到的肯定是2的幂次数，而且离那个数最近的数字</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                       initialCapacity);</span><br><span class="line">  <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">    initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">  <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                       loadFactor);</span><br><span class="line">  <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">  <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，实例化hashMap时，如果给定了初始容量，由于HashMap的容量必须是2的幂，因此使用<code>tableSizeFor</code>方法找到大于等于初始容量的最小的2的幂</p><p>分析：</p><ul><li><p>对cap减1，这是为了防止cap已经是2的n次幂，没有执行这个操作经过后面的无符号右移操作后，这个容量会变成cap的两倍</p></li><li><p>经过运算，最后二进制都会变成连续的1</p></li><li><p>返回threshold</p></li></ul><p><strong>3、负载因子，默认0.75</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p><strong>4、链表的值超过8就会转红黑树</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p><strong>5、值小于6转回链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p><strong>6、数组长度大于64才会转红黑树，如果小于64，节点值超过8就选择扩容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><p><strong>7、table用来初始化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>table就是HashMap中的数组，jdk8以前是Entry类型，jdk8以后是Node类型</p><p><strong>8、HashMap中存放元素的个数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><p><strong>9、修改的次数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br></pre></td></tr></table></figure><p><strong>10、边界值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> threshold;</span><br></pre></td></tr></table></figure><p><strong>threshold（临界值）&#x3D; capacity（容量）*loadFactor（加载因子，0.75）</strong></p><p>size超过这个值进行扩容</p><p><strong>11、加载因子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><p>0和1之间，越靠近1说明数组越密集。表示HashMap的疏密程度</p></li><li><p>计算公式：size&#x2F;capacity （capacity是桶的数量，table的长度）</p></li><li><p>默认值0.75，不建议修改</p></li><li><p>如果HashMap里面容纳的元素已经达到了HashMap数组长度的75%，表示很拥挤，需要扩容</p></li><li><p>在HashMap的构造器中可以定制loadFactor</p></li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><strong>1、无参构造</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、指定初始化容量</strong></p><p>如果指定容量10，容量会变成16</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、指定加载因子和初始化容量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">  <span class="comment">//在put方法才会乘0.75</span></span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、包含另外一个Map的构造函数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//加载因子默认0.75</span></span><br><span class="line">  <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">  putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><h4 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h4><p>① 调用 <code>putVal</code> 方法添加元素。</p><p>② 如果 table 为空或长度为 0 就进行扩容，否则计算元素下标位置，不存在就调用 <code>newNode</code> 创建一个节点。</p><p>③ 如果存在且是链表，如果首节点和待插入元素的 hash 和 key 都一样，更新节点的 value。</p><p>④ 如果首节点是 TreeNode 类型，调用 <code>putTreeVal</code> 方法增加一个树节点，每一次都比较插入节点和当前节点的大小，待插入节点小就往左子树查找，否则往右子树查找，找到空位后执行两个方法：<code>balanceInsert</code> 方法，插入节点并调整平衡、<code>moveRootToFront</code> 方法，由于调整平衡后根节点可能变化，需要重置根节点。</p><p>⑤ 如果都不满足，遍历链表，根据 hash 和 key 判断是否重复，决定更新 value 还是新增节点。如果遍历到了链表末尾则添加节点，如果达到建树阈值 7，还需要调用 <code>treeifyBin</code> 把链表重构为红黑树。</p><p>⑥ 存放元素后将 modCount 加 1，如果 <code>++size &gt; threshold</code> ，调用 <code>resize</code> 扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算哈希值</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> h;</span><br><span class="line">  <span class="comment">//当key为null，返回0</span></span><br><span class="line">  <span class="comment">//key不为null，首先计算出key的hashcode值赋值给h，然后与h无符号右移16位后的二进制进行按位异或得到最后的hash值</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//hashCode的高位变化很大，而低位变化很小或者没有变化，那么如果直接和数组长度进行&amp;运算，会很容易造成计算的结果一样的，导致hash碰撞</span></span><br><span class="line">  <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么要这么操作？</strong></p><p>如果n即数组长度很小，假设为16，这样的值和hashCode直接进行操作，实际上只是用了哈希值的后面4位，如果当哈希值的高位变化，低位变化很小，这样很容易造成哈希冲突</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash,//哈希值</span></span></span><br><span class="line"><span class="params"><span class="function">               K key, </span></span></span><br><span class="line"><span class="params"><span class="function">               V value, </span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">boolean</span> onlyIfAbsent,//<span class="keyword">false</span>，代表更改现有值；<span class="keyword">true</span>代表不更改现有值</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">boolean</span> evict)</span> </span>&#123;<span class="comment">//true</span></span><br><span class="line">  <span class="comment">//表示引用当前hashmap的散列表</span></span><br><span class="line">  Node&lt;K,V&gt;[] tab; </span><br><span class="line">  <span class="comment">//表示当前散列表的元素</span></span><br><span class="line">  Node&lt;K,V&gt; p; </span><br><span class="line">  <span class="comment">//n：散列表数组的长度</span></span><br><span class="line">  <span class="comment">//i：路由寻址的结果</span></span><br><span class="line">  <span class="keyword">int</span> n, i;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果hashmap的散列表没有初始化</span></span><br><span class="line">  <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">    <span class="comment">//初始化数组，散列表唱的为16</span></span><br><span class="line">    n = (tab = resize()).length;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//计算i：路由算法 (n - 1) &amp; hash</span></span><br><span class="line">  <span class="comment">//如果数组这个索引的位置为null，直接插入node</span></span><br><span class="line">  <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">    tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果数组这个索引的位置元素（p）不为null</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//e：不为null的话，表示找到了一个当前要插入的key-value一致的node元素</span></span><br><span class="line">    Node&lt;K,V&gt; e; </span><br><span class="line">    <span class="comment">//k：临时的一个key</span></span><br><span class="line">    K k;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果p的hash值和hash值相同并且key的值相同，表示后续需要进行替换操作</span></span><br><span class="line">    <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">        ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">      e = p;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果这个key值是TreeNode，说明是红黑树</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">      <span class="comment">//插入到红黑树</span></span><br><span class="line">      e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//说明是链表</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//遍历链表</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">        <span class="comment">//如果这个节点下一个节点为null，说明到末尾了，可以直接添加了</span></span><br><span class="line">        <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">          p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">          <span class="comment">//如果大于等于7的时候，代表前面已经有八个元素了</span></span><br><span class="line">          <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">            <span class="comment">//树化</span></span><br><span class="line">            treeifyBin(tab, hash);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断key是否一样</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">          <span class="comment">//跳出做替换，e这个元素就是需要被替换的代码</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//下一个节点</span></span><br><span class="line">        p = e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//e不等于null说明有节点需要进行替换</span></span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//旧的值</span></span><br><span class="line">      V oldValue = e.value;</span><br><span class="line">      <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//覆盖</span></span><br><span class="line">        e.value = value;</span><br><span class="line">      afterNodeAccess(e);</span><br><span class="line">      <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实际操作数量+1</span></span><br><span class="line">  ++modCount;</span><br><span class="line">  <span class="comment">//判断是否需要扩容</span></span><br><span class="line">  <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">    resize();</span><br><span class="line">  afterNodeInsertion(evict);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210322193707695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩容</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">  <span class="comment">//获取扩容前的table</span></span><br><span class="line">  Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">  <span class="comment">//获取table的旧容量</span></span><br><span class="line">  <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">  <span class="comment">//获取旧阈值</span></span><br><span class="line">  <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//说明hashmap中散列表已经初始化过了，是一次正常扩容</span></span><br><span class="line">  <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果散列表长度已经达到了最大容量了</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">      <span class="comment">//设置阈值为很大的值</span></span><br><span class="line">      threshold = Integer.MAX_VALUE;</span><br><span class="line">      <span class="keyword">return</span> oldTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//容量翻倍，如果小于最大容量的话</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">             oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">      <span class="comment">//阈值变为两倍</span></span><br><span class="line">      newThr = oldThr &lt;&lt; <span class="number">1</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//oldCap==0，说明hashmap的散列表还没有初始化</span></span><br><span class="line">  <span class="comment">//情况一：new HashMap（初始容量，加载因子）</span></span><br><span class="line">  <span class="comment">//情况二：new HashMap（初始容量）</span></span><br><span class="line">  <span class="comment">//情况三：new HashMap（map）</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) </span><br><span class="line">    <span class="comment">//新容量=旧阈值</span></span><br><span class="line">    newCap = oldThr;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//oldCap==0，说明hashmap的散列表还没有初始化</span></span><br><span class="line">  <span class="comment">//情况一：new Hash（）</span></span><br><span class="line">  <span class="keyword">else</span> &#123;   </span><br><span class="line">    <span class="comment">//默认容量16</span></span><br><span class="line">    newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">    <span class="comment">//默认阈值=16*0.75=12</span></span><br><span class="line">    newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//在第二种情况下出现这个情况（三个构造方法）</span></span><br><span class="line">  <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//计算出阈值</span></span><br><span class="line">    <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">    <span class="comment">//基本上都是 newThr = ft</span></span><br><span class="line">    newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">              (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//设置HashMap的阈值为局部变量newThr</span></span><br><span class="line">  threshold = newThr;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 做真正的扩容操作</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//初始化扩容后的新数组</span></span><br><span class="line">  Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">  <span class="comment">//把新数组引用赋值给table</span></span><br><span class="line">  table = newTab;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果hashmap扩容前不为null</span></span><br><span class="line">  <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">      <span class="comment">//当前node节点</span></span><br><span class="line">      Node&lt;K,V&gt; e;</span><br><span class="line">      <span class="comment">//说明当前桶中有数据，但是数据具体内容（单个数据、链表、红黑树）并不知道</span></span><br><span class="line">      <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//方便JVM GC回收内存</span></span><br><span class="line">        oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//说明是单个数据</span></span><br><span class="line">        <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">          <span class="comment">//根据寻址算法计算出新的索引，插入到新数组中</span></span><br><span class="line">          newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//说明是红黑树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">          ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//说明是链表，将这个链表分为低位链表和高位链表</span></span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">          <span class="comment">//低位链表：存放在扩容之后数组的下标位置与当前的下标位置一致</span></span><br><span class="line">          Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">          <span class="comment">//高位链表：存放在扩容之后的数组的下标位置=当前位置+扩容前数组的长度</span></span><br><span class="line">          Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">          </span><br><span class="line">          Node&lt;K,V&gt; next;</span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">            next = e.next;</span><br><span class="line">            <span class="comment">//如果与旧容量的与hash的与为0，位置不动，放入低位链表</span></span><br><span class="line">            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">              loTail = e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果与旧容量的与hash的与为1，位置=当前位置+旧容量，放入改为链表</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">              hiTail = e;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//如果低位链表有数据</span></span><br><span class="line">          <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//设置最后元素的next为null</span></span><br><span class="line">            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//将这个链表的首元素指到新哈希表的位置</span></span><br><span class="line">            newTab[j] = loHead;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//如果高位链表有数据</span></span><br><span class="line">          <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//设置最后元素的next为null</span></span><br><span class="line">            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//将这个链表的首元素指到新哈希表的位置</span></span><br><span class="line">            newTab[j + oldCap] = hiHead;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回新数组</span></span><br><span class="line">  <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210322211031712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="get方法-1"><a href="#get方法-1" class="headerlink" title="get方法"></a>get方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">  Node&lt;K,V&gt; e;</span><br><span class="line">  <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//当前hashmap的散列表</span></span><br><span class="line">  Node&lt;K,V&gt;[] tab; </span><br><span class="line">  <span class="comment">//当前桶的头元素</span></span><br><span class="line">  Node&lt;K,V&gt; first, </span><br><span class="line">  <span class="comment">//临时node元素</span></span><br><span class="line">  e; </span><br><span class="line">  <span class="comment">//数组长度</span></span><br><span class="line">  <span class="keyword">int</span> n; </span><br><span class="line">  <span class="comment">//key</span></span><br><span class="line">  K k;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取tab、n、first</span></span><br><span class="line">  <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">      (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果第一个元素就是需要查的元素，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (first.hash == hash &amp;&amp; </span><br><span class="line">        ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">      <span class="keyword">return</span> first;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//如果是红黑树</span></span><br><span class="line">      <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">        <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">      <span class="comment">//遍历链表，返回查到的元素</span></span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">          <span class="keyword">return</span> e;</span><br><span class="line">      &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="树化"><a href="#树化" class="headerlink" title="树化"></a>树化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, </span><br><span class="line">  index; </span><br><span class="line">  Node&lt;K,V&gt; e;</span><br><span class="line">  <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">    resize();</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">        hd = p;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        p.prev = tl;</span><br><span class="line">        tl.next = p;</span><br><span class="line">      &#125;</span><br><span class="line">      tl = p;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">      hd.treeify(tab);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><h3 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Entry类型数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;</span><br><span class="line"><span class="comment">//元素的个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"><span class="comment">//阈值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">//加载因子</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"><span class="comment">//实际修改个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">//哈希值</span></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">  <span class="comment">//key</span></span><br><span class="line">  <span class="keyword">final</span> K key;</span><br><span class="line">  <span class="comment">//value</span></span><br><span class="line">  V value;</span><br><span class="line">  <span class="comment">//下一个</span></span><br><span class="line">  Entry&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>1、无参构造</p><p><strong>容量默认11，加载因子默认0.75</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、容量、加载因子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                       initialCapacity);</span><br><span class="line">  <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Load: &quot;</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果设置容量为0，则置为1</span></span><br><span class="line">  <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">    initialCapacity = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//设置加载因子</span></span><br><span class="line">  <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">  <span class="comment">//创建table</span></span><br><span class="line">  table = <span class="keyword">new</span> Entry&lt;?,?&gt;[initialCapacity];</span><br><span class="line">  <span class="comment">//计算阈值</span></span><br><span class="line">  threshold = (<span class="keyword">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put方法-1"><a href="#put方法-1" class="headerlink" title="put方法"></a>put方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//判断value是否为空</span></span><br><span class="line">  <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//寻找是否有相同值</span></span><br><span class="line">  <span class="comment">//获取散列表</span></span><br><span class="line">  Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">  <span class="comment">//计算哈希值</span></span><br><span class="line">  <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">  <span class="comment">//计算索引</span></span><br><span class="line">  <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获得该索引下的元素</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">  <span class="comment">//如果该元素不是null，进行遍历</span></span><br><span class="line">  <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</span><br><span class="line">    <span class="comment">//如果hash值和key相同</span></span><br><span class="line">    <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">      <span class="comment">//替换</span></span><br><span class="line">      V old = entry.value;</span><br><span class="line">      entry.value = value;</span><br><span class="line">      <span class="comment">//返回被替换的value</span></span><br><span class="line">      <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addEntry(hash, key, value, index);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//增加操作次数</span></span><br><span class="line">  modCount++;</span><br><span class="line">  <span class="comment">//获取散列表</span></span><br><span class="line">  Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//元素个数是否大于阈值</span></span><br><span class="line">  <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">    <span class="comment">//进行扩容</span></span><br><span class="line">    rehash();</span><br><span class="line">    </span><br><span class="line">    tab = table;</span><br><span class="line">    hash = key.hashCode();</span><br><span class="line">    index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//插入元素</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">  tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">  <span class="comment">//增加元素个数</span></span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rehash方法"><a href="#rehash方法" class="headerlink" title="rehash方法"></a>rehash方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//获得旧容量</span></span><br><span class="line">  <span class="keyword">int</span> oldCapacity = table.length;</span><br><span class="line">  <span class="comment">//获得旧散列表</span></span><br><span class="line">  Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义新容量=就容量*2+1</span></span><br><span class="line">  <span class="keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//初始化新的散列表</span></span><br><span class="line">  Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> Entry&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//增加操作次数</span></span><br><span class="line">  modCount++;</span><br><span class="line">  <span class="comment">//计算新的阈值</span></span><br><span class="line">  threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">//把新的散列表设置为table</span></span><br><span class="line">  table = newMap;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//变量旧的散列表</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="keyword">null</span> ; ) &#123;</span><br><span class="line">      <span class="comment">//获得旧的元素</span></span><br><span class="line">      Entry&lt;K,V&gt; e = old;</span><br><span class="line">      <span class="comment">//下一个</span></span><br><span class="line">      old = old.next;</span><br><span class="line">      <span class="comment">//计算旧元素的index</span></span><br><span class="line">      <span class="keyword">int</span> index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">      <span class="comment">//头部插入</span></span><br><span class="line">      e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">      newMap[index] = e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h2><h3 id="答题思路"><a href="#答题思路" class="headerlink" title="答题思路"></a><strong>答题思路</strong></h3><p><strong>1.7和1.8的区别</strong>：结构、头插法和尾插法</p><p>初始化hashmap：无参数构造和有参数构造，无参数构造会初始化加载因子，有参构造会初始化加载因子和阈值（这个阈值。。。会变成长度，最接近的2的次幂）</p><p><strong>为什么要用2的次幂？</strong>主要是为了使得元素均匀分布，因为2的次幂-1就全是1，和哈希值进行与运算能够充分利用高位的数字</p><p><strong>为什么初始化加载因子0.75？</strong>因为是空间和时间的平衡</p><p><strong>为什么要用红黑树？</strong>为了提高查询效率</p><p><strong>什么时候用红黑树？</strong>链表大于8且数组长度大于64</p><p><strong>什么时候扩容？</strong>元素个数大于阈值、链表大于8且数组长度小于64</p><p>哈希碰撞</p><p><strong>和hashtable的区别？</strong>hashtable线程安全，hashmap不能保证元素位置不变</p><h3 id="哈希表底层采用何种算法计算哈希值？还有那些算法可以计算出哈希值"><a href="#哈希表底层采用何种算法计算哈希值？还有那些算法可以计算出哈希值" class="headerlink" title="哈希表底层采用何种算法计算哈希值？还有那些算法可以计算出哈希值"></a>哈希表底层采用何种算法计算哈希值？还有那些算法可以计算出哈希值</h3><p>底层采用的是key的hashCode方法的值结合数组长度进行**无符号右移(&gt;&gt;&gt;)、按位异或(^)、按位与(&amp;)**计算出索引</p><p>还可以采用：<strong>平方取中法，取余数、伪随机数法</strong></p><p>其他计算方式比较低，而位运算效率比较高，所以底层采用这种方式</p><blockquote><p>&gt;&gt;&gt;表示无符号右移，也叫逻辑右移，即若该数为正，则高位补0，而若该数为负数，则右移后高位同样补0</p></blockquote><hr/><h3 id="如果两个对象hashCode相等怎么办？"><a href="#如果两个对象hashCode相等怎么办？" class="headerlink" title="如果两个对象hashCode相等怎么办？"></a>如果两个对象hashCode相等怎么办？</h3><p>会产生哈希碰撞，如果key值内容相同则替换旧的value，不同就连接到链表后面，链表长度大于8且数组长度大于64就转为红黑树存储</p><hr/><h3 id="何时发生哈希碰撞？什么是哈希碰撞？如何解决哈希碰撞？"><a href="#何时发生哈希碰撞？什么是哈希碰撞？如何解决哈希碰撞？" class="headerlink" title="何时发生哈希碰撞？什么是哈希碰撞？如何解决哈希碰撞？"></a>何时发生哈希碰撞？什么是哈希碰撞？如何解决哈希碰撞？</h3><p>只要两个元素的key计算的哈希值相同就会发生哈希碰撞，jdk8前使用链表解决哈希碰撞，jdk8之后使用链表+红黑树解决哈希碰撞</p><hr/><h3 id="如何两个键的hashCode相同，如何存储键值对？"><a href="#如何两个键的hashCode相同，如何存储键值对？" class="headerlink" title="如何两个键的hashCode相同，如何存储键值对？"></a>如何两个键的hashCode相同，如何存储键值对？</h3><p>hashcode相同，通过equals比较内容是否相同</p><ul><li><p>相同：新的value覆盖旧的value</p></li><li><p>不同：将新的键值对添加到哈希表中</p></li></ul><hr/><h3 id="为什么1-8要引入红黑树？"><a href="#为什么1-8要引入红黑树？" class="headerlink" title="为什么1.8要引入红黑树？"></a>为什么1.8要引入红黑树？</h3><p>1.8以前HashMap使用数组+链表，即使哈希函数取的再好也很难达到元素百分百均匀分布，当HashMap有大量的元素存放在同一个桶中，这个桶下有一条长链表，这个时候HashMap就相当于一个单链表，遍历的时间复杂度为O(n)，完全失去了优势。</p><p>红黑树的查找时间复杂度为O(logn)，可以进行优化；</p><p>链表长度小的时候即使遍历速度也很快，但是链表变长以后会对查询性能产生影响</p><hr/><h3 id="为什么集合的初始化容量必须是2的n次幂？"><a href="#为什么集合的初始化容量必须是2的n次幂？" class="headerlink" title="为什么集合的初始化容量必须是2的n次幂？"></a>为什么集合的初始化容量必须是2的n次幂？</h3><p>2的n次方实际就是1后面n个0，2的n次方-1实际就是n个1；</p><p>如果数组的长度不是2的n次方，计算出的索引特别容易相同 ，哈希碰撞的几率增大，导致数组空间很大程度上并没有存储数据，链表或红黑树过长，效率降低。</p><p>当数组的长度为2的n次幂时，可以保证数据的均匀插入，减少hash冲突，提高hashamap的性能</p><hr/><h3 id="hash-amp-length-1-这种算法如何减少hash碰撞？让空间均匀分配"><a href="#hash-amp-length-1-这种算法如何减少hash碰撞？让空间均匀分配" class="headerlink" title="hash&amp;(length-1) 这种算法如何减少hash碰撞？让空间均匀分配"></a>hash&amp;(length-1) 这种算法如何减少hash碰撞？让空间均匀分配</h3><p>数组长度为2的n次幂</p><img src="https://img-blog.csdnimg.cn/20210322133919629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%;" /><p>数组长度不是2的n次幂，计算出的索引特别容易相同，极其容易发生哈希碰撞，导致其余数组空间很大程度上并没有存储数据，链表或红黑树过长，效率降低</p><img src="https://img-blog.csdnimg.cn/20210322134027171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><hr/><h3 id="为什么Map桶的节点数超过8才变成红黑树？"><a href="#为什么Map桶的节点数超过8才变成红黑树？" class="headerlink" title="为什么Map桶的节点数超过8才变成红黑树？"></a>为什么Map桶的节点数超过8才变成红黑树？</h3><p>为了空间和时间的权衡</p><p>红黑树的占用空间是链表的两倍，根据<strong>泊松分布</strong>，数量超过8的概率很低，所以只要包含足够多节点才会转为红黑树，链表长度大于8转为红黑树，小于6又回变回链表</p><hr/><h3 id="为什么加载因子0-75，初始化临界值12？"><a href="#为什么加载因子0-75，初始化临界值12？" class="headerlink" title="为什么加载因子0.75，初始化临界值12？"></a>为什么加载因子0.75，初始化临界值12？</h3><p>加载因子：hash表中元素填满程度</p><ul><li>加载因子过小，元素在数组中过于分散，有些空间一直没有元素，会造成空间的浪费<ul><li>加载因子是0.4 。那么16* 0.4—–&gt;6 如果数组中满6个空间就进行扩容会造成<strong>数组利用率太低</strong>了</li></ul></li><li>加载因子过大，元素在数组中会特别的拥挤，查找元素的效率降低，造成链表过长，增加hash碰撞几率，根据泊松分布规律，和官方给出的测试数据，加载因子为0.75时最合适，既不会因为扩容带来的rehash，复制数据等操作而影响性能，也不会因为数组长度太小导致利用率降低。<ul><li>加载因子是0.9。那么16* 0.9——-&gt;14那么这样就会导致链表有点多了，<strong>导致查找元素效率低</strong>。</li></ul></li></ul><p><strong>所以既兼顾数组利用率又考虑链表不要太多，经过大量测试0.75是最佳方案</strong></p><hr/><h3 id="什么时候需要扩容？"><a href="#什么时候需要扩容？" class="headerlink" title="什么时候需要扩容？"></a>什么时候需要扩容？</h3><p>情况1：元素个数超过数组的长度*负载因子的时候会进行扩容</p><p>情况2：添加元素的时候，当HashMap其中一个链表的对象个数达到了8个，但是数组长度没有达到64，就会进行扩容</p><p><strong>扩容为原容量的2倍</strong></p><hr/><h3 id="HashMap的扩容是什么"><a href="#HashMap的扩容是什么" class="headerlink" title="HashMap的扩容是什么"></a>HashMap的扩容是什么</h3><p>分为两步:</p><ul><li>扩容：创建一个新的Entry空数组，长度是原数组的2倍。</li><li>ReHash：遍历原Entry数组，把所有的Entry重新Hash到新数组<ul><li>长度扩大以后，Hash的规则也随之改变。</li></ul></li></ul><p>进行扩容，会伴随一次重新hash分配，并且会遍历hash表中所有的元素，是非常耗时的。</p><p>每次扩容都是翻倍，与原来计算的值多了一个bit位，所以节点要么在原来的位置（比特位是0），要么被分配到“原位置+旧容量”的位置（1）</p><img src="https://img-blog.csdnimg.cn/20210322155318342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><hr/><h3 id="为什么HashMap不安全？"><a href="#为什么HashMap不安全？" class="headerlink" title="为什么HashMap不安全？"></a>为什么HashMap不安全？</h3><p>HashMap会进行resize操作，在resize操作的时候会造成线程不安全。下面将举两个可能出现线程不安全的地方。</p><p><strong>1、put的时候导致的多线程数据不一致。</strong></p><p>这个问题比较好想象，比如有两个线程A和B，首先A希望插入一个key-value对到HashMap中，首先计算记录所要落到的桶的索引坐标，然后获取到该桶里面的链表头结点，此时线程A的时间片用完了，而此时线程B被调度得以执行，和线程A一样执行，只不过线程B成功将记录插到了桶里面，假设线程A插入的记录计算出来的桶索引和线程B要插入的记录计算出来的桶索引是一样的，那么当线程B成功插入之后，线程A再次被调度运行时，它依然持有过期的链表头但是它对此一无所知，以至于它认为它应该这样做，如此一来就覆盖了线程B插入的记录，这样线程B插入的记录就凭空消失了，造成了数据不一致的行为。</p><p><strong>2、另外一个比较明显的线程不安全的问题是HashMap的get操作可能因为resize而引起死循环（cpu100%）</strong>，具体分析如下：</p><p><strong>死循环：</strong> 扩容时 <code>resize</code> 调用 <code>transfer</code> 使用头插法迁移元素，虽然 newTable 是局部变量，但原先 table 中的 Entry 链表是共享的，问题根源是 Entry 的 next 指针并发修改，某线程还没有将 table 设为 newTable 时用完了 CPU 时间片，导致数据丢失或死循环。</p><p>JDK8 在 <code>resize</code> 方法中完成扩容，并改用尾插法，不会产生死循环，但并发下仍可能丢失数据。可用 ConcurrentHashMap 或 <code>Collections.synchronizedMap</code> 包装成同步集合。</p><hr/><h3 id="与Hashtable比较"><a href="#与Hashtable比较" class="headerlink" title="与Hashtable比较"></a>与Hashtable比较</h3><ul><li>Hashtable 使用 synchronized 来进行同步。</li><li>HashMap 可以插入键为 null 的 Entry。</li><li>HashMap 的迭代器是 fail-fast 迭代器。</li><li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的</li></ul><hr/><h3 id="HashMap1-7和1-8的区别"><a href="#HashMap1-7和1-8的区别" class="headerlink" title="HashMap1.7和1.8的区别"></a>HashMap1.7和1.8的区别</h3><p><strong>java7是头插法</strong>，就是说新来的值会取代原有的值，原有的值就顺推到链表中去，就像上面的例子一样，因为写这个代码的作者认为后来的值被查找的可能性更大一点，提升查找的效率。</p><blockquote><p>扩容死循环</p></blockquote><img src="https://img-blog.csdnimg.cn/202103222120007.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>单线程扩容没有问题</p><p>多线程扩容：</p><ul><li>第二个线程阻塞，第一个线程进行扩容</li><li>第一个线程扩容结束，也会进行一样的再次扩容，进入死循环</li></ul><p>但是，<strong>在java8之后，都是所用尾部插入了</strong></p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p> <strong>底层数据结构：特殊的二叉查找树</strong></p><p>链表-》二叉树-》二叉查找树-》特殊的二叉查找树</p><p><strong>1、红黑树是一个二叉查找树</strong></p><p>2、性质：</p><ul><li>每个结点不是红色就是黑色</li><li><strong>不可能有连在一起的红色结点</strong></li><li><strong>根节点都是黑色root（入度为0）</strong></li><li>每个红色结点的两个子结点都是黑色，<strong>叶子节点都是黑色：出度为0满足了性质就可以近似的平衡了，不一定要红黑，可以为其他的</strong></li></ul><p>3、变换规则：</p><blockquote><p><strong>所有插入的点默认为红色</strong></p></blockquote><ul><li><p><strong>变色</strong>：红变黑，黑变红</p><ul><li>情况：<strong>当前节点的父亲是红色，且叔叔也是红色</strong></li><li>过程：<ul><li>把父亲设为黑色</li><li>把叔叔设为黑色</li><li>把爷爷设为红色</li><li>分析爷爷需不需要操作</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/20210420091053320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /></li><li><p><strong>左旋</strong>：</p><ul><li>情况：<strong>当前父亲为红色，叔叔为黑色，且当前结点是右子树，以父节点进行左旋（上图2-下图1）</strong></li></ul></li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/11/2/166d4e192cb58469?imageslim" alt="img"></p><img src="https://img-blog.csdnimg.cn/20210420091009845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li><strong>右旋</strong>：<ul><li>情况：<strong>当前父亲为红色，叔叔是黑色，且当前结点是左子树</strong><ul><li>把父亲变为黑色</li><li>把爷爷变为红色</li><li>以爷爷旋转</li></ul></li></ul></li></ul><img src="https://img-blog.csdnimg.cn/1887b697075e4978b4a117255f2f7a80.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><blockquote><p>1、扩容过程中，读访问能否访问到数据，如何实现？</p><p>2、扩容过程中，写访问如何处理？</p><p>3、假设指定桶位形成红黑树，目前红黑树正在自平衡，此时的读线程是被阻塞还是什么？</p><p>4、JDK8中，统计当前散列表中的元素个数如何实现？为什么不使用AtomicLong？</p><p>5、简单说一下LastRun机制？</p></blockquote><h2 id="jdk1-7"><a href="#jdk1-7" class="headerlink" title="jdk1.7"></a>jdk1.7</h2><p><strong>一个Segment数组和多个HashEntry组成</strong></p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy84MDMxMzcxLTM3NTMzMDU4NWEzZTE4NjkucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXAlN0NpbWFnZVZpZXcyLzIvdy8xMDAwL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt="img" style="zoom:50%;" /><p>Segment数组的意义就是将一个大的table分割成多个小的table来进行加锁，也就是锁分离技术，而每一个Segment元素存储的是HashEntry数组+链表，这个和HashMap的数据存储结构一样。</p><blockquote><p>ConcurrentHashMap 与HashMap和Hashtable 最大的不同在于：put和 get 两次Hash到达指定的HashEntry，第一次hash到达Segment,第二次到达Segment里面的Entry,然后在遍历entry链表.</p></blockquote><p><strong>Segment</strong> 是 ConcurrentHashMap 的一个内部类，主要的组成如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;    </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;    </span><br><span class="line">  <span class="comment">// 和 HashMap 中的 HashEntry 作用一样，真正存放数据的桶    </span></span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;    </span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">int</span> count;        </span><br><span class="line">  <span class="comment">// 记得快速失败（fail—fast）么？    </span></span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">int</span> modCount;        </span><br><span class="line">  <span class="comment">// 阈值</span></span><br><span class="line">  <span class="keyword">transient</span> <span class="keyword">int</span> threshold;        </span><br><span class="line">  <span class="comment">// 负载因子    </span></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HashEntry</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">  <span class="keyword">final</span> K key;</span><br><span class="line">  <span class="keyword">volatile</span> V value;</span><br><span class="line">  <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, <span class="comment">//默认容量16</span></span><br><span class="line">       DEFAULT_LOAD_FACTOR, <span class="comment">//默认负载因子0.75</span></span><br><span class="line">       DEFAULT_CONCURRENCY_LEVEL);<span class="comment">//默认支持线程并发数16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个指定初始容量的concurrentHashMap</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(initialCapacity, </span><br><span class="line">       DEFAULT_LOAD_FACTOR, </span><br><span class="line">       DEFAULT_CONCURRENCY_LEVEL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个指定初始容量和指定负载因子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(initialCapacity, </span><br><span class="line">       loadFactor, </span><br><span class="line">       DEFAULT_CONCURRENCY_LEVEL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化</strong></p><ul><li>Segment的大小：大于currentlevel的第一个2的次幂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,//初始容量：所有Hashentry数组的长度和</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">float</span> loadFactor, //加载因子</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;<span class="comment">//并发等级</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果负载因子小于0,初始容量小于0 段数小于0 抛异常</span></span><br><span class="line">  <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果segment段数大于最大阈值,那么就让其等于最大值</span></span><br><span class="line">  <span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)</span><br><span class="line">    concurrencyLevel = MAX_SEGMENTS;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//初始化1：Segment的大小：大于currentlevel的第一个2的次幂</span></span><br><span class="line">  <span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">    ++sshift;</span><br><span class="line">    ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</span><br><span class="line">  <span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">    initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//计算Hashentry的大小</span></span><br><span class="line">  <span class="keyword">int</span> c = initialCapacity / ssize;</span><br><span class="line">  <span class="keyword">if</span> (c * ssize &lt; initialCapacity)</span><br><span class="line">    ++c;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//cap为大于c的2的次幂</span></span><br><span class="line">  <span class="keyword">while</span> (cap &lt; c)</span><br><span class="line">    cap &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//保留一个segment信息</span></span><br><span class="line">  Segment&lt;K,V&gt; s0 =</span><br><span class="line">    <span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),</span><br><span class="line">                     (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);</span><br><span class="line">  </span><br><span class="line">  Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];</span><br><span class="line">  </span><br><span class="line">  UNSAFE.putOrderedObject(ss, SBASE, s0);</span><br><span class="line">  <span class="keyword">this</span>.segments = ss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put方法-2"><a href="#put方法-2" class="headerlink" title="put方法"></a>put方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">  Segment&lt;K,V&gt; s;</span><br><span class="line">  <span class="comment">//value不能为空</span></span><br><span class="line">  <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//第一次hash</span></span><br><span class="line">  <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">  <span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">  <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          </span><br><span class="line">       (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="keyword">null</span>)</span><br><span class="line">    s = ensureSegment(j);</span><br><span class="line">  <span class="comment">//执行segement的put方法</span></span><br><span class="line">  <span class="keyword">return</span> s.put(key, hash, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是通过key定位到要保存的具体的segment位置,然后执行segment的put方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line"><span class="comment">//尝试获取锁,如果获取失败说明有其他线程竞争,则调用scanAndLockForPut自旋获取锁.</span></span><br><span class="line">    HashEntry&lt;K,V&gt; node = tryLock() ? <span class="keyword">null</span> :</span><br><span class="line">        scanAndLockForPut(key, hash, value);</span><br><span class="line">    V oldValue;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="comment">//确定链表头的位置</span></span><br><span class="line">        <span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">        <span class="comment">//循环链表</span></span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果链表不是空的,且找到了相同的key,则覆盖value,返回旧的value值</span></span><br><span class="line">                K k;</span><br><span class="line">                <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                    oldValue = e.value;</span><br><span class="line">                    <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                        e.value = value;</span><br><span class="line">                        ++modCount;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                e = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果链表为空,则创建一个HashEntry并加入到segment中,同时会判断是否需要扩容</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (node != <span class="keyword">null</span>)</span><br><span class="line">                    node.setNext(first);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                <span class="keyword">int</span> c = count + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//如果数量超过阈值则需要扩容</span></span><br><span class="line">                <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                    rehash(node);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    setEntryAt(tab, index, node);</span><br><span class="line">                ++modCount;</span><br><span class="line">                count = c;</span><br><span class="line">                oldValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">        unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在put方法中,首先要加锁,如果获取锁失败就会通过自旋的方式阻塞保证能拿到锁.通过key的hash值来确定具体的链表头.</p><p>遍历该链表,如果不为空则判断传入的key和当前遍历的key是否相等,相等则覆盖value</p><p>如果链表为空则需要新建一个HashEntry并加入到Segment中,同时会先判断是否需要扩容.</p><p>最后会释放锁</p><h2 id="Jdk1-8"><a href="#Jdk1-8" class="headerlink" title="Jdk1.8"></a>Jdk1.8</h2><p>主要对 JDK7 做了三点改造：</p><p>① 取消分段锁机制，进一步降低冲突概率。</p><p>② 引入红黑树结构，同一个哈希槽上的元素个数超过一定阈值后，单向链表改为红黑树结构。</p><p>③ 使用了更加优化的方式统计集合内的元素数量。具体优化表现在：在 put、resize 和 size 方法中设计元素总数的更新和计算都避免了锁，使用 CAS 代替。</p><p>利用<strong>CAS + synchronized</strong>来保证并发更新的安全<br>底层：<strong>数组+链表+红黑树</strong>来实现</p><p><img src="https://img-blog.csdn.net/20180327170909484?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Byb2dyYW1tZXJfYXQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="成员变量-2"><a href="#成员变量-2" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化发生在第一次插入操作，默认大小为16的数组，用来存储Node节点数据，扩容时大小总是2的幂次方</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩容时新生成的数组，其大小为原数组的两倍</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认为0，用来控制table的初始化和扩容操作</span></span><br><span class="line"><span class="comment">//-1表示正在初始化</span></span><br><span class="line"><span class="comment">//-n表示有n-1个线程正在进行扩容操作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node：保存key，value及key的hash值的数据结构。 </span></span><br><span class="line"><span class="comment">// 其中value和next都用volatile修饰，保证并发的可见性。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">  <span class="keyword">final</span> K key;</span><br><span class="line">  <span class="keyword">volatile</span> V val;</span><br><span class="line">  <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line">  <span class="comment">//... 省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ForwardingNode：一个特殊的Node节点，hash值为-1，其中存储nextTable的引用。 </span></span><br><span class="line"><span class="comment">// 只有table发生扩容的时候，ForwardingNode才会发挥作用，作为一个占位符放在table中表示当前节点为null或则已经被移动。</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">  ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">    <span class="keyword">super</span>(MOVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.nextTable = tab;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><p>1、无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认容量16</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、带参数构造(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               <span class="comment">//大于1.5x+1的2的次幂</span></span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、带参数构造(2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">    putAll(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、带参数构造(3)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、带参数构造(4)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">float</span> loadFactor, </span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">        initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">    <span class="keyword">long</span> size = (<span class="keyword">long</span>)(<span class="number">1.0</span> + (<span class="keyword">long</span>)initialCapacity / loadFactor);</span><br><span class="line">    <span class="keyword">int</span> cap = (size &gt;= (<span class="keyword">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">        MAXIMUM_CAPACITY : tableSizeFor((<span class="keyword">int</span>)size);</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">  Node&lt;K,V&gt;[] tab; </span><br><span class="line">  <span class="keyword">int</span> sc;</span><br><span class="line">  <span class="comment">//如果为空</span></span><br><span class="line">  <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果sizeCtl小于0，等于-1，表示有其他线程正在初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="comment">//该线程停止，让出cpu时间片</span></span><br><span class="line">      Thread.yield();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//CAS成功，修改sc的值为-1，进行初始化</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">//如果 sizeCtl&gt;0 初始化大小为sizeCtl，否则初始化大小为16</span></span><br><span class="line">          <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">          <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">          Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">          table = tab = nt;</span><br><span class="line">          <span class="comment">//sc赋值，如果n为16,则sc = 16-16/4 = 12，</span></span><br><span class="line">          sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//赋值给sizeCtl，初始化结束，sizeCtl的值&gt;0</span></span><br><span class="line">        sizeCtl = sc;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put方法-3"><a href="#put方法-3" class="headerlink" title="put方法"></a>put方法</h3><p>假设table已经初始化完成，put操作采用<strong>CAS+synchronized</strong>实现并发插入或更新操作： </p><ul><li>当前bucket为空时，<strong>使用CAS操作</strong>，将Node放入对应的bucket中。 </li><li><strong>出现hash冲突，则采用synchronized关键字</strong>。倘若当前hash对应的节点是链表的头节点，遍历链表，若找到对应的node节点，则修改node节点的val，否则在链表末尾添加node节点；倘若当前节点是红黑树的根节点，在树结构上遍历元素，更新或增加节点。 </li><li><strong>倘若当前map正在扩容f.hash &#x3D;&#x3D; MOVED</strong>， 则跟其他线程一起进行扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//不可以为null</span></span><br><span class="line">  <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">  <span class="comment">//获取hash值，这个值一定是正数，方便判断该节点的类型</span></span><br><span class="line">  <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">  <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//变量table</span></span><br><span class="line">  <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">    Node&lt;K,V&gt; f; </span><br><span class="line">    <span class="keyword">int</span> n, i, fh;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果table是空的，进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">      tab = initTable();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果当前位置为null，进行CAS操作插入元素</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                   <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">        <span class="keyword">break</span>;                   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否需要扩容，MOVED=-1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">      tab = helpTransfer(tab, f);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//解决hash冲突</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      V oldVal = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">          <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            binCount = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">              K ek;</span><br><span class="line">              <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                  ((ek = e.key) == key ||</span><br><span class="line">                   (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                oldVal = e.val;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                  e.val = value;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              Node&lt;K,V&gt; pred = e;</span><br><span class="line">              <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                          value, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            binCount = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                  value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">              oldVal = p.val;</span><br><span class="line">              <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                p.val = value;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">          treeifyBin(tab, i);</span><br><span class="line">        <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> oldVal;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20191031173139379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpb25neW9uZ3F1YW4=,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 67%;" /><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><p><strong>1、加载因子不可变</strong></p><p><strong>2、为什么hash值大于等于0</strong></p><p>forwadingload的hash是-1</p><p>代理节点treebin的hash是-2</p><p><strong>3、sizeCtl</strong></p><ul><li>-1：表示当前散列表正在初始化，确保在并发条件下只会被创建一次</li><li>大于0：表示下次触发扩容的阈值</li><li>是-n：表示当前散列表正在进行扩容</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2022/01/25/%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/01/25/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable接口</h2><p>案例：</p><p>1、定义一个学生类stu，具有年龄age和姓名name，通过Comparable接口提供比较规则</p><p>2、定义测试类，在测试类定义测试方法完成测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        stu s1 = <span class="keyword">new</span> stu(<span class="number">1</span>,<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">        stu s2 = <span class="keyword">new</span> stu(<span class="number">2</span>,<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Comparable compare = Compare(s1, s2);</span><br><span class="line">        System.out.println(compare.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title">Compare</span><span class="params">(Comparable c1,Comparable c2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = c1.compareTo(c2);</span><br><span class="line">        <span class="comment">// result&lt;0,c1比c2小</span></span><br><span class="line">        <span class="comment">// result&gt;0,c1比c2大</span></span><br><span class="line">        <span class="comment">// result=0,c1和c2一样大</span></span><br><span class="line">        <span class="keyword">if</span>(result&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> c1;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> c2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stu</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">stu</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String  name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">stu</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(stu o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age-o.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;stu&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>需求：排序前：{4,5,6,3,2,1}</p><p>原理：</p><p>1、比较相邻的元素，如果前一个元素比后一个元素大，就交换位置</p><p>2、对每一对相邻的元素做一样的工作</p><img src="https://img-blog.csdnimg.cn/2021040420354895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a[j];</span><br><span class="line">    <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">      a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">      a[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>最坏情况，初始顺序为{6,5,4,3,2,1}，那么：</p><ul><li>需要比较的次数为：(n-1)+(n-2)+…..+1&#x3D;[n*(n-1)]&#x2F;2</li><li>元素交换的次数为：(n-1)+(n-2)+…..+1&#x3D;[n*(n-1)]&#x2F;2</li><li>总执行次数：相加&#x3D;n^2-n</li></ul><p>因此，时间复杂度为<code>O(n^2)</code>，最好<code>O(n)</code>，最坏<code>O(n^2)</code></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>需求：排序前{4,6,8,7,9,2,10,1}</p><p><strong>原理：</strong></p><ul><li>在每次遍历过程中，都假定第一个索引处的位置最小，和其他索引相比较，如果比它小就假定为最小值，最后可以找到最小值所在的索引</li><li>交换第一个索引处和最小值所在索引处的值</li></ul><img src="https://img-blog.csdnimg.cn/20210404205438996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">  <span class="comment">//遍历所有的数</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> minIndex = i;</span><br><span class="line">    <span class="comment">//和后面的数字进行比较，找出最小值的索引</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(a[j]&lt;a[minIndex])&#123;</span><br><span class="line">        minIndex=j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果最终的结果和这个i不一致，就交换元素</span></span><br><span class="line">    <span class="keyword">if</span>(minIndex!=i)&#123;</span><br><span class="line">      <span class="keyword">int</span> temp = a[i];</span><br><span class="line">      a[i] = a[minIndex];</span><br><span class="line">      a[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度分析-1"><a href="#时间复杂度分析-1" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><ul><li><p>比较的次数：(n-1)+(n-2)+…..+1&#x3D;[n*(n-1)]&#x2F;2</p></li><li><p>交换的次数：n-1</p></li></ul><p>时间复杂度 &#x3D; [n*(n-1)]&#x2F;2 +（n-1）&#x3D;n^2&#x2F;2+n&#x2F;2-1;</p><p>时间复杂度<code>O(n^2)</code></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序的工作方式类似于排序扑克牌，找到正确的位置放</p><p><strong>原理：</strong></p><ul><li>将元素分为两组：已经排序、未排序</li><li>找到未排序的第一个元素，向已排序的组中插入</li><li>倒叙遍历已经排序的元素，依次和待插入的元素进行比较，直到找到一个元素小于等于待插入元素，那么就把待插入元素放到这个位置，其他元素向后移动一位</li></ul><img src="https://img-blog.csdnimg.cn/20210404211008935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">  <span class="comment">//遍历数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    <span class="comment">//如果当前元素比前一个元素小</span></span><br><span class="line">    <span class="keyword">if</span>(a[i]&lt;a[i-<span class="number">1</span>])&#123;</span><br><span class="line">      <span class="comment">//保存当前元素</span></span><br><span class="line">      <span class="keyword">int</span> temp = a[i];</span><br><span class="line">      <span class="keyword">int</span> j;</span><br><span class="line">      <span class="comment">//遍历当前数字前面的所有数字</span></span><br><span class="line">      <span class="keyword">for</span>(j=i-<span class="number">1</span> ; j&gt;=<span class="number">0</span> &amp;&amp; temp&lt;a[j] ; j--)&#123;</span><br><span class="line">        <span class="comment">//把前一个数字赋给后一个数字</span></span><br><span class="line">        a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//把临时变量赋值给不满足条件的第一个元素</span></span><br><span class="line">      a[j+<span class="number">1</span>]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>比较次数：(n-1)+(n-2)+…..+1&#x3D;[n*(n-1)]&#x2F;2</p><p>交换次数：(n-1)+(n-2)+…..+1&#x3D;[n*(n-1)]&#x2F;2</p><p>总执行次数：相加&#x3D;n^2-n</p><p>因此，时间复杂度为<code>O(n^2)</code>，最好<code>O(n)</code>，最坏<code>O(n^2)</code></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><strong>改进插入排序</strong></p><p><strong>原理：</strong></p><ul><li>选定一个增长量h，按照增长量h作为数据分组的依据，对数据进行分组</li><li>对分好组的每一组数据完成插入排序</li><li>减小增长量，最小减为1，重复第二步操作</li></ul><img src="https://img-blog.csdnimg.cn/20210404213942975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> h=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(h&lt;数组长度/<span class="number">2</span>)&#123;</span><br><span class="line">  h=2h+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环结束后就可以确定h的最大值</span></span><br><span class="line">减小规则：h/<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h&lt;a.length/<span class="number">2</span>)&#123;</span><br><span class="line">        h=h*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当增长量小于1，排序结束</span></span><br><span class="line">    <span class="keyword">while</span>(h&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        <span class="comment">//1、找到待插入的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h;i&lt;a.length;i++)&#123;</span><br><span class="line">            <span class="comment">//2、把待插入的元素插入到有序数列中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&gt;=h;j-=h)&#123;</span><br><span class="line">                <span class="comment">//待插入的元素是a[j],比较a[j]和a[j-h]</span></span><br><span class="line">                <span class="keyword">if</span>(a[j]&lt;a[j-h])&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = a[j-h];</span><br><span class="line">                    a[j-h]=a[j];</span><br><span class="line">                    a[j]=temp;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//减少h的值</span></span><br><span class="line">        h = h/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><strong>原理</strong></p><p>1、尽可能的一组数据拆分成两个元素相等的子组，并对每一个子组继续拆分，直到拆分后的每个子组的元素个数是1为止</p><p>2、将相邻的两个子组进行合并成一个有序的大组</p><p>3、不断重复2</p><img src="https://img-blog.csdnimg.cn/20210404215747209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><img src="https://bucket-1257126549.cos.ap-guangzhou.myqcloud.com/20181120110141.gif" alt="img" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">  sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> aa:a)&#123;</span><br><span class="line">    System.out.print(aa);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(high&lt;=low)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> middle = (high+low)/<span class="number">2</span>;</span><br><span class="line">  sort(a,low,middle);</span><br><span class="line">  sort(a,middle+<span class="number">1</span>,high);</span><br><span class="line">  merge(a,low,middle,high);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> middle,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="comment">//临时数组</span></span><br><span class="line">  <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high-low+<span class="number">1</span>];</span><br><span class="line">  <span class="comment">//第一个数组的下标</span></span><br><span class="line">  <span class="keyword">int</span> i= low;</span><br><span class="line">  <span class="comment">//第二个数组的下标</span></span><br><span class="line">  <span class="keyword">int</span> j = middle+<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//临时数组的下标</span></span><br><span class="line">  <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//遍历两个数组，取出小的数字放入临时数组</span></span><br><span class="line">  <span class="keyword">while</span> (i&lt;=middle&amp;&amp;j&lt;=high)&#123;</span><br><span class="line">    <span class="comment">//第一个数组的数据更小</span></span><br><span class="line">    <span class="keyword">if</span>(a[i]&lt;=a[j])&#123;</span><br><span class="line">      <span class="comment">//把小的元素放入临时数组</span></span><br><span class="line">      temp[index] = a[i];</span><br><span class="line">      i++;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      temp[index]=a[j];</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//处理多余数据</span></span><br><span class="line">  <span class="keyword">while</span> (i&lt;=middle)&#123;</span><br><span class="line">    temp[index]=a[i];</span><br><span class="line">    i++;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (j&lt;=high)&#123;</span><br><span class="line">    temp[index]=a[j];</span><br><span class="line">    j++;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//把临时数组存入数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;temp.length;k++)&#123;</span><br><span class="line">    a[k+low]=temp[k];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><strong>原理：</strong></p><p>1、设定一个界值，通过该界值分为两部分</p><p>2、将大于或等于分界值的数据放到右边，小于分界值的数据放到左边</p><p>3、左边和右边的数据独立排序，对于左侧又可以取一个分界值分为两部分，右边一样</p><p>4、重复上述过程，这是一个递归定义。</p><img src="https://img-blog.csdnimg.cn/20210404223941483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(start&gt;=end) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> temp = a[start];</span><br><span class="line">  <span class="keyword">int</span> low = start;</span><br><span class="line">  <span class="keyword">int</span> high = end;</span><br><span class="line">  <span class="keyword">while</span> (low&lt;high)&#123;</span><br><span class="line">    <span class="keyword">while</span> (low&lt;high &amp;&amp; temp &lt;=a[high])&#123;</span><br><span class="line">      high--;</span><br><span class="line">    &#125;</span><br><span class="line">    a[low] = a[high];</span><br><span class="line">    <span class="keyword">while</span> (low&lt;high &amp;&amp; temp &gt;=a[low])&#123;</span><br><span class="line">      low++;</span><br><span class="line">    &#125;</span><br><span class="line">    a[high]=a[low];</span><br><span class="line">  &#125;</span><br><span class="line">  a[low]=temp;</span><br><span class="line">  quick(a,start,low);</span><br><span class="line">  quick(a,low+<span class="number">1</span>,end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/26/1674dc7f6295471c~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><img src="https://img-blog.csdnimg.cn/5991e3e116a840fc894ccf99b8b30231.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:40%;" />]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2022/01/25/%E7%AE%97%E6%B3%95/"/>
      <url>/2022/01/25/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层次遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">level</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">  Queue&lt;Node&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">  res.add(node);</span><br><span class="line">  <span class="keyword">while</span> (!res.isEmpty())&#123;</span><br><span class="line">    Node root = res.poll();</span><br><span class="line">    System.out.print(root.val+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      res.add(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      res.add(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BST-二叉搜索树"><a href="#BST-二叉搜索树" class="headerlink" title="BST 二叉搜索树"></a>BST 二叉搜索树</h3><p><strong>特性：</strong></p><p>1、对于 BST 的每一个节点<code>node</code>，左子树节点的值都比<code>node</code>的值要小，右子树节点的值都比<code>node</code>的值大。</p><p>2、对于 BST 的每一个节点<code>node</code>，它的左侧子树和右侧子树都是 BST。</p><p>3、<strong>BST的中序遍历是有序的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    traverse(root.left);</span><br><span class="line">    <span class="comment">// 中序遍历代码位置</span></span><br><span class="line">    print(root.val);</span><br><span class="line">    traverse(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><p><strong>题目：BST转化累加树</strong></p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdHhbIiaKVgQmmRicyibctQHKeFgNC21oJ9oC6xicLmWw9giaoVfWOWwP1RtdxYCDAdSCza7Rc2IF09TXSQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:47%;" /><p><strong>思路：</strong>二叉搜索树中序遍历是从小到大，反过来就是从大到小，那么只需要维护一个sum，在遍历到节点的时候重新赋值即可</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">convertBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    traverse(root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录累加和</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    traverse(root.right);</span><br><span class="line">    <span class="comment">// 维护累加和</span></span><br><span class="line">    sum += root.val;</span><br><span class="line">    <span class="comment">// 将 BST 转化成累加树</span></span><br><span class="line">    root.val = sum;</span><br><span class="line">    traverse(root.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>回溯算法解决的问题：</p><ul><li>组合</li><li>切割</li><li>子集</li><li>排列</li><li>棋盘</li></ul><p>模版：</p><p><strong>for循环+递归</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(参数)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(终止条件)&#123;</span><br><span class="line">    收集结果;<span class="comment">//叶子节点</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(集合的元素集)&#123;</span><br><span class="line">    处理节点;</span><br><span class="line">    递归函数;</span><br><span class="line">    回溯操作;<span class="comment">//撤销处理节点的情况</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="题目一：组合"><a href="#题目一：组合" class="headerlink" title="题目一：组合"></a>题目一：组合</h3><p><a href="https://leetcode-cn.com/problems/combinations/">https://leetcode-cn.com/problems/combinations/</a></p><blockquote><p>题目：给定两个整数 <em>n</em> 和 <em>k</em>，返回 1 … <em>n</em> 中所有可能的 <em>k</em> 个数的组合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: n = <span class="number">4</span>, k = <span class="number">2</span></span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">2</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">4</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></blockquote><p><strong>代码：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210408111614128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">  LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    backtracking(n,k,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(track.size()==k)&#123;</span><br><span class="line">      res.add(<span class="keyword">new</span> LinkedList&lt;&gt;(track));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=n;i++)&#123;</span><br><span class="line">      track.add(i);</span><br><span class="line">      backtracking(n,k,i+<span class="number">1</span>);</span><br><span class="line">      track.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目二：组合总和"><a href="#题目二：组合总和" class="headerlink" title="题目二：组合总和"></a>题目二：组合总和</h3><p>题目：给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</p><p>candidates 中的数字可以无限制重复被选取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>], target = <span class="number">7</span>,</span><br><span class="line">所求解集为：</span><br><span class="line">[</span><br><span class="line">  [<span class="number">7</span>],</span><br><span class="line">  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">  LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    backtracking(candidates,target,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> target,<span class="keyword">int</span> start,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">      res.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;(track));</span><br><span class="line">      <span class="keyword">return</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">      <span class="keyword">int</span> temp=sum+nums[i];</span><br><span class="line">      <span class="keyword">if</span>(temp&gt;target)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      sum = sum+nums[i];</span><br><span class="line">      track.add(nums[i]);</span><br><span class="line">      backtracking(nums,target,i,sum);</span><br><span class="line">      sum = sum-nums[i];</span><br><span class="line">      track.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目三：分割回文串"><a href="#题目三：分割回文串" class="headerlink" title="题目三：分割回文串"></a><a href="https://leetcode-cn.com/problems/palindrome-partitioning/">题目三：分割回文串</a></h3><p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;aab&quot;</span></span><br><span class="line">输出：[[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>],[<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;b&quot;</span>]]</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">  LinkedList&lt;String&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">    String[] r = <span class="keyword">new</span> String[s.length()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">      r[i]=String.valueOf(s.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    backtracking(r,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(String[] in,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start==in.length)&#123;</span><br><span class="line">      res.add(<span class="keyword">new</span> LinkedList&lt;String&gt;(track));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;in.length;i++)&#123;</span><br><span class="line">      StringBuilder temp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=start;j&lt;=i;j++)&#123;</span><br><span class="line">        temp.append(in[j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(isVaild(temp.toString())==<span class="keyword">false</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      track.add(temp.toString());</span><br><span class="line">      backtracking(in,i+<span class="number">1</span>);</span><br><span class="line">      track.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isVaild</span><span class="params">(String a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.length()==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder b = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">      b.append(a.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.equals(b.toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树深度遍历"><a href="#二叉树深度遍历" class="headerlink" title="二叉树深度遍历"></a>二叉树深度遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;(); </span><br><span class="line">  LinkedList track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    backtracking(root,target);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(TreeNode root,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    track.add(root.val);</span><br><span class="line">    target-=root.val;</span><br><span class="line">    <span class="keyword">if</span>((target==<span class="number">0</span>)&amp;&amp; (root.left == <span class="keyword">null</span>)&amp;&amp;(root.right==<span class="keyword">null</span>))&#123;</span><br><span class="line">      res.add(<span class="keyword">new</span> LinkedList&lt;&gt;(track));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      backtracking(root.left,target);</span><br><span class="line">      backtracking(root.right,target);</span><br><span class="line">    &#125;</span><br><span class="line">    track.removeLast();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    test(nums,track);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>[] nums,LinkedList&lt;Integer&gt; track)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(track.size()==nums.length)&#123;</span><br><span class="line">      res.add(<span class="keyword">new</span> LinkedList(track));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">      <span class="comment">//排除不合法</span></span><br><span class="line">      <span class="keyword">if</span>(track.contains(nums[i]))&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      track.add(nums[i]);</span><br><span class="line">      test(nums,track);</span><br><span class="line">      track.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="n皇后"><a href="#n皇后" class="headerlink" title="n皇后"></a>n皇后</h3><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>求最优解</p><p>动态规划的的四个解题步骤是：</p><ul><li>定义子问题</li><li>写出子问题的递推关系</li><li>确定 DP 数组的计算顺序</li><li>空间优化（可选）</li></ul><h3 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums.length == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> dp[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][nums.length];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">1</span>][i-<span class="number">1</span>]+nums[i];</span><br><span class="line">            dp[<span class="number">1</span>][i] = Math.max(dp[<span class="number">0</span>][i-<span class="number">1</span>],dp[<span class="number">1</span>][i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[<span class="number">0</span>][nums.length-<span class="number">1</span>],dp[<span class="number">1</span>][nums.length-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵总路径"><a href="#矩阵总路径" class="headerlink" title="矩阵总路径"></a>矩阵总路径</h3><p><a href="https://leetcode-cn.com/problems/unique-paths/submissions/">https://leetcode-cn.com/problems/unique-paths/submissions/</a></p><p><a href="https://www.bilibili.com/video/BV1wf4y1U787">https://www.bilibili.com/video/BV1wf4y1U787</a></p><img src="https://img-blog.csdnimg.cn/20210408225111577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//状态容器</span></span><br><span class="line">        <span class="keyword">int</span>[][] r = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="comment">//初始化状态</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            r[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            r[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//状态转移</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                r[i][j]= r[i][j-<span class="number">1</span>] + r[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有障碍矩阵总路径"><a href="#有障碍矩阵总路径" class="headerlink" title="有障碍矩阵总路径"></a>有障碍矩阵总路径</h3><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png" alt="img"></p><p>网格中的障碍物和空位置分别用 1 和 0 来表示。</p><p> <img src="https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]</span><br><span class="line">输出：2</span><br><span class="line">解释：</span><br><span class="line">3x3 网格的正中间有一个障碍物。</span><br><span class="line">从左上角到右下角一共有 2 条不同的路径：</span><br><span class="line">1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line">2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义容器</span></span><br><span class="line">    <span class="keyword">int</span> m = obstacleGrid.length;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span>[][] r = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(obstacleGrid[i][<span class="number">0</span>]==<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">      r[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(obstacleGrid[<span class="number">0</span>][i]==<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">      r[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态转移</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obstacleGrid[i][j]==<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line">        r[i][j]=r[i-<span class="number">1</span>][j]+r[i][j-<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和</h3><p>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>说明：每次只能向下或者向右移动一步。</p><p>示例 1：</p><p><img src="https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//状态容器</span></span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] r= <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        r[<span class="number">0</span>][<span class="number">0</span>]=grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            r[i][<span class="number">0</span>]= r[i-<span class="number">1</span>][<span class="number">0</span>]+grid[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            r[<span class="number">0</span>][i]= r[<span class="number">0</span>][i-<span class="number">1</span>]+grid[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//状态转移</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                r[i][j]=Math.min(r[i-<span class="number">1</span>][j],r[i][j-<span class="number">1</span>])+grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h3><p>在 A[i] - A[i-1] &#x3D;&#x3D; A[i-1] - A[i-2] 时，dp[i] &#x3D; dp[i-1] + 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[i]==<span class="number">2</span>*nums[i-<span class="number">1</span>]-nums[i-<span class="number">2</span>])&#123;</span><br><span class="line">        dp[i]=dp[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c:dp)&#123;</span><br><span class="line">      System.out.println(c);</span><br><span class="line">      sum+=c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整数拆分"><a href="#整数拆分" class="headerlink" title="整数拆分"></a>整数拆分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">3</span>)&#123;<span class="keyword">return</span> <span class="number">2</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">      dp[i]=i;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">        dp[i]=Math.max(dp[i],j*dp[i-j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整数拆分平方"><a href="#整数拆分平方" class="headerlink" title="整数拆分平方"></a>整数拆分平方</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[i]=i;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; i-j*j &gt;= <span class="number">0</span> ; j++)&#123;</span><br><span class="line">                dp[i] = Math.min(dp[i], dp[i-j*j]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(dp));</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//以nums[n]结尾的最长</span></span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[j])&#123;</span><br><span class="line">                    max = Math.max(max,dp[j]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i]=max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ret = Math.max(ret, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长数对链"><a href="#最长数对链" class="headerlink" title="最长数对链"></a>最长数对链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLongestChain</span><span class="params">(<span class="keyword">int</span>[][] pairs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = pairs.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(dp,<span class="number">1</span>);</span><br><span class="line">        Arrays.sort(pairs, (a, b) -&gt; (a[<span class="number">0</span>] - b[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pairs[j][<span class="number">1</span>]&lt;pairs[i][<span class="number">0</span>])&#123;</span><br><span class="line">                    max=Math.max(max,dp[j]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i]=max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ret = Math.max(ret, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><h2 id="每k个一组反转链表"><a href="#每k个一组反转链表" class="headerlink" title="每k个一组反转链表"></a>每k个一组反转链表</h2><img src="https://uploadfiles.nowcoder.com/images/20200929/249586134_1601375359555_EE54FEDE4D1EA710514C806FC06BEB38" alt="图片说明" style="zoom:30%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span> <span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>||k==<span class="number">1</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        res.next = head;</span><br><span class="line">        <span class="keyword">int</span> length=<span class="number">0</span>;</span><br><span class="line">        ListNode pre = res ,cur=head,temp=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length/k;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++)&#123;</span><br><span class="line">                temp = cur.next;</span><br><span class="line">                cur.next = temp.next;</span><br><span class="line">                temp.next = pre.next;</span><br><span class="line">                pre.next = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            pre=cur;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="剑指Offer"><a href="#剑指Offer" class="headerlink" title="剑指Offer"></a>剑指Offer</h2><h3 id="12-矩阵路径（DFS、剪枝）"><a href="#12-矩阵路径（DFS、剪枝）" class="headerlink" title="12 矩阵路径（DFS、剪枝）"></a>12 矩阵路径（DFS、剪枝）</h3><p><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/submissions/">https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/submissions/</a></p><p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>例如，在下面的 3×4 的矩阵中包含单词 “ABCCED”（单词中的字母已标出）。</p><p><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board, words, i, j, <span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">char</span>[] word, <span class="keyword">int</span> i, <span class="keyword">int</span> j,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= board.length || i &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || j &lt; <span class="number">0</span> || board[i][j] != word[k])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == word.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> temp = board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> res =</span><br><span class="line">                dfs(board, word, i + <span class="number">1</span>, j, k + <span class="number">1</span>) ||</span><br><span class="line">                dfs(board, word, i - <span class="number">1</span>, j, k + <span class="number">1</span>) ||</span><br><span class="line">                dfs(board, word, i, j + <span class="number">1</span>, k + <span class="number">1</span>) ||</span><br><span class="line">                dfs(board, word, i , j - <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">        board[i][j] = temp;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-机器人运动范围"><a href="#13-机器人运动范围" class="headerlink" title="13 机器人运动范围"></a>13 机器人运动范围</h3><p><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/">https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/</a></p><p>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入<strong>行坐标和列坐标的数位之和大于k的格子</strong>。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7&#x3D;18。但它不能进入方格 [35, 38]，因为3+5+3+8&#x3D;19。请问该机器人能够到达多少个格子？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[][] board = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                board[i][j]=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="number">0</span>,m,n,k,board);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sums</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>) &#123;</span><br><span class="line">            s += x % <span class="number">10</span>;</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k,<span class="keyword">boolean</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sums(i)+sums(j)&gt;k || i &lt; <span class="number">0</span> || i &gt; m - <span class="number">1</span> || j &lt; <span class="number">0</span> || j &gt; n - <span class="number">1</span> || board[i][j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        board[i][j]=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + dfs(i+<span class="number">1</span>,j,m,n,k,board) + dfs(i,j+<span class="number">1</span>,m,n,k,board);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/01/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/01/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="面试题汇总"><a href="#面试题汇总" class="headerlink" title="面试题汇总"></a>面试题汇总</h1><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p><strong>1、请详细介绍TCP的三次握手协议，为什么要三次握手？</strong></p><p>核心点：为什么需要握手？为什么是三次？</p><ul><li>TCP重要特性：可靠性</li><li>需要同步序号、mss、是否使用sack、滑动窗口系数</li><li>建立连接不允许出现半打开状态</li></ul><hr/><p><strong>2、CLOSE_WAIT状态的产生原因</strong></p><p>CLOSE_WAIT 状态在服务器停留时间很短，如果你发现大量的 CLOSE_WAIT 状态，那么就意味着被动关闭的一方没有及时发出 FIN 包，一般有如下几种可能：</p><ul><li>程序问题：如果代码层面忘记了 close 相应的 socket 连接，那么自然不会发出 FIN 包，从而导致 CLOSE_WAIT 累积；或者代码不严谨，出现死循环之类的问题，导致即便后面写了 close 也永远执行不到。</li><li>响应太慢或者超时设置过小：如果连接双方不和谐，一方不耐烦直接 timeout，另一方却还在忙于耗时逻辑，就会导致 close 被延后。响应太慢是首要问题，不过换个角度看，也可能是 timeout 设置过小。</li><li>BACKLOG 太大：此处的 backlog 不是 syn backlog，而是 accept 的 backlog，如果 backlog 太大的话，设想突然遭遇大访问量的话，即便响应速度不慢，也可能出现来不及消费的情况，导致多余的请求还在队列里就被对方关闭了。</li></ul><hr/><p><strong>3、服务器的最大并发连接数是多少？</strong></p><p>由TCP四元组决定，包括源IP地址、目标IP地址、源端口、目标端口</p><hr/><p><strong>4、TCP和UDP协议应该如何选择？</strong></p><p>UDP：</p><ul><li>一对多通讯</li><li>效率高</li><li>简单</li><li>实时性好</li></ul><p>TCP：</p><ul><li>字符流协议，可以传任意长度的消息</li><li>可靠</li><li>流量控制、拥塞控制</li></ul><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p><strong>1、HTTP协议中缓存的处理流程？</strong></p><hr/><p><strong>2、URL之后发生了什么？</strong></p><ul><li>DNS解析</li><li>TCP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ul><hr/><p><strong>3、使用HTTP长连接的优点？</strong></p><ul><li>减少了握手次数</li><li>减少慢启动的影响</li></ul><p><strong>如何区别HTTP的长连接和短连接？</strong></p><p>在HTTP&#x2F;1.0中，默认使用的是短连接</p><p>从 HTTP&#x2F;1.1起，默认使用长连接，Connection:keep-alive</p><p><strong>使用HTTP长连接的缺点？</strong></p><ul><li>TCP协议是字符流协议，顺序不能乱</li><li>会出现对头阻塞</li></ul><hr/><p><strong>4、HTTP1.0&#x2F;1.1&#x2F;2.0的区别</strong></p><p>HTTP&#x2F;1.1相较于 HTTP&#x2F;1.0 协议的区别主要体现在：</p><ol><li><strong>长连接</strong> : <strong>在HTTP&#x2F;1.0中，默认使用的是短连接</strong>，也就是说每次请求都要重新建立一次连接。HTTP 是基于TCP&#x2F;IP协议的,每一次建立或者断开连接都需要三次握手四次挥手的开销，如果每次请求都要这样的话，开销会比较大。因此最好能维持一个长连接，可以用个长连接来发多个请求。<strong>HTTP 1.1起，默认使用长连接</strong> ,默认开启Connection： keep-alive。 <strong>HTTP&#x2F;1.1的持续连接有非流水线方式和流水线方式</strong> 。流水线方式是客户在收到HTTP的响应报文之前就能接着发送新的请求报文。与之相对应的非流水线方式是客户在收到前一个响应后才能发送下一个请求。</li><li><strong>错误状态响应码</strong> :在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</li><li><strong>缓存处理</strong> :在HTTP1.0中主要使用header里的If-Modified-Since，Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</li><li><strong>带宽优化及网络连接的使用</strong> :HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li></ol><hr/><p><strong>5、HTTP和HTTPS</strong></p><ol><li><strong>端口</strong> ：HTTP的URL由“http:&#x2F;&#x2F;”起始且默认使用端口80，而HTTPS的URL由“https:&#x2F;&#x2F;”起始且默认使用端口443。</li><li>安全性和资源消耗：HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL&#x2F;TLS之上的HTTP协议，SSL&#x2F;TLS 运行在TCP之上。所有传输的内容都经过加密，加密采用<strong>对称加密</strong>，但对称加密的密钥用服务器方的证书进行了<strong>非对称加密</strong>。所以说，HTTP 安全性没有 HTTPS高，但是 HTTPS 比HTTP耗费更多服务器资源。<ul><li>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</li><li>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</li></ul></li></ol><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="互联网（internet）"><a href="#互联网（internet）" class="headerlink" title="互联网（internet）"></a>互联网（internet）</h2><img src="https://img-blog.csdnimg.cn/20210323195923994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>思考：数据是如何从一个设备传递到另外一个设备的？</p><p>1、互联网、移动互联网、物联网都离不开网络协议</p><p>2、最熟悉的网络协议：HTTP</p><p>3、为了满足各种需求，有各式各样的网络协议（HTTPS、SMTP、MQIT等）</p><h2 id="客户端-服务器"><a href="#客户端-服务器" class="headerlink" title="客户端-服务器"></a>客户端-服务器</h2><p><strong>1、C&#x2F;C++跨平台原理</strong></p><img src="https://img-blog.csdnimg.cn/20210323201247198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 40%;" /><p><strong>2、Java跨平台原理</strong></p><img src="https://img-blog.csdnimg.cn/20210323201954513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 40%;" /><p><strong>3、客户端vs服务器</strong></p><img src="https://img-blog.csdnimg.cn/20210323203025288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><h2 id="OSI网络互联模型"><a href="#OSI网络互联模型" class="headerlink" title="OSI网络互联模型"></a>OSI网络互联模型</h2><p><strong>国际标准化组织ISO在1985年制定了网络互联模型</strong></p><p><strong>OSI参考模型</strong>（open system interconnect reference model），<strong>7层结构</strong></p><img src="https://img-blog.csdnimg.cn/2021032320392150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>注意：OSI参考模型是理论模型，实战模型使用TCP&#x2F;IP协议模型，学习研究使用第三种模型</strong></p><h2 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h2><img src="https://img-blog.csdnimg.cn/20210323204230768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 67%;" /><p><strong>经过每一层的包装从客户端的应用层到物理层，传输到服务器的物理层后再一层层的解析</strong></p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>ARP（Address Resolution Protocol）即地址解析协议， 用于实现从 IP 地址到 MAC 地址的映射，即询问目标IP对应的MAC地址。</p><p>例：A向B发送数据</p><p>根据ARP表差查询MAC地址，如果查不到就使用广播地址，所有节点都可以收到，再根据IP地址获得B的MAC地址，再返回A</p><h2 id="计算机之间的连接方式"><a href="#计算机之间的连接方式" class="headerlink" title="计算机之间的连接方式"></a>计算机之间的连接方式</h2><p>1、需要得知对方的IP地址</p><p>2、最终根据MAC地址（网卡地址），输送数据到网卡，被网卡接收</p><p>3、如果网卡发现数据的目标MAC地址是自己，就会把数据传递给上一层进行处理；不是自己就会进行丢弃</p><hr/><p><strong>网线直连</strong></p><p>需要使用交叉线（不是直通线）</p><hr/><p><strong>同轴电缆（Coaxial）</strong></p><p>半双工通信</p><p>容易冲突</p><p>不安全</p><hr/><p><strong>集线器（Hub）</strong></p><p>半双工通信</p><p>容易冲突</p><p>不安全</p><hr/><p><strong>网桥（Bridge）</strong></p><p>能够自学习得知每个接口那侧的MAC地址</p><p>隔绝冲突域</p><hr/><p><strong>交换机（Switch）</strong></p><p>相当于接口更多的网桥</p><p>比集线器安全</p><p><strong>全双工通信</strong></p><hr/><p><strong>路由器（Router）</strong></p><p>上面的几种方式连接的设备必须在<strong>同一网段</strong>，连接的设备处在<strong>同一个广播域</strong></p><p><strong>路由器：可以在不同网段之间转发数据，隔绝广播域</strong></p><img src="https://img-blog.csdnimg.cn/20210323215954692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>主机发数据之前，首先判断目标主机的IP地址跟它<strong>是否在同一个网段</strong></p><ul><li>在同一个网段：ARP、通过交换机&#x2F;集线器传递数据</li><li>不在同一个网段：通过路由器转发数据</li></ul><p>设置路由器网关的IP地址，路由器的网关需要和一边的主机在同一个网段，同时主机需要设置网关</p><p><strong>比如：计算机0和计算机3进行第一次通信</strong></p><ul><li>主机0通过ARP知道网关的MAC地址，将地址返回主机0</li><li>主机0通过ICMP传输数据到另一边的网关</li><li>另一边的网关发出ARP，找到目标主机3的MAC地址，返回网关</li><li>网关通过ICMP传输数据到主机3</li></ul><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>1、每一个网卡都有一个<strong>6字节（48bit）</strong>的MAC地址（Media Access Control Address）</p><p>2、MAC地址全球唯一，固化在网卡的ROM中，由IEEE802标准规定</p><p>3、<strong>前3字节</strong>：OUI，组织唯一标识符（厂商不同，OUI不同）</p><p>4、<strong>后3字节</strong>：网络接口标识符（厂商自行分配）</p><p>5、12位十六进制</p><p><img src="https://img-blog.csdnimg.cn/20210324083033988.png" alt="在这里插入图片描述"></p><p>6、<strong>广播地址</strong>：48位都为1，<strong>FF-FF-FF-FF-FF-FF</strong>（二进制1111&#x3D;十六进制F）</p><p>7、<strong>MAC地址的获取</strong></p><ul><li>当不知道对方的MAC地址，使用ARP广播进行获取对方的MAC地址</li><li>获取成功后，会缓存IP地址、MAC地址的映射信息，又称为<strong>ARP缓存</strong></li><li>通过ARP广播获取的MAC地址，属于<strong>动态缓存</strong>，存储时间较短，超时删除</li></ul><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>1、IP地址：互联网上每一个主机都有一个IP地址</p><p>2、IPv4版本，<strong>32bit（4字节）</strong>，已经被用完</p><p>3、IPv6版本，128bit（16字节）</p><img src="https://img-blog.csdnimg.cn/20210324083920652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p>4、<strong>IP地址的组成</strong>：网络标识（网络ID）+主机标识（主机ID）</p><ul><li>同一个网段的主机，网络ID相同</li><li>通过<strong>子网掩码</strong>可以算出<strong>网络ID</strong>：<strong>子网掩码&amp;IP地址</strong>（&amp;运算：同为1则为1，否则为0）</li></ul><img src="https://img-blog.csdnimg.cn/20210324084445949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>⚠️：<strong>必须要通过子网掩码计算出网络ID，网络ID有多少位是不一定的</strong></p><p>⚠️：<strong>主机位不能全0（网段），不能全1（广播IP地址）</strong></p><p>例如：网段为192.168.0.0，能够容纳主机数量为256*256-2</p><blockquote><p>计算机和其他计算机通信时，需要判断是否在同一个网段，如果在就不需要使用路由器进行转发</p></blockquote><h3 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h3><img src="https://img-blog.csdnimg.cn/20210324085732809.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><p><strong>1、A类地址</strong></p><img src="https://img-blog.csdnimg.cn/20210324090002225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>网络ID</p><ul><li>0开头</li><li>0不能使用，127不能使用（保留），127.0.0.1是本地环回地址，代表本机地址</li><li>可以分配给主机：1-126</li></ul><p>主机ID</p><ul><li>第2、3、4部分取值范围：0-255</li><li>最大主机容量：256 * 256 * 256 - 2 &#x3D; 2^24 - 2 &#x3D; 16777214</li></ul><p><strong>2、B类地址</strong></p><img src="https://img-blog.csdnimg.cn/20210324090248604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:55%;" /><p>网络ID</p><ul><li>10开头</li><li>范围：128.0 到 191.255</li></ul><p>主机ID</p><ul><li>第3、4部分取值范围：0-255</li><li>最大主机容量：256 * 256 - 2 &#x3D; 2^16 -2</li></ul><p><strong>3、C类地址</strong></p><img src="https://img-blog.csdnimg.cn/20210324090755865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:55%;" /><p>网络ID：</p><ul><li>110开头</li><li>第1部分取值范围：192-223</li><li>第2、3部分取值范围：0-255</li></ul><p>主机ID：</p><ul><li>第4部分取值范围：0-255</li><li>最大主机容量：256 - 2 &#x3D; 254</li></ul><p><strong>4、D类地址</strong></p><img src="https://img-blog.csdnimg.cn/20210324091009728.png" alt="在这里插入图片描述" style="zoom:60%;" /><p><strong>5、E类地址</strong></p><img src="https://img-blog.csdnimg.cn/20210324091056376.png" alt="在这里插入图片描述" style="zoom: 75%;" /><h3 id="子网掩码的CIDR表示"><a href="#子网掩码的CIDR表示" class="headerlink" title="子网掩码的CIDR表示"></a>子网掩码的CIDR表示</h3><p>1、192.168.1.100&#x2F;24，代表子网掩码24个1，也就是255.255.255.0</p><p>2、123.210.100.200&#x2F;16，代码子网掩码16个1，也就是255.255.0.0</p><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><blockquote><p> 为什么要子网划分？</p></blockquote><p><strong>如果需要让200台主机在同一个网段内，可以分配一个C类网段，比如192.168.1.0&#x2F;24</strong></p><ul><li>共254个可用IP地址，192.168.1.1— 192.168.1.254</li></ul><p><strong>如果需要让500台主机在同一个网段内，分配一个B类网段，比如：191.100.0.0&#x2F;16</strong></p><ul><li>共65534个可用Ip地址</li><li>多出65034个空闲IP地址，属于极大的浪费资源</li></ul><p>1、<strong>子网划分</strong>：借用主机位作为子网位，划分出多个子网</p><p>可以分为：</p><ul><li>等长子网划分：将一个网段等分成多个子网，每个子网的可用IP地址数量一样</li><li>变长子网划分：每个子网的可用IP地址数量可用不一样</li></ul><p><strong>1、等长子网划分</strong></p><img src="https://img-blog.csdnimg.cn/20210324093615561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><p><strong>往右移1位，等分出两个子网</strong></p><img src="https://img-blog.csdnimg.cn/20210324093724795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><p><strong>往右移2位，等分出四个子网</strong></p><blockquote><p> 规律：后移n位，等分出(1&#x2F;2)^n个子网</p></blockquote><p><strong>2、变长子网划分</strong></p><p><strong>如果一个子网地址块的长度是原网段的(1&#x2F;2)^n，子网的子网掩码就增加n</strong></p><p>不等长的子网，子网掩码不同</p><img src="https://img-blog.csdnimg.cn/20210324095008392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><h3 id="超网"><a href="#超网" class="headerlink" title="超网"></a>超网</h3><p><strong>将多个连续的网段合并成一个更大的网段</strong></p><blockquote><p> 需求：200台计算机使用192.168.0.0&#x2F;24网段，现在希望增加200台设备到同一个网段</p></blockquote><p>200台在192.168.0.0&#x2F;24网段，200台在192.168.1.0&#x2F;24网段</p><p>合并为一个网段：192.168.0.0&#x2F;23（子网掩码左移1位）</p><img src="https://img-blog.csdnimg.cn/20210324101419479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="判断子网和超网"><a href="#判断子网和超网" class="headerlink" title="判断子网和超网"></a>判断子网和超网</h3><img src="https://img-blog.csdnimg.cn/20210324133710564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>在不同网段之间传输数据，需要路由器的支持</p><p>在默认情况下，路由器只知道和它直连的网段，<strong>非直连的网段需要通过静态路由、动态路由告诉它</strong></p><ul><li><strong>静态路由</strong><ul><li>管理员手动添加路由信息</li><li>适用于小规模网络</li></ul></li><li><strong>动态路由</strong><ul><li>路由器通过路由选择协议（RIP、OSPF）自动获取路由信息</li><li>适用于大规模网络</li></ul></li></ul><h3 id="数据包传递过程"><a href="#数据包传递过程" class="headerlink" title="数据包传递过程"></a>数据包传递过程</h3><img src="https://img-blog.csdnimg.cn/20210324142430971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 33%;" /><h3 id="网络、互联网、因特网"><a href="#网络、互联网、因特网" class="headerlink" title="网络、互联网、因特网"></a>网络、互联网、因特网</h3><p><img src="https://img-blog.csdnimg.cn/20210324142641370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h3><p><strong>ISP：Internet服务提供商</strong>，比如：移动、电信、网通等</p><p>平时拉宽带都是通过ISP连接到Internet的</p><img src="https://img-blog.csdnimg.cn/2021032414292453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><h3 id="网络分类"><a href="#网络分类" class="headerlink" title="网络分类"></a>网络分类</h3><p>安装网络范围分类：局域网、城域网、广域网</p><ul><li><p><strong>局域网</strong></p><ul><li><p><strong>LAN</strong>，几百米到十几公里内构成的计算机网络</p></li><li><p>局域网中最广泛使用的网络技术：<strong>以太网（Ethernet）</strong></p></li><li><p><strong>WLAN：</strong>无线局域网</p></li></ul></li><li><p><strong>城域网</strong>：MAN</p></li><li><p><strong>广域网</strong>：WAN</p><ul><li>一般范围是几百公里和几千公里，通常需要租用ISP的线路</li></ul></li></ul><h3 id="上网方式"><a href="#上网方式" class="headerlink" title="上网方式"></a>上网方式</h3><p><strong>1、电话线入户</strong></p><p><img src="https://img-blog.csdnimg.cn/20210324150952213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>2、光纤入户</strong></p><p><img src="https://img-blog.csdnimg.cn/20210324151227130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>3、网线入户</strong></p><img src="https://img-blog.csdnimg.cn/20210324151212313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="公网IP、私网IP"><a href="#公网IP、私网IP" class="headerlink" title="公网IP、私网IP"></a>公网IP、私网IP</h3><p>1、公网IP（public）</p><ul><li>Internet上的路由器只有到达公网的路由表，没有到达私网的路由表</li><li>公网IP由因特网信息中心统一分配和管理</li><li>ISP需要向Inter NIC申请公网IP</li></ul><p>2、私网IP（private）</p><ul><li><strong>主要用于局域网</strong><ul><li>A类：10.0.0.0&#x2F;8</li><li>B类：172.16.0.0&#x2F;16—172.31.0.0&#x2F;16</li><li>C类：192.168.0.0&#x2F;24—192.168.255.0&#x2F;24，256个C类网络</li></ul></li></ul><h4 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h4><p><strong>私网IP访问Internet需要进行NAT转换为公网IP</strong></p><ul><li>NAT（Network Address Translation）</li><li>这一步由路由器完成</li></ul><p><strong>NAT特点：</strong></p><ul><li>可以节约公网IP资源</li><li>会隐藏内部真实IP</li></ul><p><strong>NAT的分类：</strong></p><ul><li>静态转换（不常用）<ul><li>手动配置NAT映射表</li><li>一对一转换，一个私网IP对应一个公网IP</li></ul></li><li>动态转换（不常用）<ul><li>定义外部地址池，动态随机转换</li><li>一对一转换</li></ul></li><li><strong>PAT（Port Address Translation）</strong><ul><li>多对一转换，最大程度节约公网IP资源</li><li>利用<strong>端口号标识</strong>不同的数据请求</li><li><strong>目前应用最广泛</strong></li></ul></li></ul><h1 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h1><h2 id="网络互联模型"><a href="#网络互联模型" class="headerlink" title="网络互联模型"></a>网络互联模型</h2><img src="https://img-blog.csdnimg.cn/2021032320392150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><p>7层结构</p><p>每一层都接收由它的下一层所提供的特定服务，并且为上一层提供特定的服务。</p><p><strong>接口</strong>：上下层之间交互所遵循的约定</p><p><strong>协议</strong>：同一层之间交互所遵循的约定</p><img src="https://img-blog.csdnimg.cn/20210324154443920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="TCP-x2F-IP"><a href="#TCP-x2F-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h2><img src="https://img-blog.csdnimg.cn/20210324154658293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:33%;" /><img src="https://img-blog.csdnimg.cn/20210324155108398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%;" /><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p><strong>1、链路</strong></p><p>从一个节点到相邻节点的一段物理线路（有线或无线），中间没有其他交换节点</p><p><strong>2、数据链路</strong></p><p>在一条链路上传输数据时，需要有对应的通信协议控制数据的传输</p><p><strong>不同类型的数据链路，所用的通信协议可能是不同的</strong></p><ul><li>广播信道：<strong>CSMA&#x2F;CD协议</strong>（比如同轴电缆、集线器等组成的网络）</li><li>点对点信道：<strong>PPP协议</strong>（比如两个路由器之间的信道）</li></ul><p><strong>3、数据链路层的3个基本问题</strong></p><ul><li>封装成帧</li><li>透明传输</li><li>差错检验</li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>数据链路层的协议定义了通信媒介互连的设备之间传输的规范（双绞线电缆、光纤等）；此外，各个设备之间有时也会通过交换机、网桥等中专数据。</p><h2 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h2><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p>1、帧的数据部分：</p><ul><li>网络层传输过来的：<strong>IP数据包</strong></li></ul><p>2、最大传输单元MTU（上一层的数据包要小于MTU）</p><ul><li>每一种数据链路层协议都规定了能够传送的帧的数据长度上线</li><li><strong>以太网的MTU为1500个字节</strong></li></ul><img src="https://img-blog.csdnimg.cn/20210324170301957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p>使用SOH作为帧开始符、使用EOT作为帧结束符</p><p><strong>数据部分一旦出现了SOH、EOT，需要进行转义</strong></p><img src="https://img-blog.csdnimg.cn/20210324170714909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="差错检验"><a href="#差错检验" class="headerlink" title="差错检验"></a>差错检验</h3><p>传输前计算出FCS（根据数据部分+首部计算）</p><p>传输后再次计算，进行验证</p><img src="https://img-blog.csdnimg.cn/20210324171004444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 60%;" /><h2 id="CSMA-x2F-CD协议"><a href="#CSMA-x2F-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h2><blockquote><p> 不同协议的帧首部和尾部不同，进行传输会进行拆除再封装</p></blockquote><p>1、使用了CSMA&#x2F;CD的网络称为<strong>以太网（Ethernet）</strong>，它传输的是<strong>以太网帧</strong></p><ul><li>格式：Ethernet V2标准</li></ul><p>2、为了检测正在发送的帧是否发生冲突，<strong>以太网的帧需要至少64个字节</strong></p><p>3、<strong>用交换机组建的网络，已经支持全双工通信，不需要再使用CSMA&#x2F;CD，但是它传输的依然是以太网帧，所以交换机组建的网络依然叫以太网</strong></p><h3 id="Ethernet-V2帧的格式"><a href="#Ethernet-V2帧的格式" class="headerlink" title="Ethernet V2帧的格式"></a>Ethernet V2帧的格式</h3><p><img src="https://img-blog.csdnimg.cn/20210324172738505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>⚠️ <strong>没有帧开始符和帧结束符</strong></p><p>以太网使用曼彻斯特编码，不需要帧开始符、帧结束符</p><p><strong>1、以太网帧结构</strong></p><ul><li><p>首部：目标MAC地址 + 源MAC地址 + 类型（ipv4或者ipv6）</p></li><li><p>数据：IP数据包</p></li><li><p>尾部：FCS</p></li></ul><p><strong>数据长度至少：64 - 4 - 6 - 6 - 2 &#x3D; 46字节，最多1500个字节（MTU）</strong></p><p>2、当数据部分长度小于46字节时</p><ul><li>数据链路层会在数据后面加入一些字节填充</li><li>接收端会将添加的字节删除</li></ul><img src="https://img-blog.csdnimg.cn/2021032417554882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>3、长度总结</strong></p><ul><li>以太网帧的数据长度：46—1500字节</li><li>以太网帧的长度：64—1518字节（目标MAC+源MAC+类型+数据+FCS）</li></ul><h2 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h2><p>点对点协议</p><p><strong>PPP帧</strong></p><img src="https://img-blog.csdnimg.cn/20210324193440768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h1 id="网络层-1"><a href="#网络层-1" class="headerlink" title="网络层"></a>网络层</h1><p>TCP&#x2F;IP的心脏是网络层，这一层主要由<strong>IP和ICMP协议组成</strong>。</p><h2 id="与数据链路层的关系"><a href="#与数据链路层的关系" class="headerlink" title="与数据链路层的关系"></a>与数据链路层的关系</h2><p>数据链路层提供直连两个设备之间通信的功能</p><img src="https://img-blog.csdnimg.cn/20210324210909815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 67%;" /><p>每张票只能在限定区间内移动，这个区间就如同数据链路，出发地和终点就如同源地址和目标地址</p><p>行程表就相当于网络层</p><h2 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a>数据包</h2><p>网络层数据包（IP数据包，packet）由<strong>首部、数据</strong>2部分组成</p><ul><li><strong>数据：一般由传输层传递下来的数据段（segment）</strong></li></ul><img src="https://img-blog.csdnimg.cn/20210325092817451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="首部"><a href="#首部" class="headerlink" title="首部"></a>首部</h3><h4 id="版本、首部长度、区分服务"><a href="#版本、首部长度、区分服务" class="headerlink" title="版本、首部长度、区分服务"></a>版本、首部长度、区分服务</h4><p><strong>1、版本（Version）</strong> 4位</p><ul><li>占4位</li><li>0b0100：IPv4</li><li>0b0110：IPv6</li></ul><p><strong>2、首部长度</strong> 4位</p><ul><li>占4位</li><li><strong>二进制乘以4才是最终长度</strong></li><li>0b0101：20（最小值）</li><li>0b1111：60（最大值），首部固定长度20个字节，可变部分最大40个字节</li></ul><p><strong>3、区分服务</strong> 8位</p><ul><li>占8位</li><li>可以提高网络的服务质量</li></ul><h4 id="总长度"><a href="#总长度" class="headerlink" title="总长度"></a>总长度</h4><p>1、占16个字节</p><p>2、就是<strong>首部+数据长度之和</strong>，最大值是65535字节</p><img src="https://img-blog.csdnimg.cn/20210325092904410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>由于帧的数据不能超过1500字节（MTU），所以过大的IP数据包，需要进行<strong>分片</strong>传输给数据链路层</p><ul><li><strong>每一片都有自己的网络层首部（IP首部）</strong></li></ul><h4 id="标识、标志"><a href="#标识、标志" class="headerlink" title="标识、标志"></a>标识、标志</h4><p>1、标识</p><ul><li>占16位</li><li>数据包的ID，<strong>当数据包过大时进行分片时，同一个数据包的所有片的标识都是一样的</strong></li><li>有一个计数器专门管理数据包的ID，每发出一个数据包，ID就加1</li></ul><p>2、标志</p><ul><li>占3位<ul><li>第一位：保留</li><li>第二位：<strong>DF（Don’t Fragment）</strong>：1代表不允许分片，0代表允许分片</li><li>第三位：<strong>MF（More Fragments）</strong>：1代表不是最后一片，0代表是最后一片</li></ul></li></ul><h4 id="片偏移"><a href="#片偏移" class="headerlink" title="片偏移"></a>片偏移</h4><p>1、<strong>作用：为了将分片后的数据包按顺序还原</strong></p><ul><li>偏移为0，说明在最前面</li></ul><p>2、占13位</p><p>3、片偏移*8：字节偏移</p><p>4、<strong>每一片的长度一定是8的倍数</strong></p><img src="https://img-blog.csdnimg.cn/20210324204728853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="生存时间（TTL）"><a href="#生存时间（TTL）" class="headerlink" title="生存时间（TTL）"></a>生存时间（TTL）</h4><p>1、占8位</p><p>2、每个路由器在转发之前将TTL减1，TTL为0，路由器返回错误报告</p><p>3、使用ping命令后的TTL，能够推测出对方的操作系统，中间经过了多少路由器</p><p><img src="https://img-blog.csdnimg.cn/20210325094120511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="协议、首部检验和"><a href="#协议、首部检验和" class="headerlink" title="协议、首部检验和"></a>协议、首部检验和</h4><p><strong>1、协议</strong></p><ul><li><p>占8位</p></li><li><p>表明所封装的数据使用的协议</p></li></ul><p>例如：</p><ul><li>ICMP：1</li><li>IGMP：2</li><li>TCP：6</li><li>UDP：17</li><li>IPv6：41</li></ul><p><strong>2、首部检验和</strong></p><p>用于检查首部是否有错误</p><h2 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h2><p><a href="https://juejin.cn/post/6844904102988611598">https://juejin.cn/post/6844904102988611598</a></p><p>ping命令使用ICMP协议</p><p>在网络中ping是一个十分强大的TCP&#x2F;IP工具。它的作用主要为：</p><p>（1）用来检测网络的连通情况和分析网络速度；</p><p>（2）根据域名得到服务器IP；</p><p>（3）根据ping返回的TTL值来判断对方所使用的操作系统及数据包经过路由器数量。</p><p>我们通常会用它来直接ping IP地址，来测试网络的连通情况。</p><hr/><p>ICMP 的全称是 Intent Control Message Protocol, 中文过来就是 互联网控制报文协议。</p><ul><li>它是互联网协议族的核心协议之一。</li><li>它用于TCP&#x2F;IP网络中发送控制消息，提供可能发生在通信环境中的各种问题反馈，通过这些信息，使管理者可以对所发生的问题作出诊断，然后采取适当的措施解决。</li></ul><p>在IP通信中，经常有数据包到达不了对方的情况。原因是，在通信途中的某处的一个路由器由于不能处理所有的数据包，就将数据包一个一个丢弃了。或者，虽然到达了对方，但是由于搞错了端口号，服务器软件可能不能接受它。这时，在错误发生的现场，为了联络而飞过来的信鸽就是ICMP 报文。</p><p>在IP 网络上，由于数据包被丢弃等原因，为了控制将必要的信息传递给发信方。ICMP 协议是为了辅助IP 协议，交换各种各样的控制信息而被制造出来的。</p><p><strong>ICMP的主要功能：</strong></p><p>1.确认IP包是否成功送达目标地址。<br>2.通知在发送过程当中IP包被废弃的具体原因。</p><h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>ICMP报文主要分为两种类型：</p><ul><li>查询报文</li><li>差错报文</li></ul><img src="https://img-blog.csdnimg.cn/20191202220144274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODA0MDgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:70%;" /><p><strong>1、查询报文 （Echo Request与 Echo Reply）</strong></p><p>定义：发送端主动发起请求，并且获取到应答。</p><p>常见应用：Ping</p><p>Ping 就是主动请求，获取到主动应答。但是 Ping 是在原生的 ICMP 中添加了自定义格式区域。例如 Ping 中放了发送的请求时间，以此计算出路程。所以，其实在 Ping 的报文中会加入序号，以用来区分数据包，从而提高计算时间或者路程的准确性。</p><h3 id="ICMP实现之ping命令"><a href="#ICMP实现之ping命令" class="headerlink" title="ICMP实现之ping命令"></a>ICMP实现之ping命令</h3><p>ping 命令用来在IP 层次上调查与指定机器是否连通，调查数据包往复需要多少时间。</p><p>为了实现这个功能，<strong>ping 命令使用了两个ICMP 报文</strong>。</p><p><img src="https://img-blog.csdnimg.cn/20191202224213646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODA0MDgw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>1.向目标服务器发送回送请求。</strong></p><p>首先，向目标服务器发出<strong>回送请求</strong>（类型是8，代码是0）报文（同2）。</p><p>在这个回送请求报文里，除了类型和代码字段，还被追加了标识符和序号字段。标识符和序号字段分别是16 位的字段。ping 命令在发送回送请求报文时，在这两个字段里填入任意的值。对于标识符，应用程序执行期间送出的所有报文里填入相同的值。对于序号，每送出一个报文数值就增加1。而且，回送请求的选项数据部分用来装任意数据。这个任意数据用来调整ping 的交流数据包的大小。</p><p><strong>2.返回回送回答。</strong></p><p>计算机送出的回送请求到达目标服务器后，服务器回答这一请求，向送信方发送回送请求（类型是0，代码是0）（同3）。</p><p>这个ICMP 回送回答报文在IP 层来看，与被送来的回送请求报文基本上一样。不同的只是，源和目标IP 地址字段被交换了，类型字段里填入了表示回送回答的0。也就是，从送信方来看，自己送出的ICMP 报文从目标服务器那里象鹦鹉学舌那样原样返回了。</p><p>送信方的计算机可以通过收到回送回答报文，来确认目标服务器在工作着。进一步，记住发送回送请求报文的时间，与接收到回送回答报文的时间一比较，就能计算出报文一去一回往复所需要的时间（同4）。</p><p>但是，收到的回送回答报文里写的只是类型和代码的话，发送方计算机将无法判断它是否是自己发出去请求的回答。因此，前面说到的标识符和序号字段就有它的意义了。将这两个值与回送回答报文中的相同字段值一比较，送行方计算机就能够简单地检测回送回答是否正确了。执行ping 命令而调查的结果没什么问题的话，就将目标服务器的IP 地址，数据大小，往复花费的时间打印到屏幕上。</p><p><strong>3.用ping 命令不能确定与对方连通的原因大致有三个。</strong></p><p>1）目标服务器不存在；</p><p>2)花在数据包交流上的时间太长ping 命令认为超时；</p><p>3）目标服务器不回答ping 命令。</p><p>如果是原因2），通过ping 命令的选项来延长到超时的等待时间，就能正确显示结果了。如果原因是1）或3）的话，仅凭ping 命令的结果就不能判断是哪方了。正如这样，ping 命令不一定一定能判断对方是否存在。</p><h1 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h1><p>传输层有2个协议</p><ul><li>TCP（Transmission Control Protocol）：传输控制协议</li><li>UDP（User Datagram Protocol）：用户数据包协议</li></ul><p>区别：</p><img src="https://img-blog.csdnimg.cn/20210325094553934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li>TCP需要建立连接（三次握手，四次挥手）；UDP无连接（不管能不能连接上，直接把数据扔过去）</li><li>TCP是可靠传输，不会丢包（会重新发）；UDP不可靠</li></ul><p>1、TCP提供可靠交付，无差错、不丢失、不重复，并且按照顺序到达；UDP继承了IP包的特性，不保证不丢失，不保证按顺序到达</p><p>2、TCP面向字节流，UDP继承了IP的特性，基于数据报，一个个发送一个个收</p><p>3、TCP可以有拥塞控制，会调整自己发送速度；UDP不会控制</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><ul><li><p>UDP是无连接的，减少了建立和释放连接的开销</p></li><li><p>UDP尽最大能力交付，不保证可靠交付</p></li><li><p>因此，不需要维护一些复杂的参数，<strong>只有8个字节</strong></p></li></ul><img src="https://img-blog.csdnimg.cn/20210325095859574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 70%;" /><hr/><p><strong>UDP长度</strong></p><p>占16位</p><p><strong>首部长度+数据长度</strong></p><hr/><p><strong>UDP检验和</strong></p><p>1、计算内容：伪首部+首部+数据</p><p>2、<strong>伪首部</strong></p><ul><li><strong>12位</strong></li><li>源IP地址、目的IP地址、保留（0）、协议号（17）、UDP长度</li><li><strong>只在计算检验和起作用，不会传递给网络层</strong></li></ul><img src="https://img-blog.csdnimg.cn/20210325100246669.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><hr/><p><strong>源端口、目标端口</strong></p><p><strong>1、目标端口</strong></p><ul><li><p>16位</p></li><li><p>端口号：0-65535</p></li><li><p>服务器的端口，监听客户端的数据</p></li></ul><img src="https://img-blog.csdnimg.cn/20210325101028109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:53%;" /><p><strong>2、源端口</strong></p><ul><li>16位</li><li>客户端的端口</li><li>临时开启的随机端口</li></ul><hr><p><strong>UDP的三大特点</strong></p><ul><li><p>沟通简单，不需要大量的数据结构、处理逻辑、包头字段</p></li><li><p>轻信他人，不会建立连接；<strong>可以一对多传输数据</strong></p></li><li><p>不会拥塞控制</p></li></ul><p><strong>UDP的三大使用场景</strong></p><ul><li>需要的资源少，在网络比较好的内网，对于丢包不敏感的应用</li><li>不需要一对一沟通，建立连接，<strong>可以广播的应用</strong><ul><li>UDP的不面向连接的功能可以使得可以承载<strong>广播或者多播</strong>的协议；</li><li>DHCP就是广播的形式</li></ul></li><li>需要处理速度快，时延低，可以容忍少数丢包</li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="数据格式-1"><a href="#数据格式-1" class="headerlink" title="数据格式"></a>数据格式</h3> <img src="https://img-blog.csdnimg.cn/20210325110252500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><hr/><p><strong>数据偏移</strong></p><ul><li><strong>占4位</strong>，取值范围：0101到1111</li><li><strong>乘以4</strong>：首部长度（最小20，最大60）</li></ul><blockquote><p>❓UDP首部有个16位的字段记录了整个UDP报文段的长度（首部+数据），但是TCP的首部中仅仅有个4个字段记录了TCP报文段的首部长度，并没有记录TCP报文段的数据长度</p></blockquote><p>分析：</p><ul><li>UDP首部16位的长度字段是冗余的，纯粹是为了保证首部是32bit对齐</li><li>TCP&#x2F;UDP的数据长度，完全可以由IP数据包的首部推测出来</li></ul><p><strong>传输层的数据长度 &#x3D; 网络层的总长度 - 网络层的首部长度 - 传输层的首部长度</strong></p><hr/><p><strong>保留</strong></p><ul><li><strong>占6位</strong>，目前全位0</li></ul><hr/><p><strong>检验和</strong></p><p>和UDP一样，TCP检验和的计算内容：<strong>伪首部+首部+数据</strong></p><ul><li>伪首部：占用12字节，仅在计算检验和时起作用，不会传递给网络层</li></ul><hr/><p><strong>标志位（Flags）</strong></p><p><strong>1、URG（urgent）</strong>紧急位</p><ul><li>当URG&#x3D;1时，<strong>紧急指针字段才有效</strong>，表示当前报文段中有紧急数据，应优先传送</li></ul><p><strong>2、ACK（acknowledge）</strong></p><ul><li>当ACK&#x3D;1时，<strong>确认号字段才有效</strong></li></ul><p><strong>3、PSH（push）</strong></p><p><strong>4、RST（rest）</strong>重置</p><ul><li>当RST&#x3D;1，表示连接中出现严重差错，如图</li></ul><img src="https://img-blog.csdnimg.cn/20210325114652530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:30%;" /><p><strong>5、SYN（Syn）</strong></p><ul><li>当SYN&#x3D;1，ACK&#x3D;0时，表示这是一个<strong>建立连接的请求</strong></li><li>当SYN&#x3D;1，ACK&#x3D;1时，表示<strong>对方同意建立连接</strong></li></ul><p><strong>6、FIN（Finsh）</strong></p><ul><li>当FIN&#x3D;1，表示<strong>数据发送完毕，要求释放连接</strong></li></ul><hr/><p><strong>序号、确认号</strong></p><p><strong>1、序号（seq）</strong></p><ul><li>4个字节，32位</li><li>首先，在传输过程中的每一个字节都有一个编号</li><li>在建立连接后，序号代表：<strong>这一次传递给对方的TCP数据部分的第一个字节的编号</strong></li></ul><p><strong>2、确认号（ack）</strong></p><ul><li>4个字节，32位</li><li>在建立连接之后，代表：<strong>期望对方下一次传过来的TCP数据部分的第一个字节编号</strong></li></ul><hr/><p><strong>窗口</strong></p><ul><li>2个字节，16位</li><li>这个字段有<strong>流量控制</strong>功能，用来告诉对方下一次允许发送的数据大小（字节为单位）</li></ul><hr/><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p><img src="https://img-blog.csdnimg.cn/20210325143351370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="停止等待ARQ协议"><a href="#停止等待ARQ协议" class="headerlink" title="停止等待ARQ协议"></a>停止等待ARQ协议</h4><p>自动重传请求，超时重传</p><img src="https://img-blog.csdnimg.cn/20210325130111407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210325130243290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>1) 无差错情况:</strong></p><p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p><p><strong>2) 出现差错情况（超时重传）:</strong></p><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。</p><p>因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。</p><p>这种自动重传方式常称为 <strong>自动重传请求 ARQ</strong> 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。</p><p><strong>3) 确认丢失和确认迟到</strong></p><ul><li><strong>确认丢失</strong> ：确认消息在传输过程丢失。<ul><li>当A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：1. 丢弃这个重复的M1消息，不向上层交付。 2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li></ul></li><li><strong>确认迟到</strong> ：确认消息在传输过程中迟到。<ul><li>A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：1. A收到重复的确认后，直接丢弃。2. B收到重复的M1后，也直接丢弃重复的M1。</li></ul></li></ul><p><strong>优缺点：</strong></p><ul><li><strong>优点：</strong> 简单</li><li><strong>缺点：</strong> 信道利用率低，等待时间长</li></ul><h4 id="连续ARQ协议-滑动窗口协议"><a href="#连续ARQ协议-滑动窗口协议" class="headerlink" title="连续ARQ协议+滑动窗口协议"></a>连续ARQ协议+滑动窗口协议</h4><img src="https://img-blog.csdnimg.cn/202103251309088.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><p>发送方的窗口大小由接收方决定</p><p><strong>流程：</strong></p><img src="https://img-blog.csdnimg.cn/20210325132727690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:70%;" /><p><strong>优缺点：</strong></p><ul><li><strong>优点：</strong> 信道利用率高，容易实现，即使确认丢失，也不必重传。</li><li><strong>缺点：</strong> 不能向发送方反映出接收方已经正确收到的所有分组的信息。<ul><li>比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</li></ul></li></ul><hr/><h5 id="SACK（选择性确认）"><a href="#SACK（选择性确认）" class="headerlink" title="SACK（选择性确认）"></a>SACK（选择性确认）</h5><p>1、在TCP通信过程中，如果发送序列中间某个数据包丢失（比如发送1、2、3、4，其中3丢失了）</p><ul><li><p>TCP会通过重传最后确认的分组后续的分组（最后确认的是2，会重传3、4）</p></li><li><p>这样原先已经正确传输的分组也可能会重复发送（比如4），降低了TCP的性能</p></li></ul><p>2、为了改善上述情况，<strong>使用SACK（selective acknowledge）技术</strong></p><ul><li>告诉发送方哪些数据丢失，哪些数据已经提前收到</li><li>使TCP只重新发送丢失的包（比如3），不会发送后续所有的分组（比如4）</li></ul><p><strong>3、SACK会放在TCP首部的选项部分</strong></p><img src="https://img-blog.csdnimg.cn/20210325134357613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="TCP首部" style="zoom:50%;" /><ul><li>Kind：占1字节，值为5代表这是SACK选项</li><li>Length：占1字节，表明SACK选项共占用多少字节</li><li>Left Edge：占4字节，左边界</li><li>Right Edge：占4字节，右边界</li></ul><p><strong>通过左边界和右边界表示收到的数据，一对8个字节，最多携带4组，（40-1-1）&#x2F;8</strong></p><p>SACK最大占用字节数：4 * 8 + 2 &#x3D; 34</p><p><img src="https://img-blog.csdnimg.cn/20210325134140585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>为什么在传输层进行分段，而不是在网络层分片？</p></blockquote><p>1、可以提高重传的性能</p><p>2、可靠传输是在传输层进行控制的</p><ul><li>如果在传输层不分段，一旦出现数据丢失，整个传输层的数据都需要重传</li><li>如果在传输层分段，一旦出现数据丢失，只需要重传丢失的那些段</li></ul><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p><strong>1、如果接收方的缓存区满了，发送方还在发数据</strong></p><ul><li>接收方只能把收到的数据包丢掉，大量的丢包会极大浪费网络资源</li><li>所以要进行流量控制</li></ul><p><strong>2、什么是流量控制？</strong></p><p>让发送方的发送速率不要太快，让接收方来得及处理</p><p><strong>3、原理</strong></p><ul><li>通过确认报文中<strong>窗口字段</strong>来控制发送方的发送速率</li><li>发送方的发送窗口大小不能超过接收方给出的窗口大小</li><li>当发送方收到接收窗口大小为0时，发送方就会停止发送数据</li></ul><img src="https://img-blog.csdnimg.cn/20210325152150984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>接收方给发送方发送了0窗口的报文段</p><p>接收方又有了一些存储空间，给发送方发送的非0窗口的报文段丢失了</p><p><strong>解决方案：</strong></p><ul><li>当发送方收到0窗口，这时发送方停止发送报文</li><li>并且同时开启定时器，隔一段时间就去询问最新的窗口大小</li><li>如果还是0，就会重置定时器</li></ul><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><img src="https://img-blog.csdnimg.cn/20210325153704822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>1、拥塞控制</strong></p><ul><li>防止过多的数据注入到网络中</li><li>避免网络中路由器或链路过载</li></ul><p><strong>2、拥塞控制是一个全局性的过程</strong></p><ul><li>涉及所有的主机、路由器、与降低网络性能有关的所有因素</li></ul><p><strong>3、相比而言，流量控制时点对点通信的控制</strong></p><h4 id="几个名词"><a href="#几个名词" class="headerlink" title="几个名词"></a>几个名词</h4><p><strong>1、MSS（maxium segment size）</strong></p><ul><li>每个段最大的数据部分大小</li><li>在连接时确定，<strong>只在连接时出现</strong></li><li><strong>理论上是1460字节，实际需要双方协商</strong></li></ul><img src="https://img-blog.csdnimg.cn/20210325154534507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><p><strong>2、cwnd：拥塞窗口</strong></p><ul><li>发送方根据自己估算的网络拥塞程度而设置的窗口值</li><li>动态的</li></ul><p><strong>3、rwnd：接收窗口</strong></p><p><strong>4、swnd：发送窗口</strong></p><ul><li>发送窗口 &#x3D; min（拥塞窗口，接收窗口）</li></ul><h4 id="慢开始（slow-start）"><a href="#慢开始（slow-start）" class="headerlink" title="慢开始（slow start）"></a>慢开始（slow start）</h4><img src="https://img-blog.csdnimg.cn/20210325160613345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><p>1、令拥塞窗口为1个包，发送1个MSS</p><p>2、收到一个确认之后，将拥塞窗口加倍，下一次就可以发送2个MSS</p><p>3、同理加倍</p><h4 id="拥塞避免（congestion-avoidance）"><a href="#拥塞避免（congestion-avoidance）" class="headerlink" title="拥塞避免（congestion avoidance）"></a>拥塞避免（congestion avoidance）</h4><img src="https://img-blog.csdnimg.cn/20210325161741220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p><strong>1、ssthresh（slow start threshold）：慢开始阈值，cwnd达到阈值后，以线性方式增长（加法增大）</strong></p><p><strong>2、拥塞避免（加法增大）：拥塞窗口缓慢增大，防止网络过早出现拥塞</strong></p><p><strong>3、乘法减小：只要网络出现拥塞，把ssthresh减半，于此同时，执行慢开始算法（拥塞窗口返回初始值：1个包）</strong></p><ul><li>如果网络出现频繁拥塞，阈值就会变得很小</li></ul><h4 id="快速重传（fast-retransmit）"><a href="#快速重传（fast-retransmit）" class="headerlink" title="快速重传（fast retransmit）"></a>快速重传（fast retransmit）</h4><img src="https://img-blog.csdnimg.cn/2021032516222975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>1、接收方</strong></p><ul><li>每收到一个失序的分组后（m1 m2 m4），立即发出重复确认（m2）</li><li>使发送方及时知道有分组没有到达，而不要等待自己发送数据时才进行确认（SACK）</li></ul><p><strong>2、发送方</strong></p><ul><li>只要连续收到三个重复确认（总共4个确认），就应该立即重传没有收到的报文段</li><li>不需要等待重传计数器到期后再重传（超时重传）</li></ul><h4 id="快速恢复（fast-recovery）"><a href="#快速恢复（fast-recovery）" class="headerlink" title="快速恢复（fast recovery）"></a>快速恢复（fast recovery）</h4><img src="https://img-blog.csdnimg.cn/20210325162951118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>当发送方连续收到3个重复确认，就执行“乘法减小”，阈值减半</p><ul><li>为了预防网络丢包</li></ul><p><strong>与之前不同的是这次从阈值开始执行拥塞避免算法（加法增大）</strong></p><hr/><p><strong>小结</strong></p><p>1、可靠传输：保证丢掉的包可以发给你（ARQ），超时重传</p><p>2、流量控制：希望发的慢一点，<strong>点对点</strong>，接收端改变接收窗口放在缓存区溢出</p><p>3、拥塞控制：大家一起维护网络不要这么拥塞，在流量控制的基础上控制</p><ul><li>V1：慢开始 -&gt; 拥塞避免 -&gt; 乘法减小（阈值减半） -&gt; 慢开始 -&gt; 拥塞避免……</li><li>V2：慢开始 -&gt; 拥塞避免 -&gt; <strong>快重传</strong> -&gt; 乘法减小（阈值减半） -&gt; <strong>快恢复</strong> -&gt; 拥塞避免 ……</li></ul><h3 id="序号和确认号"><a href="#序号和确认号" class="headerlink" title="序号和确认号"></a>序号和确认号</h3><h4 id="相对值"><a href="#相对值" class="headerlink" title="相对值"></a>相对值</h4><img src="https://img-blog.csdnimg.cn/20210325174345833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><h4 id="原生值"><a href="#原生值" class="headerlink" title="原生值"></a>原生值</h4><p>建立连接时，客户端和服务器都会生成随机的序号初始值</p><img src="https://img-blog.csdnimg.cn/20210325175005651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:33%;" /><img src="https://img-blog.csdnimg.cn/20210325175618780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:33%;" /><h4 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h4><p>SYN&#x3D;1，代表第一次发信息，seq都为0</p><img src="https://img-blog.csdnimg.cn/20210325181713417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:54%;" /><img src="https://img-blog.csdnimg.cn/20210325181747929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%;" /><img src="https://img-blog.csdnimg.cn/20210325182424161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><h4 id="建立连接（三次握手）"><a href="#建立连接（三次握手）" class="headerlink" title="建立连接（三次握手）"></a>建立连接（三次握手）</h4><img src="https://img-blog.csdnimg.cn/20210325184103290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>1、发起连接请求（<strong>SYN报文段</strong>），客户端发送初始序号x，请求发送到服务器；<strong>客户端进行同步已发送状态（第一次握手）</strong></p><p>2、服务器接收连接请求，发送初始序号y，期望获得客户端的x+1个字节，确认发送到客户端（<strong>SYN+ACK</strong>）；<strong>服务器进入同步已接收状态（第二次握手）</strong></p><p>3、客户端发出确认（<strong>ACK报文段</strong>），因为对方需要x+1，所以当前发送的是x+1，期望获得y+1个字节，<strong>连接已经建立（第三次握手）</strong></p><hr/><h5 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h5><p>CLOSED：客户端处于关闭状态</p><p>LISTEN：服务器处于监听状态，等待客户端连接</p><p>SYN-RCVD：表示服务器接受到了SYN报文，进入ESTABLISHED状态</p><hr/><p><strong>前两次握手的特点：</strong></p><ul><li>SYN都为1</li><li>数据部分长度都为0</li><li>TCP头部一般是32个字节<ul><li>固定：20字节</li><li>选项：12字节<ul><li>MSS</li><li>窗口缩放系数</li><li>是否支持SACK</li></ul></li></ul></li><li><strong>双方交换确认一些信息，比如MSS、是否支持SACK、窗口缩放系数等</strong></li></ul><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><blockquote><p>为什么要三次握手？不是两次？</p></blockquote><p>主要目的：防止服务器端一直等待，浪费资源</p><p>如果建立连接只需要2次握手，可能会出现的情况：</p><ul><li>如果客户端发出的第一个连接请求因为网络延迟，在连接释放后的才到达服务器，本来这是一个早已失效的连接请求，但服务器收到这个请求后误以为是客户端再次发出的一个新的连接请求，于是发出了确认，新的连接就建立了。<strong>但是由于客户端没有想连接服务器的意愿，所以客户端不会理睬服务器的确认</strong>，服务器会一直等待，浪费了资源。</li></ul><p>如果采用三次握手的方法，服务器进行确认时，客户端不会理睬，就不会进行第三次握手，所以服务器就不会进入连接建立状态。</p><hr/><blockquote><p>第三次握手失败了怎么处理？</p></blockquote><p>此时服务器状态为同步已接收状态，如果收不到客户端的确认，就会再次发送SYN+ACK包，多次重发还是不行就会发送RTS报文段，强制关闭连接</p><img src="https://img-blog.csdnimg.cn/20210325200355557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><hr/><blockquote><p>半连接队列和全连接队列</p></blockquote><p>TCP三次握手时，Linux内核会维护两个队列：</p><ul><li>半连接队列，被称为SYN队列</li><li>全连接队列，被称为 accept队列</li></ul><p>服务端收到客户端发起的 SYN 请求后，<strong>内核会把该连接存储到半连接队列</strong>，并向客户端响应 SYN+ACK，接着客户端会返回 ACK，服务端收到第三次握手的 ACK 后，<strong>内核会把连接从半连接队列移除，然后创建新的完全的连接，并将其添加到 accept 队列，等待进程调用 accept 函数时把连接取出来。</strong></p><img src="https://pic3.zhimg.com/80/v2-351442fbc23ab0af4980141cf140001a_1440w.jpg" alt="img" style="zoom:30%;" /><p><strong>不管是半连接队列还是全连接队列，都有最大长度限制，超过限制时，内核会直接丢弃，或返回 RST 包。</strong></p><p>当服务端并发处理大量请求时，如果 TCP 全连接队列过小，就容易溢出。发生 TCP 全连接队溢出的时候，后续的请求就会被丢弃，这样就会出现服务端请求数量上不去的现象。</p><ol><li><strong>如果半连接队列满了，并且没有开启 tcp_syncookies，则会丢弃；</strong></li><li><strong>若全连接队列满了，且没有重传 SYN+ACK 包的连接请求多于 1 个，则会丢弃；</strong></li><li><strong>如果没有开启 tcp_syncookies，并且 max_syn_backlog 减去 当前半连接队列长度小于 (max_syn_backlog &gt;&gt; 2)，则会丢弃；</strong></li></ol><h4 id="释放连接（四次挥手）"><a href="#释放连接（四次挥手）" class="headerlink" title="释放连接（四次挥手）"></a>释放连接（四次挥手）</h4><img src="https://img-blog.csdnimg.cn/20210326102057846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><h5 id="状态-1"><a href="#状态-1" class="headerlink" title="状态"></a>状态</h5><p><strong>1、FIN-WAIT-1</strong></p><ul><li>向对方发送FIN报文，此时进入这个状态</li><li>一旦进入这个状态，说明这一方是<strong>主动关闭的</strong></li></ul><p><strong>2、CLOSE-WAIT</strong></p><ul><li>当对方发送FIN给自己时，自己会回应一个ACK给对方，进入这个状态</li><li>这个状态下，要考虑是否有数据需要发送给对方，如果没有就发送FIN报文给对方</li></ul><p><strong>3、FIN-WAIT-2</strong></p><ul><li>只要对方发送ACK确认后，主动方进入这个状态，等待对方的FIN报文</li></ul><p>4、CLOSING：一种罕见的状态</p><ul><li>表示你发送FIN报文后，没有收到对方的ACK报文，反而收到了FIN报文</li><li>如果双方几乎同时准备关闭连接时，就出现双方同时发送FIN报文段情况，进入这种状态</li></ul><p><strong>5、TIME-WAIT</strong></p><ul><li>表示收到了对方的FIN报文，并发出了ACK报文</li><li><strong>等待2MSL后即可进入CLOSED状态</strong></li></ul><p><strong>6、LAST-ACK</strong></p><ul><li>被动方发送FIN报文后，最后等待对方的ACK报文</li></ul><h5 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h5><p>1、TCP&#x2F;IP协议栈的设计上，允许任何一方先发起断开请求</p><p><strong>2、TIME-WAIT状态，等待一段时间后再真正关闭</strong></p><ul><li>一般是<strong>等待2倍的MSL（最大分段生存期）</strong><ul><li>MSL是TCP报文在Internet上的最长生存时间</li><li>每个具体的TCP实现都必须选择一个确定的MSL值，建议是2分钟</li></ul></li><li>如果直接进入CLOSED状态，<strong>因为网络原因对方没有收到ACK，所以对方就会重发FIN</strong><ul><li>可能出现的情况：<ul><li>客户端没有任何响应，服务器干等，甚至多次发送FIN，浪费资源</li><li>客户端有个新的应用程序刚好分配了同一个端口号，新的应用程序收到FIN后马上开始断开连接的操作，本来是想建立连接的</li></ul></li></ul></li></ul><h5 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h5><blockquote><p>为什么要4次挥手？</p></blockquote><p>1、TCP是全双工模式</p><p>2、<strong>第一次挥手：主机1发出FIN报文段</strong></p><ul><li>主机1告诉主机2，主机1已经没有数据需要发送了，但是主机1还是可以接受主机2发来的数据</li></ul><p>3、<strong>第二次挥手：主机2发出ACK报文段</strong></p><ul><li>主机2已经知道主机1没有数据发送了，但是主机2还是可以发送数据给主机1的</li></ul><p>4、<strong>第三次挥手：主机2发出FIN报文段</strong></p><ul><li>主机2告诉主机1，主机2没有数据需要发送了</li></ul><p>5、<strong>第四次挥手：主机1返回ACK报文段</strong></p><ul><li>主机1知道主机2没有数据发送了</li></ul><hr/><blockquote><p>半关闭状态</p></blockquote><p>TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力</p><blockquote><p>半打开</p></blockquote><p>如果一方已经关闭或异常终止，而另一方却对此毫不知情，这种连接就称为半打开的。</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p><strong>1、连接建立定时器</strong></p><p>当发送端发送 SYN 报文想建立一条新连接时，会开启连接建立定时器，如果没有收到对端的 ACK 包将进行重传。</p><hr/><p><strong>2、重传定时器</strong></p><p>第一个定时器讲的是连接建立没有收到 ACK 的情况，如果在发送数据包的时候没有收到 ACK 呢？</p><p>这就是这里要讲的第二个定时器重传定时器，重传定时器的时间是动态计算的，取决于 RTT 和重传的次数。</p><hr/><p><strong>3、延迟 ACK 定时器</strong></p><p>在 TCP 收到数据包以后在没有数据包要回复时，不马上回复 ACK。这时开启一个定时器，等待一段时间看是否有数据需要回复。如果期间有数据要回复，则在回复的数据中捎带 ACK，如果时间到了也没有数据要发送，则也发送 ACK。</p><hr/><p><strong>4、坚持计时器</strong></p><p>Persist 定时器是专门为<strong>零窗口探测</strong>而准备的。</p><p>我们都知道 TCP 利用滑动窗口来实现流量控制，当接收端 B 接收窗口为 0 时，发送端 A 此时不能再发送数据，发送端此时开启 Persist 定时器，超时后发送一个特殊的报文给接收端看对方窗口是否已经恢复，这个特殊的报文只有一个字节</p><hr/><p><strong>5、保活定时器（keepalive timer）</strong></p><p>如果通信以后一段时间有再也没有传输过数据，怎么知道对方是不是已经挂掉或者重启了呢？于是 TCP 提出了一个做法就是在连接的空闲时间超过 2 小时，会发送一个探测报文，如果对方有回复则表示连接还活着，对方还在，如果经过几次探测对方都没有回复则表示连接已失效，客户端会丢弃这个连接。</p><hr/><p><strong>6、FIN_WAIT_2 定时器</strong></p><p>四次挥手过程中，主动关闭的一方收到 ACK 以后从 FIN_WAIT_1 进入 FIN_WAIT_2 状态等待对端的 FIN 包的到来，FIN_WAIT_2 定时器的作用是防止对方一直不发送 FIN 包，防止自己一直傻等。</p><hr/><p><strong>7、TIME_WAIT 定时器</strong></p><p>TIME_WAIT 定时器也称为 2MSL 定时器，可能是这七个里面名气最大的，主动关闭连接的一方在 TIME_WAIT 持续 2 个 MSL 的时间，超时后端口号可被安全的重用。</p><h1 id="应用层-（一）"><a href="#应用层-（一）" class="headerlink" title="应用层 （一）"></a>应用层 （一）</h1><img src="https://img-blog.csdnimg.cn/20210326132828336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:33%;" /><h2 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>由于IP地址不方便记忆，并且不能表达组织的名称和性质，人们设计出了域名（比如：baidu.com）</p><ul><li>但是，实际上为了访问到具体的主机，<strong>最终还得知道目标主机的IP地址</strong></li></ul><blockquote><p>为什么不全程直接使用域名？</p></blockquote><p>IP地址4个字节，域名基本都需要十几个字节，这会增加路由器的负担，浪费流量</p><hr/><p><strong>域名分类</strong></p><p>可以分为：</p><p>1、顶级域名（TLD）</p><ul><li>通用顶级域名（gTLD）：.com、.net、.org等</li><li>国家及地区顶级域名（ccTLD）</li><li>新通用顶级域名（new gTLD）</li></ul><p>2、二级域名：顶级域名之下的域名</p><ul><li>在通用顶级域名下，一般指域名注册人的名称，例如baidu、google等</li><li>在国家及地区顶级域名下，一般指注册类别，例如com、edu、gov等（比如：neu.eud.cn 😊）</li></ul><p>3、三级域名</p><p>…..</p><img src="https://img-blog.csdnimg.cn/20210326135941171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:70%;" /><h3 id="DNS概述"><a href="#DNS概述" class="headerlink" title="DNS概述"></a>DNS概述</h3><p>1、DNS（Domain Name System），域名系统</p><p>2、作用：利用DNS协议，可以<strong>将域名解析成对应的IP地址</strong></p><p><strong>3、DNS可以基于UDP协议，也可以基于TCP协议</strong></p><p>4、DNS服务器<strong>占用53端口</strong></p><h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><img src="https://img-blog.csdnimg.cn/20210326135410915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:53%;" /><p>1、客户端先访问最近一台DNS服务器（客户端自己配置的服务器）</p><p>2、所有的DNS服务器都记录了<strong>DNS根域名服务器的IP地址</strong></p><p>3、<strong>上级DNS服务器记录了下一级DNS服务器的IP地址</strong></p><p>4、全球共13台IPv4的DNS根DNS服务器、25台IPv6DNS根DNS服务器</p><h3 id="DNS解析流程"><a href="#DNS解析流程" class="headerlink" title="DNS解析流程"></a>DNS解析流程</h3><p>那么，在浏览器输入域名的时候，DNS是怎样解析的呢？分以下几步：</p><ol><li>本地hosts文件</li><li>本地DNS缓存</li><li>DNS服务器缓存</li><li>DNS服务器递归查找</li></ol><hr/><p><strong>本地hosts文件</strong></p><p>修改hosts文件对于开发者来说并不陌生，这样我们可以不改变线上域名的配置，然后直接通过域名访问我们想要访问的机器。</p><hr/><p><strong>本地DNS缓存</strong></p><p>如果hosts文件没有的话，那么DNS就会查看本地的DNS缓存，如果有的话就直接返回对应的ip即可。下面是我本地对tlab.cloud.tencent.com的DNS解析，因为之前已经解析过来，所以缓存里就有对应的ip地址：193.112.230.97。</p><img src="https://user-gold-cdn.xitu.io/2019/1/5/1681c963263c7756?imageView2/0/w/1280/h/960/ignore-error/1" alt="img" style="zoom:43%;" /><hr/><p><strong>DNS服务器缓存</strong></p><p>如果是第一次访问某个域名的话，那本地缓存肯定是没有的。</p><p>所以就会到DNS服务器查找，链接网络之后，我们的电脑就会有对应的DNS服务器的地址，下图：</p><img src="https://user-gold-cdn.xitu.io/2019/1/5/1681c8cac99f2246?imageView2/0/w/1280/h/960/ignore-error/1" alt="img" style="zoom:33%;" /><p>本地DNS服务器一般由ISP进行维护</p><p><strong>访问本地DNS服务器</strong>，如果缓存中有映射关系，就返回；否则，访问根DNS服务器</p><hr/><p><strong>DNS服务器递归查找</strong></p><p>如果DNS服务器也没有缓存的话，那就要进行递归查找:</p><p>1、<strong>本地DNS服务器访问根DNS服务器</strong>，发现是.com结尾，返回负责.com区域对应的顶级域名服务器的IP地址</p><p>2、<strong>本地DNS服务器访问顶级域名服务器</strong>，发现microsoft.com，返回权威DNS服务器的IP地址</p><p>3、<strong>本地DNS服务器访问权威DNS服务器，</strong>最终找到域名对应的IP地址，并且缓存</p><h2 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h2><h3 id="IP地址的分配"><a href="#IP地址的分配" class="headerlink" title="IP地址的分配"></a>IP地址的分配</h3><p>IP地址可以分为：静态IP地址、动态IP地址</p><p><strong>1、静态IP地址</strong></p><ul><li>手动设置</li><li>使用场景：<strong>不挪动的台式机、服务器等</strong></li></ul><p><strong>2、动态IP地址</strong></p><ul><li>从DHCP服务器自动获取IP地址</li><li>使用场景：<strong>无线设备（无线网）、移动设备（笔记本）等</strong></li></ul><h3 id="DHCP概述"><a href="#DHCP概述" class="headerlink" title="DHCP概述"></a>DHCP概述</h3><p>1、DHCP，<strong>动态主机配置协议</strong></p><p>2、<strong>基于UDP协议，客户端是68端口，服务器是67端口</strong></p><p>3、DHCP服务器会从IP池中，挑选一个IP地址“出租”给客户端一段时间，时间到期就进行回收</p><ul><li><strong>平时上网的路由器就可以当作DHCP服务器</strong></li></ul><h3 id="DHCP分配IP地址的四个阶段"><a href="#DHCP分配IP地址的四个阶段" class="headerlink" title="DHCP分配IP地址的四个阶段"></a>DHCP分配IP地址的四个阶段</h3><p><strong>1、DISCOVER：发现服务器</strong></p><ul><li>发广播包（源IP是0.0.0.0，目标IP是255.255.255.255，目标MAC是FF:FF:FF:FF:FF:FF）</li></ul><p><strong>2、OFFER：提供租约</strong></p><ul><li>服务器返回可以租用的IP地址，以及租用期限、子网掩码、网关、DNS等信息</li></ul><p><strong>3、REQUEST：选择IP地址</strong></p><ul><li>客户端选择一个OFFER，发送广播包进行回应</li></ul><p><strong>4、ACKNOWLEDGE：确认</strong></p><ul><li>被选中的服务器发送ACK数据包给客户端</li></ul><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><p><strong>1、自动续约</strong></p><p>客户端在租期不足的时候，自动向DHCP服务器发送REQUEST信息申请续约</p><p><strong>2、DHCP可以跨网段分配IP地址吗</strong></p><p>可以使用DHCP中继代理实现</p><h1 id="应用层（二）"><a href="#应用层（二）" class="headerlink" title="应用层（二）"></a>应用层（二）</h1><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1、HTTP：超文本传输协议</p><p>2、是互联网中应用最广泛的应用层协议之一</p><p>3、基于TCP</p><p><strong>4、最初的目的：提供一种发布和接收HTML页面的方法，用URI来标识具体的资源</strong></p><ul><li><p><strong>URI</strong>：表示的是web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都由一个URI进行标识的。</p></li><li><p>URI通常由三部分组成：</p><p>①资源的命名机制；</p><p>②存放资源的主机名；</p><p>③资源自身的名称。</p></li><li><p>URI包括URL</p></li></ul><p>5、HTML：超文本标记语言</p><ul><li>可以用来编写网页</li></ul><h3 id="版本和标准"><a href="#版本和标准" class="headerlink" title="版本和标准"></a>版本和标准</h3><img src="https://img-blog.csdnimg.cn/20210326150454573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/2021032615084465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><h3 id="请求过程-1"><a href="#请求过程-1" class="headerlink" title="请求过程"></a>请求过程</h3><p>HTTP 请求的发送HTTP 协议是基于 TCP 协议的，所以它使用面向连接的方式发送请求，通过 stream 二进制流的方式传给对方。当然，到了 TCP 层，它会把二进制流变成一个个报文段发送给服务器。</p><p>在发送给每个报文段的时候，都需要对方有一个回应 ACK，来保证报文可靠地到达了对方。如果没有回应，那么 TCP 这一层会进行重新传输，直到可以到达。同一个包有可能被传了好多次，但是 HTTP 这一层不需要知道这一点，因为是 TCP 这一层在埋头苦干。</p><p>TCP 层发送每一个报文的时候，都需要加上自己的地址（即源地址）和它想要去的地方（即目标地址），将这两个信息放到 IP 头里面，交给 IP 层进行传输。</p><p>IP 层需要查看目标地址和自己是否是在同一个局域网。如果是，就发送 ARP 协议来请求这个目标地址对应的 MAC 地址，然后将源 MAC 和目标 MAC 放入 MAC 头，发送出去即可；如果不在同一个局域网，就需要发送到网关，还要需要发送 ARP 协议，来获取网关的 MAC 地址，然后将源 MAC 和网关 MAC 放入 MAC 头，发送出去。</p><p>网关收到包发现 MAC 符合，取出目标 IP 地址，根据路由协议找到下一跳的路由器，获取下一跳路由器的 MAC 地址，将包发给下一跳路由器。</p><p>这样路由器一跳一跳终于到达目标的局域网。这个时候，最后一跳的路由器能够发现，目标地址就在自己的某一个出口的局域网上。于是，在这个局域网上发送 ARP，获得这个目标地址的 MAC 地址，将包发出去。</p><p>目标的机器发现 MAC 地址符合，就将包收起来；发现 IP 地址符合，根据 IP 头中协议项，知道自己上一层是 TCP 协议，于是解析 TCP 的头，里面有序列号，需要看一看这个序列包是不是我要的，如果是就放入缓存中然后返回一个 ACK，如果不是就丢弃。</p><p>TCP 头里面还有端口号，HTTP 的服务器正在监听这个端口号。于是，目标机器自然知道是 HTTP 服务器这个进程想要这个包，于是将包发给 HTTP 服务器。HTTP 服务器的进程看到，原来这个请求是要访问一个网页，于是就把这个网页发给客户端。</p><h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h3><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><img src="https://img-blog.csdnimg.cn/20210326153914213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>1、请求行</strong></p><p>由三部分构成：<strong>方法、请求资源的URL、HTTP的版本。</strong></p><p>HTTP请求的方法主要有：<strong>GET、POST、PUT、DELETE、OPTIONS、HEAD、TRANCE、CONNECT</strong>等</p><ol><li>**GET:**想特定的资源发出请求。</li><li>**POST:**向指定的资源提交相应的数据金星焕处理请求，比如说提交表单、上传文件。数据被包含在请求实体中。</li><li>**PUT:**从客户端向服务器传送的数据取代指定的文档的内容。</li><li>**DELETE:**请求服务器删除指定的页面</li><li>**OPTIONS:**允许客户端查看服务器的性能。</li><li><strong>HEAD：</strong>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</li><li><strong>TRANS：</strong>回显服务器收到的请求，主要用于测试或诊断。</li><li>**CONNECT:**HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器。</li></ol><p><strong>2、请求头部</strong></p><p>是一个个的key-value值</p><p><strong>3、请求数据</strong></p><p>GET方法没有携带数据， POST方法会携带一个body</p><hr/><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><img src="https://img-blog.csdnimg.cn/20210326154942465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>1、请求行</strong></p><p>版本+空格+状态码+空格+短语+回车换行</p><p><strong>2、请求头</strong></p><p>是一个个的key-value值</p><p><strong>3、请求数据</strong></p><p>响应的data，本例中是一段HTML</p><hr/><h4 id="GET请求和POST请求"><a href="#GET请求和POST请求" class="headerlink" title="GET请求和POST请求"></a>GET请求和POST请求</h4><blockquote><p><strong>最直观的就是语义上的区别</strong></p></blockquote><p>1、get用来获取数据，post用来提交数据</p><p>2、get参数有长度限制（<strong>受限于url长度，具体的数值取决于浏览器和服务器的限制，最长2048字节</strong>），而post无限制。</p><p>3、<strong>get请求的数据会附加在url之后</strong> ，以 “ ？ “分割url和传输数据，多个参数用 “&amp;”连接，而p<strong>ost请求会把请求的数据放在http请求体中。</strong></p><p>4、get是明文传输，post是放在请求体中，但是开发者可以通过抓包工具看到，也相当于是明文的。</p><p>5、get请求会保存在浏览器历史记录中，还可能保存在web服务器的日志中</p><hr/><ol><li><p>get是获取数据，post是修改数据</p></li><li><p>get把请求的数据放在url上， 以?分割URL和传输数据，参数之间以&amp;相连，所以get不太安全。而post把数据放在HTTP的包体内（requrest body）</p></li><li><p>get提交的数据最大是2k（ 限制实际上取决于浏览器）， post理论上没有限制。</p></li><li><p>GET产生一个TCP数据包，浏览器会把http header和data一并发送出去，服务器响应200(返回数据); POST产生两个TCP数据包，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok(返回数据)。</p></li><li><p>GET请求会被浏览器主动缓存，而POST不会，除非手动设置。</p></li><li><p>本质区别：GET是幂等的，而POST不是幂等的</p><blockquote><p>这里的幂等性：幂等性是指一次和多次请求某一个资源应该具有同样的副作用。简单来说意味着对同一URL的多个请求应该返回同样的结果。</p></blockquote></li></ol><p>正因为它们有这样的区别，所以不应该且<strong>不能用get请求做数据的增删改这些有副作用的操作</strong>。因为get请求是幂等的，<strong>在网络不好的隧道中会尝试重试</strong>。如果用get请求增数据，会有<strong>重复操作</strong>的风险，而这种重复操作可能会导致副作用（浏览器和操作系统并不知道你会用get请求去做增操作）。</p><hr/><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>1、固定3个数字</p><p>2、用来表示当前HTTP请求是否已经成功完成</p><p><strong>3、分类：</strong></p><ul><li>100—199：信息响应</li><li>200—299：成功响应</li><li>300—399：重定向</li><li>400—499：客户端错误</li><li>500—599：服务器错误</li></ul><hr/><p><strong>1开头</strong></p><ul><li><p><strong>100：Continue</strong></p><ul><li><p>请求的初始部分已经被服务器收到，并且没有被服务器拒绝；客户端应该继续发送剩余请求，如果请求已经完成就忽略这个响应</p></li><li><p>允许客户端发送带请求体的请求前，判断服务器是否愿意接收请求（服务器通过请求头判断）</p></li><li><p>在某些情况下，如果服务器在不看请求体就拒绝连接，客户端就发送请求体是不恰当的</p></li></ul></li></ul><hr/><p><strong>2开头</strong></p><ul><li><strong>200：OK</strong><ul><li>请求成功</li></ul></li></ul><hr/><p><strong>3开头</strong></p><ul><li><p><strong>301 永久重定向</strong></p><ul><li>旧地址A的资源已经被永久地移除了（这个资源不可访问了），<strong>搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址</strong>；</li></ul></li><li><p><strong>302 临时重定向</strong></p><ul><li>请求的资源被暂时移动到了由Location指定的URL上</li><li>旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，<strong>搜索引擎会抓取新的内容而保存旧的网址。</strong></li></ul></li></ul><p>响应302，Location</p><p>请求Location</p><p>响应HTML</p><img src="https://img-blog.csdnimg.cn/20210326164102823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 33%;" /><blockquote><p>301和302的区别？</p></blockquote><p>301:</p><img src="https://img-blog.csdnimg.cn/20210326165612618.png" alt="在这里插入图片描述" style="zoom:50%;" /><p>302:</p><img src="https://img-blog.csdnimg.cn/20210326165628726.png" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li><strong>304 Not Modified</strong><ul><li>说明无需再次传输</li><li><strong>缓存里面有</strong></li></ul></li></ul><hr/><p><strong>4开头</strong></p><ul><li><strong>400 Bad Request</strong><ul><li>由于语法无效，服务器无法理解该请求<ul><li>没有传该传的数据（比如需要name和age，只有name）</li><li>请求报文的格式不正确</li></ul></li></ul></li><li><strong>401</strong> <ul><li>缺乏目标资源要求的身份验证凭证</li></ul></li><li><strong>403 Forbidden</strong><ul><li>服务器端有能力处理这个请求，但是拒绝授权访问</li></ul></li><li><strong>404 Not Found</strong><ul><li>服务器端无法找到所请求的资源</li></ul></li><li><strong>405</strong> <ul><li>服务器禁止了使用当前HTTP请求方法（get、post等）</li></ul></li><li><strong>406</strong><ul><li>服务器端无法提供与能接受指定的值所匹配的响应</li></ul></li><li><strong>408 Request TimeOut</strong><ul><li>服务器想要将没有在使用的连接关闭</li></ul></li></ul><hr/><p><strong>5开头</strong></p><ul><li><strong>500</strong><ul><li>服务器出现意外问题（比如后台出现1&#x2F;0）</li></ul></li><li><strong>501</strong><ul><li>请求的方法不被服务器支持</li><li>服务器必须支持：GET和HEAD</li></ul></li><li><strong>502 Bad Gateway</strong><ul><li>作为网关或代理角色的服务器从上游服务器接收的响应是无效的</li></ul></li><li><strong>503</strong><ul><li>服务器停机维护、已超载</li></ul></li></ul><h3 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h3><p>HTTP 1.1 在应用层以纯文本的形式进行通信。每次通信都要带完整的 HTTP 的头，而且不考虑 pipeline 模式的话，每次的过程总是像上面描述的那样一去一回。这样在实时性、并发性上都存在问题。</p><p>为了解决这些问题，HTTP 2.0 会对 HTTP 的头进行一定的压缩，将原来每次都要携带的大量 key value 在两端建立一个索引表，对相同的头只发送索引表中的索引。</p><p>另外，HTTP 2.0 协议将一个 TCP 的连接中，切分成多个流，每个流都有自己的 ID，而且流可以是客户端发往服务端，也可以是服务端发往客户端。它其实只是一个虚拟的通道。流是有优先级的。</p><p>HTTP 2.0 还将所有的传输信息分割为更小的消息和帧，并对它们采用二进制格式编码。常见的帧有 Header 帧，用于传输 Header 内容，并且会开启一个新的流。再就是 Data 帧，用来传输正文实体。多个 Data 帧属于同一个流。</p><p>通过这两种机制，HTTP 2.0 的客户端可以将多个请求分到不同的流中，然后将请求内容拆成帧，进行二进制传输。这些帧可以打散乱序发送， 然后根据每个帧首部的流标识符重新组装，并且可以根据优先级，决定优先处理哪个流的数据。</p><p>我们来举一个例子。</p><p>假设我们的一个页面要发送三个独立的请求，一个获取 css，一个获取 js，一个获取图片 jpg。如果使用 HTTP 1.1 就是串行的，但是如果使用 HTTP 2.0，就可以在一个连接里，客户端和服务端都可以同时发送多个请求或回应，而且不用按照顺序一对一对应。</p><p>HTTP 2.0 其实是将三个请求变成三个流，将数据分成帧，乱序发送到一个 TCP 连接中。</p><p>HTTP 2.0 成功解决了 HTTP 1.1 的队首阻塞问题，同时，也不需要通过 HTTP 1.x 的 pipeline 机制用多条 TCP 连接来实现并行请求与响应；减少了 TCP 连接数对服务器性能的影响，同时将页面的多个数据 css、js、 jpg 等通过一个数据链接进行传输，能够加快页面组件的传输速度。</p><h3 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h3><p><strong>请求头：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210326181328866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210326181344294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>响应头：</strong></p><img src="https://img-blog.csdnimg.cn/20210326181344294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><hr/><p><strong>1、Cookie</strong></p><ul><li>在客户端存储一些数据，存储到本地磁盘</li><li>服务器可以返回cookie交给客户端去存储</li></ul><p><strong>2、Session</strong></p><ul><li>在服务器存储一些数据，存储到内存中</li><li>Session 代表着服务器和客户端一次会话的过程。</li><li>Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</li></ul><p><strong>过程：</strong></p><ul><li><p>登录成功后，服务器为浏览器创建一个session对象（在服务器内存）</p></li><li><p>登录成功，返回响应头：set-cookie：JSESSIONID&#x3D;666，服务器希望客户端存储cookie</p></li><li><p>domain、path存储一个地址，访问这个地址的时候就会带上对应的cookie</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210326201233747.png" alt="在这里插入图片描述"></p><ul><li>浏览器就获得了cookie</li><li>浏览器发出请求头：cookie：JSESSIONID&#x3D;666</li></ul><p><img src="https://img-blog.csdnimg.cn/20210326201348819.png" alt="在这里插入图片描述"></p><ul><li>服务器发现请求中有cookie，JSESSIONID相同，说明这个浏览器成功登陆过，就会返回user的json数据</li></ul><hr/><blockquote><p><strong>什么是 Cookie？</strong></p></blockquote><p>HTTP Cookie（也叫 Web Cookie或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p><p>通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p><p>Cookie 主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><hr/><blockquote><p><strong>什么是 Session？</strong></p></blockquote><p>Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</p><hr/><blockquote><p><strong>Cookie 和 Session 有什么不同？</strong></p></blockquote><p><strong>1、作用范围不同</strong></p><ul><li>Cookie 保存在客户端（浏览器）</li><li>Session 保存在服务器端。</li></ul><p><strong>2、存取方式的不同</strong></p><ul><li>Cookie 只能保存 ASCII</li><li>Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li></ul><p><strong>3、有效期不同</strong></p><ul><li>Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能</li><li>Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li></ul><p><strong>4、隐私策略不同</strong></p><ul><li>Cookie 存储在客户端，比较容易遭到不法获取，早期有人将用户的登录名和密码存储在 Cookie 中导致信息被窃取；</li><li>Session 存储在服务端，安全性相对 Cookie 要好一些。</li></ul><p><strong>5、存储大小不同</strong></p><ul><li>单个 Cookie 保存的数据不能超过 4K</li><li>Session 可存储数据远高于 Cookie。</li></ul><hr/><blockquote><p><strong>为什么需要 Cookie 和 Session，他们有什么关联？</strong></p></blockquote><p>说起来为什么需要 Cookie ，这就需要从浏览器开始说起，我们都知道浏览器是没有状态的(HTTP 协议无状态)，这意味着浏览器并不知道是张三还是李四在和服务端打交道。这个时候就需要有一个机制来告诉服务端，本次操作用户是否登录，是哪个用户在执行的操作，那这套机制的实现就需要 Cookie 和 Session 的配合。<br>那么 Cookie 和 Session 是如何配合的呢？</p><p><img src="https://pic4.zhimg.com/80/v2-a0fca9a4e7b2197de6ade0c62e2a6ba7_1440w.jpg" alt="img"></p><p>1、用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建创建对应的 Session ，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。</p><p>2、当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</p><p>根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态。</p><hr/><blockquote><p><strong>禁用Cookie后，怎么办</strong></p></blockquote><p>既然服务端是根据 Cookie 中的信息判断用户是否登录，那么如果浏览器中禁止了 Cookie，如何保障整个机制的正常运转。</p><p>第一种方案，每次请求中都携带一个 SessionID 的参数，也可以 Post 的方式提交，也可以在请求的地址后面拼接 xxx?SessionID&#x3D;123456…。</p><p>第二种方案，Token 机制。Token 机制多用于 App 客户端和服务器交互的模式，也可以用于 Web 端做用户状态管理。</p><p>Token 的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。Token 机制和 Cookie 和 Session 的使用机制比较类似。</p><p>当用户第一次登录后，服务器根据提交的用户信息生成一个 Token，响应时将 Token 返回给客户端，以后客户端只需带上这个 Token 前来请求数据即可，无需再次登录验证。</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><h4 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h4><p>特点：</p><ul><li><p>本身不生产内容</p></li><li><p>处于中间位置转发上下游的请求和响应</p><ul><li>面向下游的客户端：它是服务器</li><li>面向上游的服务器：它是客户端</li></ul></li></ul><h4 id="正向代理、反向代理"><a href="#正向代理、反向代理" class="headerlink" title="正向代理、反向代理"></a>正向代理、反向代理</h4><p>正向代理：代理的对象是客户端</p><p>反向代理：代理的对象是服务器</p><img src="https://img-blog.csdnimg.cn/20210326202714905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>正向代理</strong></p><p>作用：</p><ul><li>隐藏客户端身份</li><li>绕过防火墙（突破访问限制）</li><li>Internet访问控制</li></ul><hr/><p><strong>反向代理</strong></p><ul><li>隐藏服务器身份</li><li>安全防护</li><li>负载均衡</li></ul><h4 id="相关的头部字段"><a href="#相关的头部字段" class="headerlink" title="相关的头部字段"></a>相关的头部字段</h4><p><strong>1、via</strong></p><p>追加经过的每一台代理服务器的主机名</p><p><strong>2、x-Forwarded-For</strong></p><p>追加请求方的IP地址</p><p><strong>3、x-Real-IP</strong></p><p>客户端的真实IP地址</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>内容分发网络</p><p><strong>利用最靠近每一位用户的服务器，更快更可靠的把音乐、视频、图片等资源文件传递给用户</strong></p><img src="https://img-blog.csdnimg.cn/20210326205948174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210326210507170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p><strong>Memory Cache 、Disk Cache</strong></p><p><img src="https://img-blog.csdnimg.cn/20210327142741546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>通常会缓存的情况：GET请求+静态资源（HTML、CSS等）</strong></p><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>1、Pragma：作用类似于Cache-Control，HTTP&#x2F;1.0的产物</p><p>2、Expires：缓存的过期时间，HTTP&#x2F;1.0的产物</p><p><strong>3、Cache-Control：设置缓存策略</strong></p><ul><li><strong>no-storage</strong>：不允许缓存</li><li>public：允许用户、代理服务器缓存数据到本地</li><li>private：只允许用户缓存数据到本地</li><li><strong>max-age</strong>：缓存的有效时间（多长时间不过期），单位秒</li><li><strong>no-Cache</strong>：允许缓存，每次需要发请求询问是否是最新版本，再决定如何使用缓存</li></ul><blockquote><p> 优先级：Pragme &gt; Cache-Control &gt; Expires</p></blockquote><p><strong>4、last-Modified：</strong>资源的最后一次修改时间</p><p><strong>5、ETag：</strong>资源唯一标识，是一个摘要值</p><blockquote><p>优先级：ETag &gt; last-Modified</p></blockquote><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p><strong>1、If-None-Match</strong>：如果上一次的响应头中有ETag，就会将ETag的值最为请求头的值</p><ul><li>如果服务器发现资源的最新摘要值和If-None-Match不匹配就会返回新的资源（200）</li><li>否则，不会返回资源的具体数据（304）</li></ul><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81MjQyMTI1LTYzYWU2YzM4MjNjYzUzOGUucG5n?x-oss-process=image/format,png" alt="Etag" style="zoom:50%;" /><p><strong>2、If-Modified-since</strong>：与last-Modified配合使用</p><ul><li>如果上一次的响应头中没有ETag，有last-Modified，就会把这个作为请求头的值</li><li>如果服务器发现最后一次修改时间晚（200）</li><li>否则（304）</li></ul><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy81MjQyMTI1LWNlNWZjYjg0YTQ3ZGUyODUucG5n?x-oss-process=image/format,png" alt="Last-Modified" style="zoom:53%;" /><blockquote><p>为什么需要两个？</p></blockquote><p>last-Modified的缺陷：</p><ul><li>只能精确到秒级别</li><li>如果某些文件修改时间发生变化，但是内容没有变化</li></ul><h4 id="缓存的使用流程"><a href="#缓存的使用流程" class="headerlink" title="缓存的使用流程"></a>缓存的使用流程</h4><p>强制缓存：cache-control</p><p>对比缓存：no-cache</p><img src="https://img-blog.csdnimg.cn/20210327145548961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><p>过程：</p><p>1、第一次</p><ul><li>请求服务器</li><li>如果服务器响应的cache-control不是no-storage就将<strong>数据和缓存标识</strong>缓存到本地，否则不缓存</li></ul><p>2、后续</p><ul><li>本地有缓存，查看响应头的cache-control是不是no-cache</li><li>如果不是no-cache，就不需要进行对比缓存，判断缓存是否过期</li><li>如果缓存没有过期就可以直接使用本地缓存</li><li>如果缓存过期了或者响应头不是no-cache，就查看响应头是否有ETag，如果有就向服务器发起请求，请求头为if-none-match，如果服务器发现不匹配就返回200，匹配就返回304</li><li>如果响应头没有ETag，查看是否有last-modified，如果有就向服务器发起请求，请求头包括if-modified-since，如果服务器发现不匹配就200，匹配就返回3 04</li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><h4 id="说一下一次完整的HTTP请求过程包括哪些内容？"><a href="#说一下一次完整的HTTP请求过程包括哪些内容？" class="headerlink" title="说一下一次完整的HTTP请求过程包括哪些内容？"></a>说一下一次完整的HTTP请求过程包括哪些内容？</h4><h5 id="第一种回答"><a href="#第一种回答" class="headerlink" title="第一种回答"></a>第一种回答</h5><ul><li>建立起客户机和服务器连接。 </li><li>建立连接后，客户机发送一个请求给服务器。 </li><li>服务器收到请求给予响应信息。 </li><li>客户端浏览器将返回的内容解析并呈现，断开连接。</li></ul><h5 id="第二种回答"><a href="#第二种回答" class="headerlink" title="第二种回答"></a>第二种回答</h5><p>域名解析 –&gt; 发起TCP的3次握手 –&gt; 建立TCP连接后发起http请求 –&gt; 服务器响应http请求，浏览器得到html代码 –&gt; 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） –&gt; 浏览器对页面进行渲染呈现给用户。</p><h1 id="应用层（三）"><a href="#应用层（三）" class="headerlink" title="应用层（三）"></a>应用层（三）</h1><h2 id="安全威胁"><a href="#安全威胁" class="headerlink" title="安全威胁"></a>安全威胁</h2><h3 id="网络层—ARP欺骗"><a href="#网络层—ARP欺骗" class="headerlink" title="网络层—ARP欺骗"></a>网络层—ARP欺骗</h3><p>1、ARP欺骗，又称ARP毒化、ARP攻击</p><p>2、ARP欺骗可以造成的效果</p><ul><li>让攻击者获取局域网上的数据包甚至篡改数据包</li><li>让网络上特定电脑之间无法通信</li><li>让送至特点IP地址的流量被错误发送到攻击者所取代的地方</li></ul><p><strong>3、核心步骤</strong></p><img src="https://img-blog.csdnimg.cn/202103262121372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="DoS、DDoS"><a href="#DoS、DDoS" class="headerlink" title="DoS、DDoS"></a>DoS、DDoS</h3><p>1、<strong>DoS攻击：拒绝服务攻击</strong></p><ul><li>使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其他正常用户无法访问</li><li><strong>分为两大类</strong><ul><li>带宽消耗型：UDP洪水攻击、ICMP洪水攻击</li><li>资源消耗型：SYN洪水攻击、LAND洪水攻击</li></ul></li></ul><p>2、<strong>DDoS攻击：分布式拒绝服务攻击</strong></p><ul><li>黑客使用网络上两个或者以上被攻陷的电脑作为僵尸，向特定目标发动DoS攻击</li><li>2018年3月GitHub受到了最大的DDoS攻击</li></ul><p>3、<strong>Dos攻击分为两大类</strong></p><ul><li><strong>带宽消耗型：</strong>UDP洪水攻击（不断扔UDP数据包）、ICMP洪水攻击</li><li><strong>资源消耗型：</strong>SYN洪水攻击、LAND攻击</li></ul><h4 id="SYN洪水攻击"><a href="#SYN洪水攻击" class="headerlink" title="SYN洪水攻击"></a>SYN洪水攻击</h4><p>攻击者发送一系列的SYN请求到目标，然后让目标因为收不到ACK（第三次握手）而等待、消耗资源</p><p><strong>攻击方法</strong></p><ul><li>跳过发送最后的ACK信息</li><li>修改源IP地址，让目标发送SYN-ACK到伪造的IP地址，因此目标永远不可能收到ACK（第三次握手）</li></ul><h4 id="LAND攻击"><a href="#LAND攻击" class="headerlink" title="LAND攻击"></a>LAND攻击</h4><p>局域网拒绝服务攻击</p><p><strong>通过持续发送相同源地址和目标地址的欺骗数据包，使目标试图和自己建立连接，消耗系统资源至崩溃</strong></p><h4 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h4><p>入侵检测、流量过滤、多重验证</p><ul><li>堵塞网络带宽的流量将被过滤，正常流量可以通过</li></ul><p>防火墙</p><ul><li>设置规则，允许或者拒绝特定的通讯协议</li></ul><p>黑洞引导</p><ul><li>将所有受攻击计算机的通信全部发送到一个黑洞（空接口或者不存在的计算机地址）</li></ul><h3 id="应用层—DNS劫持"><a href="#应用层—DNS劫持" class="headerlink" title="应用层—DNS劫持"></a>应用层—DNS劫持</h3><p>攻击者篡改某个域名的解析结果，使得指向该域名的IP变成了另外一个IP</p><p>导致对相应网址的访问被劫持到另外一个不可达或者假冒的网址</p><p>从而实现非法窃取用户信息或者破坏正常网络服务的目的</p><img src="https://img-blog.csdnimg.cn/20210327095253569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="HTTP协议的安全问题"><a href="#HTTP协议的安全问题" class="headerlink" title="HTTP协议的安全问题"></a>HTTP协议的安全问题</h3><p>1、默认采用<strong>明文传输</strong>，因此会有很大的安全隐患</p><ul><li>常见的提高安全性的方法：对通信内容进行加密后再进行传输</li></ul><p>2、<strong>常见加密</strong></p><ul><li>不可逆<ul><li>单向散列函数：MD5、SHA</li></ul></li><li>可逆<ul><li>对称加密</li><li>非对称加密</li></ul></li><li>其他<ul><li>混合密码系统</li><li>数字签名</li><li>证书</li></ul></li></ul><h2 id="单向散列函数"><a href="#单向散列函数" class="headerlink" title="单向散列函数"></a>单向散列函数</h2><p>根据消息内容计算出散列值</p><p>散列值的长度和消息的长度无关，无论消息多大都会计算出固定长度的散列值</p><p><strong>特点：根据任意长度的消息计算出固定长度的散列值</strong></p><img src="https://img-blog.csdnimg.cn/20210327092529941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>1、单向散列函数也被称为<strong>消息摘要函数、哈希函数</strong></p><p>输出的散列值也被称为<strong>消息摘要、指纹</strong></p><p>2、常见的几种单向散列函数</p><ul><li><p>MD4、MD5</p><ul><li>产生128bit的散列值，现在已经不安全</li></ul></li><li><p>SHA-1</p><ul><li>产生160bit散列值，现在已经不安全</li></ul></li><li><p>SHA-2</p><ul><li>SHA-256、SHA-384、SHA-512</li></ul></li><li><p>SHA-3</p></li></ul><p><strong>3、应用：防止数据被篡改</strong></p><img src="https://img-blog.csdnimg.cn/20210327093353312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>4、应用：密码加密</strong></p><img src="https://img-blog.csdnimg.cn/20210327093559218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="对称加密（对称密码）"><a href="#对称加密（对称密码）" class="headerlink" title="对称加密（对称密码）"></a>对称加密（对称密码）</h2><p><strong>对称密码中，加密用的密钥和解密用的密钥相同</strong></p><img src="https://img-blog.csdnimg.cn/20210327095940974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>常见的对称加密算法：</p><ul><li>DES</li><li>3DES</li><li>AES</li></ul><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><p><img src="https://img-blog.csdnimg.cn/20210327100455939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1、DES是一种<strong>将64bit明文加密成64bit密文的对称加密算法，密钥长度56bit</strong></p><p>2、密钥长度64bit，但是每隔7bit会设置一个用于错误检查的bit，因此密钥长度实质上56bit</p><p><strong>3、由于DES每次只能加密64bit数据，所以加密长数据需要反复加密</strong></p><h3 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h3><p>将DES重复3次所得到的一种密码算法</p><ul><li>三重DES并不少进行三次DES加密，而是<strong>加密、解密、加密的过程</strong></li></ul><img src="https://img-blog.csdnimg.cn/20210327100750176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>3个密钥都是不同的，也被称为DES-EDE3</p><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><p><strong>取代DES成为新标准的一种对称加密算法</strong></p><p>AES密钥长度有128、192、256bit三种</p><h2 id="非对称加密（公钥密码）"><a href="#非对称加密（公钥密码）" class="headerlink" title="非对称加密（公钥密码）"></a>非对称加密（公钥密码）</h2><p><strong>公钥密码中，加密用的密钥和解密用的密钥不同</strong></p><img src="https://img-blog.csdnimg.cn/20210327102342308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>1、<strong>加密密钥</strong>：一般是公开的，因此该密钥称为<strong>公钥</strong></p><ul><li>因此，非对称加密也被称为<strong>公钥密码</strong></li></ul><p><strong>解密密钥</strong>：不能公开，由消息接受者保管，不能公开，因此称为<strong>私钥</strong></p><p>2、<strong>用对方的公钥进行加密，对方用自己的私钥解密</strong></p><p>3、公钥和私钥是一一对应的，不能单独生成</p><ul><li>一对公钥和私钥称为<strong>密钥对</strong></li></ul><p>4、由公钥加密的密文，必须使用对应的私钥才能解密</p><p>5、由私钥加密的密文，必须使用与该私钥对应的公钥才能加密（<strong>也可以使用私钥加密</strong>）</p><h3 id="解决密钥配送问题"><a href="#解决密钥配送问题" class="headerlink" title="解决密钥配送问题"></a>解决密钥配送问题</h3><p>1、由消息的接受者，生成一对公钥、私钥</p><p>2、将公钥发给消息的发送者</p><p>3、消息的发送者使用公钥加密消息</p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>对广泛使用的非对称加密算法</p><h2 id="混合密码系统"><a href="#混合密码系统" class="headerlink" title="混合密码系统"></a>混合密码系统</h2><p>非对称加密：复杂、安全、加密解密速度慢</p><p>对称加密：简单、不安全、加密解密速度快</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p><strong>1、会话密钥</strong></p><ul><li>本次通信随机生成的临时密钥</li><li>作为对称加密的密钥，用于加密消息，提高速度</li></ul><p>2、加密步骤</p><img src="https://img-blog.csdnimg.cn/20210327105238231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li>生成一个<strong>随机的会话密钥</strong></li><li>用这个会话密钥<strong>对消息进行对称加密</strong></li><li>使用接受者的公钥<strong>对会话密钥进行非对称加密</strong></li><li>将非对称加密的会话密钥和对称加密的消息组合发给接受者</li></ul><p>发出去的内容：</p><ul><li>非对称加密的会话密钥</li><li>对称加密的消息</li></ul><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><img src="https://img-blog.csdnimg.cn/20210327105533375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%;" /><p>过程：</p><ul><li>使用私钥解密会话密钥</li><li>使用解密后的会话密钥解密消息</li></ul><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><blockquote><p> 问题：发送方发送的消息可能是被篡改的，或者是它发的但是它可以否认</p></blockquote><p>数字签名不是用来加密的，是用来保证数据可靠性的</p><p>1、在数字签名技术中，有2种行为：</p><ul><li><strong>生成签名</strong><ul><li>由消息的发送者完成，通过“<strong>签名密钥</strong>”生成</li></ul></li><li><strong>验证签名</strong><ul><li>由消息的接收者完成，通过“<strong>验证密钥”</strong>生成</li></ul></li></ul><p>2、如何保证签名是消息发送者自己签的？</p><ul><li>用消息发送者的私钥进行签名</li></ul><img src="https://img-blog.csdnimg.cn/20210327110613853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>过程：</p><ul><li>发送方发送<strong>消息的明文</strong></li><li>发送方使用私钥<strong>加密消息生成签名</strong></li><li>接收方使用<strong>公钥解密签名获得消息</strong></li><li>将这个消息和明文消息进行比较</li></ul><h3 id="过程改进"><a href="#过程改进" class="headerlink" title="过程改进"></a>过程改进</h3><p>结合<strong>单向散列函数</strong></p><img src="https://img-blog.csdnimg.cn/20210327130326903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>过程：</p><ul><li>使用单向散列函数<strong>将明文消息转为散列值</strong></li><li>使用私钥<strong>加密散列值生成签名</strong></li><li>发送签名和消息明文</li><li>接收方使用单向散列函数<strong>将消息转为散列值</strong></li><li>接收方使用<strong>公钥解密签名生成散列值</strong></li><li>比对散列值</li></ul><h3 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h3><blockquote><p> 数字签名不能保证机密性？</p></blockquote><p>数字签名的作用不是为了保证机密性，是为了识别内容没有被篡改</p><blockquote><p>数字签名的作用？</p></blockquote><ul><li>确认消息的完整性</li><li>识别消息是否被篡改</li><li>防止消息发送人否认</li></ul><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><blockquote><p>为了解决有人攻击发送的公钥，证书可以保证公钥一定是这个人的</p></blockquote><p><strong>公钥证书（PKC）</strong></p><ul><li>里面有姓名、邮箱等个人信息，<strong>以及此人的公钥</strong></li><li>由<strong>认证机构（CA）</strong>施加数字签名（使用私钥进行数字签名，所以无法伪造）</li></ul><img src="https://img-blog.csdnimg.cn/20210327113251413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>过程：</p><ul><li>接受者生成密钥对</li><li>接受者在CA注册自己的公钥，CA用自己的私钥对这个公钥施加数字签名并生成证书（生成证书）</li><li>消息的发送者使用CA的公钥进行验证数字签名，确认接受者发来的公钥是正确的（验证证书）</li><li>开始非对称加密</li></ul><h3 id="注册和下载"><a href="#注册和下载" class="headerlink" title="注册和下载"></a>注册和下载</h3><img src="https://img-blog.csdnimg.cn/20210327113238209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:53%;" /><p>各大CA的公钥，默认被内置在浏览器和操作系统中，不需要考虑CA公钥的合法性</p><h1 id="应用层（四）"><a href="#应用层（四）" class="headerlink" title="应用层（四）"></a>应用层（四）</h1><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>1、<strong>超文本传输安全协议</strong></p><p>2、常称为：HTTP over TLS、HTTP over SSL、HTTP Secure</p><p>3、现在在浏览器输入<code>http://www.baidu.com</code>会自动重定向到<code>https://www.baidu.com</code></p><img src="https://img-blog.csdnimg.cn/2021032713073160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><h3 id="SSL-x2F-TLS"><a href="#SSL-x2F-TLS" class="headerlink" title="SSL&#x2F;TLS"></a>SSL&#x2F;TLS</h3><p><strong>HTTPS是在HTTP基础上使用SSL&#x2F;TLS来加密报文，对窃听和中间人攻击提供合理的防护</strong></p><img src="https://img-blog.csdnimg.cn/20210327131115875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>SSL&#x2F;TLS也可以使用到其他协议上，比如：</p><ul><li>FTP-&gt;FTPS</li><li>SMTP-&gt;SMTPS</li></ul><p><strong>1、TLS（Transport Layer Security）：传输层安全协议</strong></p><ul><li>前身是SSL（Secure Socket Layers）：安全套接层</li></ul><p>2、历史版本</p><ul><li>SSL 1.0</li><li>SSL 2.0</li><li>SSL 1.3（2018年）</li></ul><blockquote><p>SSL&#x2F;TLS工作在哪一层？</p></blockquote><p>在应用层和传输层之间</p><h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><p><strong>是SSL&#x2F;TLS协议的开源实现</strong></p><p>Linux、MAC自带OpenSSL</p><p>常用指令：</p><ul><li>生成私钥：openssl genres -out mj.key</li><li>生成公钥：openssl rsa -in mj.key -pubout</li></ul><h3 id="HTTPS的成本"><a href="#HTTPS的成本" class="headerlink" title="HTTPS的成本"></a>HTTPS的成本</h3><p>1、证书的费用</p><p>2、加解密计算</p><p>3、降低访问速度</p><p>有些企业的做法：包含敏感数据的请求才使用HTTPS，其他保持使用HTTP</p><h3 id="HTTPS通信过程"><a href="#HTTPS通信过程" class="headerlink" title="HTTPS通信过程"></a>HTTPS通信过程</h3><p>三大阶段：</p><ul><li>TCP的三次握手</li><li>TLS的连接</li><li>HTTP的请求和响应</li></ul><h3 id="TLS-1-2的连接"><a href="#TLS-1-2的连接" class="headerlink" title="TLS 1.2的连接"></a>TLS 1.2的连接</h3><p>大概10个步骤</p><h4 id="1、Client-Hello"><a href="#1、Client-Hello" class="headerlink" title="1、Client Hello"></a><strong>1、Client Hello</strong></h4><p>客户端发给服务器</p><ul><li>TLS版本号</li><li>支持的加密组件列表（使用的加密算法及密钥长度等）</li><li>一个随机数</li></ul><img src="https://img-blog.csdnimg.cn/20210415224744539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><h4 id="2、Server-Hello"><a href="#2、Server-Hello" class="headerlink" title="2、Server Hello"></a>2、Server Hello</h4><p>服务器发给客户端</p><ul><li>TLS版本</li><li>选择的加密组件（从第一步的组件列表挑选出来的）</li><li>一个随机数</li></ul><h4 id="3、certificate"><a href="#3、certificate" class="headerlink" title="3、certificate"></a>3、certificate</h4><p>服务器发给客户端</p><ul><li>服务器的公钥证书（被CA签名过）</li></ul><h4 id="4、server-key-exchange"><a href="#4、server-key-exchange" class="headerlink" title="4、server key exchange"></a>4、server key exchange</h4><p>服务器发给客户端</p><ul><li>用以实现DCDHE算法的其中一个参数（server Params）<ul><li>DCDHE是一种密钥交换算法</li><li>为了防止伪造，server Params经过私钥签名</li></ul></li></ul><h4 id="5、Server-Hello-Done"><a href="#5、Server-Hello-Done" class="headerlink" title="5、Server Hello Done"></a>5、Server Hello Done</h4><p>服务器发给客户端</p><ul><li>告诉客户端：协商结束</li></ul><p><strong>目前为止，客户端和服务器之间通过明文共享了：</strong></p><ul><li>客户端：TLS版本、加密组件列表、<strong>随机数（Clinet Random）</strong></li><li>服务器：TLS版本、选择的加密组件、<strong>随机数（Server Random）</strong>、公钥证书、<strong>实现密钥交换算法的参数（Server Params）</strong></li></ul><h4 id="6、Client-Key-Exchange"><a href="#6、Client-Key-Exchange" class="headerlink" title="6、Client Key Exchange"></a>6、Client Key Exchange</h4><p>客户端发给服务器</p><ul><li>用以实现DCDHE算法的其中一个参数（client Params）</li></ul><p><strong>目前为止，客户端和服务器都拥有了ECDHE算法需要的2个参数：Server Params、client Params</strong></p><p>客户端、服务器都可以使用ECDHE算法</p><ul><li>根据Server Params、client Params计算新的<strong>随机密钥串：Pre-master secret</strong></li><li><strong>然后结合Clinet Random、Server Random、Pre-master secret生成用来加密会话的会话密钥</strong></li></ul><h4 id="7、change-cipher-spec"><a href="#7、change-cipher-spec" class="headerlink" title="7、change cipher spec"></a>7、change cipher spec</h4><p>客户端发给服务器</p><ul><li>告知服务器：之后的通信会采用会话密钥进行加密</li></ul><h4 id="8、Finished"><a href="#8、Finished" class="headerlink" title="8、Finished"></a>8、Finished</h4><p>客户端发给服务器</p><ul><li>包含连接至今全部报文的<strong>整体校验值</strong>（摘要值），加密之后发送给服务器</li></ul><p>这次握手协商是否成功，以服务器是否能够正确解密改报文为判定标准</p><h4 id="9、Change-Cipher-spec"><a href="#9、Change-Cipher-spec" class="headerlink" title="9、Change Cipher spec"></a>9、Change Cipher spec</h4><p>服务器发给客户端</p><h4 id="10、Finished"><a href="#10、Finished" class="headerlink" title="10、Finished"></a>10、Finished</h4><p>服务器发给客户端</p><ul><li>到此为止，客户端服务器验证加密解密没问题，握手正式结束</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><img src="https://img-blog.csdnimg.cn/20210415231618520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 60%;" /><p>1、客户端给服务器</p><ul><li>TLS版本</li><li>支持的加密套件列表</li><li>随机数（Clinet Random）</li></ul><p>2、服务器给客户端</p><ul><li>TLS版本+选中的加密套件+随机数（Server Random）</li><li>公钥证书</li><li>密钥交换算法的参数（Server Params）</li><li>协商结束</li></ul><p>3、客户端给服务器</p><ul><li>验证证书是否有问题</li><li>client key exchange：密钥交换算法的参数（ClientParams），利用Server Params和Client Params生成随机数Pre-master secret，<strong>三个随机数生成会话密钥</strong></li><li>change Cipher Spec ：告诉服务器我要使用会话密钥加密了</li><li>finished：发送一个加密的摘要值</li></ul><p>4、服务器给客户端</p><ul><li>告诉服务器加密解密成功</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/01/20/Linux/"/>
      <url>/2022/01/20/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><img src="https://img-blog.csdnimg.cn/2d65e96d459e4040834fd2e6fc4324b3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>1、中断事件</strong></p><ul><li>输入设备驱动其实就是客户对接员。有时候新插上一个鼠标的时候，会弹出一个通知你安装驱动，这就是操作系统这家外包公司给你配备对接人员呢。当客户告诉对接员需求的时候，对于操作系统来讲，输入设备会发送一个中断。客户肯定希望外包公司把正在做的事情都停下来服务它。所以，<strong>这个时候客户发送的需求就被称为中断事件（Interrupt Event）</strong></li></ul><p><strong>2、文件管理子系统</strong></p><ul><li>管理文件系统</li></ul><p><strong>3、程序</strong></p><ul><li>QQ的二进制文件</li></ul><p><strong>4、系统调用</strong></p><ul><li>把权限敏感的操作，放到操作系统内核中，只能由操作系统来执行。进程如果需要执行，就通过<strong>系统调用</strong>。这样的话，这些敏感操作就收拢到操作系统层面，方便安全的把控等</li></ul><p><strong>5、进程管理子系统</strong></p><ul><li>管理进程的执行</li></ul><p><strong>6、内存管理子系统</strong></p><ul><li>在操作系统中，不同的进程有不同的内存空间，但是整个电脑内存就这么点儿，所以需要统一的管理和分配，这就需要内存管理子系统（Memory Management Subsystem）。</li></ul><img src="https://img-blog.csdnimg.cn/281ac4ab008e4537bea92519b7e629cc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p><img src="https://img-blog.csdnimg.cn/891166ceab7748c7bda94f6ace4062a4.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p><img src="https://img-blog.csdnimg.cn/7e3185fa7bf14cecabb13bfc559eafcc.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>1、创建进程：<code>fork</code></p><ul><li>在 Linux 里要创建一个新的进程，需要一个老的进程调用 fork 来实现，其中老的进程叫作<strong>父进程</strong>（Parent Process），新的进程叫作<strong>子进程</strong>（Child Process）</li><li>当父进程调用<code> fork</code> 创建进程的时候，子进程将各个子系统为父进程创建的数据结构也全部拷贝了一份，甚至连程序代码也是拷贝过来的</li></ul><blockquote><p>既然fork是复制，就说明父进程和子进程在用户态的代码段是一模一样的，如果fork这个系统调用后面的语句都是A，则无论是父进程，还是子进程都是接下来要执行A的。</p><p>好在fork是一个系统调用，刚从内核返回的时候，由于<strong>内核是能够区分父进程和子进程</strong>的，因而用户态的程序代码里面，往往<strong>通过这个返回值来判断自己是父进程还是子进程</strong>，因为子进程如果不判断一下，是不知道自己是子进程的。这和CPU执行权也没有关系。就是代码执行完fork以后，由于父子进程的代码是一模一样的，父进程和子进程都不知道自己是哪一个，但是判断返回值就知道了。</p></blockquote><p>2、操作系统在启动的时候先创建一个所有用户进程的“<strong>祖宗进程</strong>”</p><ul><li>进程id为1的init进程是<strong>用户态所有进程的祖宗</strong></li><li>进程id为2的kthread是<strong>内核态所有进程的祖宗</strong></li></ul><p>3、父进程查看子进程运行情况：<code>waitpid</code></p><ul><li>父进程可以调用它，将子进程的进程号作为参数传给它，这样父进程就知道子进程运行完了没有，成功与否。</li></ul><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>1、每个进程都有自己的内存，互相之间不干扰，有独立的进程内存空间</p><ul><li><strong>代码段</strong>：对于进程的内存空间来讲，放程序代码的这部分，我们称为代码段（Code Segment）</li><li><strong>数据段</strong>：对于进程的内存空间来讲，放进程运行中产生数据的这部分，我们称为数据段（Data Segment）<ul><li>其中局部变量的部分，在当前函数执行的时候起作用，当进入另一个函数时，这个变量就释放了；也有动态分配的，会较长时间保存，指明才销毁的，这部分称为<strong>堆</strong>（Heap）。</li></ul></li></ul><p>2、进程自己不用的部分就不用管，只有进程要去使用部分内存的时候，才会使用内存管理的系统调用来登记，说自己马上就要用了，希望分配一部分内存给它，但是这还不代表真的就对应到了物理内存。<strong>只有真的写入数据的时候，发现没有对应物理内存，才会触发一个中断，现分配物理内存。</strong></p><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><p>1、对于已经有的文件，可以使用<code>open</code>打开这个文件，<code>close</code>关闭这个文件；</p><p>2、对于没有的文件，可以使用<code>creat</code>创建文件；</p><p>3、打开文件以后，可以使用<code>lseek</code>跳到文件的某个位置；</p><p>4、可以对文件的内容进行读写，读的系统调用是<code>read</code>，写是<code>write</code>。</p><p>5、一切皆文件，每个文件，Linux 都会分配一个<strong>文件描述符（File Descriptor）</strong>，这是一个整数。<strong>有了这个文件描述符，我们就可以使用系统调用，查看或者干预进程运行的方方面面。</strong></p><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p><strong>1、消息队列</strong></p><ul><li>发送不需要一段很长的数据，这种方式称为消息队列（Message Queue）。由于一个公司内的多个项目组沟通时，这个消息队列是在内核里的，我们可以通过<code>msgget</code>创建一个新的队列，<code>msgsnd</code>将消息发送到消息队列，而消息接收方可以使用<code>msgrcv</code>从队列中取消息。</li></ul><p><strong>2、共享内存</strong></p><ul><li>当两个项目组需要<strong>交互的信息比较大</strong>的时候，可以使用共享内存的方式，也即两个项目组共享一个会议室（这样数据就不需要拷贝来拷贝去）。大家都到这个会议室来，就可以完成沟通了。这时候，我们可以通过<code>shmget</code>创建一个共享内存块，通过<code>shmat</code>将共享内存映射到自己的内存空间，然后就可以读写了。</li></ul><p><strong>3、信号量</strong></p><ul><li>如果大家同时修改同一块数据咋办？这就需要有一种方式，让不同的人能够排他地访问，这就是信号量的机制 Semaphore。</li></ul><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><p>1、网络服务是通过套接字 <strong>Socket</strong> 来提供服务的。Socket 这个名字很有意思，可以作“插口”或者“插槽”讲。虽然我们是写软件程序，但是你可以想象成弄一根网线，一头插在客户端，一头插在服务端，然后进行通信。因此，在通信之前，双方都要建立一个 Socket。</p><p>2、我们可以通过 <code>Socket </code>系统调用建立一个 Socket。<strong>Socket 也是一个文件，也有一个文件描述符，也可以通过读写函数进行通信。</strong></p><h1 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h1><h2 id="X86架构"><a href="#X86架构" class="headerlink" title="X86架构"></a>X86架构</h2><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><img src="https://img-blog.csdnimg.cn/2f1f8db4217a43cd9741dad161678ed9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>1、计算机工作模式</p><ul><li><strong>CPU（Central Processing Unit，中央处理器）</strong></li><li><strong>总线（Bus）</strong><ul><li>CPU 和其他设备连接，要靠总线（Bus），其实就是主板上密密麻麻的集成电路，这些东西组成了 CPU 和其他设备的高速通道</li></ul></li><li><strong>内存（Memory）</strong><ul><li>单靠 CPU 是没办法完成计算任务的，很多复杂的计算任务都需要将中间结果保存下来，然后基于中间结果进行进一步的计算。CPU 本身没办法保存这么多中间结果，这就要依赖内存了</li></ul></li><li><strong>其他设备</strong><ul><li>总线上还有一些其他设备，例如显卡会连接显示器、磁盘控制器会连接硬盘、USB 控制器会连接键盘和鼠标等等</li></ul></li></ul><p><strong>2、CPU的构造</strong></p><ul><li><p>CPU包括三个部分：运算单元、数据单元、控制单元</p><ul><li><strong>运算单元</strong>：负责算，如加法、位移等，它不知道应该算哪些数据，运算结果放在哪里</li><li><strong>数据单元</strong>：暂时存放数据和运算结果，包括CPU内部的缓存和寄存器组</li><li><strong>控制单元</strong>：统一的指挥中心，获得下一条指令，然后执行下一条指令</li></ul><img src="https://img-blog.csdnimg.cn/942a2e1b3c774d0ca2a9161c30ff9f28.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /></li></ul><p><strong>3、进程的内存结构</strong></p><p>进程一旦运行，如上图进程A和进程B会有独立的<strong>内存空间</strong>，互相隔离</p><ul><li><strong>代码段</strong>：程序会分别加载到进程A和进程B的内存空间，形成各自的代码段</li><li><strong>数据段</strong>：程序运行过程中要操作的数据和产生的计算结果，放在数据段里</li></ul><p><strong>4、CPU和内存的配合</strong></p><p>CPU的控制单元有一个<strong>指令指针寄存器</strong>，存放下一条指令在内存中的地址，控制单元会不停将代码段的指令拿进来先放入指令寄存器</p><blockquote><p>当前指令分为两部分：做什么操作、操作哪些数据</p></blockquote><p>想要执行这条指令，就要把第一部分交给运算单元，第二部分交给数据单元</p><ul><li><strong>数据单元</strong>根据数据的地址，从数据段读到数据寄存器内，就可以参与运算了，<strong>运算结果暂存在数据单元的数据寄存器内</strong>。最终会有指令将数据写回内存</li></ul><blockquote><p>进程切换</p></blockquote><p>CPU寄存器保存当前处理进程的代码段起始地址和数据段起始地址，写的是进程A当前执行的就是线程A</p><blockquote><p>CPU和内存传数据，使用<strong>总线</strong></p></blockquote><p>总线上主要有两类数据：</p><ul><li>地址数据：地址总线</li><li>真正的数据：数据总线</li></ul><p>数据总线的位数决定了一次能拿多少个数据进来。</p><h3 id="X86"><a href="#X86" class="headerlink" title="X86"></a>X86</h3><img src="https://img-blog.csdnimg.cn/085f2a1c7a364f02a93f8eec1800c095.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="8060处理器"><a href="#8060处理器" class="headerlink" title="8060处理器"></a>8060处理器</h4><img src="https://img-blog.csdnimg.cn/58284c78ae674d2bbb16d9921564cfd8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><p><strong>1、数据单元</strong></p><p>为了暂存数据，8086 处理器内部有 8 个 16 位的通用寄存器，也就是刚才说的 CPU 内部的数据单元，分别是 <strong>AX、BX、CX、DX、SP、BP、SI、DI</strong>。</p><p>这些寄存器主要用于在计算过程中<strong>暂存数据</strong>。</p><p><strong>2、控制单元</strong></p><p>IP 寄存器就是<strong>指令指针寄存器</strong>（Instruction Pointer Register)，指向代码段中下一条指令的位置。CPU 会根据它来不断地将指令从内存的代码段中，加载到 CPU 的指令队列中，然后交给运算单元去执行。</p><blockquote><p>如果需要切换进程呢？</p></blockquote><p>每个进程都分<strong>代码段和数据段</strong>，为了指向不同进程的地址空间，有四个 16 位的段寄存器，分别是 CS、DS、SS、ES。</p><ul><li>CS：代码段寄存器，找到代码在内存的位置</li><li>DS：数据段寄存器，找到数据在内存的位置</li><li>SS：栈寄存器，凡是和函数调用相关的操作都与栈相关</li><li>ES：附加段寄存器</li></ul><p>如果运算中需要加载内存中的数据，需要通过 DS 找到内存中的数据，加载到通用寄存器中，应该如何加载呢？对于一个段，有一个起始的地址，而段内的具体位置，我们称为偏移量（Offset）。</p><ul><li><p>在 <strong>CS 和 DS</strong> 中都存放着一个段的<strong>起始地址</strong>。</p></li><li><p>代码段的偏移量在 <strong>IP 寄存器中</strong></p></li><li><p>数据段的偏移量会放在<strong>通用寄存器</strong>中。</p></li></ul><h4 id="32位处理器"><a href="#32位处理器" class="headerlink" title="32位处理器"></a>32位处理器</h4><blockquote><p>在32位处理器中，有32根地址总线，可以访问2^32&#x3D;4G（(2^10)<em>(2^10)</em>(2^10)<em>(2^2)&#x3D;4</em>k<em>k</em>k&#x3D;4Gbit）内存</p></blockquote><p>1、通用寄存器扩展</p><p>2、段寄存器</p><h2 id="从BIOS到bootloader"><a href="#从BIOS到bootloader" class="headerlink" title="从BIOS到bootloader"></a>从BIOS到bootloader</h2><h3 id="BIOS时期"><a href="#BIOS时期" class="headerlink" title="BIOS时期"></a>BIOS时期</h3><p>1、ROM（Read Only Memory，只读存储器）</p><p>2、RAM（Random Access Memory，随机存取存储器）</p><p>3、BIOS（Basic Input and Output System，基本输入输出系统）</p><ul><li>ROM固化的初始化程序</li></ul><img src="https://img-blog.csdnimg.cn/32bd77c7502243e2bda2bc4802af1bec.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>在 x86 系统中，将 1M 空间最上面的 0xF0000 到 0xFFFFF 这 64K 映射给 ROM，也就是说，到这部分地址访问的时候，会访问 ROM。</p><p><strong>4、BIOS的初始化</strong></p><ul><li>硬件检查</li><li>建立中断向量表和中断服务程序</li></ul><h3 id="bootloader时期"><a href="#bootloader时期" class="headerlink" title="bootloader时期"></a>bootloader时期</h3><h2 id="内核初始化"><a href="#内核初始化" class="headerlink" title="内核初始化"></a>内核初始化</h2><p>内核的启动从入口函数start_kernel()开始。在 init&#x2F;main.c 文件中，start_kernel 相当于内核的 main 函数。打开这个函数，你会发现，里面是各种各样初始化函数 XXXX_init。</p><img src="https://img-blog.csdnimg.cn/16895add10524a1fb8e01b1f99eb9f7d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="初始化公司职能部门"><a href="#初始化公司职能部门" class="headerlink" title="初始化公司职能部门"></a>初始化公司职能部门</h3><p><strong>1、项目管理部门</strong></p><ul><li><strong>创始进程</strong>：它是系统创建的第一个进程，我们称为 <strong>0 号进程</strong>。这是唯一一个没有通过 fork 或者 kernel_thread 产生的进程，是<strong>进程列表</strong>的第一个</li><li><strong>进程列表</strong>：项目管理工具，列着所有的项目</li></ul><p><strong>2、办事大厅</strong></p><ul><li><strong>中断门</strong>：处理各种中断<ul><li><strong>系统调用也是通过发送中断的方式进行的</strong></li></ul></li></ul><p><strong>3、会议室管理系统</strong></p><ul><li>初始化内存管理模块</li></ul><p><strong>4、项目管理流程</strong></p><ul><li>初始化调度模块</li></ul><p>5、初始化基于内存的文件系统rootfs</p><ul><li><strong>初始化VFS（虚拟文件系统）</strong>：文件系统是项目资料库，为了兼容不同的文件系统，我们需要将文件的相关数据结构和操作抽象出来，形成抽象层对上提供统一的接口</li></ul><h3 id="初始化1号进程（用户态祖宗）"><a href="#初始化1号进程（用户态祖宗）" class="headerlink" title="初始化1号进程（用户态祖宗）"></a>初始化1号进程（用户态祖宗）</h3><blockquote><p>kernel_thread(kernel_init;NULL,CLONE_FS)</p><p>有了很多的用户进程后，需要把原来的资源分成核心资源和非核心资源</p></blockquote><p>x86提供了分层的权限机制，把区域分成了四个Ring，越往里面权限越高</p><img src="https://img-blog.csdnimg.cn/820c8b50cdd44b609b1762da36484bf6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li><p><strong>内核态（Kernel Mode）</strong>：将能够访问关键资源的代码放在Ring0</p></li><li><p><strong>用户态（User Mode）</strong>：普通程序放在Ring3</p></li></ul><p>1、当用户态程序运行到一半，要访问一个核心资源，就需要暂停当前的运行，调用系统调用（发送中断）</p><p>2、<strong>用户态想要执行更高权限的指令，需要使用系统调用，用户态只需要等待返回结果即可</strong></p><p><strong>3、如何实现暂停？</strong></p><p>内存是用来保存程序运行时候的中间结果的，现在要暂时停下来，这些中间结果不能丢，因为再次运行的时候要基于这些中间结果；当前运行到代码的哪一行都是保存在寄存器内的</p><p>所以，在暂停的时候，<strong>CPU寄存器的值需要暂存到一个地方</strong></p><p><strong>过程：用户态-系统调用-保存寄存器-内核态执行系统调用-恢复寄存器-返回用户态</strong></p><img src="https://img-blog.csdnimg.cn/bd8045e49ec74d77b39e5c8d1014eb41.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>4、从内核态到用户态</strong></p><p>执行kernel_thread这个函数的时候，系统处于内核态，需要切换到用户态去执行程序</p><h3 id="初始化2号进程（内核态祖宗）"><a href="#初始化2号进程（内核态祖宗）" class="headerlink" title="初始化2号进程（内核态祖宗）"></a>初始化2号进程（内核态祖宗）</h3><blockquote><p>kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES)</p></blockquote><p>使用kernel_thread创建进程，但是为什么使用thread（线程）作为函数名呢？</p><ul><li><strong>从用户态看</strong>：创建进程就是启动项目，这个项目需要多个人执行，就是<strong>多线程</strong></li><li><strong>从内核态看</strong>：无论是进程还是线程都统称为<strong>任务（Task）</strong>，使用一样的数据结构</li></ul><p><strong>kthreadd函数</strong>：负责所有内核态的线程的调度和管理，是内核态所有线程的祖先</p><h1 id="进程管理-1"><a href="#进程管理-1" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="写代码：用系统调用创建进程"><a href="#写代码：用系统调用创建进程" class="headerlink" title="写代码：用系统调用创建进程"></a>写代码：用系统调用创建进程</h3><p><strong>1、创建文本文件，写入创建进程逻辑</strong></p><ul><li><code>fork</code>系统调用，fork的返回值不同，父进程和子进程分道扬镳了</li><li>在子进程，需要通过<code>execvp</code>运行新的程序</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">create_process</span> <span class="params">(<span class="keyword">char</span>* program, <span class="keyword">char</span>** arg_list)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">create_process</span> <span class="params">(<span class="keyword">char</span>* program, <span class="keyword">char</span>** arg_list)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span> child_pid;</span><br><span class="line">  child_pid = fork ();</span><br><span class="line">  <span class="keyword">if</span> (child_pid != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> child_pid;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    execvp (program, arg_list);</span><br><span class="line">    <span class="built_in">abort</span> ();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、创建第二个文件，调用上面的函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">create_process</span> <span class="params">(<span class="keyword">char</span>* program, <span class="keyword">char</span>** arg_list)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span>* arg_list[] = &#123;</span><br><span class="line">    <span class="string">&quot;ls&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-l&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/etc/yum.repos.d/&quot;</span>,</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">  &#125;;</span><br><span class="line">  # 调用函数运行ls命令</span><br><span class="line">  create_process (<span class="string">&quot;ls&quot;</span>, arg_list);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译：程序的二进制格式"><a href="#编译：程序的二进制格式" class="headerlink" title="编译：程序的二进制格式"></a>编译：程序的二进制格式</h3><blockquote><p>CPU无法执行文本文件的指令，CPU能够执行的指令是二进制的，所以需要对指令进行翻译，翻译的过程为<strong>编译（Complie）</strong></p></blockquote><p><strong>1、ELF（Executeable and Linkable Format，可执行与可链接格式）</strong></p><ul><li>在Linux下，二进制的程序需要有严格的格式ELF，这个格式可以根据编译的结果不同分为不同的格式</li></ul><p><strong>2、文本文件编译为二进制格式过程</strong></p><img src="https://img-blog.csdnimg.cn/f9c86470b81f41f1b4ca28d1bb99648d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li><p><strong>头文件</strong>：上面代码的include部分</p></li><li><p><strong>源文件</strong>：这个.c结尾的文件</p></li><li><p><strong>.o文件</strong>：可重定位文件（Relocatable File）</p><ul><li>头部：描述整个文件</li><li>.text：存放编译好的二进制可执行代码</li><li>.data：存放已经初始化的全局变量</li><li>.rodata：只读数据，例如字符串常量、const 的变量</li><li>.bss：未初始化全局变量，运行时会置 0</li><li>.symtab：符号表，记录的则是函数和变量</li><li>.strtab：字符串表、字符串常量和变量名</li><li>节头部标：存放节的元数据</li></ul><blockquote><p>为什么叫重定位文件？</p><p>文件存放的地址都是相对地址</p></blockquote><img src="https://img-blog.csdnimg.cn/51401353143e49359bad943056711737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 33%;" /></li><li><p><strong>可执行文件</strong>：ELF的第二种格式</p><ul><li>可以马上加载到内存里面执行</li></ul><img src="https://img-blog.csdnimg.cn/a02c905bbd874619a4e771e18df1c387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:33%;" /></li><li><p><strong>动态链接库</strong>：ELF的第三种格式，<strong>共享对象文件（Shared Object）</strong></p></li></ul><h3 id="运行程序为进程"><a href="#运行程序为进程" class="headerlink" title="运行程序为进程"></a>运行程序为进程</h3><blockquote><p>ELF这个格式的文件如何加载到内存？</p></blockquote><p>在内核中，有这样一个数据结构，用来定义加载二进制文件的方法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linux_binfmt</span> &#123;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">lh</span>;</span> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">module</span> *<span class="title">module</span>;</span> </span><br><span class="line">  <span class="keyword">int</span> (*load_binary)(struct linux_binprm *); </span><br><span class="line">  <span class="keyword">int</span> (*load_shlib)(struct file *); </span><br><span class="line">  <span class="keyword">int</span> (*core_dump)(struct coredump_params *cprm); </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> min_coredump; <span class="comment">/* minimal dump size */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>对于 ELF 文件格式，有对应的实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">linux_binfmt</span> <span class="title">elf_format</span> =</span> &#123;</span><br><span class="line">  .<span class="keyword">module</span> = THIS_MODULE, </span><br><span class="line">  .load_binary = load_elf_binary, </span><br><span class="line">  .load_shlib = load_elf_library, </span><br><span class="line">  .core_dump = elf_core_dump, </span><br><span class="line">  .min_coredump = ELF_EXEC_PAGESIZE,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> load_elf_binary是不是你很熟悉？没错，我们加载内核镜像的时候，用的也是这种格式。</p><p>还记得当时是谁调用的 load_elf_binary 函数吗？具体是这样的：do_execve-&gt;do_execveat_common-&gt;exec_binprm-&gt;search_binary_handler。</p><p>那 do_execve 又是被谁调用的呢？我们看下面的代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE3(execve, </span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">char</span> __user *, filename, </span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">char</span> __user *<span class="keyword">const</span> __user *, argv, </span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">char</span> __user *<span class="keyword">const</span> __user *, envp)</span><br><span class="line">&#123; </span><br><span class="line">  <span class="keyword">return</span> do_execve(getname(filename), argv, envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学过了系统调用一节，你会发现，原理是 exec 这个系统调用最终调用的 load_elf_binary。</p><p>exec 比较特殊，它是一组函数：</p><ul><li>包含 p 的函数（execvp, execlp）会在 PATH 路径下面寻找程序；</li><li>不包含 p 的函数需要输入程序的全路径；</li><li>包含 v 的函数（execv, execvp, execve）以数组的形式接收参数；</li><li>包含 l 的函数（execl, execlp, execle）以列表的形式接收参数；</li><li>包含 e 的函数（execve, execle）以数组的形式接收环境变量。</li></ul><p>在上面 process.c 的代码中，我们创建 ls 进程，也是通过 exec。</p><h3 id="进程树"><a href="#进程树" class="headerlink" title="进程树"></a>进程树</h3><p>既然所有的进程都是从父进程 fork 过来的，那总归有一个祖宗进程，这就是咱们系统启动的 init 进程。</p><img src="https://img-blog.csdnimg.cn/9ea0a6a122574a41b4e7b685d8e9b00e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一节我们讲了一个进程从代码到二进制到运行时的一个过程，我们用一个图总结一下。</p><p>我们首先通过图右边的文件编译过程，生成 so 文件和可执行文件，放在硬盘上。下图左边的用户态的进程 A 执行 fork，创建进程 B，在进程 B 的处理逻辑中，执行 exec 系列系统调用。这个系统调用会通过 load_elf_binary 方法，将刚才生成的可执行文件，加载到进程 B 的内存中执行。</p><p><img src="https://img-blog.csdnimg.cn/d79bef49dc9d4b09bbcb147867700276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="为什么需要线程？"><a href="#为什么需要线程？" class="headerlink" title="为什么需要线程？"></a>为什么需要线程？</h3><p>1、对于任何一个进程，即使没有主动创建线程，<strong>进程也默认拥有一个主线程</strong></p><p>2、线程是负责执行二进制指令的，进程除了执行指令外，内存、文件系统都需要管</p><p><strong>3、使用进程实现并行执行问题的问题：</strong></p><ul><li>创建进程占用资源太多</li><li>进程之间通信需要数据在不同的内存空间传来传去，无法共享</li></ul><p><strong>4、需要线程的原因</strong></p><ul><li>并行执行</li><li>需要处理应急的事情</li><li>分离前台任务和后台任务</li></ul><h3 id="如何创建线程？"><a href="#如何创建线程？" class="headerlink" title="如何创建线程？"></a>如何创建线程？</h3><img src="https://img-blog.csdnimg.cn/c2cf38e262914aa4b1b392f7c1514791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="线程的数据"><a href="#线程的数据" class="headerlink" title="线程的数据"></a>线程的数据</h3><blockquote><p>过程并行起来了，数据呢？</p></blockquote><p>将线程访问的数据分为三类：</p><ul><li>线程中的局部变量</li><li>进程中的全局变量</li><li>线程中的全局变量</li></ul><img src="https://img-blog.csdnimg.cn/f3c383bfe9e94205a048dfb1a087f957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>1、线程栈上的本地数据</strong></p><ul><li>栈的大小可以使用命令<code>ulimit -a</code>查看，默认情况下线程栈大小为8M</li><li>主线程在内存中有一个栈空间，其他线程也有独立的栈空间</li><li>为了避免线程之间的<strong>栈空间踩踏</strong>，线程栈之间会有小块区域来隔离保护各自的栈空间，一旦另外一个线程踏入到这个隔离区，会引发段错误</li></ul><p><strong>2、进程共享的全局数据</strong></p><ul><li>在不同进程间是隔离的，在一个进程中是共享的</li><li>多个线程一起修改同一个全局变量，需要一个机制来保护他们</li></ul><p><strong>3、线程私有数据</strong>（类似ThreadLocal）</p><ul><li><p>弥补进程共享和线程内函数共享之间的空白</p></li><li><p>通过以下函数创建：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_key_create</span><span class="params">(<span class="keyword">pthread_key_t</span> *key, <span class="keyword">void</span> (*destructor)(<span class="keyword">void</span>*))</span></span></span><br></pre></td></tr></table></figure><ul><li><p>创建一个key，伴随一个析构函数；key一旦被创建所有的线程都可以访问，但是各个线程可以根据自己的需要向key中填入不同的值，就提供了一个<strong>同名而不同值的全局变量</strong></p></li><li><p>可以通过以下函数设置key对应的value</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setspecific</span><span class="params">(<span class="keyword">pthread_key_t</span> key, <span class="keyword">const</span> <span class="keyword">void</span> *value)</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="数据的保护"><a href="#数据的保护" class="headerlink" title="数据的保护"></a>数据的保护</h3><p><strong>Mutex（Mutual Exclusion，互斥）</strong></p><img src="https://img-blog.csdnimg.cn/b1038f88381343bb9f5a378076e4d407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="进程数据结构（PCB）"><a href="#进程数据结构（PCB）" class="headerlink" title="进程数据结构（PCB）"></a>进程数据结构（PCB）</h2><blockquote><p>在Linux里，无论是进程还是线程，到了内核中统一称为任务，由统一的结构<strong>task_struct</strong>管理</p></blockquote><img src="https://img-blog.csdnimg.cn/0ff7f939f30c4c00b0805bc272ef5512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>任务列表：使用链表将所有的task_struct串起来</strong></p><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><h4 id="任务ID"><a href="#任务ID" class="headerlink" title="任务ID"></a>任务ID</h4><p>1、每个任务都有一个ID作为这个任务的唯一标识</p><p>2、task_struct里面涉及任务ID的有下面几个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">pid_t</span> tgid;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">group_leader</span>;</span> </span><br></pre></td></tr></table></figure><p><strong>3、为什么需要这么多？进程和线程到内核中统一变成了任务，存在两个问题：</strong></p><ul><li><strong>任务展示</strong><ul><li>如果按照任务列表将所有的线程都展示给用户，会比较复杂</li><li>用户无法找到那些自己创建的线程</li></ul></li><li><strong>给任务下发指令</strong><ul><li>比如需要终止某个任务，应该给进程下发信号，退出进程下的所有线程</li></ul></li></ul><p><strong>4、在内核中需要对线程和进程进行区分</strong></p><ul><li><code>pid</code>：process id</li><li><code>tgid</code>：thread group id</li><li><strong>任何一个进程，如果只有主线程，那 pid 是自己，tgid 是自己，group_leader 指向的还是自己（pid&#x3D;tgid&#x3D;group_leader）</strong></li><li><strong>如果一个进程创建了其他线程，线程有自己的pid，tgid&#x3D;主线的的pid，group_leader指向主线程</strong></li></ul><h4 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h4><p>1、关于信号处理的字段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Signal handlers: */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">signal_struct</span>    *<span class="title">signal</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sighand_struct</span>    *<span class="title">sighand</span>;</span></span><br><span class="line"><span class="keyword">sigset_t</span>      blocked;</span><br><span class="line"><span class="keyword">sigset_t</span>      real_blocked;</span><br><span class="line"><span class="keyword">sigset_t</span>      saved_sigmask;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigpending</span>    <span class="title">pending</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>      sas_ss_sp;</span><br><span class="line"><span class="keyword">size_t</span>        sas_ss_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>      sas_ss_flags;</span><br></pre></td></tr></table></figure><p>这里定义了哪些信号被阻塞暂不处理（blocked），哪些信号尚等待处理（pending），哪些信号正在通过信号处理函数进行处理（sighand）。处理的结果可以是忽略，可以是结束进程等等。</p><p>信号处理函数默认使用用户态的函数栈，当然也可以开辟新的栈专门用于信号处理，这就是 sas_ss_xxx 这三个变量的作用。</p><p>上面我说了下发信号的时候，需要区分进程和线程。从这里我们其实也能看出一些端倪。</p><p>task_struct 里面有一个 struct sigpending pending。如果我们进入 struct signal_struct *signal 去看的话，还有一个 struct sigpending shared_pending。它们一个是本任务的，一个是线程组共享的。</p><h4 id="任务状态"><a href="#任务状态" class="headerlink" title="任务状态"></a>任务状态</h4><p>1、涉及任务状态的字段</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">long</span> state; <span class="comment">/* -1 unrunnable, 0 runnable, &gt;0 stopped */</span> <span class="keyword">int</span> exit_state; </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> flags;</span><br></pre></td></tr></table></figure><p>state是通过bitset的方式设置的，当前是什么状态哪一位就是1</p><img src="https://img-blog.csdnimg.cn/a208a5095b3a45e499a6379e5843e119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>2、TASK_RUNNING</strong></p><ul><li>进程在时刻准备运行（<strong>就绪状态</strong>）</li><li>当处于这个状态的进程获取时间片的时候就是在运行中，没有获取到就说明被其他进程抢占了，在等待再次分配时间片</li><li>运行的进程一旦需要进行IO操作，需要等待IO完毕，这个时候会释放CPU，进入睡眠状态</li></ul><p><strong>3、TASK_INTERRUPTIBLE</strong></p><ul><li>可中断的睡眠</li><li>浅睡眠的状态</li><li>这个时候一个信号来的时候进程要被唤醒，唤醒后不继续刚才的操作，而是进行<strong>信号处理</strong><ul><li>例如：收到某些信号就放弃等待这个I&#x2F;O操作完成，直接退出</li></ul></li></ul><p><strong>4、TASK_UNINTERRUPTIBLE</strong></p><ul><li>不可中断的睡眠</li><li>深度睡眠状态</li><li>不能被信号唤醒，死等I&#x2F;O结束<ul><li>kill信号也会被忽略</li></ul></li></ul><p><strong>5、TASK_KILLABLE</strong></p><ul><li>可终止的睡眠</li><li>运行原理类似于TASK_UNINTERRUPTIBLE，但是可以响应致命信号</li></ul><p><strong>6、TASK_STOPPED</strong></p><ul><li>收到sigstop、sigttin、sigtstp、sigttou信号后进入该状态</li></ul><p><strong>7、EXIT_ZOMBIE</strong></p><ul><li>一旦一个进程要结束，先进入EXIT_ZOMBIE状态，但是这个时候它的父进程没有使用wait()等系统调用获取它的终止信息，此时进程变成了<strong>僵尸进程</strong></li></ul><h4 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h4><p>1、进程的状态切换涉及调度，下面字段用于调度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否在运行队列上</span></span><br><span class="line"><span class="keyword">int</span>        on_rq;</span><br><span class="line"><span class="comment">//优先级</span></span><br><span class="line"><span class="keyword">int</span>        prio;</span><br><span class="line"><span class="keyword">int</span>        static_prio;</span><br><span class="line"><span class="keyword">int</span>        normal_prio;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>      rt_priority;</span><br><span class="line"><span class="comment">//调度器类</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span>  *<span class="title">sched_class</span>;</span></span><br><span class="line"><span class="comment">//调度实体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span>    <span class="title">se</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_rt_entity</span>    <span class="title">rt</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_dl_entity</span>    <span class="title">dl</span>;</span></span><br><span class="line"><span class="comment">//调度策略</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>      policy;</span><br><span class="line"><span class="comment">//可以使用哪些CPU</span></span><br><span class="line"><span class="keyword">int</span>        nr_cpus_allowed;</span><br><span class="line"><span class="keyword">cpumask_t</span>      cpus_allowed;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_info</span>    <span class="title">sched_info</span>;</span></span><br></pre></td></tr></table></figure><h4 id="内核栈"><a href="#内核栈" class="headerlink" title="内核栈"></a>内核栈</h4><blockquote><p>程序执行过程中一旦调用到系统调用就需要进入内核继续执行，那么如何将用户态的执行和内核态的执行串起来呢？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span>    <span class="title">thread_info</span>;</span></span><br><span class="line"><span class="keyword">void</span>  *<span class="built_in">stack</span>;</span><br></pre></td></tr></table></figure><p><strong>1、用户态函数栈</strong></p><p>在进程的内存空间里面，栈是一个从高地址到低地址，往下增长的结构，也就是上面是栈底，下面是栈顶，入栈和出栈的操作都是从下面的栈顶开始的。</p><img src="https://img-blog.csdnimg.cn/7756474ebc4d4624a39492d885fc0382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>2、内核态函数栈</strong></p><ul><li>Linux给每个task都分配了内核栈，大小为8k</li></ul><img src="https://img-blog.csdnimg.cn/5b88005733c24616bf02b7517b507d78.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li>thread_info：对task_struct结构的补充，存放与体系结构相关的东西</li><li>pg_regs：存放寄存器变量<ul><li><strong>系统调用从用户态到内核态，首先需要将用户态运行过程中的CPU上下文保存起来，保存到这个结构的寄存器变量里，这样系统调用返回的时候能够继续执行</strong></li></ul></li></ul><img src="https://img-blog.csdnimg.cn/1436a667c266452295e8c256b44d5268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><img src="https://img-blog.csdnimg.cn/7e270117112046418e017780d348d470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><blockquote><p>CPU的数量是有限的，但是进程的数量远超过CPU的数目，因此就需要进行进程的调度，有效分配CPU的时间，保证进程的最快响应和进程之间的公平</p></blockquote><h3 id="调度策略和调度类"><a href="#调度策略和调度类" class="headerlink" title="调度策略和调度类"></a>调度策略和调度类</h3><p>1、Linux中进程可以分为两种</p><ul><li><strong>实时进程</strong><ul><li>需要尽快返回结果</li></ul></li><li><strong>普通进程</strong></li></ul><p>2、task_struct成员变量<code>policy</code>称为调度策略</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCHED_NORMAL 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCHED_FIFO 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCHED_RR 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCHED_BATCH 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCHED_IDLE 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SCHED_DEADLINE 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> policy;</span><br></pre></td></tr></table></figure><p>配合调度策略的包括<strong>优先级</strong><code>rt_priority;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prio, static_prio, normal_prio;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> rt_priority;</span><br></pre></td></tr></table></figure><ul><li>对于实时进程，优先级范围是0-99；对于普通进程优先级范围是110-139。数值越小优先级越高</li></ul><h3 id="实时调度策略"><a href="#实时调度策略" class="headerlink" title="实时调度策略"></a><strong>实时调度策略</strong></h3><p>SCHED_FIFO、SCHED_RR、SCHED_DEADLINE 是实时进程的调度策略。</p><ul><li><strong>FIFO</strong>：先来先服务，但是可以分配更高的优先级来抢占</li><li><strong>RR</strong>：轮流调度，采用时间片，相同优先级的任务用完时间片后放入队伍尾部，高优先级可以抢占</li><li><strong>DEADLINE</strong>：按照任务的deadline进行调度，选择距离deadline最近的任务</li></ul><h3 id="普通调度策略"><a href="#普通调度策略" class="headerlink" title="普通调度策略"></a><strong>普通调度策略</strong></h3><p>对于普通进程的调度策略有，SCHED_NORMAL、SCHED_BATCH、SCHED_IDLE</p><ul><li><strong>NORMAL</strong>：普通进程</li><li><strong>BATCH</strong>：后台进程，不需要和前端交互</li><li><strong>IDLE</strong>：特别空闲的时候才跑的进程</li></ul><p><strong>已经设置了调度策略和优先级，需要有变量执行</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> *<span class="title">sched_class</span>;</span></span><br></pre></td></tr></table></figure><p>sched_class 有几种实现：</p><ul><li>stop_sched_class 优先级最高的任务会使用这种策略，会中断所有其他线程，且不会被其他任务打断；</li><li>dl_sched_class 就对应上面的 deadline 调度策略；</li><li><strong>rt_sched_class 就对应 RR 算法或者 FIFO 算法的调度策略，具体调度策略由进程的 task_struct-&gt;policy 指定；</strong></li><li><strong>fair_sched_class 就是普通进程的调度策略；</strong></li><li>idle_sched_class 就是空闲进程的调度策略。</li></ul><h3 id="完全公平调度算法"><a href="#完全公平调度算法" class="headerlink" title="完全公平调度算法"></a>完全公平调度算法</h3><p><strong>Linux实现了一个基于CFS的调度算法</strong></p><p><strong>1、首先记录进程的运行时间vruntime</strong></p><ul><li>CPU 会提供一个时钟，过一段时间就触发一个时钟中断叫 Tick</li><li>CFS 会为每一个进程安排一个虚拟运行时间 vruntime。如果一个进程在运行，随着时间的增长，也就是一个个 tick 的到来，进程的 vruntime 将不断增大。没有得到执行的进程 vruntime 不变</li><li>vruntime少的受到了不公平的对待，需要优先执行</li></ul><p><strong>2、调度队列和调度实体</strong></p><blockquote><p>CFS需要一个数据结构对varuntime进行排序，找到最小的那个</p><p>查询：快速找到最小的</p><p>更新：快速调整排序</p><p>使用<strong>红黑树</strong>，节点称为<strong>调度实体</strong></p></blockquote><p>task_struct成员变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 完全公平算法调度实体</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> <span class="title">se</span>;</span></span><br><span class="line"># 实时调度实体</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_rt_entity</span> <span class="title">rt</span>;</span></span><br><span class="line"># DeadLine调度实体</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_dl_entity</span> <span class="title">dl</span>;</span></span><br></pre></td></tr></table></figure><p>红黑树的例子：</p><img src="https://img-blog.csdnimg.cn/87e0795551b643ebb72840a04f19b337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>所有可运行的进程通过不断地插入操作最终都存储在以时间为顺序的红黑树中，vruntime 最小的在树的左侧，vruntime 最多的在树的右侧。 CFS 调度策略会选择红黑树最左边的叶子节点作为下一个将获得 CPU 的任务。</p><blockquote><p>红黑树放在哪里？</p></blockquote><p>每个CPU都有自己的struct rq结构，用于描述在此CPU上所运行的所有进程</p><p>包括实时进程队列<code>rt_rq</code>和一个CFS运行队列<code>cfs_rq</code></p><p>在调度时调度器会首先去实时进程队列找是否有实时进程需要运行，如果没有去CFS运行队列找是否有进程需要运行</p><img src="https://img-blog.csdnimg.cn/2f2d243b3ab5442b9912f8b00ae3b19f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><p><strong>FCFS 算法</strong></p><ol><li>先来先服务算法，遵循先来后端原则，每次从就绪队列拿等待时间最久的，运行完毕后再拿下一个</li><li>该模式对长作业有利，适用 CPU 繁忙型作业的系统，不适用 I&#x2F;O 型作业，因为会导致进程CPU利用率很低。</li></ol><p><strong>SJF 算法</strong></p><ol><li>最短作业优先算法，该算法会优先选择运行所需时间最短的进程执行，可提高吞吐量。</li><li>跟FCFS正好相反，对长作业很不利。</li></ol><p><strong>SRTN 算法</strong></p><ol><li>最短剩余时间优先算法，可以认为是SJF的抢占式版本，当一个新就绪的进程比当前运行进程具有更短完成时间时，系统抢占当前进程，选择新就绪的进程执行。</li><li>有最短的平均周转时间，但不公平，源源不断的短任务到来，可能使长的任务长时间得不到运行。</li></ol><p><strong>HRRN 算法</strong></p><ol><li>高响应比优先算法，为了平衡前面俩而生，按照响应优先权从高到低依次执行。属于前面俩的折中权衡。</li><li>优先权 &#x3D; (等待时间 + 要求服务时间) &#x2F; 要求服务时间</li></ol><p><strong>RR 算法</strong></p><ol><li>时间片轮转算法，操作系统设定了个时间片Quantum，时间片导致每个进程只有在该时间片内才可以运行，这种方式导致每个进程都会均匀的获得执行权。</li><li>时间片一般20ms~50ms，如果太小会导致系统频繁进行上下文切换，太大又可能引起对短的交互请求的响应变差。</li></ol><p><strong>HPF 算法</strong></p><ol><li>最高优先级调度算法，从就绪队列中选择最高优先级的进程先执行。</li><li>优先级的设置有初始化固定死的那种，也有在代码运转过程中根据等待时间或性能动态调整 这两种思路。</li><li>缺点是可能导致低优先级的一直无法被执行。</li></ol><p><strong>MFQ 算法</strong></p><ol><li>多级反馈队列调度算法 ，可以认为是 RR 算法 跟 HPF 算法 的综合体。</li><li>系统会同时存在多个就绪队列，每个队列优先级从高到低排列，同时优先级越高获得是时间片越短。</li><li>新进程会先加入到最高优先级队列，如果新进程优先级高于当前在执行的进程，会停止当前进程转而去执行新进程。新进程如果在时间片内没执行完毕需下移到次优先级队列。</li></ol><img src="https://img-blog.csdnimg.cn/8ee5caf4d2e64e288ee46c59318be74e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>一个CPU上有一个队列，CFS的队列是一颗红黑树，每个节点是一个sched_entity，每个sched_entity都属于一个task_struct，task_struct里面有指针指向进程属于哪个调度类</p><img src="https://img-blog.csdnimg.cn/3971e8fdbda0410eb0b15cde937a7246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>1、大多数web服务本质上是IO密集型服务，瓶颈在于尽可能快速完成高并发下的数据读写，解决方案：</p><ul><li><strong>多进程</strong>：存在频繁调度切换的问题、每个进程资源不共享的问题，需要引入进程间通信机制</li><li><strong>多线程</strong>：大量IO导致多线程被频繁挂起和切换，存在竞争问题</li></ul><p><strong>2、协程 Coroutines</strong> </p><ul><li>比线程更加轻量级的微线程</li><li>理解成子程序调用，每个子程序都可以在单独的协程内执行</li><li>协程运行在线程之上，<strong>并没有增加线程数量，只是在线程基础上通过分时复用的方式运行多个协程</strong></li><li><strong>协程的切换在用户态完成</strong></li></ul><p>3、注意</p><ul><li>协程运行在线程之上，并且协程调用了一个阻塞IO操作，此时操作系统并不知道协程的存在，它只知道线程，因此<strong>在协程调用阻塞IO操作时，操作系统会让线程进入阻塞状态，当前的协程和其它绑定在该线程之上的协程都会陷入阻塞而得不到调度</strong>。</li><li>在协程中不能调用导致线程阻塞的操作，比如打印、读取文件、Socket接口等。<code>协程只有和异步IO结合</code>起来才能发挥最大的威力。并且<strong>协程只有在IO密集型的任务中才会发挥作用</strong>。</li></ul><h1 id="内存管理-1"><a href="#内存管理-1" class="headerlink" title="内存管理"></a>内存管理</h1><h2 id="内存管理-2"><a href="#内存管理-2" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="独享内存空间"><a href="#独享内存空间" class="headerlink" title="独享内存空间"></a>独享内存空间</h3><p>1、每个项目的物理地址对于进程来说不可见，操作系统会给进程分配一个虚拟地址，所有进程看到的地址都是一样的，里面的内存都是从0开始的</p><p>2、在程序里面，指令写入的地址是虚拟地址。例如，位置为 10M 的内存区域，操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。</p><p>3、当程序要访问虚拟地址的时候，<strong>由内核的数据结构进行转换，转换成不同的物理地址</strong>，这样不同的进程运行的时候，写入的是不同的物理地址，这样就不会冲突了。</p><h3 id="规划虚拟地址空间"><a href="#规划虚拟地址空间" class="headerlink" title="规划虚拟地址空间"></a>规划虚拟地址空间</h3><p>1、操作系统的内存管理，主要分为三个方面：</p><ul><li>物理内存的管理</li><li>虚拟地址的管理</li><li>虚拟地址和物理内存如何映射</li></ul><p><strong>2、物理内存的访问都是通过内存管理，不管是用户态还是内核态都是访问虚拟内存，通过内存管理映射到物理内存</strong></p><p><strong>3、站在一个进程的角度去看这个虚拟的空间：</strong></p><ul><li>如果是32位，那么有4G的内存空间是我的；如果是64位，在x86_64下，实际上只使用48位，对应256TB空间；</li><li><strong>OS将虚拟空间分为两部分</strong>：内核空间（地址在上）、用户空间（地址在下）；对于普通进程，内核空间不能访问</li></ul><p><img src="https://img-blog.csdnimg.cn/fe446777464b4979bf7a5cd2575e5707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>从最低位开始，先是 <strong>Text Segment（存放二进制可执行代码）、Data Segment（静态常量） 和 BSS Segment（未初始化的静态变量）</strong></p></li><li><p><strong>堆（Heap）</strong>：动态分配内存的区域</p></li><li><p><strong>Memory Mapping Segment</strong>：把文件映射进内存，如果二进制的执行文件依赖于某个动态链接库，就是在这个区域里面将 so 文件映射到了内存中</p></li><li><p><strong>栈（stack）</strong>：主线程的函数调用的函数栈</p><ul><li><strong>主线程</strong>函数调用，使用的是进程里的栈空间</li><li><strong>主线程之外的线程</strong>，使用的函数栈是在进程的<strong>堆空间</strong>里分配的一段内存作为函数栈使用</li></ul></li><li><p>对于内核空间，无论是哪个进程进来的都是看见同一个内核空间，同一个进程列表。虽然内核栈不同，但是如果想知道的话，还是能够知道每个进程的内核栈在哪里的。所以，如果要访问一些公共的数据结构，需要进行锁保护</p><p><img src="https://img-blog.csdnimg.cn/b2debebb26a6400d917c498997e13852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h3 id="虚拟地址映射物理地址"><a href="#虚拟地址映射物理地址" class="headerlink" title="虚拟地址映射物理地址"></a>虚拟地址映射物理地址</h3><h4 id="分段机制"><a href="#分段机制" class="headerlink" title="分段机制"></a><strong>分段机制</strong></h4><img src="https://img-blog.csdnimg.cn/445e38e6e8614136ae6bb4471bd0a55f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>1、分段机制下虚拟地址由两部分组成：<strong>段选择子和段内偏移量</strong></p><ul><li><strong>段选择子</strong>：保存在段寄存器，最重要的是<strong>段号</strong>，用作<strong>段表</strong>的索引</li><li><strong>段内偏移量</strong>：位于0到段界限之间</li></ul><p>2、<strong>段表</strong>：保存段的<strong>基地址、段的界限和特权等级</strong>等</p><blockquote><p><strong>段的物理内存地址&#x3D;基地址+段内偏移量</strong></p></blockquote><p>3、分段的问题：</p><ul><li>内存碎片</li><li>内存交换效率低</li></ul><p>4、在Linux中，段表称为<strong>段描述符表</strong>，放在<strong>全局描述符表GDT</strong>里面</p><ul><li>表项包括<strong>基地址base、段界限limit、其他标识符</strong></li><li>分析发现，所有段的起始地址都是一样的，都是0，所以在Linux系统中没有使用到全部的分段功能，<strong>分段可以做权限审核，例如用户态 DPL 是 3，内核态 DPL 是 0。当用户态试图访问内核态的时候，会因为权限不足而报错。</strong></li><li><strong>Linux只使用分段做权限审核</strong></li></ul><h4 id="分页（paging）"><a href="#分页（paging）" class="headerlink" title="分页（paging）**"></a>分页（paging）**</h4><p>1、对于物理内存，操作系统把它分成一块一块大小相同的页，这样更方便管理</p><ul><li><strong>换出</strong>：有的内存页面长时间不用了，可以暂时写到硬盘上</li><li><strong>换入</strong>：一旦需要的时候，再加载进来，这样可以扩大可用物理内存的大小，提高物理内存的利用率</li><li><strong>换入和换出都是以页为单位的，页面的大小一般为 4KB</strong></li></ul><img src="https://img-blog.csdnimg.cn/8fede829163d4144876cbf14665fbb33.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、虚拟地址分为两部分：<strong>页号、页内偏移量</strong></p><p>3、页表：<strong>物理页每页所在物理内存的地址、基地址</strong></p><ul><li>页表中所有页表项需要<strong>提前建立并且连续</strong></li><li>页表存储在<strong>内存管理单元（MMU）</strong></li></ul><p><strong>4、分页如何解决分段的内存碎片、内存交换效率低的问题？</strong></p><ul><li>释放内存都是以页为单位释放的</li><li>如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给换出（<em>Swap Out</em>）。一旦需要的时候，再加载进来，称为<strong>换入</strong>（<em>Swap In</em>）。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，<strong>内存交换的效率就相对比较高</strong></li><li>分页的方式使得我们在加载程序的时候，不再需要一次性都把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不真的把页加载到物理内存里，而是<strong>只有在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去。</strong></li></ul><p><strong>5、简单的分页存在的问题？</strong></p><ul><li><p>空间上的缺陷</p><ul><li>操作系统可以同时运行非常多的进程，就意味着页表非常庞大；在32位环境下虚拟地址空间共有4GB，假设一个页大小为4KB，就需要100万个页，每个页表项需要4个字节大小存储，那么4G空间的映射需要4MB的内存来存储页表。每个进程都需要一个页表，那么这就很占用内存。</li></ul></li><li><p><strong>解决：多级页表</strong></p><ul><li>把这100万个页表项的单级页表再分页，分为1024个页表（二级），每个表（二级）包含1024个页表项，形成二级分页</li></ul><p><img src="https://img-blog.csdnimg.cn/edccc53b24264751a540c3c5d7b30ee8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>如果某个一级页表的页表项没有被用到，也就不需要创建这个页表项对应的二级页表了，即可以在需要时才创建二级页表</strong></li><li><strong>页表一定要覆盖全部虚拟地址空间，不分级的页表就需要有 100 多万个页表项来映射，而二级分页则只需要 1024 个页表项</strong></li><li>对于 64 位的系统，两级分页肯定不够了，就变成了四级目录，分别是：<ul><li>全局页目录项 PGD（<em>Page Global Directory</em>）</li><li>上层页目录项 PUD（<em>Page Upper Directory</em>）</li><li>中间页目录项 PMD（<em>Page Middle Directory</em>）</li><li>页表项 PTE（<em>Page Table Entry</em>）</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/4803a0cdfb8a4c71bcc09f18db7db723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>虚拟地址到物理地址的转换就多了几道转换的工序，这显然就降低了这俩地址转换的速度，也就是带来了<strong>时间上的开销</strong></p><ul><li>解决：将常用页表项放入Cache（<strong>TLB</strong>），称为<strong>快表</strong></li><li>有了 TLB 后，那么 CPU 在寻址时，会先查 TLB，如果没找到，才会继续查常规的页表。TLB 的命中率其实是很高的，因为程序最常访问的页就那么几个</li></ul><img src="https://img-blog.csdnimg.cn/0595ba75dd2b4484af495cbc9de6b2bc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:30%;" /><ul><li><p>CPU读取数据的流程：</p><p><img src="https://img-blog.csdnimg.cn/eba81f28500046b5993a855f505ce41c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>进行上下文切换的时候，TLB放的是上一个进程的相关地址，刷新数据的方式：</p><ul><li>全部刷新</li><li>部分刷新</li></ul></li></ul></li></ul></li></ul><h4 id="段页式内存管理"><a href="#段页式内存管理" class="headerlink" title="段页式内存管理"></a>段页式内存管理</h4><p>内存分段和内存分页并不是对立的，它们是可以组合起来在同一个系统中使用的，那么组合起来后，通常称为<strong>段页式内存管理</strong>。</p><img src="https://img-blog.csdnimg.cn/510de8e738fc423aa453a8ce499023a2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:30%;" /><p><strong>1、页式内存管理实现的方式：</strong></p><ul><li>先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；</li><li>接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；</li><li>地址结构就由<strong>段号、段内页号和页内位移</strong>三部分组成</li><li>用于段页式地址变换的数据结构是<strong>每一个程序一张段表</strong>，<strong>每个段又建立一张页表</strong>，段表中的地址是页表的起始地址，而页表中的地址则为某页的物理页号，如图所示：</li></ul><p><img src="https://img-blog.csdnimg.cn/00a51c63a8364c6dacee4b7ea3a1ae88.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>访问物理地址需要经过三次内存访问<ul><li>第一次访问段表，得到页表起始地址</li><li>第二次访问页表，得到物理页号</li><li>第三次将物理页号与页内偏移组合，得到物理地址</li></ul></li></ul><h4 id="Linux内存管理"><a href="#Linux内存管理" class="headerlink" title="Linux内存管理"></a>Linux内存管理</h4><p><strong>1、Intel处理器的发展历史</strong></p><p>早期 Intel 的处理器从 80286 开始使用的是<strong>段式内存管理</strong>。但是很快发现，光有段式内存管理而没有页式内存管理是不够的，这会使它的 X86 系列会失去市场的竞争力。</p><p>因此，在不久以后的 80386 中就实现了对<strong>页式内存管理</strong>。也就是说，80386 除了完成并完善从 80286 开始的段式内存管理的同时还实现了页式内存管理。但是这个 80386 的页式内存管理设计时，没有绕开段式内存管理，而是建立在段式内存管理的基础上，这就意味着，<strong>页式内存管理的作用是在由段式内存管理所映射而成的的地址上再加上一层地址映射。</strong>由于此时段式内存管理映射而成的地址不再是“物理地址”了，Intel 就称之为“线性地址”（也称虚拟地址）。</p><p>于是，段式内存管理先将逻辑地址映射成线性地址，然后再由页式内存管理将线性地址映射成物理地址。</p><p><img src="https://img-blog.csdnimg.cn/6c6b00cd49d843d997e3d7da84759910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>逻辑地址是「段式内存管理」转换前的地址，线性地址则是「页式内存管理」转换前的地址</p><p><strong>2、Linux采用什么方式管理内存？</strong></p><ul><li><p>主要采用<strong>页式内存管理</strong>，但是涉及了<strong>段机制</strong></p></li><li><p>原因： Intel X86 CPU 一律对程序中使用的地址先进行段式映射，然后才能进行页式映射</p></li><li><p>对策：<strong>Linux 系统中的每个段都是从 0 地址开始的整个 4GB 虚拟空间（32 位环境下），也就是所有的段的起始地址都是一样的。这意味着，Linux 系统中的代码，包括操作系统本身的代码和应用程序代码，所面对的地址空间都是线性地址空间（虚拟地址），这种做法相当于屏蔽了处理器中的逻辑地址概念，段只被用于访问控制和内存保护。</strong></p></li><li><p>虚拟地址空间分布：</p><ul><li>分为<strong>内核空间</strong>和<strong>用户空间</strong></li></ul></li></ul><h2 id="进程空间管理"><a href="#进程空间管理" class="headerlink" title="进程空间管理"></a>进程空间管理</h2><h3 id="用户态和内核态的划分"><a href="#用户态和内核态的划分" class="headerlink" title="用户态和内核态的划分"></a>用户态和内核态的划分</h3><p>整个虚拟内存空间分为：</p><ul><li>用户态地址空间</li><li>内核态地址空间</li></ul><blockquote><p>内核进程和用户进程所占的虚拟内存比例是 1:3</p><p>对于32位系统，最大寻址2^32&#x3D;4G，其中用户态虚拟地址空间3G，内核态1G</p><p>对于64位系统，虚拟地址使用48位</p></blockquote><img src="https://img-blog.csdnimg.cn/bc510627a2634505951c9e422f07c5fc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="内核空间"><a href="#内核空间" class="headerlink" title="内核空间"></a>内核空间</h3><p>内核空间总是驻留在内存中，它是为操作系统的内核保留的。应用程序是不允许直接在该区域进行读写或直接调用内核代码定义的函数的。内核进程对应的虚拟内存，<strong>按访问权限可以分为进程私有和进程共享两块区域</strong>。</p><ul><li><strong>进程私有的虚拟内存</strong>：每个进程都有单独的<strong>内核栈、页表、task 结构以及 mem_map 结构</strong>等。</li><li><strong>进程共享的虚拟内存</strong>：属于所有进程共享的内存区域，包括<strong>物理存储器、内核数据和内核代码区域</strong>。</li></ul><h3 id="用户空间"><a href="#用户空间" class="headerlink" title="用户空间"></a>用户空间</h3><p>用户态虚拟空间有几类数据，例如<strong>代码、全局变量、堆、栈、内存映射区</strong>等</p><ul><li><p><strong>运行时栈</strong></p><ul><li><p>由编译器自动释放，存放<strong>函数的参数值，局部变量和方法返回值</strong>等。</p></li><li><p>每当一个函数被调用时，该函数的返回类型和一些调用的信息被存储到栈顶，调用结束后调用信息会被弹出弹出并释放掉内存。</p></li><li><p>栈区是从高地址位向低地址位增长的，是一块连续的内在区域，最大容量是由系统预先定义好的，申请的栈空间超过这个界限时会提示溢出，用户能从栈中获取的空间较小。</p></li></ul></li><li><p><strong>运行时堆</strong></p><ul><li><p>存放进程运行中<strong>被动态分配的内存段</strong>，位于 BSS 和栈中间的地址位</p></li><li><p>由卡发人员申请分配（malloc）和释放（free）</p></li><li><p>堆是从低地址位向高地址位增长，采用链式存储结构。<strong>频繁地 malloc&#x2F;free 造成内存空间的不连续，产生大量碎片</strong>。</p></li><li><p>当申请堆空间时，库函数按照一定的算法搜索可用的足够大的空间。因此<strong>堆的效率比栈要低的多</strong>。</p></li></ul></li><li><p><strong>代码段</strong></p><ul><li>存放 CPU 可以执行的机器指令，该部分内存<strong>只能读不能写</strong>。</li><li>通常代码区是共享的，即其它执行程序可调用它。假如机器中有数个进程运行相同的一个程序，那么它们就可以使用同一个代码段。</li></ul></li><li><p><strong>未初始化的数据段</strong></p><ul><li>存放未初始化的全局变量，BSS 的数据在程序开始执行之前被初始化为 0 或 NULL。</li></ul></li><li><p><strong>已初始化的数据段</strong></p><ul><li>存放已初始化的全局变量，包括静态全局变量、静态局部变量以及常量。</li></ul></li><li><p><strong>内存映射区域</strong></p><ul><li>例如将动态库，共享内存等虚拟空间的内存映射到物理空间的内存，<strong>一般是 mmap 函数所分配的虚拟内存空间</strong>。</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/fb3c35a94c224e07a17d889ca8e95dc3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><h2 id="虚拟内存和物理内存"><a href="#虚拟内存和物理内存" class="headerlink" title="虚拟内存和物理内存"></a>虚拟内存和物理内存</h2><h3 id="物理内存"><a href="#物理内存" class="headerlink" title="物理内存"></a>物理内存</h3><p>1、物理内存（Physical memory）是相对于虚拟内存（Virtual Memory）而言的。</p><p>2、物理内存指通过物理内存条而获得的内存空间，而虚拟内存则是指将硬盘的一块区域划分来作为内存。</p><p><strong>3、内存主要作用：在计算机运行时为操作系统和各种程序提供临时储存</strong>。物理上真实存在的插在主板内存槽上的内存条的容量的大小。</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>1、虚拟内存是计算机系统内存管理的一种技术。 <strong>它使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间）</strong>。实际上，虚拟内存通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换，加载到物理内存中来。 </p><p><strong>2、虚拟内存地址</strong></p><ul><li>和用户进程紧密相关，一般来说不同进程里的同一个虚拟地址指向的物理地址是不一样的</li><li><strong>每个进程所能使用的虚拟地址大小和 CPU 位数有关</strong>。在 32 位的系统上，虚拟地址空间大小是 2 ^ 32 &#x3D; 4G，在 64位系统上，虚拟地址空间大小是 2 ^ 64 &#x3D; 2 ^ 34G，而实际的物理内存可能远远小于虚拟内存的大小。</li><li>每个用户进程维护了一个单独的页表（Page Table），虚拟内存和物理内存就是通过这个页表实现地址空间的映射的。</li></ul><p><strong>3、用户进程申请并访问物理内存（或磁盘存储空间）的过程</strong></p><ul><li><p>用户进程向操作系统发出内存申请请求</p></li><li><p>系统会检查进程的虚拟地址空间是否被用完，如果有剩余，给进程分配虚拟地址</p></li><li><p>系统为这块虚拟地址创建的内存映射（Memory Mapping），并将它放进该进程的页表（Page Table）</p></li><li><p>系统返回虚拟地址给用户进程，用户进程开始访问该虚拟地址</p></li><li><p>CPU 根据虚拟地址在此进程的页表（Page Table）中找到了相应的内存映射（Memory Mapping），但是这个内存映射（Memory Mapping）没有和物理内存关联，于是产生<strong>缺页中断</strong></p></li><li><p><strong>操作系统收到缺页中断后</strong>，分配真正的物理内存并将它关联到页表相应的内存映射（Memory Mapping）。中断处理完成后 CPU 就可以访问内存了</p></li><li><p>当然缺页中断不是每次都会发生，只有系统觉得有必要延迟分配内存的时候才用的着，也即很多时候在上面的第 3 步系统会分配真正的物理内存并和内存映射（Memory Mapping）进行关联。</p></li></ul><p><strong>4、虚拟内存的优点</strong></p><ul><li>地址空间：提供更大的地址空间，并且地址空间是连续的，使得程序编写、链接更加简单</li><li>进程隔离：不同进程的虚拟地址之间没有关系，所以一个进程的操作不会对其它进程造成影响</li><li>数据保护：每块虚拟内存都有相应的读写属性，这样就能保护程序的代码段不被修改，数据块不能被执行等，增加了系统的安全性</li><li>内存映射：有了虚拟内存之后，可以直接映射磁盘上的文件（可执行文件或动态库）到虚拟地址空间。这样可以做到物理内存延时分配，只有在需要读相应的文件的时候，才将它真正的从磁盘上加载到内存中来，而在内存吃紧的时候又可以将这部分内存清空掉，提高物理内存利用效率，并且所有这些对应用程序是都透明的</li><li>共享内存：比如动态库只需要在内存中存储一份，然后将它映射到不同进程的虚拟地址空间中，让进程觉得自己独占了这个文件。进程间的内存共享也可以通过映射同一块物理内存到进程的不同虚拟地址空间来实现共享</li><li>物理内存管理：物理地址空间全部由操作系统管理，进程无法直接分配和回收，从而系统可以更好的利用内存，平衡进程间对内存的需求</li></ul><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="文件系统-1"><a href="#文件系统-1" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="文件系统的功能规划"><a href="#文件系统的功能规划" class="headerlink" title="文件系统的功能规划"></a>文件系统的功能规划</h3><p>最常用的外部存储就是硬盘，数据以文件的形式保存在硬盘上，为了管理这些文件，在规划文件系统的时候需要考虑以下几点：</p><ul><li>文件系统有<strong>严格的组织形式</strong>，使得文件能够以块为单位存储</li><li>文件系统也要有<strong>索引区</strong>，用来方便查找一个文件分成的多个块都存放在了什么位置</li><li>如果有热点文件，需要有<strong>缓存</strong></li><li>文件应该使用<strong>文件夹的形式组织起来</strong>，方便管理查询</li><li>Linux内核需要在内存里面<strong>维护一套数据结构</strong>，保存哪些文件被哪些进程打开和使用</li></ul><h3 id="文件系统相关命令行"><a href="#文件系统相关命令行" class="headerlink" title="文件系统相关命令行"></a>文件系统相关命令行</h3><p><strong>格式化</strong></p><ul><li>将一块盘使用命令组织称一定格式的文件系统的过程</li><li>Windows常用格式化格式为<strong>NTFS</strong>，Linux常用的是<strong>ext3或者ext4</strong></li><li>当一个 Linux 系统插入了一块没有格式化的硬盘的时候，我们可以通过命令 <code>fdisk -l</code>，查看格式化和没有格式化的分区</li><li>可以通过命令 <code>mkfs.ext3</code> 或者 <code>mkfs.ext4</code> 进行格式化</li><li><strong>格式化后的硬盘需要挂载到某个目录下才能作为普通的文件系统访问</strong></li></ul><h3 id="文件系统相关系统调用"><a href="#文件系统相关系统调用" class="headerlink" title="文件系统相关系统调用"></a>文件系统相关系统调用</h3><p><strong>1、打开文件</strong></p><ul><li>当使用系统调用open打开一个文件时，操作系统会创建一些数据结构来表示这个被打开的文件。在进程中，为这个打开的文件分配一个<strong>文件描述符fd（File Descriptor）</strong></li></ul><p><strong>2、文件描述符fd（File Descriptor）</strong></p><ul><li>区分一个进程打开的多个文件</li><li><strong>只在当前进程有效</strong></li><li>open返回的fd必须记录好，我们对这个文件的所有操作都需要这个fd</li></ul><p><strong>3、写入文件</strong></p><ul><li><strong>参数</strong><ul><li>文件描述符（你是谁？）</li><li>表示写入的数据存放位置（你在哪里？）</li><li>表示希望写入的字节数</li></ul></li><li>返回值：成功写入文件的字节数量</li></ul><img src="https://img-blog.csdnimg.cn/696aa6549fc6425a84ac3e4d5d9096ef.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 33%;" /><h2 id="硬盘文件系统"><a href="#硬盘文件系统" class="headerlink" title="硬盘文件系统"></a>硬盘文件系统</h2><blockquote><p>主要讨论Linux下主流的文件系统格式——ext系列文件系统格式</p></blockquote><h3 id="inode与块的存储"><a href="#inode与块的存储" class="headerlink" title="inode与块的存储"></a>inode与块的存储</h3><p>1、硬盘被分成相同大小的单元，称为<strong>块（block）</strong>，一块的大小是扇区大小的整数倍（默认4k）</p><p>2、<strong>inode</strong></p><ul><li><p>存放文件的<strong>元数据</strong>，例如名字、权限等</p></li><li><p><strong>每个文件都对应一个inode</strong>，文件夹也是文件</p></li><li><p>数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ext4_inode</span> &#123;</span></span><br><span class="line">  __le16  i_mode;    <span class="comment">/* 读写权限 */</span></span><br><span class="line">  __le16  i_uid;    <span class="comment">/* 属于哪个用户 */</span></span><br><span class="line">  __le16  i_gid;    <span class="comment">/* 属于哪个组 */</span></span><br><span class="line">  __le32  i_size_lo;  <span class="comment">/* 大小 */</span></span><br><span class="line">  </span><br><span class="line">  __le32  i_atime;  <span class="comment">/* 最近一次访问文件的时间 */</span></span><br><span class="line">  __le32  i_ctime;  <span class="comment">/* 最近一次更改inode的时间 */</span></span><br><span class="line">  __le32  i_mtime;  <span class="comment">/* 最近一次修改文件的时间，只有文件数据修改才会更新 */</span></span><br><span class="line">  __le32  i_dtime;  <span class="comment">/* Deletion Time */</span></span><br><span class="line">  </span><br><span class="line">  __le16  i_links_count;  <span class="comment">/* Links count */</span></span><br><span class="line">  __le32  i_blocks_lo;  <span class="comment">/* 占多少个块 */</span></span><br><span class="line">  __le32  i_flags;  <span class="comment">/* File flags */</span></span><br><span class="line">......</span><br><span class="line">  __le32  i_block[EXT4_N_BLOCKS];<span class="comment">/* 指向block */</span></span><br><span class="line">  __le32  i_generation;  <span class="comment">/* File version (for NFS) */</span></span><br><span class="line">  __le32  i_file_acl_lo;  <span class="comment">/* File ACL */</span></span><br><span class="line">  __le32  i_size_high;</span><br><span class="line">......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>3、block是如何保存的？</strong></p><ul><li><p>EXT4_N_BLOCKS有如下定义：</p><ul><li>前12项保存块的位置，通过<code>i_block[0-11]</code>可以获取保存文件内容的块</li><li>如果一个文件放不下的时候，就需要让<code>i_block[12]</code>指向一个<strong>间接块</strong>，存放数据块的位置</li><li>如果文件再大一些，<code>i_block[13]</code>会指向一个块，可以用<strong>二次间接块</strong>，存放<strong>间接块</strong>的位置；再大就会使用<code>i_block[14]</code>指向<strong>三次间接块</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  EXT4_NDIR_BLOCKS    12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  EXT4_IND_BLOCK      EXT4_NDIR_BLOCKS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  EXT4_DIND_BLOCK      (EXT4_IND_BLOCK + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  EXT4_TIND_BLOCK      (EXT4_DIND_BLOCK + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  EXT4_N_BLOCKS      (EXT4_TIND_BLOCK + 1)</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/b5f0edf0b8824bb5ae2c67532cc15db8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:33%;" /><ul><li><p><strong>问题</strong>：对于大文件需要多次读取硬盘才能找到块，访问速度较慢</p><ul><li><p><strong>解决</strong>：ext4引入了<strong>Extents</strong></p><ul><li><p>存放连续的块，保存为一颗树</p></li><li><p>节点头<strong>ext4_extent_header</strong>：描述某个节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ext4_extent_header</span> &#123;</span></span><br><span class="line">  __le16  eh_magic; </span><br><span class="line">  __le16  eh_entries;  <span class="comment">/* 表示这个节点有多少项，项分为两种，如果是叶子节点就直接指向硬盘上的连续块地址（ext4_extent），如果是分支节点就会指向下一层的节点（ext4_extent_idx） */</span></span><br><span class="line">  __le16  eh_max;    </span><br><span class="line">  __le16  eh_depth;  </span><br><span class="line">  __le32  eh_generation; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>inode里面的i_block可以放下一个1个header和4个extent；这个时候eh_depth位0</p></li><li><p>如果文件比较大，4个extent放不下就需要分裂成一棵树，eh_depth&gt;0的节点就是索引节点最底层eh_depth&#x3D;0的是叶子节点</p></li></ul><p><img src="https://img-blog.csdnimg.cn/973e13c51d39429aa9dd4f67387bf3e4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul></li></ul></li></ul><p><strong>4、inode位图和块位图</strong></p><ul><li>文件系统中，专门有一个块来保存inode的位图，在这4k里面每一位对应一个inode。如果是1表示这个inode已经被使用了，如果是0就是没有被使用</li></ul><h3 id="文件系统的格式"><a href="#文件系统的格式" class="headerlink" title="文件系统的格式"></a>文件系统的格式</h3><p><strong>1、块组</strong></p><ul><li>数据块的位图是放在一个块里面的，共4k。每位代表一个块，共可以表示 4∗1024∗8&#x3D;215 个数据块。如果每个数据块也是按默认的 4K，最大可以表示空间为 215∗4∗1024&#x3D;227 个 byte，也就是 128M。</li><li>如果采用<strong>“一个块的位图 + 一系列的块”</strong>，外加<strong>“一个块的 inode 的位图 + 一系列的 inode 的结构”</strong>，最多能够表示 128M，称为一个<strong>块组</strong></li></ul><p>2、<strong>块组描述符表</strong></p><ul><li>这样一个个块组，就基本构成了我们整个文件系统的结构。因为块组有多个，块组描述符也同样组成一个列表，我们把这些称为<strong>块组描述符表</strong>。</li></ul><p>3、<strong>超级块</strong>（ext4_super_block）</p><ul><li><strong>对整个文件系统的情况进行描述</strong></li><li>这里面有整个文件系统一共有多少 inode，s_inodes_count；一共有多少块，s_blocks_count_lo，每个块组有多少 inode，s_inodes_per_group，每个块组有多少块，s_blocks_per_group 等。这些都是这类的全局信息。</li></ul><p><strong>4、文件系统的格式</strong></p><ul><li>引导块：系统启动时预留的一块区域</li><li>默认情况下，超级块和块组描述符表都有副本保存在每一个块组里面</li></ul><p><img src="https://img-blog.csdnimg.cn/bc3342f2aabb409995f255507a582835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>问题</strong>：如果每个块组都保存一份完整的块组描述符，浪费空间，且块组描述符的个数就决定了整个文件系统的大小，就被限制住了</li></ul><p><strong>5、Meta Block Groups</strong></p><ul><li>块组描述符表不保存所有块组的描述符，而是将块组分为多个<strong>元块组（Meta Block Group）</strong>，每个元块组里面的块描述符表仅包括自己的，一个元块组包含64个块组</li></ul><img src="https://img-blog.csdnimg.cn/ad7e65b77eed4ffbbb58ad7a591f2ddf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="目录的存储格式"><a href="#目录的存储格式" class="headerlink" title="目录的存储格式"></a>目录的存储格式</h3><p><strong>1、目录和普通文件</strong></p><ul><li><p>相同：本身也是一个文件，也有inode，inode里面也指向一些块。</p></li><li><p>不同：普通文件的块保存文件数据，目录文件的块保存目录里面一项一项的<strong>文件信息</strong></p></li><li><p>文件信息：保存这个目录下一级文件的文件名和对应的inode，通过inode找到真正的文件</p></li></ul><p>2、为避免频繁读取磁盘里的目录文件，内核会把已经读过的目录文件用<code>目录项</code>这个数据结构缓存在内存，方便用户下次读取目录信息，目录项可包含目录或文件，不要惊讶于可以保存目录，目录格式的目录项里面保存的是目录里面一项一项的文件信息。</p><h3 id="软链接和硬连接"><a href="#软链接和硬连接" class="headerlink" title="软链接和硬连接"></a>软链接和硬连接</h3><img src="https://img-blog.csdnimg.cn/119c6e8ac78243efbf93a4fad2441742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>硬链接</strong>：老文件A被创建若干个硬链接B、C后。A、B、C三个文件的inode是相同的，所以不能跨文件系统。同时只有ABC全部删除，系统才会删除源文件。</p><p><strong>软链接</strong>：相当于基于老文件A新建了个文件B，该文件B有新的inode，不过文件B内容是老文件A的路径。所以软链接可以跨文件系统。当老文件A删除后，文件B仍然存在，不过找不到指定文件了。</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><img src="https://img-blog.csdnimg.cn/bc9ae2f2498c4af6972703c89bdee346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h2><p><strong>多层合作</strong></p><ul><li>应用层：进程可通过<strong>系统调用</strong>进行文件读写操作</li><li>在内核，每个进程都需要为打开的文件维护一定的数据结构</li><li>在内核，整个系统打开的文件也需要维护一定的数据结构</li><li><strong>虚拟文件系统</strong>：Linux可支持多种文件系统，他们的实现各不相同，因此Linux内核向用户空间提供了虚拟文件系统这个统一的接口对文件系统进行操作。它提供了常见的文件系统对象模型，例如 inode、directory entry、mount 等，以及操作这些对象的方法，例如 inode operations、directory operations、file operations 等</li><li><strong>真正的文件系统</strong>：例如ext4</li><li>为了加快设备读写效率，需要缓存层</li><li>为了读写文件系统，需要通过块设备I&#x2F;O层，这是文件系统层和块设备驱动的接口</li></ul><img src="https://img-blog.csdnimg.cn/c39245e3789a4014b40c3c9de468a6d3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><h3 id="open-打开-x2F-创建文件"><a href="#open-打开-x2F-创建文件" class="headerlink" title="open 打开&#x2F;创建文件"></a>open 打开&#x2F;创建文件</h3><p>1、在进程里面通过open系统调用打开文件，最终调用系统调用实现<code>sys_open</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE3(open, <span class="keyword">const</span> <span class="keyword">char</span> __user *, filename, <span class="keyword">int</span>, flags, <span class="keyword">umode_t</span>, mode)</span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">  <span class="keyword">return</span> do_sys_open(AT_FDCWD, filename, flags, mode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">do_sys_open</span><span class="params">(<span class="keyword">int</span> dfd, <span class="keyword">const</span> <span class="keyword">char</span> __user *filename, <span class="keyword">int</span> flags, <span class="keyword">umode_t</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">......</span><br><span class="line">  fd = get_unused_fd_flags(flags);</span><br><span class="line">  <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">f</span> =</span> do_filp_open(dfd, tmp, &amp;op);</span><br><span class="line">    <span class="keyword">if</span> (IS_ERR(f)) &#123;</span><br><span class="line">      put_unused_fd(fd);</span><br><span class="line">      fd = PTR_ERR(f);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fsnotify_open(f);</span><br><span class="line">      fd_install(fd, f);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  putname(tmp);</span><br><span class="line">  <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、首先获取一个没有用的文件描述符</strong></p><ul><li>在每个进程的task_struct中，有一个指针files，类型是files_struct</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span>    *<span class="title">files</span>;</span></span><br></pre></td></tr></table></figure><ul><li><code>files_struct</code>里面最重要的是一个<strong>文件描述符表</strong>，每打开一个文件，会在这个列表分配一项，下标就是<strong>文件描述符</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> &#123;</span></span><br><span class="line">  ...... </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> __<span class="title">rcu</span> * <span class="title">fd_array</span>[<span class="title">NR_OPEN_DEFAULT</span>];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>对于任何一个进程，默认情况下，文件描述符0表示<code>stdin</code>标准输入，文件描述符1表示<code>stdout</code>标准输出，文件描述符2表示<code>stedeer</code>标准错误输出；再打开的文件会从这个列表找一个空闲位置分配给它（<strong>不是递增的</strong>）</li><li>文件描述符表每一项都是指向<strong>struct file</strong>的指针，也就是说每打开一个文件都会有一个struct file对应</li></ul><p>3、<code>do_filp_open</code>创建<code>struct file</code>结构</p><p>4、<code>fd_install</code>将文件描述符和这个结构关联起来</p><h2 id="Linux-I-x2F-O读写方式"><a href="#Linux-I-x2F-O读写方式" class="headerlink" title="Linux I&#x2F;O读写方式"></a>Linux I&#x2F;O读写方式</h2><p>Linux 提供了 3 种磁盘与主存之间的数据传输机制：</p><ul><li><strong>轮询</strong>：基于死循环对 I&#x2F;O 端口进行不断检测</li><li><strong>I&#x2F;O 中断</strong>：当数据到达时，磁盘主动向 CPU 发起中断请求，由 CPU 自身负责数据的传输过程</li><li><strong>DMA 传输</strong>：在 I&#x2F;O 中断的基础上引入了 DMA 磁盘控制器，由 DMA 磁盘控制器负责数据的传输，降低了 I&#x2F;O 中断操作对 CPU 资源的大量消耗</li></ul><blockquote><p>DMA（Direct Memory Access，直接存储器访问)）</p><ul><li>是所有现代电脑的重要特色，它允许不同速度的硬件装置来沟通，而不需要依赖于CPU的大量中断负载。否则，CPU 需要从来源把每一片段的资料复制到暂存器，然后把它们再次写回到新的地方。在这个时间中，CPU 对于其他的工作来说就无法使用。</li></ul></blockquote><h3 id="I-x2F-O中断"><a href="#I-x2F-O中断" class="headerlink" title="I&#x2F;O中断"></a>I&#x2F;O中断</h3><p>每次用户进程读取磁盘数据时，都需要 CPU 中断，然后发起 I&#x2F;O 请求等待数据读取和拷贝完成，<strong>每次的 I&#x2F;O 中断都导致 CPU 的上下文切换。</strong></p><ul><li>用户进程向 CPU 发起 <code>read </code>系统调用读取数据，由用户态切换为内核态，然后一直阻塞等待数据的返回</li><li>CPU 在接收到指令以后对磁盘发起 I&#x2F;O 请求，将磁盘数据先放入磁盘控制器缓冲区</li><li>数据准备完成以后，磁盘向 CPU 发起 I&#x2F;O 中断</li><li>CPU 收到 I&#x2F;O 中断以后将磁盘缓冲区中的数据拷贝到内核缓冲区，然后再从内核缓冲区拷贝到用户缓冲区</li><li>用户进程由内核态切换回用户态，解除阻塞状态，然后等待 CPU 的下一个执行时间钟</li></ul><img src="https://img-blog.csdnimg.cn/a1d6db90dd62469ebe70afee4c98403c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:40%;" /><h3 id="DMA传输"><a href="#DMA传输" class="headerlink" title="DMA传输"></a>DMA传输</h3><p>1、DMA （Direct Memory Access），是一种<strong>允许外围设备（硬件子系统）直接访问系统主内存的机制</strong>。也就是说，基于 DMA 访问方式，<strong>系统主内存于硬盘或网卡之间的数据传输可以绕开 CPU 的全程调度</strong>。目前大多数的硬件设备，包括磁盘控制器、网卡、显卡以及声卡等都支持 DMA 技术。</p><p><strong>2、整个数据传输操作在一个 DMA 控制器的控制下进行的</strong>。CPU 除了在数据传输开始和结束时做一点处理外（开始和结束时候要做中断处理），在传输过程中 CPU 可以继续进行其他的工作。这样<strong>在大部分时间里，CPU 计算和 I&#x2F;O 操作都处于并行操作</strong>，使整个计算机系统的效率大大提高。</p><ul><li>用户进程向 CPU 发起 <code>read </code>系统调用读取数据，由用户态切换为内核态，然后一直阻塞等待数据的返回</li><li>CPU 在接收到指令以后对 <strong>DMA 磁盘控制器</strong>发起调度指令（<strong>CPU第一次操作</strong>）</li><li>DMA 磁盘控制器对磁盘发起 I&#x2F;O 请求，将磁盘数据先放入磁盘控制器缓冲区，CPU 全程不参与此过程。</li><li>数据读取完成后，DMA 磁盘控制器会接受到磁盘的通知，将数据<strong>从磁盘控制器缓冲区拷贝到内核缓冲区</strong>。</li><li>DMA 磁盘控制器向 CPU 发出数据读完的信号，由 <strong>CPU 负责将数据从内核缓冲区拷贝到用户缓冲区</strong>（<strong>CPU第二次操作</strong>）</li><li>用户进程由内核态切换回用户态，解除阻塞状态，然后等待 CPU 的下一个执行时间钟</li></ul><img src="https://img-blog.csdnimg.cn/3cb54ea82f414751a9f74e46beeb49a0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:40%;" /><h3 id="传统I-x2F-O方式"><a href="#传统I-x2F-O方式" class="headerlink" title="传统I&#x2F;O方式"></a>传统I&#x2F;O方式</h3><p>1、在 Linux 系统中，传统的访问方式是通过<code>write()</code>和<code>read()</code>两个系统调用实现的，通过<code>read()</code>函数读取文件到到缓存区中，然后通过<code>write()</code>方法把缓存中的数据输出到网络端口</p><p>2、传统 I&#x2F;O 操作的数据读写流程，整个过程涉及 <strong>2 次 CPU 拷贝、2 次 DMA 拷贝总共 4 次拷贝，以及 4 次上下文切换</strong></p><img src="https://img-blog.csdnimg.cn/96886b4f07624009af9770d74f8d9d52.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>3、传统读操作</strong></p><ul><li>当应用程序执行<code>read</code>系统调用读取一块数据的时候，如果这块数据已经存在于用户进程的页内存中，就直接从内存中读取数据；如果数据不存在，则先将数据从磁盘加载数据到内核空间的读缓存（read buffer）中，再从读缓存拷贝到用户进程的页内存中。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(file_fd, tmp_buf, len);</span><br></pre></td></tr></table></figure><ul><li>基于传统的 I&#x2F;O 读取方式，<code>read </code>系统调用会触发 2 次上下文切换，1 次 DMA 拷贝和 1 次 CPU 拷贝，发起数据读取的流程如下：<ul><li>用户进程通过 <code>read() </code>函数向内核（kernel）发起系统调用，上下文从用户态（user space）切换为内核态（kernel space）</li><li>CPU利用DMA控制器将数据<strong>从主存或硬盘拷贝到内核空间的读缓冲区</strong></li><li>CPU<strong>将读缓冲区中的数据拷贝到用户空间的用户缓冲区</strong></li><li>上下文从内核态（kernel space）切换回用户态（user space），read 调用执行返回</li></ul></li></ul><p><strong>4、传统写操作</strong></p><ul><li>当应用程序准备好数据，执行 <code>write </code>系统调用发送网络数据时，先将数据从用户空间的页缓存拷贝到内核空间的网络缓冲区（socket buffer）中，然后再将写缓存中的数据拷贝到网卡设备完成数据发送。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write(socket_fd, tmp_buf, len);</span><br></pre></td></tr></table></figure><ul><li>基于传统的 I&#x2F;O 写入方式，<code>write() </code>系统调用会触发 2 次上下文切换，1 次 CPU 拷贝和 1 次 DMA 拷贝，用户程序发送网络数据的流程如下：<ul><li>用户进程通过 write() 函数向内核（kernel）发起系统调用，上下文从用户态（user space）切换为内核态（kernel space）</li><li>CPU <strong>将用户缓冲区（user buffer）中的数据拷贝到内核空间（kernel space）的网络缓冲区（socket buffer）</strong></li><li>CPU 利用 DMA 控制器<strong>将数据从网络缓冲区（socket buffer）拷贝到网卡进行数据传输</strong></li><li>上下文从内核态（kernel space）切换回用户态（user space），write 系统调用执行返回</li></ul></li></ul><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p>在 Linux 中零拷贝技术主要有 3 个实现思路：<strong>用户态直接 I&#x2F;O、减少数据拷贝次数以及写时复制技术</strong></p><ul><li><strong>用户态直接 I&#x2F;O</strong>：应用程序可以<strong>直接访问硬件存储，操作系统内核只是辅助数据传输</strong>。这种方式依旧存在用户空间和内核空间的上下文切换，<strong>硬件上的数据直接拷贝至了用户空间</strong>，不经过内核空间。因此，直接 I&#x2F;O 不存在内核空间缓冲区和用户空间缓冲区之间的数据拷贝。</li><li><strong>减少数据拷贝次数</strong>：在数据传输过程中，避免数据在用户空间缓冲区和系统内核空间缓冲区之间的CPU拷贝，以及数据在系统内核空间内的CPU拷贝，这也是<strong>当前主流零拷贝技术的实现思路</strong>。</li><li><strong>写时复制技术</strong>：写时复制指的是当多个进程共享同一块数据时，如果其中一个进程需要对这份数据进行修改，那么将其拷贝到自己的进程地址空间中，如果只是数据读取操作则不需要进行拷贝操作。</li></ul><h4 id="用户态直接I-x2F-O"><a href="#用户态直接I-x2F-O" class="headerlink" title="用户态直接I&#x2F;O"></a>用户态直接I&#x2F;O</h4><p>1、用户态直接 I&#x2F;O 使得应用进程或运行在用户态（user space）下的库函数<strong>直接访问硬件设备</strong>，数据直接跨过内核进行传输，内核在数据传输过程除了进行必要的虚拟存储配置工作之外，不参与任何其他工作，这种方式能够直接<strong>绕过内核</strong>，极大提高了性能。</p><img src="https://img-blog.csdnimg.cn/4dac9f8a56174038b8f060d3eaa62aab.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>2、使用场景</strong>：用户态直接 I&#x2F;O 只能适用于不需要内核缓冲区处理的应用程序，这些应用程序通常在进程地址空间有自己的数据缓存机制，称为自缓存应用程序，如数据库管理系统就是一个代表。</p><p><strong>3、缺点</strong>：这种零拷贝机制会直接操作磁盘 I&#x2F;O，由于 CPU 和磁盘 I&#x2F;O 之间的执行时间差距，会造成大量资源的浪费</p><ul><li>解决方案：配合异步 I&#x2F;O 使用。</li></ul><h4 id="减少数据拷贝次数：mmap-write"><a href="#减少数据拷贝次数：mmap-write" class="headerlink" title="减少数据拷贝次数：mmap + write"></a>减少数据拷贝次数：mmap + write</h4><p><strong>1、使用 mmap + write 代替原来的 read + write 方式，减少了 1 次 CPU 拷贝操作</strong></p><p><strong>2、<code>mmap</code>方法：</strong></p><ul><li>mmap 是 Linux 提供的一种内存映射文件方法，即将一个进程的地址空间中的一段虚拟地址映射到磁盘文件地址，mmap + write 的伪代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmp_buf = mmap(file_fd, len);</span><br><span class="line">write(socket_fd, tmp_buf, len);</span><br></pre></td></tr></table></figure><p><strong>3、使用 mmap 的目的</strong></p><ul><li>将内核中读缓冲区（read buffer）的地址与用户空间的缓冲区（user buffer）进行映射，从而实现内核缓冲区与应用程序内存的共享，<strong>省去了将数据从内核读缓冲区（read buffer）拷贝到用户缓冲区（user buffer）的过程</strong>，<strong>然而内核读缓冲区（read buffer）仍需将数据拷贝到内核写缓冲区（socket buffer）</strong></li></ul><p><strong>4、过程</strong></p><ul><li><p>基于 <code>mmap + write </code>系统调用的零拷贝方式，整个拷贝过程会发生 <strong>4 次上下文切换，1 次 CPU 拷贝和 2 次 DMA 拷贝</strong>，用户程序读写数据的流程如下：</p><ul><li>用户进程通过 <code>mmap() </code>函数向内核（kernel）发起系统调用，上下文从用户态（user space）切换为内核态（kernel space）。</li><li><strong>将用户进程的内核空间的读缓冲区（read buffer）与用户空间的缓存区（user buffer）进行内存地址映射</strong>。</li><li>CPU利用DMA控制器将数据从主存或硬盘拷贝到内核空间（kernel space）的读缓冲区（read buffer）。</li><li>上下文从内核态（kernel space）切换回用户态（user space），mmap 系统调用执行返回。</li><li>用户进程通过<code>write()</code>函数向内核（kernel）发起系统调用，上下文从用户态（user space）切换为内核态（kernel space）。</li><li><strong>CPU将读缓冲区（read buffer）中的数据拷贝到的网络缓冲区（socket buffer）</strong>。</li><li>CPU利用DMA控制器将数据从网络缓冲区（socket buffer）拷贝到网卡进行数据传输。</li><li>上下文从内核态（kernel space）切换回用户态（user space），write 系统调用执行返回。</li></ul><img src="https://img-blog.csdnimg.cn/43ccf2d3ece44f91a20cb5c31b127d9d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /></li></ul><p><strong>5、mmap 主要的用处是提高 I&#x2F;O 性能</strong>，特别是针对大文件。<strong>对于小文件，内存映射文件反而会导致碎片空间的浪费</strong>，因为内存映射总是要对齐页边界，最小单位是 4 KB，一个 5 KB 的文件将会映射占用 8 KB 内存，也就会浪费 3 KB 内存。</p><p><strong>6、mmap 的拷贝虽然减少了 1 次拷贝，提升了效率，但也存在一些隐藏的问题</strong></p><ul><li>当 mmap 一个文件时，如果这个文件被另一个进程所截获，那么 write 系统调用会因为访问非法地址被 SIGBUS 信号终止，SIGBUS 默认会杀死进程并产生一个 coredump，服务器可能因此被终止。</li></ul><h4 id="减少数据拷贝次数：sendfile"><a href="#减少数据拷贝次数：sendfile" class="headerlink" title="减少数据拷贝次数：sendfile"></a>减少数据拷贝次数：sendfile</h4><p>1、目的是<strong>简化通过网络在两个通道之间进行的数据传输过程</strong>。<code>sendfile </code>系统调用的引入，<strong>不仅减少了 CPU 拷贝的次数，还减少了上下文切换的次数</strong>，它的伪代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendfile(socket_fd, file_fd, len);</span><br></pre></td></tr></table></figure><p>2、通过 sendfile 系统调用，<strong>数据可以直接在内核空间内部进行 I&#x2F;O 传输</strong>，从而省去了数据在用户空间和内核空间之间的来回拷贝。</p><p>3、与 mmap 内存映射方式不同的是， <strong><code>sendfile</code> 调用中 I&#x2F;O 数据对用户空间是完全不可见的</strong>。也就是说，这是一次完全意义上的数据传输过程。</p><p><strong>4、过程</strong></p><p>基于 sendfile 系统调用的零拷贝方式，整个拷贝过程会发生 <strong>2 次上下文切换，1 次 CPU 拷贝和 2 次 DMA 拷贝</strong>，用户程序读写数据的流程如下：</p><ul><li>用户进程通过<code>sendfile()</code>函数向内核（kernel）发起系统调用，上下文从用户态（user space）切换为内核态（kernel space）。</li><li>CPU 利用 DMA 控制器将数据从主存或硬盘拷贝到内核空间（kernel space）的读缓冲区（read buffer）。</li><li><strong>CPU 将读缓冲区（read buffer）中的数据拷贝到的网络缓冲区（socket buffer）</strong>。</li><li><strong>CPU 利用 DMA 控制器将数据从网络缓冲区（socket buffer）拷贝到网卡进行数据传输</strong>。</li><li>上下文从内核态（kernel space）切换回用户态（user space），sendfile 系统调用执行返回。</li></ul><img src="https://img-blog.csdnimg.cn/3fe876c9e7bc4f64890bfbee6a9f84e7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><p>5、相比较于 mmap 内存映射的方式，sendfile 少了 2 次上下文切换，但是仍然有 1 次 CPU 拷贝操作。<strong>sendfile 存在的问题是用户程序不能对数据进行修改，而只是单纯地完成了一次数据传输过程。</strong></p><h4 id="减少数据拷贝次数：sendfile-DMA-gather-copy"><a href="#减少数据拷贝次数：sendfile-DMA-gather-copy" class="headerlink" title="减少数据拷贝次数：sendfile + DMA gather copy"></a>减少数据拷贝次数：sendfile + DMA gather copy</h4><p>1、Linux 2.4 版本的内核对 <code>sendfile </code>系统调用进行修改，为  DMA 拷贝引入了 <code>gather</code> 操作。</p><ul><li>它将内核空间（kernel space）的读缓冲区（read buffer）中对应的数据描述信息（内存地址、地址偏移量）记录到相应的网络缓冲区（ socket  buffer）中，<strong>由 DMA 根据内存地址、地址偏移量将数据批量地从读缓冲区（read buffer）拷贝到网卡设备中</strong></li><li>这样就省去了内核空间中仅剩的 1 次 CPU 拷贝操作，sendfile 的伪代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendfile(socket_fd, file_fd, len);</span><br></pre></td></tr></table></figure><p>2、在硬件的支持下，sendfile 拷贝方式不再从内核缓冲区的数据拷贝到 socket 缓冲区，取而代之的<strong>仅仅是缓冲区文件描述符和数据长度的拷贝</strong>，这样 DMA 引擎直接利用 gather 操作将页缓存中数据打包发送到网络中即可，本质就是和虚拟内存映射的思路类似。</p><p><strong>3、过程</strong></p><p>基于 sendfile + DMA gather copy 系统调用的零拷贝方式，整个拷贝过程会发生 <strong>2 次上下文切换、0 次 CPU 拷贝以及 2 次 DMA 拷贝</strong>，用户程序读写数据的流程如下：</p><ul><li>用户进程通过 sendfile() 函数向内核（kernel）发起系统调用，上下文从用户态（user space）切换为内核态（kernel space）。</li><li>CPU 利用 DMA 控制器将数据从主存或硬盘拷贝到内核空间（kernel space）的读缓冲区（read buffer）。</li><li><strong>CPU 把读缓冲区（read buffer）的文件描述符（file descriptor）和数据长度拷贝到网络缓冲区（socket buffer）</strong>。</li><li>基于已拷贝的文件描述符（file descriptor）和数据长度，CPU 利用 DMA 控制器的 gather&#x2F;scatter 操作直接批量地将数据从内核的读缓冲区（read buffer）拷贝到网卡进行数据传输。</li><li>上下文从内核态（kernel space）切换回用户态（user space），sendfile 系统调用执行返回。</li></ul><img src="https://img-blog.csdnimg.cn/8b729ae8db464c85985653ea84d587ff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><p>4、sendfile + DMA gather copy 拷贝方式同样存在用户程序不能对数据进行修改的问题，而且本身需要硬件的支持，<strong>它只适用于将数据从文件拷贝到 socket 套接字上的传输过程。</strong></p><h4 id="减少数据拷贝次数：splice"><a href="#减少数据拷贝次数：splice" class="headerlink" title="减少数据拷贝次数：splice"></a>减少数据拷贝次数：splice</h4><p>1、sendfile 只适用于将数据从文件拷贝到 socket 套接字上，同时需要硬件的支持，这也限定了它的使用范围。Linux 在 2.6.17 版本引入 splice 系统调用，不仅不需要硬件支持，还实现了两个文件描述符之间的数据零拷贝。splice 的伪代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">splice(fd_in, off_in, fd_out, off_out, len, flags);</span><br></pre></td></tr></table></figure><p>2、splice 系统调用可以在内核空间的读缓冲区（read buffer）和网络缓冲区（socket buffer）之间建立管道（pipeline），从而避免了两者之间的 CPU 拷贝操作。</p><p><strong>3、过程</strong></p><p>基于 splice 系统调用的零拷贝方式，整个拷贝过程会发生 <strong>2 次上下文切换，0 次 CPU 拷贝以及 2 次 DMA 拷贝</strong>，用户程序读写数据的流程如下：</p><ul><li>用户进程通过 splice() 函数向内核（kernel）发起系统调用，上下文从用户态（user space）切换为内核态（kernel space）。</li><li>CPU 利用 DMA 控制器将数据从主存或硬盘拷贝到内核空间（kernel space）的读缓冲区（read buffer）。</li><li>CPU 在内核空间的读缓冲区（read buffer）和网络缓冲区（socket buffer）之间建立管道（pipeline）。</li><li>CPU 利用 DMA 控制器将数据从网络缓冲区（socket buffer）拷贝到网卡进行数据传输。</li><li>上下文从内核态（kernel space）切换回用户态（user space），splice 系统调用执行返回。</li></ul><img src="https://img-blog.csdnimg.cn/67738875598b4976991a9195298b110e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><p>4、splice 拷贝方式也同样存在<strong>用户程序不能对数据进行修改的问题</strong>。除此之外，它使用了 Linux 的管道缓冲机制，可以用于任意两个文件描述符中传输数据，但是它的两个文件描述符参数中有一个必须是管道设备。</p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>无论是传统 I&#x2F;O 拷贝方式还是引入零拷贝的方式，<strong>2 次 DMA Copy 是都少不了的</strong>，因为两次 DMA 都是依赖硬件完成的。</p><p>下面从 CPU 拷贝次数、DMA 拷贝次数以及系统调用几个方面总结一下上述几种 I&#x2F;O 拷贝方式的差别</p><ul><li><strong>传统（read+write）</strong><ul><li>发起read</li><li><strong>DMA拷贝</strong>：拷贝到cpu内核空间的读缓冲区</li><li><strong>cpu拷贝</strong>：内核空间读缓冲区拷贝到用户空间用户缓冲区</li><li>发起write</li><li><strong>cpu拷贝</strong>：用户缓冲区拷贝到网络缓冲区</li><li><strong>DMA拷贝</strong>：DMA将数据从网络缓冲区拷贝到网卡</li></ul></li><li><strong>内存映射（mmap+write）</strong><ul><li>发起mmap</li><li>用户缓冲区和读缓冲区进行内存地址映射</li><li><strong>DMA拷贝</strong>：DMA将数据拷贝到读缓冲区</li><li>发起write</li><li><strong>cpu拷贝</strong>：读缓冲区拷贝到网络缓冲区</li><li><strong>DMA拷贝</strong>：DMA将数据从网络缓冲区拷贝到网卡</li></ul></li><li><strong>sendfile</strong><ul><li>发起sendfile</li><li><strong>DMA拷贝</strong>：将数据拷贝到读缓冲区</li><li><strong>cpu拷贝</strong>：数据拷贝到网络缓冲区</li><li><strong>DMA拷贝</strong>：DMA将数据从网络缓冲区拷贝到网卡</li></ul></li><li><strong>sendfile+DMA gather copy</strong><ul><li>发起sendfile</li><li><strong>DMA拷贝</strong>：将数据拷贝到读缓冲区</li><li>CPU 把读缓冲区（read buffer）的文件描述符（file descriptor）和数据长度拷贝到网络缓冲区（socket buffer）</li><li><strong>DMA拷贝</strong>：基于已拷贝的文件描述符和数据长度，CPU 利用 DMA 控制器的 gather&#x2F;scatter 操作直接批量地将数据从内核的读缓冲区（read buffer）拷贝到网卡进行数据传输</li></ul></li><li><strong>splice</strong><ul><li>发起splice</li><li><strong>DMA拷贝</strong>：将数据拷贝到读缓冲区</li><li>CPU 在内核空间的读缓冲区（read buffer）和网络缓冲区（socket buffer）之间建立管道（pipeline）</li><li><strong>DMA拷贝</strong>：将数据从网络缓冲区（socket buffer）拷贝到网卡进行数据传输</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/05e7459b25f7439497b2c0eaea154891.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="消息队列的零拷贝"><a href="#消息队列的零拷贝" class="headerlink" title="消息队列的零拷贝"></a>消息队列的零拷贝</h4><p>RocketMQ 选择了 <code>mmap + write</code> 这种零拷贝方式，适用于业务级消息这种小块文件的数据持久化和传输；</p><p> Kafka 采用的是 <code>sendfile</code> 这种零拷贝方式，<strong>适用于系统日志消息这种高吞吐量的大块文件的数据持久化和传输</strong>。但是值得注意的一点是，Kafka 的索引文件使用的是 <code>mmap + write</code> 方式，数据文件使用的是 <code>sendfile</code> 方式。</p><img src="https://img-blog.csdnimg.cn/ab51fbf1c25448d2add180fcc23cee26.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><h2 id="进程间通信-1"><a href="#进程间通信-1" class="headerlink" title="进程间通信"></a>进程间通信</h2><h3 id="管道模型"><a href="#管道模型" class="headerlink" title="管道模型"></a>管道模型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep 关键字 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs kill <span class="number">-9</span></span><br></pre></td></tr></table></figure><p>这里面的竖线<code>|</code>就是一个管道。它会<strong>将前一个命令的输出，作为后一个命令的输入</strong>。</p><p>从管道的这个名称可以看出来，<strong>管道是一种单向传输数据的机制</strong>，它其实是一段缓存，里面的数据只能从一端写入，从另一端读出。<strong>如果想互相通信，我们需要创建两个管道才行</strong>。</p><p><strong>1、管道的两种类型</strong></p><ul><li><p><strong>匿名管道</strong></p><ul><li>没有名字，用完就销毁了</li></ul></li><li><p><strong>命名管道</strong></p><ul><li><p>需要通过<code>mkfifo</code>命令创建，管道以文件的形式存在，文件类型是p</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># hello是管道的名称</span></span><br><span class="line">mkfifo hello</span><br></pre></td></tr></table></figure></li><li><p>写入字符串，输入完命令之后命令会停住，<strong>需要读取才能结束</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;hello world&quot;</span> &gt; hello</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="消息队列模型"><a href="#消息队列模型" class="headerlink" title="消息队列模型"></a>消息队列模型</h3><img src="https://img-blog.csdnimg.cn/83f4f3b6b40f47a9a5c035471e6d0e90.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>消息队列是保存在<strong>内核</strong>中的消息链表，<strong>会涉及到用户态跟内核态到来回切换</strong>，双方约定好消息体到数据结构，然后发送数据时将数据分成一个个独立的数据单元消息体，需注意消息队列及单个消息都有上限。</p><h3 id="共享内存模型"><a href="#共享内存模型" class="headerlink" title="共享内存模型"></a>共享内存模型</h3><p>现代操作系统对内存管理采用的是虚拟内存技术，也就是每个进程都有自己独立的虚拟内存空间，不同进程的虚拟内存映射到不同的物理内存中。<strong>所以，即使进程A和进程B虚拟地址是一样的，真正访问的也是不同的物理内存地址</strong></p><p>该模式不涉及到用户态跟内核态来回切换，JVM 就是用的共享内存模式。并且并发编程也是个难点。</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>1、如果多个进程使用同一个共享内存就会产生冲突，所以需要一个保护机制；<strong>在System V IPC进程间通信机制体系中使用信号量</strong>，因此，信号量和共享内存需要配合使用</p><p>2、信号量其实是一个<strong>计数器</strong>，用于实现进程间的互斥和同步</p><ul><li><strong>P操作</strong>：申请资源，将信号量的数值减去N，表示资源被申请了，其他人不能使用</li><li><strong>V操作</strong>：归还资源，将信号量加上M，表示归还资源，其他人可以使用</li></ul><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>1、Linux提供了几十种信号，分别代表不同的意义，信号之间依靠他们的值来区分</p><p>2、信号可以在任何时候发送给某个进程，进程需要为信号配置信号处理函数</p><p><strong>3、信号是进程间通信机制中唯一的异步通信机制，可以在任何时候发送信号给某个进程</strong></p><ul><li>kill -9 1412：表示pid为1412的进程发送SIGKILL信号，用来立即结束该进程</li><li>Ctrl+C：表示SIGINT信号，表示终止该进程</li></ul><p>4、有信号发生时，进程一般有三种方式响应：</p><ul><li>执行默认操作</li><li>捕捉信号</li><li>忽略信号</li></ul><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>1、跨网络与不同主机上的进程之间通信</p><p>2、可以指定IPV4、IPV6、TCP、UDP类型，比如TCP协议通信的Socket模型如下：</p><img src="https://img-blog.csdnimg.cn/42d48c4a85244f998b9e1e2c63cea4a2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>1、创建者模式（5种）</strong></p><ul><li>单例模式</li><li>原型模式</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>建造者模式</li></ul><p><strong>2、结构型模式（7种）</strong></p><ul><li>代理模式</li><li>适配器模式</li><li>桥接模式</li><li>装饰者模式</li><li>外观模式</li><li>享元模式</li><li>组合模式</li></ul><p><strong>3、行为型模式（11种）</strong></p><ul><li>模版方法模式</li><li>策略模式</li><li>命令模式</li><li>指责链模式</li><li>状态模式</li><li>观察者模式</li><li>中介者模式</li><li>迭代器模式</li><li>访问者模式</li><li>备忘录模式</li><li>解释器模式</li></ul><h2 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h2><blockquote><p>关注点是怎样创建对象？主要特点是将对象的创建和使用分离</p><p>降低系统的耦合度，使用者不需要关注对象的创建细节</p></blockquote><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保<strong>只有单个对象被创建</strong>，这个类提供了一种<strong>访问其唯一的对象的方式</strong>，可以直接访问，不需要实例化该类的对象。</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>主要有两种角色：</p><ul><li>单例类：只能创建一个实例的类</li><li>访问类：使用单例类</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><blockquote><p>分为两种：</p><ul><li>饿汉式：类加载就会导致该单实例对象被创建</li><li>懒汉式：类加载不会导致该单实例对象被创建，首次使用才创建</li></ul></blockquote><p><strong>1、饿汉式（静态变量方式）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式：静态成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//1、私有构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2、在本类中创建本类对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3、提供一个公共的访问方式让外界获取该对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建Singleton对象</span></span><br><span class="line">    Singleton instance = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">    Singleton instance1 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否是同一个对象</span></span><br><span class="line">    System.out.println(instance==instance1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、饿汉式（静态代码块）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式：静态代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1、私有构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2、声明Singleton类型的变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3、在静态代码块中赋值</span></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//4、提供获取对象的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、懒汉式（方式1—线程不安全）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式：线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1、私有构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2、声明Singleton类型的变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3、对外提供访问方式</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、懒汉式（方式2—线程安全）</strong></p><p><strong>使用synchronized</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式：线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1、私有构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2、声明Singleton类型的变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3、对外提供访问方式</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、懒汉式（方式3—双重检查锁）</strong></p><p>对于getInstance方法来说，绝大部分是读操作，使用synchronized会有损性能，没必要让每个线程都要持有锁，需要调整加锁的时机，产生了一种新的实现模式—<strong>双重检查</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1、私有构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2、声明Singleton类型的成员变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3、对外提供公共的访问方式</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//第一次判断</span></span><br><span class="line">    <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">        <span class="comment">//第二次判断</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">          instance=<span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检查锁模式解决了单例、性能、线程安全问题，<strong>但是存在问题，在多线程的情况下，可能会存在空指针，因为JVM在实例化对象的时候会进行优化和指令重排序操作，要解决双重检查锁模式带来的空指针异常，需要使用Volatile关键字</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1、私有构造方法</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2、声明Singleton类型的成员变量</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3、对外提供公共的访问方式</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//第一次判断</span></span><br><span class="line">    <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">        <span class="comment">//第二次判断</span></span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">          instance=<span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、懒汉式（方式4—静态内部类）</strong></p><p>由于JVM加载外部类的过程中不会加载静态内部类，只有内部类的属性&#x2F;方法被调用才会被加载，并初始化其静态属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义一个静态内部类</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">    <span class="comment">//在内部类声明并初始化外部类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//提供访问方式</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7、枚举方式</strong></p><p>因为枚举类型是线程安全的，并且只会装载一次，是唯一一种不会被破坏的单例实现模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p><strong>可以使用序列化、反射破坏单例模式</strong></p><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p>1、序列化</p><ul><li>在Singleton类中添加<code>readResolve</code>方法，在反序列化时被反射调用，如果定义了这个方法就返回这个方法的值，否则就返回new出来的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不能创建多个对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    flag=<span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发</title>
      <link href="/2022/01/19/Java%E5%B9%B6%E5%8F%91/"/>
      <url>/2022/01/19/Java%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<img src="https://img-blog.csdnimg.cn/20210319230335785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 28%;" /><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h2 id="并发编程的挑战"><a href="#并发编程的挑战" class="headerlink" title="并发编程的挑战"></a>并发编程的挑战</h2><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>1、即使是单核处理器也支持多线程，CPU通过给每一个线程分配<span style="background: yellow;">CPU时间片</span>来实现这个机制。</p><p>2、<strong>上下文切换</strong>：CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务；但是在切换前会保存上一个任务的状态，以便切换回这个任务。<span style="background: yellow;">任务从保存到再次加载的过程就是一次上下文切换</span></p><p>3、减少上下文切换的方法：</p><ul><li><strong>无锁并发编程</strong>：使用一些方法避免使用锁</li><li><strong>CAS算法</strong>：使用CAS算法更新数据，不需要加锁</li><li><strong>使用最少线程和使用线程</strong>：避免创建不需要的线程</li><li><strong>使用协程</strong>：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>避免死锁的几个方法：</p><ul><li>避免一个线程同时获取多个锁</li><li>避免一个线程在锁内同时占用多个资源</li><li>使用lock.trylock()来替代使用内部锁机制</li><li>对于数据库锁，加锁和解锁在一个数据库连接里</li></ul><h2 id="线程、进程、并发、并行"><a href="#线程、进程、并发、并行" class="headerlink" title="线程、进程、并发、并行"></a>线程、进程、并发、并行</h2><p>1、<strong>进程</strong>：进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。</p><ul><li>一个进程可以包含多个线程，至少包含一个</li><li><strong>Java默认有几个线程？</strong><br>2个线程：main线程、GC线程</li></ul><p>2、<strong>线程</strong>：线程是一个比进程更小的执行单位</p><ul><li>对于java：Thread、Runnable、Callable</li><li><strong>Java可以开启线程吗？</strong><br>不可以，调用本地方法<code>start0()</code>，底层的C++，Java无法直接操作硬件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">        group.add(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>3、<strong>并发</strong></p><ul><li>同一时间段，多个任务都在执行 (单位时间内不一定同时执行)；</li><li>CPU 一核 ，模拟出来多条线程，快速交替</li><li><span style="background: yellow;">本质</span>：充分利用CPU的资源</li></ul><p>4、<strong>并行</strong></p><ul><li>单位时间内，多个任务同时执行</li><li>CPU 多核，多个线程同时进行；线程池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取CPU的核数</span></span><br><span class="line">        <span class="comment">//CPU密集型，IO密集型</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p><img src="https://img-blog.csdnimg.cn/20210317193438137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>线程状态（6个）：</p><ul><li><p>New（新建）</p></li><li><p>Runnable（可运行）</p></li><li><p>Blocked（阻塞）：进入阻塞状态的唯一前提是在等待获取同步锁。</p><ul><li>只有两种情况可以使线程进入阻塞状态：一是<strong>等待进入synchronized块或方法</strong>，另一个是在<strong>调用wait()方法后重新进入synchronized块或方法。</strong></li></ul></li><li><p>Wating（等待，死等）</p><ul><li>进入方法：<ul><li>没有设置TimeOut参数的Object.wait()方法</li><li>没有设置 Timeout 参数的 Thread.join() 方法</li><li>LockSupport.park() 方法</li></ul></li><li>退出方法：<ul><li>Object.notify() &#x2F; Object.notifyAll()（wait）</li><li>被调用的线程执行完毕（join）</li></ul></li></ul></li><li><p>Timed waiting（计时等待，超时等待）</p><ul><li>进入方法：<ul><li>sleep方法</li><li>设置了TimeOut参数的wait方法</li><li>设置了 Timeout 参数的 Thread.join() 方法</li></ul></li><li>退出方法：<ul><li>sleep：时间结束</li><li>wait：时间结束 &#x2F; Object.notify() &#x2F; Object.notifyAll()</li><li>join：时间结束 &#x2F; 被调用的线程执行完毕</li></ul></li></ul></li><li><p>Terminated（终止）</p></li></ul><h4 id="wait、notify"><a href="#wait、notify" class="headerlink" title="wait、notify"></a>wait、notify</h4><h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//本地方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>wait方法需要try-catch，因为需要抛出异常</p><h4 id="是否释放锁"><a href="#是否释放锁" class="headerlink" title="是否释放锁"></a>是否释放锁</h4><ul><li>wait方法会释放锁</li><li>notify方法不会释放锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">data</span></span>&#123;</span><br><span class="line">    Object o = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">w</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wait进入临界区&quot;</span>);</span><br><span class="line">            o.wait();</span><br><span class="line">            System.out.println(<span class="string">&quot;不会输出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">n</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;notify进入临界区&quot;</span>);</span><br><span class="line">            o.notify();</span><br><span class="line">            System.out.println(<span class="string">&quot;调用了 notify() ，这里仍然会进行输出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wait进入临界区</span><br><span class="line">notify进入临界区</span><br><span class="line">调用了 notify() ，这里仍然会进行输出</span><br><span class="line">不会输出</span><br></pre></td></tr></table></figure><p>说明了 wait() 会释放锁， notify() 不会释放锁</p><h4 id="考虑使用-Condition"><a href="#考虑使用-Condition" class="headerlink" title="考虑使用 Condition"></a>考虑使用 Condition</h4><p><code>Condition</code>是Java中一个<code>替代 wait notify</code>的一个库，他可以**<code>解决过早唤醒的问题，并且解决了 wait()不能区分其返回是否是因为超时的问题</code>**</p><h4 id="为什么要放在同步代码块中"><a href="#为什么要放在同步代码块中" class="headerlink" title="为什么要放在同步代码块中"></a>为什么要放在同步代码块中</h4><p>wait方法是一个本地方法，它是通过一个monitor对象锁（管程）来实现的，<strong>只有拥有了该对象的监视器锁才能调用wait方法</strong>，那么怎么调用wait方法呢？</p><p>3、是通过增加<code>synchronized</code>关键字来实现的，这也是为什么wait必须在synchronized修饰的代码中运行的原因。<strong>但只要调用了wait方法，monitor锁就会被马上释放掉。</strong></p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>当调用wait()方法后，线程会进入WAITING(等待状态)，后续被notify()后，并没有立即被执行，而是进入等待获取锁的阻塞队列。</p><p><strong>对于每个对象来说，都有自己的等待队列和阻塞队列</strong>。以前面的生产者、消费者为例，我们拿obj对象作为对象锁，配合图示。内部流程如下</p><ol><li>当线程A（消费者）调用wait()方法后，线程A让出锁，自己进入等待状态，同时加入锁对象的等待队列。</li><li>线程B（生产者）获取锁后，调用notify方法通知锁对象的等待队列，使得线程A从等待队列进入阻塞队列。</li><li>线程A进入阻塞队列后，直至线程B释放锁后，线程A竞争得到锁继续从wait()方法后执行。</li></ol><h3 id="wait-和sleep-的区别"><a href="#wait-和sleep-的区别" class="headerlink" title="wait()和sleep()的区别"></a>wait()和sleep()的区别</h3><p><strong>1、来自不同的类</strong></p><ul><li>wait：Object，必须由锁对象进行调用</li><li>sleep：Thread，静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure><p><strong>2、关于锁的释放</strong></p><ul><li>wait：会释放锁</li><li>sleep：抱着锁睡觉，不会释放锁</li></ul><p><strong>3、使用的范围不同</strong></p><ul><li>wait：只能在同步代码块中，常被用于线程间交互&#x2F;通信</li><li>sleep：可以在任何地方睡，通常被用于暂停执行</li></ul><p><strong>4、线程的苏醒</strong></p><ul><li>wait：方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 notify() 或者 notifyAll() 方法。</li><li>sleep： 方法执行完成后，线程会自动苏醒。或者可以使用 wait(long timeout) 超时后线程会自动苏醒。</li></ul><p><strong>5、方法属性</strong></p><ul><li>wait：实例方法</li><li>sleep：静态方法</li></ul><h3 id="Join方法"><a href="#Join方法" class="headerlink" title="Join方法"></a>Join方法</h3><p><strong>等待这个线程死亡再执行其他线程，其他线程阻塞</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">      <span class="comment">//在获得通知前该线程将一直等待</span></span><br><span class="line">      wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">      <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">      <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//wait方法</span></span><br><span class="line">      wait(delay);</span><br><span class="line">      now = System.currentTimeMillis() - base;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     c t1 = <span class="keyword">new</span> c(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">     c t2 = <span class="keyword">new</span> c(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">     </span><br><span class="line">     t1.start();</span><br><span class="line">     <span class="comment">//t1结束后t2执行</span></span><br><span class="line">     t1.join();</span><br><span class="line">     t2.start();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="线程使用方式"><a href="#线程使用方式" class="headerlink" title="线程使用方式"></a>线程使用方式</h3><p>有三种使用线程的方法:</p><ul><li>实现 Runnable 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyRunnable instance = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(instance);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现 Callable 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    MyCallable mc = <span class="keyword">new</span> MyCallable();</span><br><span class="line">    FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(ft.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承 Thread 类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">    mt.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程是如何启动的"><a href="#线程是如何启动的" class="headerlink" title="线程是如何启动的"></a>线程是如何启动的</h2><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0de1c7c0cc04fab9286747710e971f6~tplv-k3u1fbpfcp-zoom-1.image" alt="图 19-1 线程启动分析" style="zoom:50%;" /><p>基本核心过程包括</p><ul><li><code>Java 创建线程和启动</code></li><li><code>调用本地方法 start0()</code></li><li><code>JVM 中 JVM_StartThread 的创建和启动</code></li><li><code>设置线程状态等待被唤醒</code></li><li><code>根据不同的OS启动线程并唤醒</code></li><li><code>最后回调 run() 方法启动 Java 线程</code></li></ul><h4 id="Java-层面-Thread-启动"><a href="#Java-层面-Thread-启动" class="headerlink" title="Java 层面 Thread 启动"></a>Java 层面 Thread 启动</h4><h5 id="start-方法"><a href="#start-方法" class="headerlink" title="start() 方法"></a>start() 方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JDK 源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">  group.add(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    start0();</span><br><span class="line">    started = <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">        group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>start()</code> 是一个 <code>synchronized</code> 方法，但为了避免多次调用，在方法中会由线程状态判断。<code>threadStatus != 0</code>。</p></li><li><p><code>group.add(this)</code>，是把当前线程加入到线程组，ThreadGroup。</p></li><li><p><code>start0()</code>，是一个本地方法，通过 JNI 方式调用执行。这一步的操作才是启动线程的核心步骤。</p></li></ul><h5 id="start0-本地方法"><a href="#start0-本地方法" class="headerlink" title="start0() 本地方法"></a>start0() 本地方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地方法 start0</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册本地方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* Make sure registerNatives is the first thing &lt;clinit&gt; does. */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    registerNatives();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><ul><li><code>start0()</code>，是一个本地方法，用于启动线程。</li><li><code>registerNatives()</code>，这个方法是用于注册线程执行过程中需要的一些本地方法，比如：<code>start0</code>、<code>isAlive</code>、<code>yield</code>、<code>sleep</code>、<code>interrupt0</code>等。</li></ul><h4 id="JVM-创建线程"><a href="#JVM-创建线程" class="headerlink" title="JVM 创建线程"></a>JVM 创建线程</h4><h4 id="JVM-启动线程"><a href="#JVM-启动线程" class="headerlink" title="JVM 启动线程"></a>JVM 启动线程</h4><h4 id="JVM-线程回调"><a href="#JVM-线程回调" class="headerlink" title="JVM 线程回调"></a>JVM 线程回调</h4><h5 id="thread-gt-run-JavaThread-run"><a href="#thread-gt-run-JavaThread-run" class="headerlink" title="thread-&gt;run()[JavaThread::run()]"></a>thread-&gt;run()[JavaThread::run()]</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The first routine called by a new Java thread</span></span><br><span class="line"><span class="keyword">void</span> JavaThread::run() &#123;</span><br><span class="line">  <span class="comment">// ... 初始化线程操作</span></span><br><span class="line">  </span><br><span class="line">  thread_main_inner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>os_linux.cpp 类中的 java_start 里的 thread-&gt;run()，最终调用的就是 thread.cpp 的 JavaThread::run() 方法。</li><li>这部分还需要继续往下看，<code>thread_main_inner();</code> 方法。</li></ul><h5 id="thread-main-inner"><a href="#thread-main-inner" class="headerlink" title="thread_main_inner"></a>thread_main_inner</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> JavaThread::thread_main_inner() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;has_pending_exception() &amp;&amp;</span><br><span class="line">      !java_lang_Thread::is_stillborn(<span class="keyword">this</span>-&gt;threadObj())) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="function">ResourceMark <span class="title">rm</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">      <span class="keyword">this</span>-&gt;set_native_thread_name(<span class="keyword">this</span>-&gt;get_thread_name());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">HandleMark <span class="title">hm</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;entry_point()(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  DTRACE_THREAD_PROBE(stop, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>-&gt;exit(<span class="keyword">false</span>);</span><br><span class="line">  delete <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>this-&gt;entry_point()</code>，实际调用的就是 3.1 中的 thread_entry 方法。</li><li><code>thread_entry</code>，方法最终会调用到 <code>JavaCalls::call_virtual</code> 里的<code>vmSymbols::run_method_name()</code>。也就是 run() 方法，至此线程启动完成。</li></ul><h3 id="基础线程机制"><a href="#基础线程机制" class="headerlink" title="基础线程机制"></a>基础线程机制</h3><h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h4><p>Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。</p><p>主要有三种 Executor:</p><ul><li>CachedThreadPool: 一个任务创建一个线程；</li><li>FixedThreadPool: 所有任务只能使用固定大小的线程；</li><li>SingleThreadExecutor: 相当于大小为 1 的 FixedThreadPool。</li></ul><h4 id="Daemon"><a href="#Daemon" class="headerlink" title="Daemon"></a>Daemon</h4><p>守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。</p><p>当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。</p><p>main() 属于非守护线程。</p><p>使用 setDaemon() 方法将一个线程设置为守护线程。</p><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h4><p>Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。</p><p>sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理</p><h4 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h4><p>对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。</p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>线程池：三大方法、7大参数、4中拒绝策略</p><blockquote><p>池化技术</p></blockquote><p>程序的运行，本质：占有系统的资源；优化资源的使用&#x3D;》池化技术</p><p>线程池、连接池、内存池、对象池</p><p>1、池化技术：事先准备好一些资源，有人要用就来我这里拿，用完之后还给我</p><p>2、<strong>线程池的好处：</strong></p><ul><li>降低资源消耗</li><li>提高响应的速度</li><li>方便管理</li></ul><p><strong>线程复用、可以控制最大并发数、管理线程</strong></p><h2 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h2><p>Executors：工具类、3大方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//单个线程</span></span><br><span class="line">        ExecutorService threadPool = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="comment">//创建一个固定的线程池大小</span></span><br><span class="line">        ExecutorService threadPool2 = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//可伸缩的</span></span><br><span class="line">        ExecutorService threadPool3 = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//使用线程池创建线程</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                threadPool3.execute(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭线程池</span></span><br><span class="line">            threadPool3.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7大参数"><a href="#7大参数" class="headerlink" title="7大参数"></a>7大参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                 <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                 <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质：<code>ThreadPoolExecutor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,//核心线程池大小</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,//最大容纳的同时执行线程数量</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,//超时了，没有人调用就会释放</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,//超时单位</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory,//线程工厂，创建线程的，一般不动</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler//拒绝策略</span></span></span><br><span class="line"><span class="params"><span class="function">                          )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210318155930199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" />**银行案例：**<img src="https://img-blog.csdnimg.cn/2021031816040788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" />手动创建线程池：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService service = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="comment">//银行满了，还有人进来，不处理这个人，抛出异常</span></span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br></pre></td></tr></table></figure><p><strong>最大承载：队列+max值</strong></p><h2 id="4种策略"><a href="#4种策略" class="headerlink" title="4种策略"></a>4种策略</h2><p>1、<code>CallerRunsPolicy</code>：哪来的去哪里，用main线程来处理，将任务退回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">        r.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、<code>AbortPolicy</code>：不处理，抛出异常（默认）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">&quot;Task &quot;</span> + r.toString() +</span><br><span class="line">                                                 <span class="string">&quot; rejected from &quot;</span> +</span><br><span class="line">                                                 e.toString());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>3、<code>DiscardPolicy</code>：队列满了，丢掉任务，不会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//什么也不做</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>4、<code>DiscardOldestPolicy</code>：队列满了，尝试和最早的线程竞争</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">                e.getQueue().poll();</span><br><span class="line">                e.execute(r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="小结和拓展"><a href="#小结和拓展" class="headerlink" title="小结和拓展"></a>小结和拓展</h2><p><strong>1、池的最大大小如何定义？</strong></p><ul><li><strong>CPU密集型</strong>：几核，就是几，可以保持CPU效率最高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取CPU核数</span></span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure><ul><li><strong>IO密集型</strong>：判断你的程序中十分耗IO的线程有多少个，大于这个数就可以了（一般两倍）</li></ul><h2 id="底层工作原理"><a href="#底层工作原理" class="headerlink" title="底层工作原理"></a>底层工作原理</h2><img src="https://img-blog.csdnimg.cn/20210327210905296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210327211704770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p><img src="https://img-blog.csdnimg.cn/20210327211925307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="callable接口"><a href="#callable接口" class="headerlink" title="callable接口"></a>callable接口</h1><p><strong>1、与Runnable的区别：</strong></p><ul><li>Runnable没有返回值，callable有返回值</li><li>run方法不会抛异常，call会抛异常</li></ul><p>2、Callable接口代表一段可以调用并返回结果的代码;</p><p>Future接口表示异步任务，是还没有完成的任务给出的未来结果。</p><p>所以说Callable用于产生结果，Future用于获取结果。 </p><p><strong>3、FutureTask</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">add</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> MyThread());</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(futureTask,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ThreadLocal类用来提供线程内部的局部变量，不同线程之间不会相互干扰，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或组件之间一些公共变量传递的复杂度。</p><p>线程隔离</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><img src="https://img-blog.csdnimg.cn/20210328083051319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">  get g = <span class="keyword">new</span> get();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      g.setA(Thread.currentThread().getName()+<span class="string">&quot;set&quot;</span>);</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;----&quot;</span>+g.getA());</span><br><span class="line">    &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get</span></span>&#123;</span><br><span class="line">  ThreadLocal&lt;String&gt; t = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">  String a;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">    t.set(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span>----Thread-0set</span><br><span class="line">Thread-<span class="number">4</span>----Thread-4set</span><br><span class="line">Thread-<span class="number">3</span>----Thread-3set</span><br><span class="line">Thread-<span class="number">2</span>----Thread-2set</span><br><span class="line">Thread-<span class="number">1</span>----Thread-1set</span><br></pre></td></tr></table></figure><h2 id="与synchronized的区别"><a href="#与synchronized的区别" class="headerlink" title="与synchronized的区别"></a>与synchronized的区别</h2><p>ThreadLocal和synchronized都是用来处理多线程并发访问变量的问题</p><p><strong>1、synchronized</strong></p><ul><li>原理：以时间换空间，只提供了一个变量，让不同的线程排队访问</li><li>侧重点：多个线程之间访问资源的同步</li></ul><p><strong>2、ThreadLocal</strong></p><ul><li>原理：以空间换时间，每一个线程都有一份变量的副本，从而实现同时访问不干扰</li><li>侧重点：多线程中让每个线程直接的数据相互隔离</li></ul><p><strong>总结：在上述案例中虽然使用两者都可以解决问题，但是使用ThreadLocal会有更高的并发性</strong></p><h2 id="运用场景"><a href="#运用场景" class="headerlink" title="运用场景"></a>运用场景</h2><p>转账案例</p><p><img src="https://img-blog.csdnimg.cn/20210328090928555.png" alt="在这里插入图片描述"></p><h2 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h2><p>在JDK8中，每个Thread维护一个ThreadLocalMap，这个Map的key是ThreadLocal本身，value是真正要存储的值Object</p><img src="https://img-blog.csdnimg.cn/2021032809125924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><img src="https://img-blog.csdnimg.cn/20210328091329488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>JDK8的设计方案好处：</p><ul><li>每个Map存储的Entry数量变少（之前Entry的数量是由Thread数量决定的，现在是由ThreadLocal数量决定的，尽量避免哈希冲突的发生）</li><li>当Thread销毁的时候，ThreadLocalMap也会销毁，减少内存的使用</li></ul><h2 id="核心方法源码"><a href="#核心方法源码" class="headerlink" title="核心方法源码"></a>核心方法源码</h2><h3 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前线程对象</span></span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  <span class="comment">//获取当前线程对象中维护的ThreadLocalMap</span></span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="comment">//判断Map是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    <span class="comment">//存在就调用map.set方法设置此实体Entry</span></span><br><span class="line">    map.set(<span class="keyword">this</span>, value);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">//不存在就进行ThreadLocalMap的初始化</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//Thread类：ThreadLocal.ThreadLocalMap threadLocals = null;</span></span><br><span class="line">  <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">  t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">      T result = (T)e.value;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//情况1:map不存在</span></span><br><span class="line">  <span class="comment">//情况2:map存在，但是不存在与当前ThreadLocal关联的entry</span></span><br><span class="line">  <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//调用initialValue获取初始化的值</span></span><br><span class="line">  T value = initialValue();</span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    map.set(<span class="keyword">this</span>, value);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">  <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">    m.remove(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程：</p><ul><li>获取当前线程，根据当前线程获取一个Map</li><li>获取的Map不为空就移除对应的entry</li></ul><h3 id="initialValue方法"><a href="#initialValue方法" class="headerlink" title="initialValue方法"></a>initialValue方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回该线程局部变量的初始值</p><ul><li>这个方法是一个延迟调用方法，set方法没有调用就调用了get方法才会执行，并且只执行一次</li><li>这个方法缺省值返回null</li><li>如果想要一个除null之外的初始值，可以重写此方法</li></ul><h2 id="ThreadLocalMap源码"><a href="#ThreadLocalMap源码" class="headerlink" title="ThreadLocalMap源码"></a>ThreadLocalMap源码</h2><p><strong>没有实现Map接口，内部的Entry也是独立实现的</strong></p><img src="E:/Users/zhangtao/Desktop/截屏2021-03-28 上午9.34.28.png" alt="截屏2021-03-28 上午9.34.28" style="zoom:50%;" /><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始容量，必须是2的次幂</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"><span class="comment">//存放数据的table</span></span><br><span class="line"><span class="keyword">private</span> Entry[] table;</span><br><span class="line"><span class="comment">//数组里面entry的个数，用来判断是否超过阈值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//进行扩容的阈值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承WeakReference，用ThreadLocal作为key，key是弱引用，目的是将ThreadLocal对象的生命周期和线程生命周期解绑</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">  Object value;</span><br><span class="line"></span><br><span class="line">  Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">    <span class="keyword">super</span>(k);</span><br><span class="line">    value = v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="弱引用和内存泄漏"><a href="#弱引用和内存泄漏" class="headerlink" title="弱引用和内存泄漏"></a>弱引用和内存泄漏</h3><p><strong>1、内存泄露</strong></p><ul><li>Memory overflow：内存溢出，没有足够的内存供申请者使用</li><li>Memory leak：内存泄漏，已动态分配的堆内存因为某种原因无法释放，造成内存浪费</li></ul><p><strong>2、弱引用</strong></p><p>Java的引用有4种类型：强、软、弱、虚</p><ul><li><strong>强引用：</strong>最常见的普通对象引用，垃圾回收器不会回收这种对象</li><li><strong>弱引用：</strong>垃圾回收器一旦发现只具有弱引用的对象，不管内存是否足够，都会回收它的内存</li></ul><p><strong>3、如果key使用强引用</strong></p><p>如果ThreadLocalMap的key使用强引用，会出现内存泄露吗？</p><p><img src="https://img-blog.csdnimg.cn/20210328094407827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4、如果key使用弱引用</p><p><img src="https://img-blog.csdnimg.cn/20210328094927312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210328095431367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="hash冲突的解决"><a href="#hash冲突的解决" class="headerlink" title="hash冲突的解决"></a>hash冲突的解决</h3><p>threadLocal的set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前线程对象</span></span><br><span class="line">  Thread t = Thread.currentThread();</span><br><span class="line">  <span class="comment">//获取当前线程对象中维护的ThreadLocalMap</span></span><br><span class="line">  ThreadLocalMap map = getMap(t);</span><br><span class="line">  <span class="comment">//判断Map是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    <span class="comment">//存在就调用map.set方法设置此实体Entry</span></span><br><span class="line">    map.set(<span class="keyword">this</span>, value);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">//不存在就进行ThreadLocalMap的初始化</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//Thread类：ThreadLocal.ThreadLocalMap threadLocals = null;</span></span><br><span class="line">  <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">  t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先获得当前线程，根据线程获取map</p><p>获取的map不为空，则调用threadlocalmap的set方法</p><p>获取的map为空，则调用threadlocalmap的构造方法</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">  <span class="comment">//默认容量16</span></span><br><span class="line">  table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">  <span class="comment">//计算索引</span></span><br><span class="line">  <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">  <span class="comment">//设置值</span></span><br><span class="line">  table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">  size = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//设置阈值</span></span><br><span class="line">  setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阈值是初始容量的2&#x2F;3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="comment">//与斐波那契数列有关，尽量避免哈希冲突</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AtomicInteger的一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, delta);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="set方法-1"><a href="#set方法-1" class="headerlink" title="set方法"></a>set方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">  Entry[] tab = table;</span><br><span class="line">  <span class="keyword">int</span> len = tab.length;</span><br><span class="line">  <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//线性探测法</span></span><br><span class="line">  <span class="keyword">for</span> (Entry e = tab[i]; e != <span class="keyword">null</span>; e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">    <span class="comment">//获得key</span></span><br><span class="line">    ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">    <span class="comment">//如果key存在且相同</span></span><br><span class="line">    <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">      <span class="comment">//覆盖</span></span><br><span class="line">      e.value = value;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果key是空的，value不为空，说明之前的对象已经被回收了</span></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//替换，包括垃圾清理动作，防止内存泄漏</span></span><br><span class="line">      replaceStaleEntry(key, value, i);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//如果没有遍历成功，就创建新值 </span></span><br><span class="line">  tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">  <span class="keyword">int</span> sz = ++size;</span><br><span class="line">  <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">    rehash();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  expungeStaleEntries();</span><br><span class="line">  <span class="comment">//如果size大于3/4的阈值，扩容</span></span><br><span class="line">  <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">    resize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Entry[] oldTab = table;</span><br><span class="line">  <span class="keyword">int</span> oldLen = oldTab.length;</span><br><span class="line">  <span class="comment">//扩容两倍</span></span><br><span class="line">  <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>;</span><br><span class="line">  Entry[] newTab = <span class="keyword">new</span> Entry[newLen];</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//遍历旧数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</span><br><span class="line">    Entry e = oldTab[j];</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">      ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">      <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">        e.value = <span class="keyword">null</span>; <span class="comment">// Help the GC</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>)</span><br><span class="line">          h = nextIndex(h, newLen);</span><br><span class="line">        newTab[h] = e;</span><br><span class="line">        count++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setThreshold(newLen);</span><br><span class="line">  size = count;</span><br><span class="line">  table = newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用信息探测法解决哈希冲突：</strong></p><p>该方法一次探测下一个地址，直到有空的地址后插入，如果整个空间都没有空余地址，则溢出</p><p>假设当前table为16，key计算出的hash值为14，如果位置上已经有值，并且key与当前key不一样，就发生了哈希冲突，这时候将14加1得到15，判断15的位置，如果有冲突就会回到0，以此类推，直到可以插入</p><h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><h2 id="Java内存模型-1"><a href="#Java内存模型-1" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><h3 id="硬件的效率和一致性"><a href="#硬件的效率和一致性" class="headerlink" title="硬件的效率和一致性"></a>硬件的效率和一致性</h3><p>1、<strong>高速缓存（Cache）</strong>：内存与CPU之间的缓冲，将运算所需要使用的数据复制到缓冲中，让运算能快速进行，当运算结束后再从缓存同步回内存之中，这样处理器就不需要等待缓慢的内存读写了</p><p>引出了新的问题：<strong>缓存一致性</strong>，为了解决该问题，需要各个处理器访问缓存时遵循一些协议（MSI、MESI、MOSI等）</p><p>2、<strong>乱序执行优化</strong>：为了使处理器内部的运算单元能够被尽量充分利用，处理器可能会对输入代码进行乱序执行优化，处理器会在计算之后将乱序执行的结果重组，保证结果与顺序执行的结果一致，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致。因此，如果存在一个计算任务依赖另外一个计算任务的中间结果，那么<span style="background: yellow;">其顺序性不能靠代码的先后顺序保证</span>。</p><p>Java虚拟机类似的操作：<span style="background: yellow;">指令重排序优化</span></p><h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><p>1、JMM 即 Java Memory Model，它定义了<span style="background: yellow;">主存</span>、<span style="background: yellow;">工作内存</span>抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等</p><p>2、JMM的<strong>主要目的</strong>：定义程序中各种变量的访问规则，即关注在虚拟机中把变量存储到内存和从内存中取出变量值这样的底层细节</p><h4 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h4><p>1、<strong>变量</strong>：实例字段、静态字段、构成数组对象的元素，<strong>不包含局部变量和方法参数</strong>（线程私有的，不会被共享）</p><p>2、<strong>主内存</strong>：存储所有的变量</p><ul><li>与物理上的主内存对比？在物理上，这里的主内存只是虚拟机内存的一部分</li></ul><p>3、<strong>工作内存</strong>：每个线程都有自己的工作内存</p><ul><li>与高速缓存类比</li><li>保存了被该线程使用的变量的<strong>主内存副本</strong></li><li>线程对变量的所有操作都在工作内存中进行，而不能直接读写主内存的数据</li></ul><img src="https://img-blog.csdnimg.cn/20210318213002745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h4><p>主内存与工作内存之间的具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存这一类的实现细节</p><img src="https://img-blog.csdnimg.cn/20210318205404626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 67%;" /><blockquote><p><strong>8个操作</strong>：</p></blockquote><p>1、<strong>lock</strong>（锁定）：作用于<strong>主内存的变量</strong>，它把一个变量标识为一条线程独占的状态</p><p>2、<strong>unlock</strong>（解锁）：作用于<strong>主内存的变量</strong>，它把一个处于锁定状态的变量释放出来，释放后的变量可以被其他线程锁定</p><p>3、<strong>read</strong>（读取）：作用于<strong>主内存的变量</strong>，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load操作</p><p>4、<strong>load</strong>（载入）：作用于<strong>工作内存的变量</strong>，它把read操作从主内存得到的变量值放入工作内存的变量副本中</p><p>5、<strong>use</strong>（使用）：作用于<strong>工作内存的变量</strong>，它把工作内存中的一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作</p><p>6、<strong>assign</strong>（赋值）：作用于<strong>工作内存的变量</strong>，它把执行引擎接受的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时将会执行这个操作</p><p>7、<strong>store</strong>（存储）：作用于<strong>工作内存的变量</strong>，它把工作内存中的一个变量的值传送到主内存中，以便随后的write操作使用</p><p>8、<strong>write</strong>（写入）：作用于<strong>主内存的变量</strong>，它把store操作从工作内存得到的变量值放到主内存的变量中</p><blockquote><p><strong>8个需要满足的规则</strong>：</p></blockquote><p>1、不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者工作内存发起store，主内存不write的情况出现</p><p>2、不允许一个线程丢弃最近的assign操作，即变量在工作内存改变了之后必须把变化同步回主内存</p><p>3、不允许一个线程没有原因（没有assign操作）的把数据从工作内存同步回主内存</p><p>4、一个变量只能在主内存诞生，不允许在工作内存直接使用一个没有被初始化的变量，也就是说在对一个变量实施use、store之前必须执行assign和load</p><p>5、一个变量在同一时刻只运行一个线程lock</p><p>6、对一个变量执行lock，<strong>会清空工作内存此变量的值</strong>，在执行引擎使用这个变量前，需要重新load或者assign操作以初始化</p><p>7、unlock前必须lock</p><p>8、执行unlock前必须store、write</p><h3 id="特性一：可见性"><a href="#特性一：可见性" class="headerlink" title="特性一：可见性"></a>特性一：可见性</h3><p><strong>问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">          <span class="keyword">while</span> (number==<span class="number">0</span>)&#123;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,<span class="string">&quot;t&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">      number=<span class="number">1</span>;</span><br><span class="line">      System.out.println(number);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>上面的程序存在一个问题：</strong>线程t不会停下来</p><p>为什么呢？分析一下：</p><p>1、初始状态，t线程刚开始从主内存读取了number的值到工作内存</p><img src="https://img-blog.csdnimg.cn/20210319112448555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、因为t线程要频繁从主内存中读取number的值，JIT编译器会将number的值缓存至自己的工作内存中的高速缓存中，减少对run的访问，提高效率</p><img src="https://img-blog.csdnimg.cn/20210319112624346.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>3、1s之后，main线程更改了number的值，并同步回主内存，而t是从自己的工作内存中的高速缓存中读取这个变量的值，结果永远是旧值</p><img src="https://img-blog.csdnimg.cn/20210319112749121.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="解决：Volatile关键字"><a href="#解决：Volatile关键字" class="headerlink" title="解决：Volatile关键字"></a>解决：Volatile关键字</h4><p>为了解决上面的这个问题，就需要把变量声明为<code>Volatile</code></p><ul><li><p>修饰成员变量和静态成员变量</p></li><li><p>指示JVM这个变量是共享的且不稳定的，<span style="background: yellow;">每次使用它都要去主存中读取</span></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><strong>当然，也可以使用synchronized解决这个问题</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">      <span class="keyword">while</span> (number==<span class="number">0</span>)&#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="string">&quot;t&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">  TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">  number=<span class="number">1</span>;</span><br><span class="line">  System.out.println(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特性二：原子性"><a href="#特性二：原子性" class="headerlink" title="特性二：原子性"></a>特性二：原子性</h3><p><strong>什么是原子性？</strong></p><p>不可分割，完整性，也即某个线程正在做具体业务时，中间不可以被分割或者加塞，需要整体完整</p><p>要么同时成功，要么同时失败</p><h3 id="特性三：有序性"><a href="#特性三：有序性" class="headerlink" title="特性三：有序性"></a>特性三：有序性</h3><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><p>Volatile是JVM提供的轻量级同步机制</p><h3 id="保证可见性"><a href="#保证可见性" class="headerlink" title="保证可见性"></a>保证可见性</h3><p>1、可见性：当一个线程修改了这个变量的值，新值对于其他线程都是立即可知的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">while</span> (number==<span class="number">0</span>)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="string">&quot;t&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">  TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">  number=<span class="number">1</span>;</span><br><span class="line">  System.out.println(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、如何保证可见性的？</p><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance = <span class="keyword">new</span> Singlenton(); <span class="comment">//instance是volatile变量</span></span><br></pre></td></tr></table></figure><p>转为汇编代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x01a3deld: movd $<span class="number">0x0</span>,<span class="number">0x1104800</span>(%esi);</span><br><span class="line"><span class="number">0x01a3de24</span>:lock add1 $<span class="number">0x0</span>,(%esp);</span><br></pre></td></tr></table></figure><p>对volatile变量修饰的共享变量进行写操作时会多出第二行汇编代码，<strong>lock前缀的指令</strong>在多核处理器下会引发两件事情：</p><ul><li>将当前处理器缓存行的数据写回系统内存</li><li>这个写回内存的操作会使在其他CPU里缓存了该内存地址的数据无效</li></ul><h3 id="不保证原子性"><a href="#不保证原子性" class="headerlink" title="不保证原子性"></a>不保证原子性</h3><blockquote><p>有人说：“volatile变量对所有线程是立即可见的，对volatile变量所有的写操作都能够立即反映到其他线程之中。也就是说volatile变量的运算在并发下是线程安全的”</p></blockquote><p>事实上，volatile变量在各个线程的工作内存中是不存在一致性问题的，但是Java的运算操作符是非原子操作，这导致volatile变量的运算在并发下一样是不安全的</p><p>对Voliate变量的<strong>单次读写</strong>是可以保证原子性的，如long和double类型变量，但是不能保证自增自减这种操作，因为本质上是读、写两次操作</p><p>也就是说，<span style="background: yellow;">volatile是不保证原子性的！！</span></p><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    number++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  <span class="comment">//20个线程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)&#123;</span><br><span class="line">                test_add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//需要等待上面20个线程都计算完成后再用main线程取得最后的结果</span></span><br><span class="line">  <span class="comment">//如果线程数量大于2，说明上面20个线程没有计算完</span></span><br><span class="line">    <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main19325</span><br></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>number++被拆分成3个指令</p><ul><li><p>执行GETFIELD：拿到主内存中的原始值number</p></li><li><p>执行IADD：进行加1操作</p></li><li><p>执行PUTFIELD：把工作内存中的值写回主内存中</p></li></ul><p>当多个线程并发执行PUTFIELD指令的时候，会出现写回<strong>主内存覆盖问题</strong>，所以才会导致最终结果不为20000，volatile不能保证原子性。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><ul><li>加<code>Synchronized</code>或者<code>lock</code></li><li>使用原子类保证原子性</li></ul><img src="https://img-blog.csdnimg.cn/20210318225446165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> AtomicInteger number = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_add</span><span class="params">()</span></span>&#123;</span><br><span class="line">    number.getAndIncrement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="禁止指令重排"><a href="#禁止指令重排" class="headerlink" title="禁止指令重排"></a>禁止指令重排</h3><p><strong>1、重排序分类</strong></p><p>计算机在执行程序时，为了提高性能，编译器和处理器常常会对指令进行重排，分为以下三种：</p><ul><li><strong>编译器优化的重排序</strong>：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序</li><li><strong>指令级并行的重排序</strong>：现代处理器采用了指令级并行技术（ILP）将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序</li><li><strong>内存系统的重排序</strong>：由于处理器使用缓存和读&#x2F;写缓冲区，这使得加载和存储操作看上去是在乱序执行</li></ul><p><img src="https://img-blog.csdnimg.cn/20210320104649190.png" alt="在这里插入图片描述"></p><p>第一个属于<strong>编译器重排序</strong>，第二个和第三个属于<strong>处理器重排序</strong></p><p>对于处理器重排序，JMM的处理器重排序会要求java编译器在生成指令序列时，插入特定类型的<strong>内存屏障指令</strong>，<span style="background: yellow;">通过内存屏障指令来禁止特定类型的处理器重排序</span></p><p><strong>2、分析</strong></p><ul><li>单线程环境下，确保程序最终执行结果和代码顺序执行的结果一致</li><li>处理器在进行重排序要考虑指令之间的<span style="background: yellow;">数据依赖性</span></li><li><strong>多线程环境下，线程交替执行，由于编译器重排的存在，两个线程使用的变量能否保证一致性是无法确定的，结果无法预测</strong></li></ul><p>数据依赖性</p><p>如果两个操作访问同一个变量，且两个操作中有一个写操作，此时两个操作存在数据依赖性，分为三个类型</p><ul><li>写后读</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=a</span><br></pre></td></tr></table></figure><ul><li>写后写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>;</span><br><span class="line">a=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>读后写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=b;</span><br><span class="line">b=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>以上三种情况，只要进行重排序，结果就会发生改变</p><p>编译器和处理器在重排序时，<strong>会遵守数据依赖性</strong></p><h4 id="as-if-serial语义"><a href="#as-if-serial语义" class="headerlink" title="as-if-serial语义"></a>as-if-serial语义</h4><p>1、as-if-serial语义：不管怎么重排序，<span style="background: yellow;">单线程程序的执行结果不能被改变</span>；编译器、runtime和处理器都必须尊重as-if-serial语义。</p><p>2、为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果</p><h4 id="happens-before语义"><a href="#happens-before语义" class="headerlink" title="happens-before语义"></a>happens-before语义</h4><p>先行发生原则，JMM 定义的两项操作间的偏序关系，是判断数据是否存在竞争的重要手段。</p><p>JMM 将 happens-before 要求禁止的重排序按是否会改变程序执行结果分为两类。对于会改变结果的重排序 JMM 要求编译器和处理器必须禁止，对于不会改变结果的重排序，JMM 不做要求。</p><p>JMM 存在一些天然的 happens-before 关系，无需任何同步器协助就已经存在。如果两个操作的关系不在此列，并且无法从这些规则推导出来，它们就没有顺序性保障，虚拟机可以对它们随意进行重排序。</p><ul><li><strong>程序次序规则：</strong>一个线程内写在前面的操作先行发生于后面的。</li><li><strong>管程锁定规则：</strong> unlock 操作先行发生于后面对同一个锁的 lock 操作。</li><li><strong>volatile 规则：</strong>对 volatile 变量的写操作先行发生于后面的读操作。</li><li><strong>线程启动规则：</strong>线程的 <code>start</code> 方法先行发生于线程的每个动作。</li><li><strong>线程终止规则：</strong>线程中所有操作先行发生于对线程的终止检测。</li><li><strong>对象终结规则：</strong>对象的初始化先行发生于 <code>finalize</code> 方法。</li><li><strong>传递性：</strong>如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C 。</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>as-if-serial 保证单线程程序的执行结果不变，happens-before 保证正确同步的多线程程序的执行结果不变。</p><p>这两种语义的目的都是为了在不改变程序执行结果的前提下尽可能提高程序执行并行度。</p><p>1、<strong>内存屏障（Memory Barriers）</strong></p><ul><li>又称为内存栅栏，是一个CPU指令</li></ul><p>作用：</p><ul><li>保证特定操作的执行顺序</li><li>强制刷出各种CPU的缓存数据，保证某些变量的内存<strong>可见性</strong>（利用这个特性实现volatile的内存可见性）</li></ul><p>编译器和处理器会对指令进行重排序，JMM 为了保证在不同的编译器和 CPU 上有相同的结果，通过<span style="background: yellow;">插入特定类型的内存屏障禁止在内存屏障前后的指令执行重排序优化</span>，插入一条内存屏障会告诉编译器和 CPU：不管什么指令都不能和这条 Memory Barrier 指令重排序。</p><p><strong>对Voliate变量进行写操作时</strong>，会在写操作后加入一条store屏障指令，将工作内存中的共享变量值刷新回主内存</p><img src="https://img-blog.csdnimg.cn/20210320112153961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>对Voliate变量进行读操作时</strong>，会在读操作前加入一条load屏障指令，从主内存中读取共享变量</p><img src="https://img-blog.csdnimg.cn/20210320112310138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="你在哪里用过Volatile？"><a href="#你在哪里用过Volatile？" class="headerlink" title="你在哪里用过Volatile？"></a>你在哪里用过Volatile？</h3><h4 id="单例模式DCL代码"><a href="#单例模式DCL代码" class="headerlink" title="单例模式DCL代码"></a>单例模式DCL代码</h4><p>共6种</p><p>DCL机制不一定线程安全，因为有指令重排序的存在，加入volatile可以禁止指令重排</p><p>原因：某一个线程执行到第一次检测，读取到instance不为null时，instance的引用对象可能没有完成初始化。</p><p><code>instance = new add();</code>分为3步完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、分配对象内存空间</span></span><br><span class="line">memory = add();</span><br><span class="line"><span class="comment">//2、初始化对象</span></span><br><span class="line">instance(memory)；</span><br><span class="line"><span class="comment">//3、设置instance指向刚分配的内存地址</span></span><br><span class="line">instance = memory;</span><br></pre></td></tr></table></figure><p>步骤2和步骤3不存在数据依赖关系，而且无论重排前还是重排后程序的执行结果在单线程没有改变</p><p>因此，这种重排优化是允许的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、分配对象内存空间</span></span><br><span class="line">memory = add();</span><br><span class="line"><span class="comment">//3、设置instance指向刚分配的内存地址 但是对象还没有初始化完成！</span></span><br><span class="line">instance = memory;</span><br><span class="line"><span class="comment">//2、初始化对象</span></span><br><span class="line">instance(memory)；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">add</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> add instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//DCL(双重检查)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> add <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (add.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//并发多线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                add.getInstance();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h1 id="synchronized锁"><a href="#synchronized锁" class="headerlink" title="synchronized锁"></a>synchronized锁</h1><p>阻塞式的解决方案：synchronized、Lock</p><p>非阻塞式的解决方案：原子变量</p><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">  临界区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210319130659428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210319130743969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>1、因此，synchronized是用<strong>对象锁</strong>保证了临界区内代码的<strong>原子性</strong>，临界区内的代码对外是不可分割的，不会被其他线程打断</p><p>2、<strong>保证可见性的原理：</strong>执行synchronized时，会对应lock原子操作，会刷新工作内存中共享变量的值</p><p>3、有序性：依然会发生重排序，但是可以保证只有一个线程在同步代码块</p><h2 id="三种使用方式"><a href="#三种使用方式" class="headerlink" title="三种使用方式"></a>三种使用方式</h2><ul><li><strong>修饰代码块</strong> ：指定加锁对象，对给定对象&#x2F;类加锁。synchronized(this object) 表示进入同步代码库前要获得给定对象的锁。synchronized(类.class) 表示进入同步代码前要获得当前class的锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object o = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span>(o)&#123;</span><br><span class="line">    临界区</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>修饰实例方法:</strong> 作用于当前对象实例加锁，进入同步代码前要获得<span style="background: yellow;">当前对象实例</span>的锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于以下代码</span></span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">  临界区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>修饰静态方法</strong>: 也就是给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得<span style="background: yellow;">当前class 的锁</span>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于以下代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span>(test.class)&#123;</span><br><span class="line">    临界区</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八锁问题"><a href="#八锁问题" class="headerlink" title="八锁问题"></a>八锁问题</h2><p>关于锁的8个问题：</p><p> <strong>1、标准情况下，两个线程都打印输出（中间sleep 1s），哪个先打印？</strong></p><p>第一个线程先打印，因为锁的存在，两个方法用的是同一个锁，谁先拿到谁执行</p><p><strong>2、第一个线程的锁方法延迟4s，哪个先？</strong></p><p>第一个线程先打印</p><p> <strong>3、增加一个普通方法后，先执行普通方法还是锁方法（sleep 4s）？</strong></p><p>先执行普通方法，不受锁的影响</p><p> <strong>4、两个对象，先打印哪个？</strong></p><p>先打印没有延迟的那个</p><p> <strong>5、两个静态的同步方法，一个对象，先打印哪一个？</strong></p><p>先打印第一个线程</p><p> <strong>6、两个静态的同步方法，两个对象，先打印哪一个？</strong></p><p>先打印第一个线程，<code>static</code>锁的是class，class全局唯一</p><p> <strong>7、一个静态同步方法（有延迟），一个普通同步方法，一个对象，先打印哪一个？</strong></p><p> 先打印普通同步方法，两个方法锁的不是一个（一个是class，一个是对象）</p><p> <strong>8、一个静态同步方法（有延迟），一个普通同步方法，两个对象，先打印哪一个？</strong></p><p>先打印普通同步方法，两个方法锁的不是一个（一个是class，一个是对象）</p><p><strong>小结：</strong></p><p>new：this 具体的一个对象</p><p>static：class 唯一的模版 </p><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><h3 id="成员变量和静态变量是否线程安全？"><a href="#成员变量和静态变量是否线程安全？" class="headerlink" title="成员变量和静态变量是否线程安全？"></a>成员变量和静态变量是否线程安全？</h3><p>1、如果没有被共享，则线程安全</p><p>2、如果被共享了，根据它们的状态能否被改变，又分两种情况：</p><ul><li>如果只有读操作：线程安全</li><li>如果<strong>有读写操作</strong>，则这段代码是临界区，需要考虑线程安全</li></ul><h3 id="局部变量是否线程安全？"><a href="#局部变量是否线程安全？" class="headerlink" title="局部变量是否线程安全？"></a>局部变量是否线程安全？</h3><p>1、局部变量是线程安全的</p><p>2、局部变量引用的对象不一定线程安全：</p><ul><li>如果该对象没有逃离方法的作用范围，它是线程安全的</li><li>如果该<strong>对象逃离方法的作用范围</strong>，需要考虑线程安全</li></ul><h3 id="局部变量线程安全分析"><a href="#局部变量线程安全分析" class="headerlink" title="局部变量线程安全分析"></a>局部变量线程安全分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个线程调用test1方法时局部变量i，会在每个线程的栈帧内存中被创建多份，因此不存在共享</p><img src="https://img-blog.csdnimg.cn/20210319133722305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p>如图：</p><img src="https://img-blog.csdnimg.cn/20210319133749932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p><strong>局部变量的引用稍有不同：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">      method2(list);</span><br><span class="line">      method3(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    list.remove(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210319134530424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>同样不存在共享，各不干扰</p><p>如果将method改为<code>public</code>，出现以下情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span> <span class="keyword">extends</span> <span class="title">test1</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，两个线程就会访问一个对象，会出现线程安全问题</p><p>因此，使用<code>private</code>或者<code>final</code>提供了安全</p><h3 id="常见线程安全类"><a href="#常见线程安全类" class="headerlink" title="常见线程安全类"></a>常见线程安全类</h3><ul><li>String</li><li>Integer等包装类</li><li>StringBuffer</li><li>Random</li><li>Vector</li><li>Hashtable</li><li><strong>java.util.concurrent包下的类</strong></li></ul><p>线程安全是指：多个线程调用它们的同一个实例的某个方法时，是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Hashtable a = <span class="keyword">new</span> Hashtable();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">  a.put(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">  a.put(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>也可以说：</p><ul><li>它们的每一个方法是原子的</li><li><strong>但注意：它们多个方法的组合不是原子的</strong></li></ul><h4 id="线程安全类方法的组合"><a href="#线程安全类方法的组合" class="headerlink" title="线程安全类方法的组合"></a>线程安全类方法的组合</h4><p>分析下面这个代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hashtable a = <span class="keyword">new</span> Hashtable();</span><br><span class="line"><span class="comment">//线程1，线程2</span></span><br><span class="line"><span class="keyword">if</span>(a.get(<span class="string">&quot;key&quot;</span>)==<span class="keyword">null</span>)&#123;</span><br><span class="line">  a.put(<span class="string">&quot;key&quot;</span>,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2021031914040244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 67%;" /><h4 id="不可变类线程安全性"><a href="#不可变类线程安全性" class="headerlink" title="不可变类线程安全性"></a>不可变类线程安全性</h4><p>String、Integer等都是不可变类，因为其内部的状态不可改变，因此是线程安全的</p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><img src="https://img-blog.csdnimg.cn/20210319141155990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p>map：不是线程安全的</p><p>s1：线程安全</p><p>s2：线程安全</p><p>D1：不是线程安全的</p><p>D2：不是线程安全的</p><img src="https://img-blog.csdnimg.cn/20210319141458804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p>userService：不是线程安全的，多个线程共享使用</p><p>count：不是线程安全的，共享资源</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h3><p>一个线程可以多次执行synchronized，重复获取一把锁</p><p>原理：<strong>synchronized的锁对象中有一个计数器（recursions变量），会记录线程获得几次锁，在执行完同步代码块时，计数器的数量会减1，计数器数量为0就释放锁</strong></p><p>好处：可以避免死锁、可以让我们更好的封装代码</p><h3 id="不可中断"><a href="#不可中断" class="headerlink" title="不可中断"></a>不可中断</h3><p>一个线程获得锁后另外一个线程想要获得锁必须处于阻塞或者等待状态，如果第一个线程不释放锁，第二个线程会一直阻塞或等待，不可被中断。</p><p>synchronized属于不可被中断</p><p>Lock的lock方法不可被中断，trylock方法可中断的</p><h2 id="Monitor原理"><a href="#Monitor原理" class="headerlink" title="Monitor原理"></a>Monitor原理</h2><h3 id="同步代码块底层原理"><a href="#同步代码块底层原理" class="headerlink" title="同步代码块底层原理"></a>同步代码块底层原理</h3><img src="https://img-blog.csdnimg.cn/20210319144520377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p>对应的字节码：</p><img src="https://img-blog.csdnimg.cn/20210319144812812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p> <code>monitorenter</code> 指令</p><ul><li>monitor才是真正的锁，JVM会创建一个monitor C++对象</li><li>两个成员变量<ul><li>owner：拥有锁的线程</li><li>recursions：记录获取锁的次数（允许重入），为0释放锁</li></ul></li></ul><p> <code>monitorexit</code> 指令</p><ul><li>能执行这个指令的一定是拥有当前对象锁的线程</li><li><strong>为什么会有两个monitorexit？</strong><ul><li>出现异常会走第二个monitorexit，释放锁</li></ul></li></ul><h3 id="同步方法底层原理"><a href="#同步方法底层原理" class="headerlink" title="同步方法底层原理"></a>同步方法底层原理</h3><p>同步方法在反汇编后，会增加<code>ACC_SYNCHRONIZED</code>修饰，隐式调用monitorenter和monitorexit，执行前调用monitorenter，执行后调用monitorexit</p><h2 id="synchronized和lock的区别"><a href="#synchronized和lock的区别" class="headerlink" title="synchronized和lock的区别"></a>synchronized和lock的区别</h2><p>1、synchronized是关键字，lock是一个接口（接口有相应的实现类）</p><p>2、synchronized会自动释放锁，lock需要手动释放锁</p><p>3、synchronized是不可中断的，lock可以中断（trylock方法）可以不中断（lock方法）</p><p>4、lock可以知道线程有没有拿到锁（trylock），synchronized不可以</p><p>5、lock可以提高读的效率（读写锁）</p><p>6、synchronized是非公平锁，lock可以控制公平还是非公平</p><h2 id="深入JVM源代码"><a href="#深入JVM源代码" class="headerlink" title="深入JVM源代码"></a>深入JVM源代码</h2><h3 id="monitor监视器锁"><a href="#monitor监视器锁" class="headerlink" title="monitor监视器锁"></a>monitor监视器锁</h3><img src="https://img-blog.csdnimg.cn/20210328161829858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:70%;" /><p>waitSet：处于wait状态的线程</p><p>_cxq：多个线程竞争锁的单向链表（保存没有抢到锁的线程）</p><p>entrylist：上一次在cxq等待没有抢到锁的线程</p><img src="https://img-blog.csdnimg.cn/20210319143834219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="monitor竞争"><a href="#monitor竞争" class="headerlink" title="monitor竞争"></a>monitor竞争</h3><p>monitorenter</p><img src="https://img-blog.csdnimg.cn/20210328162631713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p>对于重量级锁，会调用slow_enter</p><p>最终调用ObjectMonitor::enter，如下：</p><img src="https://img-blog.csdnimg.cn/20210328162936500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><img src="https://img-blog.csdnimg.cn/20210328163017741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p><img src="https://img-blog.csdnimg.cn/20210328163052109.png" alt="在这里插入图片描述"></p><p>流程如下：</p><ul><li>通过CAS把monitor设置为当前线程</li><li>如果设置之前的owner指向当前线程，说明线程重入，执行recursions++</li><li>如果第一次进入monitor，设置recursions为1，onwer为当前线程，该线程成功获得锁并返回</li><li>如果获取锁失败，则等待锁的释放</li></ul><h3 id="monitor等待"><a href="#monitor等待" class="headerlink" title="monitor等待"></a>monitor等待</h3><img src="https://img-blog.csdnimg.cn/20210329110039318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210328163517419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210328163700322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210328163700322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210328163642615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>流程：</p><ul><li>当前线程封装，状态设置为TS_CXQ</li><li>在for循环中，通过CAS把节点push到_cxq中，同一时刻可能有多个线程把自己的节点push到 _cxq列表中</li><li>进入cxq中之后，尝试自旋获取锁，如果还没有获取就挂起，等待被唤醒</li><li>当该线程被唤醒时，会从刮起的点继续执行，使用trylock尝试获取锁</li></ul><h3 id="monitor释放"><a href="#monitor释放" class="headerlink" title="monitor释放"></a>monitor释放</h3><p>1、推出同步代码块会让recursions减1，减为0说明线程释放了锁</p><p>2、根据不同的策略，唤醒cxq或者entrylist中的线程</p><h3 id="monitor是重量级锁"><a href="#monitor是重量级锁" class="headerlink" title="monitor是重量级锁"></a>monitor是重量级锁</h3><p><strong>因为用户态和内核态的切换会消耗大量的系统资源</strong></p><img src="https://img-blog.csdnimg.cn/20210328165949320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>linux操作系统的体系架构分为：用户空间和内核</p><ul><li>内核：本质上可以理解为一种软件，控制计算机的硬件资源，并提供上层应用程序运行的环境</li><li>用户空间：上层应用程序活动的空间，必须依托内核提供的资源</li><li>系统调用：为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口，即系统调用</li></ul><p>所有进程初始都运行于用户空间，此时为<strong>用户态</strong></p><p>当调用系统调用执行某些操作时，例如I&#x2F;O调用，此时需要内核，就称为进程处于<strong>内核运行态</strong></p><h2 id="JDK6-synchronized优化"><a href="#JDK6-synchronized优化" class="headerlink" title="JDK6 synchronized优化"></a>JDK6 synchronized优化</h2><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>作用：将比较和交换转换为原子操作，这个原子操作由CPU保证，依赖于三个值：内存中的值V、旧的预估值X，要修改的新值B</p><p>Unsafe类：Unsafe对象不能直接调用，只能通过反射获得</p><p>这是一种完全依赖于<code>硬件</code>的功能，通过它实现了原子操作。原语的执行时连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成数据不一致。</p><h3 id="锁升级过程"><a href="#锁升级过程" class="headerlink" title="锁升级过程"></a>锁升级过程</h3><p>无锁–》偏向锁–〉轻量级锁–》重量级锁</p><h3 id="Java对象布局"><a href="#Java对象布局" class="headerlink" title="Java对象布局"></a>Java对象布局</h3><p>JVM中，对象在内存中的布局分为三块区域：<strong>对象头、实例数据、对齐填充</strong></p><p><strong>普通对象头</strong></p><img src="https://img-blog.csdnimg.cn/20210319142439473.png" alt="在这里插入图片描述" style="zoom:67%;" /><p><strong>数组对象头</strong></p><img src="https://img-blog.csdnimg.cn/20210319142650205.png" alt="在这里插入图片描述" style="zoom:67%;" /><p>其中，Mark Word的结构为：</p><img src="https://img-blog.csdnimg.cn/20210328172012240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p>偏向锁第三位是1</p><hr/><p><strong>klass Word</strong></p><img src="https://img-blog.csdnimg.cn/20210328172201393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>锁会偏向于第一个获得它的线程，会在对象头存储偏向锁的线程ID，以后该线程进入和退出同步块只需要检查是否是偏向锁、锁标志位、ThreadID即可</p><p><strong>一旦出现多个线程竞争就必须撤销偏向锁</strong>，所以撤销偏向锁消耗的性能必须小于之前节省的CAS原子操作的性能</p><img src="https://img-blog.csdnimg.cn/20210328172803293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210328173142294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p><strong>原理：</strong>当锁对象第一次被线程获取，虚拟机会把对象头中的标志位设为01，即偏向模式，同时使用CAS操作把获取的这个线程ID记录在对象头中，如果CAS操作成功，以后这个线程进入和这个锁相关的同步块时，虚拟机不需要进行任何操作</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>目的：<strong>在多线程交替执行同步块的情况下</strong>，尽量避免重量级锁引起的性能消耗，但是如果多个线程在同一时刻进入临界区，会导致轻量级锁膨胀升级重量级锁</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p><strong>栈帧：一个进入栈的方法</strong></p><p>关闭了偏向锁或者多个线程竞争偏向锁导致偏向锁升级为轻量级锁，则为尝试获取轻量级锁，步骤如下：</p><p><img src="https://img-blog.csdnimg.cn/2021032817452319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>轻量级锁是为了在没有竞争的前提下减少重量级锁使用操作系统互斥量产生的性能消耗。</strong></p><p>在代码即将进入同步块时，如果同步对象没有被锁定，虚拟机将在当前线程的栈帧中建立一个锁记录空间，存储锁对象目前 Mark Word 的拷贝。然后虚拟机使用 CAS 尝试把对象的 Mark Word 更新为指向锁记录的指针，如果更新成功即代表该线程拥有了锁，锁标志位将转变为 00，表示处于轻量级锁定状态。</p><p>如果更新失败就意味着至少存在一条线程与当前线程竞争。虚拟机检查对象的 Mark Word 是否指向当前线程的栈帧，如果是则说明当前线程已经拥有了锁，直接进入同步块继续执行，否则说明锁对象已经被其他线程抢占。如果出现两条以上线程争用同一个锁，轻量级锁就不再有效，将膨胀为重量级锁，锁标志状态变为 10，此时Mark Word 存储的就是指向重量级锁的指针，后面等待锁的线程也必须阻塞。</p><p>解锁同样通过 CAS 进行，如果对象 Mark Word 仍然指向线程的锁记录，就用 CAS 把对象当前的 Mark Word 和线程复制的 Mark Word 替换回来。假如替换成功同步过程就顺利完成了，如果失败则说明有其他线程尝试过获取该锁，就要在释放锁的同时唤醒被挂起的线程。</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>因为执行同步代码块的时间是比较短的，但是第二个线程获取不到锁会立刻阻塞，这是不划算的，为了让线程等待，只需要让这个线程执行自旋，就实现了自旋锁</p><p>自旋锁在 JDK1.4 就已引入，默认关闭，在 JDK6 中改为默认开启。</p><p>自旋不能代替阻塞，虽然避免了线程切换开销，但要占用处理器时间，如果锁被占用的时间很短，自旋的效果就会非常好，反之只会白白消耗处理器资源。如果自旋超过了限定的次数仍然没有成功获得锁，就应挂起线程，自旋默认限定次数是 10。</p><h4 id="适应性自旋锁"><a href="#适应性自旋锁" class="headerlink" title="适应性自旋锁"></a>适应性自旋锁</h4><p>JDK6 对自旋锁进行了优化，<strong>自旋时间不再固定</strong>，而是由前一次的自旋时间及锁拥有者的状态决定。</p><p>如果在同一个锁上，自旋刚刚成功获得过锁且持有锁的线程正在运行，虚拟机会认为这次自旋也很可能成功，进而允许自旋持续更久。如果自旋很少成功，以后获取锁时将可能直接省略掉自旋，避免浪费处理器资源。</p><p>有了自适应自旋，随着程序运行时间的增长，虚拟机对程序锁的状况预测就会越来越精准。</p><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>锁消除指即时编译器对检测到不可能存在共享数据竞争的锁进行消除。</p><p>主要判定依据来源于逃逸分析，如果判断<strong>一段代码中堆上的所有数据都只被一个线程访问，就可以当作栈上的数据对待，认为它们是线程私有的而无须同步。</strong></p><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>原则需要将同步块的作用范围限制得尽量小，只在共享数据的实际作用域中进行同步，这是为了使等待锁的线程尽快拿到锁。</p><p>但如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体之外的，即使没有线程竞争也会导致不必要的性能消耗。因此如果虚拟机探测到有一串零碎的操作都对同一个对象加锁，将会把同步的范围扩展到整个操作序列的外部。</p><h1 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h1><p><img src="https://img-blog.csdnimg.cn/20210317200101446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>1、格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lock l = ...;</span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line">l.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// access the resource protected by this lock</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line">  l.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、实现类：</p><ul><li><code>ReentrantLock</code>：可重入锁</li><li><code>ReentrantReadWriteLock.ReadLock</code></li><li><code>ReentrantReadWriteLock.WriteLock</code></li></ul><p>3、ReentrantLock</p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>公平锁：十分公平，先来后到</li><li><strong>非公平锁：不公平，可以插队（默认）</strong></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ticket</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">30</span>;</span><br><span class="line"><span class="comment">//创建锁</span></span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="comment">//尝试获取锁</span></span><br><span class="line">lock.tryLock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">.....</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronized和Lock区别"><a href="#Synchronized和Lock区别" class="headerlink" title="Synchronized和Lock区别"></a>Synchronized和Lock区别</h2><p>1、原始构成</p><ul><li><p><code>Synchronized</code> 是内置的Java关键字，属于JVM层面，底层通过monitor对象完成，其实wait&#x2F;notify也依赖于monitor对象</p></li><li><p><code>Lock</code> 是一个Java类，是api层面的锁</p></li></ul><p>2、<code>Synchronized</code> 无法判断获取锁的状态，<code>Lock</code> 可以判断是否取到了锁</p><p>3、<code>Synchronized</code> 会自动释放锁，<code>Lock</code> 必须要手动释放锁（不释放会死锁）</p><p>4、<code>Synchronized</code> 线程1（获得锁，阻塞）线程2（等待）；<code>Lock</code>锁不一定会等待下去，线程可以不用一直等待就结束了；</p><p>5、<code>Synchronized</code> 可重入锁，不可以中断的，非公平的；<code>Lock</code> 可重入锁，可以判断锁，可以自己设置公不公平</p><p>6、<code>Synchronized</code> 适合锁少量的代码同步问题，<code>Lock</code>适合大量的代码块同步</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p><strong>聚合关系总结</strong>:</p><ol><li>ReentrantLock实现了Lock,Serializable接口</li><li>ReentrantLock.Sync(内部类)继承了AQS</li><li>ReentrantLock.NonfairSync和ReentrantLock.FairSync继承了ReentrantLock.Sync</li><li>ReentrantLock持有ReentrantLock.Sync对象(实现锁功能)</li></ol><p><strong>锁实现总结</strong>:</p><ol><li>由Node节点组成一条同步队列(有head,tail两个指针,并且<strong>head初始化时指向空节点</strong>)</li><li>int state标记锁使用数量(独占锁时,通常为1,发生重入时&gt;1)</li><li>lock()时加到队列尾部</li><li>unlock()时,释放head节点,并指向下一个节点head&#x3D;head.next,然后唤醒当前head节点</li></ol><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认非公平锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置为公平锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">  sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lock方法"><a href="#lock方法" class="headerlink" title="lock方法"></a>lock方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  sync.lock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sync内部类</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>分为公平锁、非公平锁</p><h3 id="unlock方法"><a href="#unlock方法" class="headerlink" title="unlock方法"></a>unlock方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tryLock方法"><a href="#tryLock方法" class="headerlink" title="tryLock方法"></a>tryLock方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sync.nonfairTryAcquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="各种类型的锁"><a href="#各种类型的锁" class="headerlink" title="各种类型的锁"></a>各种类型的锁</h1><h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><p>1、基本概念</p><p><strong>公平锁</strong>：多个线程按照申请锁的顺序获取锁，先来后到</p><p><strong>非公平锁</strong>：多个线程获取锁的顺序不是按照申请锁的顺序，有可能会优先获取锁，有可能造成<strong>优先级反转或者饥饿现象</strong></p><p>2、区别</p><p><strong>ReentrantLock默认是非公平锁</strong></p><p>公平锁就是很公平，每个线程在获取锁的时候会查看此锁维护的等待队列，如果为空或者当前线程是等待队列的第一个就占有锁，否则加入等待队列中</p><p>非公平锁直接尝试占有锁，如果尝试失败就采用类似公平锁的方式</p><h2 id="可重入锁（递归锁）"><a href="#可重入锁（递归锁）" class="headerlink" title="可重入锁（递归锁）"></a>可重入锁（递归锁）</h2><p>1、概念</p><p>指同一线程外层函数获得锁之后，内层递归函数仍然可以获取该锁的代码，在同一线程在外层方法获取锁的时候，在进入内层方法会自动获取锁</p><p>也就是说，<strong>线程可以进入任何一个它已经拥有的锁所同步的代码块</strong></p><p>作用：<strong>防止死锁</strong></p><p>2、<strong>ReentrantLock和Synchronized就是典型的可重入锁</strong></p><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hellotest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        p.sendSMS();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">  <span class="comment">//外层</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t invoked sendSMS()&quot;</span>);</span><br><span class="line">    senEmail();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//内层</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">senEmail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t invoked sendEmail()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span> <span class="function">invoked <span class="title">sendSMS</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Thread-0 invoked <span class="title">sendEmail</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="ReentrantLock-1"><a href="#ReentrantLock-1" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hellotest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        p.sendSMS();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        p.sendSMS();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">  Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSMS</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t invoked sendSMS()&quot;</span>);</span><br><span class="line">      senEmail();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">senEmail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t invoked sendEmail()&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span> <span class="function">invoked <span class="title">sendSMS</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Thread-0 invoked <span class="title">sendEmail</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Thread-1 invoked <span class="title">sendSMS</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Thread-1 invoked <span class="title">sendEmail</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h3><p><strong>1、都是可重入锁</strong></p><p><strong>“可重入锁”</strong> 指的是自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增 1，所以要等到锁的计数器下降为 0 时才能释放锁。</p><p><strong>2、synchronized依赖于JVM，ReentrantLock依赖于API</strong></p><p><code>synchronized</code> 是依赖于 JVM 实现的， JDK1.6 为 <code>synchronized</code> 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。</p><p><code>ReentrantLock</code> 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try&#x2F;finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。</p><p><strong>3、ReentrantLock比synchronized增加了一些高级功能</strong></p><p>相比<code>synchronized</code>，<code>ReentrantLock</code>增加了一些高级功能，主要来说主要有三点：</p><ul><li><strong>等待可中断</strong> : <code>ReentrantLock</code>提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li><strong>可实现公平锁</strong> : <code>ReentrantLock</code>可以指定是公平锁还是非公平锁。而<code>synchronized</code>只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。<code>ReentrantLock</code>默认情况是非公平的，可以通过 <code>ReentrantLock</code>类的<code>ReentrantLock(boolean fair)</code>构造方法来制定是否是公平的。</li><li><strong>可实现选择性通知（锁可以绑定多个条件）</strong>: <code>synchronized</code>关键字与<code>wait()</code>和<code>notify()</code>&#x2F;<code>notifyAll()</code>方法相结合可以实现等待&#x2F;通知机制。<code>ReentrantLock</code>类当然也可以实现，但是需要借助于<code>Condition</code>接口与<code>newCondition()</code>方法。</li></ul><h2 id="自旋锁-1"><a href="#自旋锁-1" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁</p><p>好处：<strong>减少线程上下文切换的损耗</strong>，不用阻塞</p><p>缺点：如果长时间无法获得，性能下降</p><h3 id="自己写一个自旋锁"><a href="#自己写一个自旋锁" class="headerlink" title="自己写一个自旋锁"></a>自己写一个自旋锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hellotest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//原子引用线程</span></span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference  = <span class="keyword">new</span> AtomicReference();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread thread = Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t come in&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="keyword">null</span>,thread))&#123; &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t lock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myUnlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread thread = Thread.currentThread();</span><br><span class="line">        atomicReference.compareAndSet(thread, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t unlock()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        hellotest g = <span class="keyword">new</span> hellotest();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            g.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            g.myUnlock();</span><br><span class="line">        &#125;,<span class="string">&quot;AA&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            g.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            g.myUnlock();</span><br><span class="line">        &#125;,<span class="string">&quot;BB&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="独占锁（写锁）-x2F-共享锁（读锁）-x2F-互斥锁"><a href="#独占锁（写锁）-x2F-共享锁（读锁）-x2F-互斥锁" class="headerlink" title="独占锁（写锁）&#x2F;共享锁（读锁）&#x2F;互斥锁"></a>独占锁（写锁）&#x2F;共享锁（读锁）&#x2F;互斥锁</h2><p>1、独占锁：该锁一次只能被一个线程所持有（ReentrantLock和Synchronized都是独占锁）</p><p>2、共享锁：指该锁可以被多个线程持有</p><img src="https://img-blog.csdnimg.cn/2021031814195031.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 67%;" /><p>一个 ReadWriteLock保持一对关联的lock，一个用于读操作，一个用于写操作。</p><ul><li><code>read lock</code>：可能被多个线程同时进行的读者，只要没有作家。</li><li><code>write lock</code>：一次只能被一个线程占有</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       MyCache cache = <span class="keyword">new</span> MyCache();</span><br><span class="line">       <span class="comment">//写入</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">           <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">               cache.put(temp+<span class="string">&quot;&quot;</span>,temp+<span class="string">&quot;&quot;</span>);</span><br><span class="line">           &#125;,String.valueOf(i)).start();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//读取</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                cache.get(temp+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读写锁：更加细粒度的控制</span></span><br><span class="line">    <span class="keyword">private</span> ReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写，写入的时候只希望同时只有一个线程写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key,Object value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//加锁</span></span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;写入&quot;</span>+key);</span><br><span class="line">            map.put(key,value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;写入OK&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;读取&quot;</span>+key);</span><br><span class="line">            map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;读取OK&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h1><h2 id="Synchronized版本"><a href="#Synchronized版本" class="headerlink" title="Synchronized版本"></a>Synchronized版本</h2><p>1、Object类上的几个方法：</p><ul><li><code>public final native void notify();</code><br>唤醒等待在此对象上的线程，如果有个线程等待，随机唤醒一个线程</li><li><code>public final native void notifyAll();</code><br>唤醒等待此对象上的所有线程</li><li><code>public final void wait() ;</code><br>让当前运行线程等待</li><li><code>public final native void wait(long timeout);</code><br>让当前线运行程等待timeout毫，直到其他线程调用notify()方法或notifyAll()方法的对象，或一个指定的时间已经过去</li><li><code>public final void wait(long timeout, int nanos);</code><br>让当前运行线程等待timeout++毫秒，直到其他线程调用notify()方法或notifyAll()方法的对象，或一个指定的时间已经过去</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Data data = <span class="keyword">new</span> Data();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          data.increment();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          data.decrement();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待+业务+通知</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//+1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(number!=<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">//等待</span></span><br><span class="line">      <span class="keyword">this</span>.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    number++;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">    <span class="comment">//通知其他线程，+1完毕</span></span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//-1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(number == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">//等待</span></span><br><span class="line">      <span class="keyword">this</span>.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    number--;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">    <span class="comment">//通知其他线程，-1完毕</span></span><br><span class="line">    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：4个线程还安全吗？</strong></p><p>使用if判断（只判断一次），存在虚假唤醒</p><blockquote><p>一个线程可以同时醒来，没有被通知，中断，或时，所谓的空虚假唤醒。虽然这将很少发生在实践中，应用程序必须防止它通过测试的条件，应该引起线程被唤醒，并继续等待，如果条件不满意。换句话说，等待应该总是发生在循环中</p></blockquote><p>解决：将if判断改成while即可</p><h2 id="JUC版本（condition）"><a href="#JUC版本（condition）" class="headerlink" title="JUC版本（condition）"></a>JUC版本（condition）</h2><p><img src="https://img-blog.csdnimg.cn/20210317205547622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Data data = <span class="keyword">new</span> Data();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          data.increment();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          data.decrement();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          data.increment();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          data.decrement();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待+业务+通知</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data2</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number=<span class="number">0</span>;</span><br><span class="line">  Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//+1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (number!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//等待</span></span><br><span class="line">        condition.await();</span><br><span class="line">      &#125;</span><br><span class="line">      number++;</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">      <span class="comment">//通知其他线程，+1完毕</span></span><br><span class="line">      condition.signalAll();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//-1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(number == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//等待</span></span><br><span class="line">        condition.await();</span><br><span class="line">      &#125;</span><br><span class="line">      number--;</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+number);</span><br><span class="line">      <span class="comment">//通知其他线程，-1完毕</span></span><br><span class="line">      condition.signalAll();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JUC版本（精准通知和唤醒）"><a href="#JUC版本（精准通知和唤醒）" class="headerlink" title="JUC版本（精准通知和唤醒）"></a>JUC版本（精准通知和唤醒）</h2><p> <code>Condition</code>：<span style="background: yellow;">精准的通知和唤醒线程</span></p><p>需求：有序，A执行完调用B，B执行完调用A，C执行完调用A</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Data3 d = <span class="keyword">new</span> Data3();</span><br><span class="line">    <span class="comment">//A执行完调用B，B执行完调用A，C执行完调用A</span></span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">        d.printA();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">        d.printB();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">        d.printC();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等待+业务+通知</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data3</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="keyword">private</span> Condition condition1 = lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> Condition condition2 = lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> Condition condition3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> number=<span class="number">1</span>;<span class="comment">//1:A;2:B;3:C</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (number!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//等待</span></span><br><span class="line">        condition1.await();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;AAAAA&quot;</span>);</span><br><span class="line">      <span class="comment">//唤醒指定的人</span></span><br><span class="line">      number=<span class="number">2</span>;</span><br><span class="line">      condition2.signal();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (number!=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">//等待</span></span><br><span class="line">        condition2.await();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;BBBBB&quot;</span>);</span><br><span class="line">      <span class="comment">//唤醒指定的人</span></span><br><span class="line">      number=<span class="number">3</span>;</span><br><span class="line">      condition3.signal();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (number!=<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">//等待</span></span><br><span class="line">        condition3.await();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;CCCCC&quot;</span>);</span><br><span class="line">      <span class="comment">//唤醒指定的人</span></span><br><span class="line">      number=<span class="number">1</span>;</span><br><span class="line">      condition1.signal();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Condition和Object的区别"><a href="#Condition和Object的区别" class="headerlink" title="Condition和Object的区别"></a>Condition和Object的区别</h3><img src="https://img-blog.csdnimg.cn/20210318094742696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 67%;" /><h3 id="Lost-wake-up问题"><a href="#Lost-wake-up问题" class="headerlink" title="Lost wake up问题"></a>Lost wake up问题</h3><p>1、通俗理解：线程 A 调用 <code>wait()</code> 方法进入阻塞状态，接下来没有其他线程去唤醒线程 A，或者其他线程唤醒时机不对(早于线程 A 的 <code>wait()</code> )，导致线程 A 永远阻塞下去。</p><p>2、现在有一个生产者线程和消费者线程：</p><p>先定义一个 obj 对象，并将其 count 属性的初始值设置为 0：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">obj.count = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>生产者伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.count++;</span><br><span class="line">obj.notify();</span><br></pre></td></tr></table></figure><p>消费者伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(obj.count&lt;=<span class="number">0</span>)</span><br><span class="line">    obj.wait();</span><br><span class="line">obj.count--;</span><br></pre></td></tr></table></figure><p>两个线程启动，消费者检查 <code>obj.count</code> 的值，发现 <code>obj.count &lt;= 0</code> 条件成立，但这时由于 CPU 的调度，发生上下文切换，生产者开始工作，执行了 <code>count+1</code> 和 <code>obj.notify()</code>，也就是发出通知，准备唤醒一个阻塞的线程。然后 CPU 调度到消费者，此时消费者开始执行 <code>obj.wait()</code>，线程进入阻塞。但生产者已经早在消费者阻塞前执行了唤醒动作，也就导致消费者永远无法醒来了。</p><img src="https://img-blog.csdnimg.cn/20210319103207824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:33%;" /><h4 id="随便加个锁能解决「lost-wake-up-问题」吗"><a href="#随便加个锁能解决「lost-wake-up-问题」吗" class="headerlink" title="随便加个锁能解决「lost wake up 问题」吗"></a>随便加个锁能解决「lost wake up 问题」吗</h4><p>不能，举个例子:</p><p>定义一把锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lock lock1 = <span class="keyword">new</span> Lock();</span><br></pre></td></tr></table></figure><p>生产者伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lock1.lock();</span><br><span class="line">obj.count++;</span><br><span class="line">obj.notify();</span><br><span class="line">lock1.unlock();</span><br></pre></td></tr></table></figure><p>消费者伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lock1.lock();</span><br><span class="line"><span class="keyword">while</span>(count&lt;=<span class="number">0</span>)</span><br><span class="line">    obj.wait();</span><br><span class="line">obj.count--;</span><br><span class="line">lock1.unlock();</span><br></pre></td></tr></table></figure><p>两个线程启动，<code>obj.count</code> 初始值为 0。假设消费者先竞争到锁，while 中的 <code>obj.count&lt;=0</code> 条件满足，执行 <code>obj.wait()</code> 使线程进入阻塞状态，lock1 锁没有被释放，所以生产者拿不到锁，也就无法 <code>obj.notify()</code> 通知消费者醒来，消费者将永远阻塞下去。</p><h4 id="Java-中什么锁才能解决「lost-wake-up-问题」"><a href="#Java-中什么锁才能解决「lost-wake-up-问题」" class="headerlink" title="Java 中什么锁才能解决「lost wake up 问题」"></a>Java 中什么锁才能解决「lost wake up 问题」</h4><p>只有上述例子中的 obj 对象锁才能避免这个问题，也就是将 <code>obj.wait()</code> 和 <code>obj.notify()</code> 放进 obj 对象锁的同步块中。如果锁的不是例子中的 obj 对象，Java 就会抛出 <code>IllegalMonitorStateException</code> 异常</p><p>生产者伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">    obj.count++;</span><br><span class="line">    obj.notify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">    <span class="keyword">while</span>(count&lt;=<span class="number">0</span>)</span><br><span class="line">       obj.wait();</span><br><span class="line">    obj.count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 中对 wait() 方法的注释中提到：线程在调用 <code>obj.wait()</code> 前必须要拿到当前 obj 对象的监视器 monitor 对象，即 obj 的锁。只有这样，当执行到 <code>obj.wait()</code> 时，该线程才可以暂时让出 obj 的同步锁并停止对锁的竞争，让其他正在等待此锁的线程可以得到同步锁并运行。</p><p>在上述例子中，消费者执行到 <code>obj.wait()</code> 时，让出了 obj 锁，停止了对锁的竞争，进入阻塞状态，紧接着生产者竞争到 obj 锁，执行了 <code>obj.notify()</code> 方法，唤醒了消费者，使消费者线程从阻塞状态重新回到就绪状态。</p><p>这里要注意的是，<code>obj.notify()</code> 并不是让生产者马上释放锁，也不是让消费者马上得到锁，而是通知消费者线程可以重新去参与锁的竞争了。</p><h2 id="阻塞队列版本"><a href="#阻塞队列版本" class="headerlink" title="阻塞队列版本"></a>阻塞队列版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hellotest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    milk m = <span class="keyword">new</span> milk(<span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;生产开始&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        m.produce();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;消费开始&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        m.consume();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    m.stop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">milk</span></span>&#123;</span><br><span class="line">  <span class="comment">//默认开启，进行生产和消费</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> FLAG = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">  BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">milk</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.blockingQueue=blockingQueue;</span><br><span class="line">    System.out.println(blockingQueue.getClass().getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    String data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> retValue;</span><br><span class="line">    <span class="keyword">while</span> (FLAG)&#123;</span><br><span class="line">      data = atomicInteger.incrementAndGet()+<span class="string">&quot;&quot;</span>;</span><br><span class="line">      retValue = blockingQueue.offer(data,<span class="number">2L</span>,TimeUnit.SECONDS);</span><br><span class="line">      <span class="keyword">if</span>(retValue)&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 插入队列&quot;</span>+data+<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 插入队列&quot;</span>+data+<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    String result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (FLAG)&#123;</span><br><span class="line">      result = blockingQueue.poll(<span class="number">2L</span>,TimeUnit.SECONDS);</span><br><span class="line">      <span class="keyword">if</span>(result==<span class="keyword">null</span>||result.equalsIgnoreCase(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">        FLAG=<span class="keyword">false</span>;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 消费退出&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t 消费队列&quot;</span>+result+<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FLAG=<span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><h2 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h2><blockquote><p><code>LockSupport</code>是用来创建锁和其他同步类的基本线程阻塞原语。</p></blockquote><p>1、线程阻塞工具类，都是静态方法，调用底层native代码</p><p>2、LockSupport和每一个使用它的线程都有一个许可关联，permit相当于1、0开关，默认是0</p><ul><li>调用unpark变为1</li><li>调用park变为0，通过park立即返回</li><li>如果再次调用park会阻塞，直到permit变为1</li><li>每个线程都只有一个相关的permit，最多一个，重复调用unpark不会积累凭证</li></ul><h3 id="park"><a href="#park" class="headerlink" title="park"></a>park</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  UNSAFE.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>permit默认为0，所以一开始调用park方法，当前线程就会阻塞，直到别的线程将当前线程的permit设置为1，park会被唤醒，然后将permit设置为0并返回</p><h3 id="unpark"><a href="#unpark" class="headerlink" title="unpark"></a>unpark</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unpark</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (thread != <span class="keyword">null</span>)</span><br><span class="line">        UNSAFE.unpark(thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  Thread a = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-&gt; &quot;</span>+<span class="string">&quot;come in&quot;</span>);</span><br><span class="line">    LockSupport.park();</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-&gt; 被唤醒&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  a.start();</span><br><span class="line"></span><br><span class="line">  TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    LockSupport.unpark(a);</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-&gt; 通知&quot;</span>);</span><br><span class="line">  &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AQS-1"><a href="#AQS-1" class="headerlink" title="AQS"></a>AQS</h2><blockquote><p>AQS是JUC框架中重要的类，通过它来实现独占锁和共享锁的，内部很多类都是通过AQS来实现的，比如CountDownLatch、ReentrantLock、ReentrantReadWriteLock、Semaphore。</p></blockquote><p>AQS：抽象的队列同步器（AbstractQueuedSynchronized）</p><p>是用来构建锁或者其他同步器组件的重量级基础框架及整个JUC体系的基石，通过内置的<strong>FIFO队列</strong>来完成资源获取线程的排队工作，并通过一个<strong>int类型变量</strong>表示持有锁的状态</p><img src="https://img-blog.csdnimg.cn/20210327175333720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>用处：加锁会导致堵塞，有阻塞就需要排队，实现排队就需要有某种形式的队列进行管理</p><p><strong>CLH队列：将请求共享资源的线程封装为队列的结点Node，通过CAS、自旋、LockSupport.park的方式维护state的状态，使并发达到同步的控制效果</strong></p><h3 id="AQS源码体系"><a href="#AQS源码体系" class="headerlink" title="AQS源码体系"></a>AQS源码体系</h3><img src="https://img-blog.csdnimg.cn/20210327195233424.png" alt="在这里插入图片描述" style="zoom:50%;" /><p>内部体系架构：</p><img src="https://img-blog.csdnimg.cn/20210327200931838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><img src="https://img-blog.csdnimg.cn/2021032720314341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>1、AQS自身：</strong></p><ul><li>int变量：state（1表示被占用，只能去排队）</li><li>CLH队列：双向队列（有首节点、尾节点）</li></ul><p><strong>2、内部类Node</strong></p><ul><li>有两个模式：共享、排它</li><li>有前节点和后节点（pre、next）</li><li><strong>有一个重要的int变量：waitStatus</strong>，表示当前节点在队列中的状态<ul><li>0：默认</li><li>1：表示线程获取锁的请求取消</li><li>-2：表示节点在等待队列中等待被唤醒</li><li>-3：当前线程在共享情况下</li><li>-1：表示线程已经准备好了，就等待释放资源了</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="comment">//共享</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">  <span class="comment">//独占</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当前节点在队列中的状态</span></span><br><span class="line">  <span class="comment">// 默认0</span></span><br><span class="line">  <span class="comment">// 1：取消</span></span><br><span class="line">  <span class="comment">// -1：线程准备好了</span></span><br><span class="line">  <span class="comment">// -2：等待唤醒</span></span><br><span class="line">  <span class="comment">// -3：当前线程在共享情况下</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line">  <span class="comment">//前指针</span></span><br><span class="line">  <span class="keyword">volatile</span> Node prev;</span><br><span class="line">  <span class="comment">//后指针</span></span><br><span class="line">  <span class="keyword">volatile</span> Node next;</span><br><span class="line">  <span class="comment">//线程</span></span><br><span class="line">  <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">  Node nextWaiter;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">    Node p = prev;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  Node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Node(Thread thread, Node mode) &#123;   </span><br><span class="line">    <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">    <span class="keyword">this</span>.thread = thread;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; </span><br><span class="line">    <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">    <span class="keyword">this</span>.thread = thread;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><blockquote><p>Lock接口的实现了基本上都是通过聚合了一个队列同步器的子类完成线程的访问控制的</p></blockquote><p><strong>ReentrantLock:</strong></p><p><img src="https://img-blog.csdnimg.cn/20210414155640974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210414155726983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>公平锁和非公平锁</strong></p><p>区别：公平锁需要判断队列中是否存在有效节点</p><ul><li>公平锁讲究先来先到，如果这个锁的等待队列中已经有线程在等待，那么当前线程就会进入等待队列</li><li>非公平锁如果可以获取锁，就立刻占有</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公平锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非公平锁</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最终都会调用acquire方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">      acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">    selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h3><p>加锁三个阶段：</p><ul><li>尝试加锁</li><li>加锁失败，进入队列</li><li>线程入队列后，进入阻塞状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main方法代码</span></span><br><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">lock.lock();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ReentrankLock类：lock方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  sync.lock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ReentrankLock类中的sync内部类的抽象方法：lock</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ReentrankLock类中的非公平锁内部类的方法：lock</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//CAS：更改AQS的state</span></span><br><span class="line">  <span class="comment">//如果state为0，就将state设置为1</span></span><br><span class="line">  <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="comment">//设置队列的当前线程为这个线程</span></span><br><span class="line">    setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="comment">//如果CAS失败，说明已经有线程抢占了锁，那么就需要进入acquire方法</span></span><br><span class="line">    acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="acuqire"><a href="#acuqire" class="headerlink" title="acuqire"></a>acuqire</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AQS类的acquire方法：传入的参数为1，arg为1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; <span class="comment">//返回false，取反为true；如果返回true（重入），因为是短路与，所以后面就不会进行</span></span><br><span class="line">      acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">    selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tryAcquire—抢占、重入"><a href="#tryAcquire—抢占、重入" class="headerlink" title="tryAcquire—抢占、重入"></a>tryAcquire—抢占、重入</h4><p><img src="https://img-blog.csdnimg.cn/20210414155726983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AQS的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ReentrankLock类中的非公平锁内部类的方法：tryAcquire</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ReentrankLock类中的sync内部类的方法，acquires为1</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">  <span class="comment">//获取state</span></span><br><span class="line">  <span class="keyword">int</span> c = getState();</span><br><span class="line">  <span class="comment">//如果state为0，直接AQS，抢占锁</span></span><br><span class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">      setExclusiveOwnerThread(current);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果请求的线程和当前的线程相同，说明重入</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">    <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">    <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">    <span class="comment">//设置state为重入的次数</span></span><br><span class="line">    setState(nextc);</span><br><span class="line">    <span class="comment">//返回true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果都不是，就返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ReentrantLock重入的原理</p></blockquote><p>在第二次获取锁的时候，CAS失败，进入tryacquire方法，会进行判断请求的线程和当前拥有资源的线程是否相同，如果相同，state+1</p><h4 id="addwaiter—创建node并加入到队列"><a href="#addwaiter—创建node并加入到队列" class="headerlink" title="addwaiter—创建node并加入到队列"></a>addwaiter—创建node并加入到队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//创建一个新的node</span></span><br><span class="line">  Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">  <span class="comment">// 获取tail，如果是第一个线程，就为null</span></span><br><span class="line">  Node pred = tail;</span><br><span class="line">  <span class="comment">// 如果tail不是null</span></span><br><span class="line">  <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//CAS交换</span></span><br><span class="line">    node.prev = pred;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">      pred.next = node;</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  enq(node);</span><br><span class="line">  <span class="comment">//返回线程</span></span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Node的enq方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//自旋</span></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    Node t = tail;</span><br><span class="line">    <span class="comment">//如果tail为null，就进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//使用CAS进行初始化，new一个空node作为头节点（Thread=null，waitStatus=0）：傀儡节点/哨兵节点，只是用来占位</span></span><br><span class="line">      <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">        tail = head;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果tail不为null，将传入的需要增加的节点加入到队列中</span></span><br><span class="line">      node.prev = t;</span><br><span class="line">      <span class="comment">//CAS设置tail为需要增加的节点</span></span><br><span class="line">      <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">        <span class="comment">//设置t的next为需要增加的节点</span></span><br><span class="line">        t.next = node;</span><br><span class="line">        <span class="comment">//返回t</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤：</p><p>1、addWriter方法会首先新建这个node</p><p>2、如果当前队列不为空，就将自己放到尾节点，去6；</p><p>3、如果当前队列为空，就需要进入Node的enq方法；去4；</p><p>4、再次判断队列是否为空，如果为空就进行初始化（傀儡节点），等待队列的第一个节点是傀儡节点</p><p>5、初始化后，tail不为null了，就可以使用CAS传入线程（同2）</p><p>6、返回这个节点</p><img src="https://img-blog.csdnimg.cn/20210414170752692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="acquireQueued—使用locksupport阻塞节点"><a href="#acquireQueued—使用locksupport阻塞节点" class="headerlink" title="acquireQueued—使用locksupport阻塞节点"></a>acquireQueued—使用locksupport阻塞节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//node：插入的新node</span></span><br><span class="line"><span class="comment">//arg：1</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//被打断</span></span><br><span class="line">    <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="comment">//获得上一个节点</span></span><br><span class="line">      <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">      <span class="comment">//如果p=head，再抢一次（看看state是不是0）</span></span><br><span class="line">      <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">        setHead(node);</span><br><span class="line">        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">        failed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> interrupted;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//抢占失败，进入shouldParkAfterFailedAcquire方法，将上一个节点的waitstatus变为-1</span></span><br><span class="line">      <span class="comment">//再次进入，进入parkAndCheckInterrupt方法，使用locksupport挂起当前节点，直到unpark才结束</span></span><br><span class="line">      <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">          parkAndCheckInterrupt())</span><br><span class="line">        interrupted = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (failed)</span><br><span class="line">      cancelAcquire(node);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//默认为0</span></span><br><span class="line">  <span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line">  <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      node.prev = pred = pred.prev;</span><br><span class="line">    &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">    pred.next = node;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//更改上一个节点的waitStatus变为-1</span></span><br><span class="line">    compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤：</p><ul><li>将上一个节点的waitstatus改为-1</li><li>使用locksupport将自己进行阻塞</li><li><strong>后面的线程都在park，在parkAndCheckInterrupt()方法这里等待unpark()</strong></li></ul><h3 id="unlock"><a href="#unlock" class="headerlink" title="unlock"></a>unlock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="release"><a href="#release" class="headerlink" title="release"></a>release</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AQS类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//如果是true，说明state=0</span></span><br><span class="line">  <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">    <span class="comment">//获取head</span></span><br><span class="line">    Node h = head;</span><br><span class="line">    <span class="comment">//如果head不为null，waitstatus不等于0</span></span><br><span class="line">    <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">      unparkSuccessor(h);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="tryRelease—state减1，为0free就是true"><a href="#tryRelease—state减1，为0free就是true" class="headerlink" title="tryRelease—state减1，为0free就是true"></a>tryRelease—state减1，为0free就是true</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ReentrankLock的内部类</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//当前状态-1</span></span><br><span class="line">  <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">  <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">  <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">  <span class="comment">//如果c=0</span></span><br><span class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    free = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">//设置当前thread为null</span></span><br><span class="line">    setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  setState(c);</span><br><span class="line">  <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">    state = newState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="unparkSuccessor"><a href="#unparkSuccessor" class="headerlink" title="unparkSuccessor"></a>unparkSuccessor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//获取waitStatus</span></span><br><span class="line">  <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">  <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">    compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">//获取下一个节点</span></span><br><span class="line">  Node s = node.next;</span><br><span class="line">  <span class="comment">//如果下一个节点等于null且waitstatus大于0</span></span><br><span class="line">  <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">      <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">        s = t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果下一个节点不等于null</span></span><br><span class="line">  <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">    <span class="comment">//唤醒下一个节点</span></span><br><span class="line">    LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>1、AQS的加锁操作</strong></p><ul><li><p>首先调用lock方法</p></li><li><p>lock方法调用了sync的lock方法</p></li><li><p>sync的lock方法调用了非公平锁的lock方法，使用CAS更改state状态</p><ul><li><p>更改成功，就将当前占有锁的线程更改为这个线程</p></li><li><p><strong>更改不成功（说明没有线程占有锁）进入AQS类的<code>acquire</code>方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; <span class="comment">//返回false，取反为true；如果返回true（重入），因为是短路与，所以后面就不会进行</span></span><br><span class="line">      acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">    selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>首先进入ReentrankLock类中非公平锁的<code>tryAcquire</code>方法，接着进入sync的<code>nonfairTryAcquire</code>方法</p><ul><li><strong>使用CAS转换state，转换成功就占有锁，返回true，整个流程结束</strong></li><li>转换不成功，<strong>如果两个线程相同，说明是重入，那么就state加1，返回true，整个流程结束</strong></li><li>以上情况都不是，返回false，进入<code>addWaite</code>方法</li></ul></li><li><p>接着进入<code>addWaiter</code>方法</p><ul><li>根据线程创建新的节点</li><li>如果tail不是null，使用CAS转换，将当前线程设置为tail，返回这个节点</li><li>如果tail为null，进入Node的<code>enq</code>方法<ul><li>再次判断队列是否为空，如果为空就进行初始化（<strong>傀儡节点</strong>），等待队列的第一个节点是傀儡节点</li><li>初始化后，tail不为null了，就可以使用CAS将这个线程转为tail</li><li>返回这个节点</li></ul></li></ul></li><li><p>再进入<code>acquireQueued</code>方法</p><ul><li>将上一个节点的<code>waitstatus</code>改为-1（傀儡节点，除了初始化的傀儡节点，获得锁的线程node会将node的thread设置为null，也是傀儡节点）</li><li>使用<code>locksupport</code>将自己进行阻塞（park）</li><li><strong>后面的线程都在park，在parkAndCheckInterrupt()方法这里等待unpark()</strong></li></ul></li></ul><p><strong>2、AQS的unlock</strong></p><ul><li><p>进入sync的<code>release</code>方法</p></li><li><p>首先进行<code>tryRelease</code>方法</p><ul><li>将state减1，如果为0，就返回true</li><li><strong>如果不为0，说明是重入了，返回false，流程结束</strong></li></ul></li><li><p>如果不是重入，进入<code>unparkSuccessor</code>方法</p><ul><li>unpark队列的下一个节点</li></ul></li></ul><blockquote><p>如果实现非公平？</p></blockquote><p>非公平锁相比较公平锁的 <code>tryAcquire</code>方法，少了一步<strong>判断 AQS 队列中是否有等待的线程</strong>的操作。</p><h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="CAS-1"><a href="#CAS-1" class="headerlink" title="CAS"></a>CAS</h2><blockquote><p> 对于并发控制而言，锁是一种悲观的策略，它总是假设每一次的临界区操作会产生冲突，因此会对每一次的操作都小心翼翼。如果有多个线程访问临界区资源，就宁可牺牲性能也不会让线程等待，所以说锁会阻塞线程执行。</p><p> <strong>无锁</strong>是一种乐观的策略，它会假设对资源的访问是没有冲突的。遇到冲突怎么办？无锁的策略使用一种<strong>比较交换的技术（CAS，Compare And Swap）</strong>来鉴别线程冲突，一旦检测到冲突产生，就重试当前的操作直到没有冲突为止。</p></blockquote><h3 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS"></a>什么是CAS</h3><p>CAS 表示 Compare And Swap，比较并交换，需要三个操作数</p><p>包含三个参数CAS（V，A，B）</p><ul><li>V：表示要更新的变量，内存位置</li><li>A：表示旧的预期值</li><li>B：表示新值</li></ul><p>CAS 指令执行时，当且仅当 V 符合 A 时，处理器才会用 B 更新 V 的值，否则它就不执行更新。但不管是否更新都会返回 V 的旧值，这些处理过程是原子操作，执行期间不会被其他线程打断。</p><p><strong>这是一种完全依赖于<code>硬件</code>的功能</strong>，通过它实现了原子操作。原语的执行时连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成数据不一致。</p><p>在 JDK 5 后，Java 类库中才开始使用 CAS 操作，该操作由 Unsafe 类里的 <code>compareAndSwapInt</code> 等几个方法包装提供。HotSpot 在内部对这些方法做了特殊处理，即时编译的结果是一条平台相关的处理器 CAS 指令。Unsafe 类不是给用户程序调用的类，因此 JDK9 前只有 Java 类库可以使用 CAS，譬如 juc 包里的 AtomicInteger类中 <code>compareAndSet</code>等方法都使用了Unsafe 类的 CAS 操作实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line">  AtomicInteger number = <span class="keyword">new</span> AtomicInteger(<span class="number">2020</span>);</span><br><span class="line">  number.compareAndSet(<span class="number">2020</span>,<span class="number">2021</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="comment">//如果达到期望的值，就更新，否则就不更新</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">  <span class="comment">//处理器 CAS 指令</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4, <span class="keyword">int</span> var5)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CAS底层原理"><a href="#CAS底层原理" class="headerlink" title="CAS底层原理"></a>CAS底层原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line">  AtomicInteger number = <span class="keyword">new</span> AtomicInteger(<span class="number">2020</span>);</span><br><span class="line">  number.getAndIncrement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1、Unsafe类</strong></p><p>是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定内存的数据。</p><p><span style="background: yellow;"><strong>Unsafe类存在于sun.misc包中</strong></span>，其内部方法操作可以像C的指针（通过内存偏移量）一样操作内存，因为Java中CAS操作的执行依赖于Unsafe类的方法。</p><p><strong>2、valueOffset</strong></p><p>表示该变量值在内存中的<span style="background: yellow;">偏移地址</span>，因为Unsafe就是根据内存偏移地址来获取数据的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//获取内存偏移量</span></span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、变量value使用volatile修饰，保证了多线程之间的内存可见性</strong></p><blockquote><p>问：CAS是什么？</p></blockquote><p>CAS是一条**<span style="background: yellow;">CPU并发原语</span>**，它判断内存某个位置的值是否为预期值，如果是更改为新的值，这个过程是原子的</p><p>CAS并发原语体现在JAVA语言中就是Unsafe类中的各个方法。调用这些方法，JVM可以帮我们实现<strong>CAS汇编指令</strong>，这是一种完全依赖于硬件的功能，通过它实现了原子操作。</p><p>再次强调，CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，执行过程中不允许被打断，<span style="background: yellow;">也就是说CAS是一条CPU的原子指令，不会造成数据不一致的问题</span>。</p><h4 id="例一源码分析"><a href="#例一源码分析" class="headerlink" title="例一源码分析"></a>例一源码分析</h4><p>主函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line">  AtomicInteger number = <span class="keyword">new</span> AtomicInteger(<span class="number">2020</span>);</span><br><span class="line">  number.getAndIncrement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到调用了<code>getAndIncrement()</code>方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//this：代表当前对象</span></span><br><span class="line">    <span class="comment">//valueOffset：内存偏移量</span></span><br><span class="line">    <span class="comment">//1：自增</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法又调用了Unsafe类的一个方法<code>getAndAddInt()</code>方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Unsafe</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//先获取，再加</span></span><br><span class="line">  <span class="comment">//var1:this</span></span><br><span class="line">  <span class="comment">//var2:内存地址偏移量</span></span><br><span class="line">  <span class="comment">//var4:1</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="comment">//获取当前这个对象这个地址上的值</span></span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//比较并交换</span></span><br><span class="line">    <span class="comment">//var1:this，var2:内存地址偏移量，var5:当前值，var5+var4:新值</span></span><br><span class="line">    <span class="comment">//修改成功跳出循环；不成功就返回false，一直循环</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取这个值的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">getIntVolatile</span><span class="params">(Object var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//处理器 CAS 指令</span></span><br><span class="line">  <span class="comment">//var1和var2：要更新的变量</span></span><br><span class="line">  <span class="comment">//var4：旧的预期值</span></span><br><span class="line">  <span class="comment">//var5：新的值</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4, <span class="keyword">int</span> var5)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例二"><a href="#例二" class="headerlink" title="例二"></a>例二</h4><p>假设线程A和线程B同时执行<code>getAndAddInt()</code>操作（分别跑在不同的CPU上）：</p><ul><li>AutomicInteger里面的value原始值是3，即主内存中AutomicInteger的value为3，根据JMM模型，线程A和线程B各自持有一份值为3的value的副本分别到各自的工作内存</li><li>线程A通过<code>getIntVolatile(var1,var2)</code>拿到value值为3，这时线程A被挂起</li><li>线程B通过<code>getIntVolatile(var1,var2)</code>拿到value值为3，刚好B<span style="background: yellow;">没有被挂起</span>，并执行<code>compareAndSwapInt</code>方法，比较内存值也是3，成功修改内存值为4，线程B收工</li><li>这时A恢复，执行<code>compareAndSwapInt</code>方法，发现自己的值和主内存的值不一致，说明这个值已经被修改过了，那A修改失败，<span style="background: yellow;">只能重新读取</span></li><li>线程A重新获取value值，因为变量value被volatile修饰，所以其他线程对它的修改，线程A总是可以看见，线程A继续执行<code>compareAndSwapInt</code>方法进行比较替换，直到成功</li></ul><p><strong><span style="background: yellow;">Unsafe类+CAS思想（自旋）</span></strong></p><h3 id="CAS缺点"><a href="#CAS缺点" class="headerlink" title="CAS缺点"></a>CAS缺点</h3><p><strong>1、循环时间长，开销大</strong></p><p>这个方法的do while，如果CAS失败，会一直尝试，如果长时间不成功会带来很大的开销</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125;<span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>2、只能保证一个共享变量的原子操作</strong></p><p>对于多个共享变量操作，循环CAS无法保证一致性，只能使用加锁</p><p><strong>3、ABA问题</strong></p><h4 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h4><blockquote><p>原子类AutomicInteger的ABA问题？原子更新引用知道吗？</p></blockquote><p>ABA问题：狸猫换太子</p><p>CAS算法实现一个重要前提：取出内存中某时刻的数据并在当下时刻比较并替换，那么这个时间差会导致数据的变化。</p><p><strong>1、ABA问题如何产生的？</strong></p><p>比如：一个线程1从内存位置V取出A，这时候另外一个线程2也从内存中取出A，并且线程2进行了一些操作将值变成了B，然后线程2又将V位置的数据变回了A；这时候线程1进行CAS操作，发现内存中仍然是A，线程1操作成功。</p><p><span style="background: yellow;">虽然线程1的CAS操作成功，但是这不代表这个过程没有问题</span></p><h5 id="原子引用"><a href="#原子引用" class="headerlink" title="原子引用"></a>原子引用</h5><p>Atomic：原子</p><p>在<code>java.util.concurrent.atomic</code>下有这些类：</p><img src="https://img-blog.csdnimg.cn/20210319202553593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%;" /><p>其中，<code>AtomicReference&lt;V&gt;</code>为原子引用：</p><img src="https://img-blog.csdnimg.cn/20210319202821686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:33%;" /><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  String userName;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line">main&#123;</span><br><span class="line">  User u1 = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>);</span><br><span class="line">  User u2 = <span class="keyword">new</span> User(<span class="string">&quot;lisi&quot;</span>,<span class="number">20</span>);</span><br><span class="line">  </span><br><span class="line">  AtomicReference&lt;User&gt; at = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">  at.set(u1);</span><br><span class="line">  </span><br><span class="line">  System.out.println(at.compareAndSet(u1,u2));<span class="comment">//true</span></span><br><span class="line">  System.out.println(at.compareAndSet(u1,u2));<span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ABA解决"><a href="#ABA解决" class="headerlink" title="ABA解决"></a>ABA解决</h4><p>原子引用+新增机制（修改版本号，类似于时间戳）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程 工作内存1s  2s</span><br><span class="line">线程<span class="number">1</span><span class="number">100</span><span class="number">1</span><span class="number">2019</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">线程<span class="number">2</span><span class="number">100</span><span class="number">1</span><span class="number">101</span> <span class="number">2</span><span class="number">102</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>时间戳原子引用类：</strong></p><img src="https://img-blog.csdnimg.cn/20210319203431276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>一个 <code>AtomicStampedReference</code>保持随着整数“邮票”一个对象的引用，可以自动更新。 </p><p>实现说明：此实现通过创建表示“框”[参考，整数]对的内部对象来保持标记的引用。</p><p><strong>对比：</strong></p><p>1、 <code>AtomicReference</code>产生ABA问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> AtomicReference&lt;Integer&gt; a1 = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="number">100</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    a1.compareAndSet(<span class="number">100</span>,<span class="number">101</span>);</span><br><span class="line">    a1.compareAndSet(<span class="number">101</span>,<span class="number">100</span>);</span><br><span class="line">  &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="comment">//暂停1s，保证t1线程完成了一次ABA操作</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(a1.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>)+<span class="string">&quot;\t&quot;</span>+a1.get());</span><br><span class="line">  &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span><span class="number">2019</span></span><br></pre></td></tr></table></figure><p>2、使用 <code>AtomicStampedReference</code>解决问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; a2 = <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="comment">//获得初始版本号</span></span><br><span class="line">    <span class="keyword">int</span> stamp = a2.getStamp();</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t第一次版本号：&quot;</span>+stamp);</span><br><span class="line">    <span class="comment">//暂停1s,保证t2获取的版本号和t1一致</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    a2.compareAndSet(<span class="number">100</span>,<span class="number">101</span>,a2.getStamp(),a2.getStamp()+<span class="number">1</span>);</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t第二次版本号：&quot;</span>+a2.getStamp());</span><br><span class="line">    a2.compareAndSet(<span class="number">101</span>,<span class="number">100</span>,a2.getStamp(),a2.getStamp()+<span class="number">1</span>);</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t第三次版本号：&quot;</span>+a2.getStamp());</span><br><span class="line">  &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="comment">//获得初始版本号</span></span><br><span class="line">    <span class="keyword">int</span> stamp = a2.getStamp();</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t第一次版本号：&quot;</span>+stamp);</span><br><span class="line">    <span class="comment">//暂停3s，保证t3完成一次ABA操作</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(a2.compareAndSet(<span class="number">100</span>, <span class="number">2019</span>,stamp,stamp+<span class="number">1</span>));</span><br><span class="line">  &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t1第一次版本号：<span class="number">1</span></span><br><span class="line">t2第一次版本号：<span class="number">1</span></span><br><span class="line">t1第二次版本号：<span class="number">2</span></span><br><span class="line">t1第三次版本号：<span class="number">3</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><h3 id="常用的辅助类"><a href="#常用的辅助类" class="headerlink" title="常用的辅助类"></a>常用的辅助类</h3><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p><img src="https://img-blog.csdnimg.cn/20210318135356537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//总数是6</span></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;Go out&quot;</span>);</span><br><span class="line">                <span class="comment">//计数器数量减1</span></span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//等待计数器归0，然后向下执行</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;close door&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>原理：</p><ul><li><code>countDownLatch.countDown();</code>：计数器数量减1</li><li><code>countDownLatch.await();</code>：等待计数器归0，然后向下执行</li></ul><p>每次有线程调用countDown()数量-1，假设计数器变为0，countDownLatch.await();就会被唤醒，继续向下执行</p><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p><img src="https://img-blog.csdnimg.cn/20210318140131658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="comment">//总数是7</span></span><br><span class="line">       CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>,()-&gt;&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;召唤神龙！&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="keyword">int</span> temp = i;</span><br><span class="line">           <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">               System.out.println(Thread.currentThread().getName()+temp);</span><br><span class="line">               <span class="comment">//等待计数器变成7</span></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   cyclicBarrier.await();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;).start();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>信号量</p><p><img src="https://img-blog.csdnimg.cn/202103181410547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//线程数量：停车位 限流</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="comment">// acquire()得到</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;抢到车位&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;离开车位&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// release()释放</span></span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>原理：</strong></p><ul><li><code>acquire()</code>：获得，如果满了就等待被释放为止</li><li><code>release()</code>：释放当前信号量</li></ul><p>作用：多个共享资源互斥的使用、并发限流（控制最大的线程数）</p><h3 id="线程安全集合类"><a href="#线程安全集合类" class="headerlink" title="线程安全集合类"></a>线程安全集合类</h3><p><img src="https://img-blog.csdnimg.cn/20210318113242992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>线程安全集合类分为三大类：</p><ul><li><p>遗留的安全集合：Hashtable、Vector</p></li><li><p>使用<code>Collections</code>装饰的线程安全集合（加Synchronized修饰），如：</p><p><code>Collections.synchronizedList()</code></p><p><code>Collections.synchronizedCollection()</code></p><p><code>Collections.synchronizedMap()</code></p><p><code>Collections.synchronizedSet()</code></p><p><code>Collections.synchronizedNavigableMap()</code></p><p><code>Collections.synchronizedNavigableSet()</code></p><p><code>Collections.synchronizedSortedMap()</code></p><p><code>Collections.synchronizedSortedSet()</code></p></li><li><p><code>java.util.concurrent.*</code></p><p>包含三类关键词：Blocking、CopyOnWrite、Concurrent</p><p><code>Blocking</code>：大部分实现基于锁，并提供用来阻塞的方法</p><p><code>CopyOnWrite</code>：修改时拷贝，修改的开销较重</p><p><code>Concurrent类型的容器</code>：内部很多操作使用cas优化，提供较高的吞吐量；但是存在<span style="background: yellow;">弱一致性</span>的问题（遍历时弱一致性、求大小弱一致性、读取弱一致性）</p></li></ul><h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><blockquote><p>问题： 出现java.util.ConcurrentModificationException并发修改异常</p></blockquote><p>解决方案：</p><ul><li>1、<code>List&lt;String&gt; list = new Vector&lt;&gt;();</code></li><li>2、<code>List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</code></li><li>3、<code>List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</code></li></ul><p>1、<code>CopyOnWrite</code>：写入时复制，COW：计算机程序设计领域的一种优化策略。</p><p>2、**<code>CopyOnWriteArrayList</code>比<code>Vector</code>好在哪里？**</p><ul><li><code>CopyOnWriteArrayList</code> 使用的lock锁的机制，<code>Vector</code>使用synchronized锁的机制</li><li><code>Vector</code> 的增删改查方法都加上了synchronized锁，保证同步的情况下，因为每个方法都要去获得锁，所以性能就会大大下降。</li><li><code>CopyOnWriteArrayList</code> 方法只是在增删改方法上增加了<code>ReentrantLock</code>锁，但是他的读方法不加锁，所以在读的方面就要比Vector性能要好，<strong>CopyOnWriteArrayList适合读多写少的并发情况</strong>，<span style="background: yellow;">读写分离</span>，在写的时候复制出一个新的数组，完成插入、修改、删除操作，在完成操作后，将这个新的数组赋值给一个array。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">  lock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Object[] elements = getArray();</span><br><span class="line">    <span class="keyword">int</span> len = elements.length;</span><br><span class="line">    <span class="comment">// 复制一个数组</span></span><br><span class="line">    Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//完成操作</span></span><br><span class="line">    newElements[len] = e;</span><br><span class="line">    <span class="comment">//赋值给Array</span></span><br><span class="line">    setArray(newElements);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">  array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h4><p>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、Collections工具类</span></span><br><span class="line">Set&lt;String&gt; set1 = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line"><span class="comment">//2、CopyOnWriteArraySet</span></span><br><span class="line">Set&lt;String&gt; set2 = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br></pre></td></tr></table></figure><p><strong>HashSet的底层是什么？</strong></p><p>HashMap（容量16，负载因子0.75）</p><blockquote><p> 既然是HashMap，为什么只添加一个元素呢？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//底层是hashmap</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add方法</span></span><br><span class="line"><span class="comment">//set的本质就是map，key是无法重复的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p><strong>CopyOnWriteArraySet底层是什么？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArraySet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="comment">//底层是CopyOnWriteArrayList</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CopyOnWriteArrayList&lt;E&gt; al;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><p>1、知识回顾：</p><ul><li>map是这样用的吗？不是，工作不用HashMap</li><li>默认等价于：<code>new HashMap&lt;&gt;(16,0.75f);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210318112647236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%;" /><p>2、解决方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map1 = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">SynchronizedMap</span><br></pre></td></tr></table></figure><p>3、SynchronizedMap</p><p>内部维护了一个普通对象Map，还有排斥锁mutex</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SynchronizedMap(Map&lt;K,V&gt; m) &#123;</span><br><span class="line">  <span class="keyword">this</span>.m = Objects.requireNonNull(m);</span><br><span class="line">  mutex = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在调用构造方法的时候就需要传入一个Map，可以看到有两个构造器，如果你传入了mutex参数，则将对象排斥锁赋值为传入的对象。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/17/16f14087dffc8e69?imageView2/0/w/1280/h/960/ignore-error/1" alt="img"></p><p><strong>4、HashTable</strong></p><p>跟HashMap相比Hashtable是线程安全的，适合在多线程的情况下使用，但是效率可不太乐观。</p><p>他在对数据操作的时候都会上锁，所以效率比较低下</p><p><strong>和HashMap的不同：</strong></p><ul><li>Hashtable 是不允许键或值为 null 的，HashMap 的键值则都可以为 null。</li><li><strong>实现方式不同</strong>：Hashtable 继承了 Dictionary类，而 HashMap 继承的是 AbstractMap 类。</li><li><strong>初始化容量不同</strong>：HashMap 的初始容量为：16，Hashtable 初始容量为：11，两者的负载因子默认都是：0.75。</li><li><strong>扩容机制不同</strong>：当现有容量大于总容量 * 负载因子时，HashMap 扩容规则为当前容量翻倍，Hashtable 扩容规则为当前容量翻倍 + 1。</li><li><strong>迭代器不同</strong>：HashMap 中的 Iterator 迭代器是 fail-fast 的，而 Hashtable 的 Enumerator 不是 fail-fast 的。</li></ul><blockquote><p>为啥 Hashtable 是不允许 KEY 和 VALUE 为 null, 而 HashMap 则可以呢？</p></blockquote><p>因为Hashtable在我们put 空值的时候会直接抛空指针异常，但是HashMap却做了特殊处理。</p><p>Hashtable使用的是<strong>安全失败机制（fail-safe）</strong>，这种机制会使你此次读到的数据不一定是最新的数据。</p><p>如果你使用null值，就会使得其无法判断对应的key是不存在还是为空，因为你无法再调用一次contain(key）来对key是否存在进行判断，ConcurrentHashMap同理。</p><blockquote><p>fail-fast是啥？</p></blockquote><p><strong>快速失败（fail—fast）</strong>是java集合中的一种机制， 在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出Concurrent Modification Exception。</p><blockquote><p>他的原理是啥？</p></blockquote><p>迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。</p><p>集合在被遍历期间如果内容发生变化，就会改变modCount的值。</p><p>每当迭代器使用hashNext()&#x2F;next()遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。</p><p><strong>5、ConcurrentHashMap</strong> </p><p>ConcurrentHashMap 底层是基于 <code>数组 + 链表</code> 组成的，不过在 jdk1.7 和 1.8 中具体实现稍有不同。</p><p>我先说一下他在1.7中的数据结构吧：</p><img src="https://user-gold-cdn.xitu.io/2019/12/17/16f140880441eab3?imageView2/0/w/1280/h/960/ignore-error/1" alt="img" style="zoom:50%;" /><p>如图所示，是由 Segment 数组、HashEntry 组成，和 HashMap 一样，仍然是<strong>数组加链表</strong>。</p><p>HashEntry跟HashMap差不多的，但是不同点是，他使用volatile去修饰了他的数据Value还有下一个节点next。</p><blockquote><p>那你能说说他并发度高的原因么？</p></blockquote><p>原理上来说，ConcurrentHashMap 采用了<strong>分段锁</strong>技术，其中 Segment 继承于 ReentrantLock。</p><p>不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理，理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。</p><p>每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。</p><p>就是说如果容量大小是16他的并发度就是16，可以同时允许16个线程操作16个Segment而且还是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>1、阻塞队列的典型使用场景就是 <strong>生产者&#x2F;消费者模式</strong></p><ul><li>之前需要使用<code>synchronized+wait+notify</code></li></ul><p><strong>不得不阻塞：</strong></p><ul><li>写入：如果队列满了，就必须阻塞等待</li><li>取：如果队列为空的，就必须阻塞等待生产</li></ul><p>2、为什么需要阻塞队列？</p><p>我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程</p><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p><img src="https://img-blog.csdnimg.cn/20210318145457764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr/><p>1、架构图：<br><img src="https://img-blog.csdnimg.cn/20210318150657987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 67%;" /></p><p>2、种类分析：</p><ul><li><strong>ArrayBlockingQueue：由数组结构组成的有界阻塞队列</strong></li><li><strong>LinkedBlockingQueue：由链表结构组成的有界（大小默认Integer.Max_VALUE）阻塞队列，也可以看作无界</strong></li><li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列</li><li>DelayQueue：使用优先级队列实现的延迟无界阻塞队列</li><li><strong>SynchronizedQueue：不存储元素的阻塞队列，也即单个元素的队列</strong></li><li>LinkedTransferQueue：由链表结构组成的无界阻塞队列</li><li>LinkedBlockingDeque：由链表结构组成的双向阻塞队列</li></ul><h4 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h4><p>1、抛出异常<br>2、不会抛出异常<br>3、阻塞等待<br>4、超时等待</p><table><thead><tr><th>方式</th><th>抛出异常</th><th>有返回值，不会抛出异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer(元素)</td><td>put</td><td>offer(元素，时间，时间格式)</td></tr><tr><td>移除</td><td>remove</td><td>poll()</td><td>take</td><td>poll(时间，时间格式)</td></tr><tr><td>判断队列首元素</td><td>element</td><td>peek</td><td>不可用</td><td>不可用</td></tr></tbody></table><h5 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h5><ul><li>队列满抛出异常：Queue full</li><li>队列空删除元素抛出异常：NoSuchElementException</li><li>队列空判断队列第一个元素抛出异常：NoSuchElementException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//队列的大小</span></span><br><span class="line">  ArrayBlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  blockingQueue.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  blockingQueue.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  blockingQueue.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="comment">//异常：Queue full</span></span><br><span class="line">  blockingQueue.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">  blockingQueue.remove();</span><br><span class="line">  blockingQueue.remove();</span><br><span class="line">  blockingQueue.remove();</span><br><span class="line">  <span class="comment">//异常：NoSuchElementException</span></span><br><span class="line">  blockingQueue.remove();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//异常：NoSuchElementException</span></span><br><span class="line">  blockingQueue.element();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有返回值，不会抛出异常"><a href="#有返回值，不会抛出异常" class="headerlink" title="有返回值，不会抛出异常"></a>有返回值，不会抛出异常</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ArrayBlockingQueue blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    <span class="comment">//不抛出异常，返回false</span></span><br><span class="line">    System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(blockingQueue.poll());</span><br><span class="line">    System.out.println(blockingQueue.poll());</span><br><span class="line">    System.out.println(blockingQueue.poll());</span><br><span class="line">    <span class="comment">//不抛出异常，返回null</span></span><br><span class="line">    System.out.println(blockingQueue.poll());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不抛出异常，返回null</span></span><br><span class="line">    System.out.println(blockingQueue.peek());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="等待，阻塞（一直阻塞）"><a href="#等待，阻塞（一直阻塞）" class="headerlink" title="等待，阻塞（一直阻塞）"></a>等待，阻塞（一直阻塞）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  ArrayBlockingQueue blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//队列没有位置，一直等待</span></span><br><span class="line">  blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(blockingQueue.take());</span><br><span class="line">  System.out.println(blockingQueue.take());</span><br><span class="line">  System.out.println(blockingQueue.take());</span><br><span class="line"></span><br><span class="line">  <span class="comment">//一直等待</span></span><br><span class="line">  System.out.println(blockingQueue.take());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="等待，阻塞（等待超时）"><a href="#等待，阻塞（等待超时）" class="headerlink" title="等待，阻塞（等待超时）"></a>等待，阻塞（等待超时）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  ArrayBlockingQueue blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  blockingQueue.offer(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  blockingQueue.offer(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  blockingQueue.offer(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//队列没有位置，等待2s,如果没有位置就超时退出</span></span><br><span class="line">  blockingQueue.offer(<span class="string">&quot;a&quot;</span>,<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">  System.out.println(blockingQueue.poll());</span><br><span class="line">  System.out.println(blockingQueue.poll());</span><br><span class="line">  System.out.println(blockingQueue.poll());</span><br><span class="line"></span><br><span class="line">  <span class="comment">//一直等待</span></span><br><span class="line">  blockingQueue.poll(<span class="number">2</span>,TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h4><p><code>SynchronousQueue&lt;E&gt;</code></p><ul><li><p>没有容量</p></li><li><p>进去一个元素必须等待取出来之后，才能往里面放一个元素</p></li><li><p>put、take</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//put了一个元素，必须先take出来，不然不能put其他元素</span></span><br><span class="line">  SynchronousQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;put 1&quot;</span>);</span><br><span class="line">      blockingQueue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;put 2&quot;</span>);</span><br><span class="line">      blockingQueue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+<span class="string">&quot;put 3&quot;</span>);</span><br><span class="line">      blockingQueue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+blockingQueue.take());</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+blockingQueue.take());</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">      System.out.println(Thread.currentThread().getName()+blockingQueue.take());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Fork-x2F-Join框架"><a href="#Fork-x2F-Join框架" class="headerlink" title="Fork&#x2F;Join框架"></a>Fork&#x2F;Join框架</h3><blockquote><p>什么是ForkJoin？</p></blockquote><p>JDK1.7提出，用于并行执行任务，提高效率，大数据量</p><p>&#x3D;&#x3D;把大任务分割成若干个小任务，最终汇总每个小任务的结果后得到大任务结果的框架&#x3D;&#x3D;</p><ul><li>Fork：把大任务切分为若干个字任务并行的执行</li><li>Join：合并这些子任务的执行结果</li></ul><h4 id="工作窃取"><a href="#工作窃取" class="headerlink" title="工作窃取"></a>工作窃取</h4><blockquote><p>ForkJoin的特点：工作窃取（work-stealing）</p></blockquote><p>1、概念：指某个线程从其他队列里窃取任务来执行</p><p>2、比如：A线程负责A队列的任务，B线程的任务已经结束后去A队列中窃取一个任务来执行，这时访问同一个队列，因此为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用&#x3D;&#x3D;双端队列&#x3D;&#x3D;，被窃取的任务线程永远从头部拿任务，窃取任务的线程从尾部拿线程</p><p>3、优点和缺点</p><ul><li>优点：充分利用线程进行并行计算，减少了线程之间的竞争</li><li>缺点：在某些情况下还是存在竞争，比如双端队列只有一个任务时。并且该算法消耗大量的稀土资源，比如创建多个线程、创建多个双端队列</li></ul><h4 id="Fork-x2F-Join框架设计"><a href="#Fork-x2F-Join框架设计" class="headerlink" title="Fork&#x2F;Join框架设计"></a>Fork&#x2F;Join框架设计</h4><p>步骤1：分割任务</p><p>步骤2：执行任务并合并结果</p><p>使用两个类来完成以上两件事情：</p><ul><li><code>ForkJoinTask</code>：使用Fork&#x2F;join框架，必须先创建一个Fork&#x2F;Join任务。它提供在任务中执行fork和join操作的机制。通常情况下，我们只需要继承它的子类:<br><code>RecursiveAction</code>：用于没有返回结果的任务<br><code>RecursiveTask</code>：用于有返回结果的任务</li><li><code>ForkJoinPool</code>：<code>ForkJoinTask</code>需要通过<code>ForkJoinPool</code>来执行</li></ul><h4 id="使用Fork-x2F-Join"><a href="#使用Fork-x2F-Join" class="headerlink" title="使用Fork&#x2F;Join"></a>使用Fork&#x2F;Join</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">add</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//临界值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> temp = <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum=<span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">if</span>((end-start)&lt;temp)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">long</span> i=start;i&lt;=end;i++)&#123;</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//forkjoin</span></span><br><span class="line">            <span class="keyword">long</span> middle = (start+end)/<span class="number">2</span>;</span><br><span class="line">            add task1 = <span class="keyword">new</span> add(start,middle);</span><br><span class="line">            add task2 = <span class="keyword">new</span> add(middle+<span class="number">1</span>,end);</span><br><span class="line">            <span class="comment">//执行子任务</span></span><br><span class="line">            task1.fork();</span><br><span class="line">            task2.fork();</span><br><span class="line">            <span class="comment">//等待结果</span></span><br><span class="line">            <span class="keyword">long</span> result1 = task1.join();</span><br><span class="line">            <span class="keyword">long</span> result2 = task2.join();</span><br><span class="line">            sum = result1+result2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、ForkJoinPool：通过它来执行</span></span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        <span class="comment">//2、生产一个计算任务</span></span><br><span class="line">        add test = <span class="keyword">new</span> add(<span class="number">1</span>,<span class="number">12345</span>);</span><br><span class="line">        <span class="comment">//3、执行一个任务</span></span><br><span class="line">        Future&lt;Long&gt; result = forkJoinPool.submit(test);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(result.get());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="框架的实现原理"><a href="#框架的实现原理" class="headerlink" title="框架的实现原理"></a>框架的实现原理</h4><p><code>ForkJoinPool</code>由<code>ForkJoinTask</code>数组和<code>ForkJoinWorkerThread</code>数组组成：</p><ul><li><code>ForkJoinTask</code>数组：负责将存放程序&#x3D;&#x3D;提交&#x3D;&#x3D;给<code>ForkJoinPool</code>任务</li><li><code>ForkJoinWorkerThread</code>数组负责&#x3D;&#x3D;执行&#x3D;&#x3D;这些任务</li></ul><p>1、<code>ForkJoinTask</code>的fork方法实现原理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ForkJoinTask&lt;V&gt; <span class="title">fork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t;</span><br><span class="line">    <span class="keyword">if</span> ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread)</span><br><span class="line">        ((ForkJoinWorkerThread)t).workQueue.push(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ForkJoinPool.common.externalPush(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、<code>ForkJoinTask</code>的join方法实现原理</p><p>join方法主要作用：阻塞当前线程并等待获取结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">join</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s;</span><br><span class="line">        <span class="keyword">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</span><br><span class="line">            reportException(s);</span><br><span class="line">        <span class="keyword">return</span> getRawResult();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportException</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == CANCELLED)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CancellationException();</span><br><span class="line">    <span class="keyword">if</span> (s == EXCEPTIONAL)</span><br><span class="line">        rethrow(getThrowableException());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、首先使用<code>dojoin()</code>方法得到当前任务的状态</p><ul><li>已完成（NORMAL）：直接返回任务结果</li><li>被取消（CANCELLED）：抛出异常</li><li>信号（SIGNAL）</li><li>出现异常（EXCEPTIONAL）：抛出相应的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doJoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;</span><br><span class="line">    <span class="keyword">return</span> (s = status) &lt; <span class="number">0</span> ? s :</span><br><span class="line">        ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread) ?</span><br><span class="line">        (w = (wt = (ForkJoinWorkerThread)t).workQueue).</span><br><span class="line">        tryUnpush(<span class="keyword">this</span>) &amp;&amp; (s = doExec()) &lt; <span class="number">0</span> ? s :</span><br><span class="line">        wt.pool.awaitJoin(w, <span class="keyword">this</span>, <span class="number">0L</span>) :</span><br><span class="line">        externalAwaitDone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看任务状态，看任务是否已经完成，如果完成则返回任务状态；如果没有完成，则从任务数组中取出任务并执行。</p><p>如果任务顺利完成，状态为NORMAL；如果出现异常则记录异常，状态为EXCEPTIONAL</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="四大函数式接口"><a href="#四大函数式接口" class="headerlink" title="四大函数式接口"></a>四大函数式接口</h2><blockquote><p>函数式接口：只有一个方法的接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化编程模型，在底层大量使用</span></span><br><span class="line"><span class="comment">//forEach(消费者类的函数式接口)</span></span><br></pre></td></tr></table></figure><p>四大函数式接口：<code>Consumer</code>、<code>Function</code>、<code>Predicate</code>、<code>Supplier</code></p><h3 id="函数式接口：Function"><a href="#函数式接口：Function" class="headerlink" title="函数式接口：Function"></a>函数式接口：Function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//传入T，返回R</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="background: yellow;">有一个输入参数，有一个输出</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//工具类：输出输入的值</span></span><br><span class="line">    Function function = <span class="keyword">new</span> Function&lt;String, String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(function.apply(<span class="string">&quot;asd&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda表达式简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//工具类：输出输入的值</span></span><br><span class="line">    Function function = (str)-&gt;&#123;<span class="keyword">return</span> str;&#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(function.apply(<span class="string">&quot;asd&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="断定型接口：Predicate"><a href="#断定型接口：Predicate" class="headerlink" title="断定型接口：Predicate"></a>断定型接口：Predicate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="background: yellow;">有一个输入参数，返回布尔值</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//判断字符串是否为空</span></span><br><span class="line">    Predicate&lt;String&gt; predicate = <span class="keyword">new</span> Predicate&lt;String&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(predicate.test(<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="供给型接口：Supplier"><a href="#供给型接口：Supplier" class="headerlink" title="供给型接口：Supplier"></a>供给型接口：Supplier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="background: yellow;">只有返回</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Supplier supplier = <span class="keyword">new</span> Supplier&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1024&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费型接口：Consumer"><a href="#消费型接口：Consumer" class="headerlink" title="消费型接口：Consumer"></a>消费型接口：Consumer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="background: yellow;">只有输入，没有返回值</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Consumer&lt;String&gt; consumer = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String o)</span> </span>&#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote><p>CAS</p></blockquote><p>比较并交换 </p><p><strong>无锁、自旋锁</strong></p><img src="https://img-blog.csdnimg.cn/20210419103853218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><p><strong>ABA问题：加版本号</strong></p><p>底层：<code>lock cmpxchg 指令</code>，不是原子的，所以比较之后数据依然会发生改变</p><blockquote><p>对象内存布局</p></blockquote><p>对象（4个部分）：</p><ul><li>markword（8个字节）：锁信息、GC信息、hashcode</li><li>类型指针：指向方法区的class</li><li>实例数据</li><li>对齐填充</li></ul><p>Mark Word的结构为：</p><img src="https://img-blog.csdnimg.cn/20210328172012240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><blockquote><p>锁升级过程</p></blockquote><img src="https://img-blog.csdnimg.cn/20210419112014540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><blockquote><p>偏向锁</p></blockquote><p>1、背景：多数情况下只有一个线程在运行（StringBuffer的一些sync方法、vector的一些sync方法）</p><p>2、获取锁的过程</p><blockquote><p><strong>匿名偏向(Anonymously biased)</strong> 在此状态下<code>thread pointer</code>为<code>NULL(0)</code>，意味着还没有线程偏向于这个锁对象。第一个试图获取该锁的线程将会面临这个情况，使用原子<code>CAS</code>指令可将该锁对象绑定于当前线程。这是允许偏向锁的类对象的初始状态。</p></blockquote><ul><li>检查对象的Mark Word是否为可偏向锁状态</li><li>如果不是可偏向状态（0），CAS修改本线程id，修改成功就执行同步代码块（线程id 1 01）</li><li>如果是可偏向锁状态（1），检查Mark Word存储的线程id是否为当前线程id，如果是则执行同步代码块；如果不是，使用CAS修改线程id为本线程id，修改成功则执行同步代码块；修改不成功，当持有锁的线程到达全局安全点后，挂起该进程，进行锁升级</li></ul><p>3、释放锁的过程</p><blockquote><p>有其他线程来获取这个锁，偏向锁的释放采用了一种只有竞争才会释放锁的机制，<strong>线程是不会主动去释放偏向锁</strong>，需要等待其他线程来竞争。</p></blockquote><p>一个进程使用CAS修改线程id失败就开始偏向锁的撤销</p><ul><li><strong>等待全局安全点</strong>(在这个是时间点上没有字节码正在执行)。</li><li>暂停拥有偏向锁的线程，<strong>检查持有偏向锁的线程是否活着</strong><ul><li>如果不处于活动状态，则将对象头设置为无锁状态（空 0 01）</li><li>如果处于活动状态，则挂起持有偏向锁的线程，并将对象头<code>Mark Word</code>的锁记录指针改成当前线程的锁记录，锁**升级为轻量级锁状态(00)**。</li></ul></li></ul><blockquote><p>轻量级锁</p></blockquote><p>1、背景：大多数情况下线程交替执行，不存在线程并行执行（无法解决线程的竞争问题）</p><p><strong>2、偏向锁升级（锁的mark word内偏向线程A）</strong></p><p><strong>3、获取锁的过程</strong></p><ol><li><p>在线程进入同步方法、同步块的时候，如果<strong>同步对象锁状态为无锁状态(锁标志位为”01”状态，是否为偏向锁为”0”)<strong>，虚拟机首先将在当前线程的栈帧中</strong>建立一个名为锁记录(Lock Recored)的空间</strong>，用于储存锁对象目前的Mark Word的拷贝(官方把这份拷贝加了个Displaced前缀，即Displaced Mark Word)。</p></li><li><p>将对象头的<code>Mark Word</code>拷贝到线程的锁记录(Lock Recored)中。</p></li><li><p>拷贝成功后，虚拟机将使用<code>CAS</code>操作<strong>尝试将对象的<code>Mark Word</code>更新为指向<code>Lock Record</code>的指针</strong>。如果这个更新成功了，则执行步骤<code>4</code>，否则执行步骤<code>5</code>。</p></li><li><p>更新成功，这个<strong>线程就拥有了该对象的锁，并且对象Mark Word的锁标志位将转变为”00”，即表示此对象处于轻量级锁的状态。</strong></p></li><li><p>更新失败，虚拟机首先会检查对象的<code>Mark Word</code>是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，可以直接进入同步块继续执行（<strong>将displaced置为null</strong>），否则说明这个锁对象已经被其其它线程抢占了。<strong>进行自旋执行步骤<code>3</code>，如果自旋结束仍然没有获得锁，轻量级锁就需要膨胀为重量级锁，锁标志位状态值变为”10”，Mark Word中储存就是指向<code>monitor</code>对象的指针，当前线程以及后面等待锁的线程也要进入阻塞状态。</strong></p></li></ol><p><img src="https://img-blog.csdnimg.cn/9db6245f2dc841fd8d432a2fb0dd8e57.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/a1dc3e9961c7494db33fc9b56e7b534a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/01/10/Redis/"/>
      <url>/2022/01/10/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="如何保证mysql与缓存一致性？"><a href="#如何保证mysql与缓存一致性？" class="headerlink" title="如何保证mysql与缓存一致性？"></a>如何保证mysql与缓存一致性？</h3><h4 id="读取缓存"><a href="#读取缓存" class="headerlink" title="读取缓存"></a>读取缓存</h4><p>读取缓存的方案都是按照下面的流程进行操作的：</p><img src="https://img-blog.csdnimg.cn/58f44406193a455087c25bdc5454e002.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><h4 id="更新一致性方案——设置缓存过期时间"><a href="#更新一致性方案——设置缓存过期时间" class="headerlink" title="更新一致性方案——设置缓存过期时间"></a>更新一致性方案——设置缓存过期时间</h4><p>所有的写操作都以数据库为准，如果数据库写入成功但是缓存更新失败，只要缓存到期时间之后后面读缓存时自然会去数据库读取新的缓存然后更新</p><h4 id="更新一致性方案——先更新数据库再更新缓存"><a href="#更新一致性方案——先更新数据库再更新缓存" class="headerlink" title="更新一致性方案——先更新数据库再更新缓存"></a>更新一致性方案——先更新数据库再更新缓存</h4><blockquote><p>被普遍反对！</p></blockquote><p>原因：</p><ul><li><strong>数据安全角度</strong>：如果请求A和请求B同时进行操作，A先更新了数据库的一条数据，随后B马上有更新了该条数据，但是可能因为网络延迟等原因，B却比A先更新了缓存，就会出现一种什么情况呢？缓存中的数据并不最新的B更新过的数据，就导致了数据不一致的情况。</li><li><strong>业务场景角度</strong>：如果是写多读少的业务，这种方案会导致数据还没读缓存就被频繁更新，浪费性能</li></ul><h4 id="更新一致性方案——先删除缓存再更新数据库"><a href="#更新一致性方案——先删除缓存再更新数据库" class="headerlink" title="更新一致性方案——先删除缓存再更新数据库"></a>更新一致性方案——先删除缓存再更新数据库</h4><p><strong>1、问题：脏数据</strong></p><ul><li>A进行更新操作，B进行查询操作；A进行写操作前删除了缓存，B读的时候发现没有缓存就会查询数据库，如果A事务没有提交B就会查询到旧值存储到缓存中，就会导致数据不一致问题</li></ul><p><strong>2、解决：延时双删</strong></p><img src="https://img-blog.csdnimg.cn/b85b7ad8935c4b4d83df7fd62c356ad6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><p>过程：</p><ul><li>删除Redis缓存</li><li>更新数据库</li><li>等待一段时间，删除Redis缓存（<strong>等待时间：读数据业务逻辑耗时+几百ms</strong>）</li></ul><p><strong>目的：确保B读请求结束A写请求能够删除B读请求存储的脏数据</strong></p><p><strong>3、问题：</strong>第二次删除缓存失败，还是会造成缓存和数据库的不一致</p><h4 id="更新一致性方案——先更新数据库再删除缓存"><a href="#更新一致性方案——先更新数据库再删除缓存" class="headerlink" title="更新一致性方案——先更新数据库再删除缓存"></a>更新一致性方案——先更新数据库再删除缓存</h4><p>缓存更新方案：Cache-Aside Pattern</p><ul><li>应用程序应该从缓存中获取数据，获取成功就直接返回，获取失败就从数据库中读取，成功后放入缓存</li><li>更新数据时先把数据库存储到数据库中成功后再让缓存失效</li></ul><p><strong>问题：</strong></p><p>有两个请求A和B，A进行查询同时B进行更新，假设发生下述情况：</p><p>①此时缓存刚好失效</p><p>②请求A 就会去查询数据库得到一个旧的值</p><p>③请求B将新的值写入数据库</p><p>④请求B写入成功后删除缓存</p><p>⑤请求A将查到的机制写入缓存，产生脏数据…</p><blockquote><p>但是这种情况的概率很小</p></blockquote><h4 id="如果删除缓存失败怎么办？"><a href="#如果删除缓存失败怎么办？" class="headerlink" title="如果删除缓存失败怎么办？"></a>如果删除缓存失败怎么办？</h4><p>解决：重试机制</p><img src="https://img-blog.csdnimg.cn/f6abfeb75421436fa93f47935b2154d6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:40%;" /><p>解决：读取binlog异步删除缓存</p><h3 id="单线程为什么快？"><a href="#单线程为什么快？" class="headerlink" title="单线程为什么快？"></a>单线程为什么快？</h3><p><strong>1、为什么不使用多线程？</strong></p><ul><li>减少多线程带来的额外开销和多线程同时访问共享资源的并发问题</li></ul><p><strong>2、为什么单线程快？</strong></p><ul><li>Redis大部分操作在内存实现</li><li>采用高效的数据结构</li><li>多路I&#x2F;O复用，能够并发处理大量客户端请求</li></ul><p><strong>3、多路I&#x2F;O复用</strong></p><ul><li>一个线程处理多个IO流，<strong>select&#x2F;epoll机制</strong></li><li>该机制允许内核中同时存在多个监听socket和已连接socket；内核会一直监听这些socket上的连接请求或数据请求；一旦有请求到达就交给redis线程处理</li><li>select&#x2F;epoll 提供了基于事件的<strong>回调机制</strong>，即针对不同事件的发生，调用相应的处理函数。<ul><li><strong>回调机制</strong>：select&#x2F;epoll 一旦监测到 FD 上有请求到达时，就会触发相应的事件；这些事件会被放进一个事件队列，redis对事件队列不断处理，Redis处理的时候会调用相应的处理函数，这就实现了基于事件的回调</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/d52e5e9dbd494cb19f6f09039f8aebeb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="select、poll、epoll"><a href="#select、poll、epoll" class="headerlink" title="select、poll、epoll"></a>select、poll、epoll</h3><h4 id="基本的socket编程模型"><a href="#基本的socket编程模型" class="headerlink" title="基本的socket编程模型"></a>基本的socket编程模型</h4><p>1、服务端和客户端进行通信时，在服务器端通过以下三步来创建监听客户端连接的<strong>监听套接字（listening socket）</strong></p><ul><li>调用<code>socket</code>函数，创建一个套接字（<strong>主动套接字</strong>）</li><li>调用<code>bind</code>函数，将主动套接字和当前服务器的IP和监听端口进行绑定</li><li>调用<code>listen</code>函数，将主动套接字转为监听套接字，开始监听客户端的连接</li></ul><p>在完成上述三步之后，服务器端就可以接收客户端的连接请求了，可以运行一个循环流程，在流程中调用<code>accept</code>函数，用于接收客户端连接请求</p><ul><li><code>accept</code>函数是阻塞函数，如果此时一直没有客户端连接请求，那么服务器端执行流程会一直阻塞在accept函数</li></ul><p>最后，服务器端可以通过调用<code>recv</code>或者<code>send</code>函数在刚刚返回的已连接套接字上，接收并处理读写请求，或者将数据发送给客户端</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listenSocket = socket(); <span class="comment">//调用socket系统调用创建一个主动套接字</span></span><br><span class="line">bind(listenSocket);  <span class="comment">//绑定地址和端口</span></span><br><span class="line">listen(listenSocket); <span class="comment">//将默认的主动套接字转换为服务器使用的被动套接字，也就是监听套接字</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123; <span class="comment">//循环监听是否有客户端连接请求到来</span></span><br><span class="line">   connSocket = accept(listenSocket); <span class="comment">//接受客户端连接</span></span><br><span class="line">   recv(connsocket); <span class="comment">//从客户端读取数据，只能同时处理一个客户端</span></span><br><span class="line">   send(connsocket); <span class="comment">//给客户端返回数据，只能同时处理一个客户端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在基本的 Socket 编程模型中，accept 函数只能在一个监听套接字上监听客户端的连接，recv 函数也只能在一个已连接套接字上，等待客户端发送的请求。</p><p><strong>3、IO多路复用机制</strong></p><ul><li>可以让程序通过调用多路复用函数，同时监听多个套接字上的请求，既包括监听套接字上的请求也包括已连接套接字的请求</li></ul><h4 id="select和poll机制实现IO多路复用"><a href="#select和poll机制实现IO多路复用" class="headerlink" title="select和poll机制实现IO多路复用"></a>select和poll机制实现IO多路复用</h4><p><strong>1、select机制</strong></p><ul><li>参数：<ul><li><code>__nfds</code>：监听的文件描述符数量</li><li><code>*__readfds、*__writefds、*__exceptfds</code>：被监听描述符的三个集合（fd_set结构）</li><li><code>*__timeout</code>：监听时阻塞等待的超时时长</li></ul></li><li>监听的事件：<strong>读数据事件、写数据事件、异常事件</strong></li><li><strong>对于每一个描述符集合，都可以监听1024个描述符</strong></li><li>如何使用select机制实现网络通信<ul><li>调用前，创建好传递给select函数的描述符集合，再创建监听套接字，将套接字的描述符加入到创建好的描述符集合中</li><li>调用select函数，把创建好的描述符集合作为参数传递给select函数；程序调用后会发生阻塞，当select函数检测到有描述符就绪后，就会结束阻塞，并返回就绪的文件描述符数量</li><li>在描述符集合中查找哪些描述符就绪了，对这些描述符对应的套接字进行处理，在该套接字上进行读写操作</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/dc90ad8c8c8a407bb14fe43a22d13335.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:40%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sock_fd,conn_fd; <span class="comment">//监听套接字和已连接套接字的变量</span></span><br><span class="line">sock_fd = socket() <span class="comment">//创建套接字</span></span><br><span class="line">bind(sock_fd)   <span class="comment">//绑定套接字</span></span><br><span class="line">listen(sock_fd) <span class="comment">//在套接字上进行监听，将套接字转为监听套接字</span></span><br><span class="line"></span><br><span class="line">fd_set rset;  <span class="comment">//被监听的描述符集合，关注描述符上的读事件</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> max_fd = sock_fd</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化rset数组，使用FD_ZERO宏设置每个元素为0 </span></span><br><span class="line">FD_ZERO(&amp;rset);</span><br><span class="line"><span class="comment">//使用FD_SET宏设置rset数组中位置为sock_fd的文件描述符为1，表示需要监听该文件描述符</span></span><br><span class="line">FD_SET(sock_fd,&amp;rset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置超时时间 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">timeout</span>;</span></span><br><span class="line">timeout.tv_sec = <span class="number">3</span>;</span><br><span class="line">timeout.tv_usec = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">   <span class="comment">//调用select函数，检测rset数组保存的文件描述符是否已有读事件就绪，返回就绪的文件描述符个数</span></span><br><span class="line">   n = select(max_fd+<span class="number">1</span>, &amp;rset, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//调用FD_ISSET宏，在rset数组中检测sock_fd对应的文件描述符是否就绪</span></span><br><span class="line">   <span class="keyword">if</span> (FD_ISSET(sock_fd, &amp;rset)) &#123;</span><br><span class="line">       <span class="comment">//如果sock_fd已经就绪，表明已有客户端连接；调用accept函数建立连接</span></span><br><span class="line">       conn_fd = accept();</span><br><span class="line">       <span class="comment">//设置rset数组中位置为conn_fd的文件描述符为1，表示需要监听该文件描述符</span></span><br><span class="line">       FD_SET(conn_fd, &amp;rset);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//依次检查已连接套接字的文件描述符</span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; maxfd; i++) &#123;</span><br><span class="line">        <span class="comment">//调用FD_ISSET宏，在rset数组中检测文件描述符是否就绪</span></span><br><span class="line">       <span class="keyword">if</span> (FD_ISSET(i, &amp;rset)) &#123;</span><br><span class="line">         <span class="comment">//有数据可读，进行读数据处理</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点：<ul><li>对单个进程监听的文件描述符数量有限</li><li>当select函数返回后需要遍历描述符集合找到具体就绪的描述符</li></ul></li></ul><p><strong>2、poll机制</strong></p><ul><li><p>参数：</p><ul><li><p><code>*__fds</code>：pollfd 结构体数组，包含要监听的描述符，以及描述符上要监听的事件类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd;         <span class="comment">//进行监听的文件描述符</span></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> events;       <span class="comment">//要监听的事件类型</span></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> revents;      <span class="comment">//实际发生的事件类型</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>_nfds</code>：表示*__fds数据元素的个数</p></li><li><p><code>_timeout</code>：表示poll函数阻塞的超时事件</p></li></ul></li><li><p>通信流程</p><ul><li>创建pollfd数组和监听套接字，进行绑定</li><li>将监听套接字加入pollfd数组，并设置其监听读事件，也就是客户端的连接请求</li><li>循环调用poll函数，检测pollfd数组就绪的文件描述符<ul><li>如果是连接套接字就绪，表明有客户端连接，使用accept接收连接，并创建已连接套接字，加入pollfd数组，监听读事件</li><li>如果是已连接套接字就绪，表明客户端有读写请求，调用recv&#x2F;send函数处理</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sock_fd,conn_fd; <span class="comment">//监听套接字和已连接套接字的变量</span></span><br><span class="line">sock_fd = socket() <span class="comment">//创建套接字</span></span><br><span class="line">bind(sock_fd)   <span class="comment">//绑定套接字</span></span><br><span class="line">listen(sock_fd) <span class="comment">//在套接字上进行监听，将套接字转为监听套接字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//poll函数可以监听的文件描述符数量，可以大于1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_OPEN = 2048</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pollfd结构体数组，对应文件描述符</span></span><br><span class="line">struct pollfd client[MAX_OPEN];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将创建的监听套接字加入pollfd数组，并监听其可读事件</span></span><br><span class="line">client[<span class="number">0</span>].fd = sock_fd;</span><br><span class="line">client[<span class="number">0</span>].events = POLLRDNORM; </span><br><span class="line">maxfd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化client数组其他元素为-1</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; MAX_OPEN; i++)</span><br><span class="line">    client[i].fd = <span class="number">-1</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">   <span class="comment">//调用poll函数，检测client数组里的文件描述符是否有就绪的，返回就绪的文件描述符个数</span></span><br><span class="line">   n = poll(client, maxfd+<span class="number">1</span>, &amp;timeout);</span><br><span class="line">   <span class="comment">//如果监听套件字的文件描述符有可读事件，则进行处理</span></span><br><span class="line">   <span class="keyword">if</span> (client[<span class="number">0</span>].revents &amp; POLLRDNORM) &#123;</span><br><span class="line">       <span class="comment">//有客户端连接；调用accept函数建立连接</span></span><br><span class="line">       conn_fd = accept();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//保存已建立连接套接字</span></span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; MAX_OPEN; i++)&#123;</span><br><span class="line">         <span class="keyword">if</span> (client[i].fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           client[i].fd = conn_fd; <span class="comment">//将已建立连接的文件描述符保存到client数组</span></span><br><span class="line">           client[i].events = POLLRDNORM; <span class="comment">//设置该文件描述符监听可读事件</span></span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       maxfd = i; </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//依次检查已连接套接字的文件描述符</span></span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; MAX_OPEN; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (client[i].revents &amp; (POLLRDNORM | POLLERR)) &#123;</span><br><span class="line">         <span class="comment">//有数据可读或发生错误，进行读数据处理或错误处理</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>和select函数相比，poll函数允许一次监听超过1024个文件描述符，但是仍然需要遍历每个文件描述符</strong></p></li></ul><h4 id="epoll机制实现IO多路复用"><a href="#epoll机制实现IO多路复用" class="headerlink" title="epoll机制实现IO多路复用"></a>epoll机制实现IO多路复用</h4><p>1、epoll机制使用<code>epoll_event</code>结构体来记录待监听的文件描述符及其监听的事件类型</p><ul><li><code>events</code>：整数类型变量，取值使用不同的宏定义值</li><li><code>epoll_data_t</code>：联合体变量<ul><li>fd：记录文件描述符</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">epoll_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">int</span> fd;  <span class="comment">//记录文件描述符</span></span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint32_t</span> events;  <span class="comment">//epoll监听的事件类型</span></span><br><span class="line">  <span class="keyword">epoll_data_t</span> data; <span class="comment">//应用程序数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、<code>epoll_create</code>函数</p><ul><li>创建一个epoll实例，维护两个结构，分别是<strong>记录要监听的文件描述符和已经就绪的文件描述符</strong>，对于已经就绪的文件描述符会被返回给用户程序处理</li><li>所以就不需要遍历查询哪些文件描述符已经就绪</li></ul><p>3、<code>epoll_ctl</code>函数</p><ul><li>给被监听的文件描述符添加事件类型</li></ul><p>4、<code>epoll_wait</code>函数</p><ul><li>获取就绪的文件描述符</li></ul><img src="https://img-blog.csdnimg.cn/48eca7c0f422484a90b8c0aedf4efe79.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sock_fd,conn_fd; <span class="comment">//监听套接字和已连接套接字的变量</span></span><br><span class="line">sock_fd = socket() <span class="comment">//创建套接字</span></span><br><span class="line">bind(sock_fd)   <span class="comment">//绑定套接字</span></span><br><span class="line">listen(sock_fd) <span class="comment">//在套接字上进行监听，将套接字转为监听套接字</span></span><br><span class="line">    </span><br><span class="line">epfd = epoll_create(EPOLL_SIZE); <span class="comment">//创建epoll实例，</span></span><br><span class="line"><span class="comment">//创建epoll_event结构体数组，保存套接字对应文件描述符和监听事件类型    </span></span><br><span class="line">ep_events = (epoll_event*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(epoll_event) * EPOLL_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建epoll_event变量</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">ee</span></span></span><br><span class="line"><span class="class">//监听读事件</span></span><br><span class="line"><span class="class"><span class="title">ee</span>.<span class="title">events</span> =</span> EPOLLIN;</span><br><span class="line"><span class="comment">//监听的文件描述符是刚创建的监听套接字</span></span><br><span class="line">ee.data.fd = sock_fd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将监听套接字加入到监听列表中    </span></span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, sock_fd, &amp;ee); </span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">   <span class="comment">//等待返回已经就绪的描述符 </span></span><br><span class="line">   n = epoll_wait(epfd, ep_events, EPOLL_SIZE, <span class="number">-1</span>); </span><br><span class="line">   <span class="comment">//遍历所有就绪的描述符     </span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">       <span class="comment">//如果是监听套接字描述符就绪，表明有一个新客户端连接到来 </span></span><br><span class="line">       <span class="keyword">if</span> (ep_events[i].data.fd == sock_fd) &#123; </span><br><span class="line">          conn_fd = accept(sock_fd); <span class="comment">//调用accept()建立连接</span></span><br><span class="line">          ee.events = EPOLLIN;  </span><br><span class="line">          ee.data.fd = conn_fd;</span><br><span class="line">          <span class="comment">//添加对新创建的已连接套接字描述符的监听，监听后续在已连接套接字上的读事件      </span></span><br><span class="line">          epoll_ctl(epfd, EPOLL_CTL_ADD, conn_fd, &amp;ee); </span><br><span class="line">                </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果是已连接套接字描述符就绪，则可以读数据</span></span><br><span class="line">           ...<span class="comment">//读取数据并处理</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><blockquote><p>8大数据类型</p></blockquote><p>string、hash、list、set、sortedSet、Bitmap、HyperLogLog、GEO</p><blockquote><p>String类型使用场景</p></blockquote><p><strong>1、命令</strong></p><p>最常用：<code>set key value</code>、<code>get key</code></p><p>设置多个：<code>mset k1 v1 k2 v2</code>、<code>mget k1 k2</code></p><p>数值增减：</p><ul><li>递增：<code>incr k1</code></li><li>增加指定：<code>incrby k1 2</code></li><li>递减：<code>decr k1</code></li><li>减少指定：<code>decrby k1 2</code></li></ul><p>获取字符串长度：<code>strlen k1</code></p><p><code>setnx k1 v1</code>、<code>set key value [EX seconds][PX milliseconds] [NX|XX]</code>、<code>setex key seconds value</code></p><ul><li><p>EX：key在多少秒后过期</p></li><li><p>PX：key在多少毫秒后过期</p></li><li><p>NX：当key不存在时，才创建key，效果等同于setnx</p></li><li><p>XX：当key存在时，覆盖key</p></li></ul><p><strong>2、应用场景</strong></p><ul><li>商品编号、订单号采用incr命令生成</li></ul><blockquote><p>hash应用场景</p></blockquote><p><code>Map&lt;String,Map&lt;Object,Object&gt;&gt;</code></p><p><strong>1、命令</strong></p><p>一次设置一个字段值：<code>hset k1 f1 v1</code></p><p>一次获取一个字段值：<code>hget k1 f1</code></p><p>一次设置多个字段值：<code>hmset k1 f1 v1 f2 v2</code></p><p>一次获取多个字段值：<code>hmget k1 f1 f2</code></p><p>获取所有字段值：<code>hgetall k1</code></p><p>获取某个key内全部数量：<code>hlen k1</code></p><p>删除一个key：<code>hdel k1</code></p><p>增加：<code>hincrby k1 f1 2</code></p><p><strong>2、应用场景</strong></p><ul><li>购物车</li></ul><blockquote><p>list应用场景</p></blockquote><p><strong>1、命令</strong></p><p>左边添加：<code>lpush k1 1 2 3 4</code> </p><p>右边添加：<code>rpush k1 1 2 3 4</code></p><p>查看列表（类似于分页）：<code>lrange k1 0 -1</code></p><p>获取元素个数：<code>llen k1</code></p><p><strong>2、应用场景</strong></p><ul><li>点赞</li></ul><blockquote><p>set应用场景</p></blockquote><p><strong>1、命令</strong></p><p>添加元素：<code>sadd k1 m1 m2...</code></p><p>删除元素：<code>srem k1 m1 m2...</code></p><p>获取集合中的所有元素：<code>smembers k1</code></p><p>判断元素是否在集合中：<code>sismember k1 m1</code></p><p>获取集合中元素的个数：<code>scard k1</code></p><p>从集合中随机弹出一个元素，元素不删除：<code>srandmember k1 [数字]</code></p><p>从集合中随机弹出一个元素，出一个删一个：<code>spop k1 [数字]</code></p><p><strong>2、集合运算</strong></p><p>交：<code>sinter key1 key2</code></p><p>并：<code>sunion key1 key2</code></p><p>差（属于k1不属于k2）：<code>sdiff key1 key2</code></p><p><strong>3、应用场景</strong></p><ul><li><p>微信抽奖小程序</p><ul><li><p>参与：<code>sadd key 用户ID</code></p></li><li><p>显示参与人数：<code>scard key</code></p></li><li><p>抽奖：<code>spop k1 1</code></p></li></ul></li><li><p>朋友圈点赞</p><ul><li>新增点赞：<code>sadd pub:msgID 点赞用户1 点赞用户2 </code></li><li>取消点赞：<code>srem pub:msgID 点赞用户1</code></li><li>展示所有点赞过的用户：<code>smembers pub:msgID</code></li><li>点赞用户统计：<code>scard pub:msgID</code></li></ul></li><li><p>好友社交关系</p><ul><li>共同关注：<code>sinter s1 s2</code></li></ul></li><li><p>qq可能认识的人</p><ul><li><code>sdiff s1 s2</code></li></ul></li></ul><blockquote><p>zset应用场景</p></blockquote><p>向有序集合中加入元素和分数</p><p><strong>1、命令</strong></p><p>添加元素：<code>zadd k1 score m1</code></p><p>按照元素分数从小到大顺序返回索引从start到stop之间的所有元素：<code>zrange k1 start stop [withscores]</code></p><p>获取元素的分数：<code>zscore k1 m1</code></p><p>获取排名：<code>zrank k1 m1</code>、<code>zrevrank k1 m1</code></p><p>增加：<code>zincrby key 1 m1</code></p><p><strong>2、场景</strong></p><ul><li><p>热搜</p></li><li><p>排序显示</p></li></ul><blockquote><p>分布式锁</p></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p><strong>问题现象</strong></p><ul><li>海量用户</li><li>高并发</li></ul><p><strong>关系型数据库</strong></p><ul><li>性能瓶颈：磁盘IO性能低下</li><li>扩展瓶颈：数据关系复杂、扩展性差、不便于大规模集群</li></ul><p><strong>解决思路</strong></p><ul><li>降低磁盘IO次数</li><li>去除数据间关系，越简单越好</li></ul><h3 id="Nosql"><a href="#Nosql" class="headerlink" title="Nosql"></a>Nosql</h3><p>1、Nosql：非关系型数据库，作为关系型数据库的补充</p><p>2、<strong>作用：</strong>应对基于海量用户和海量数据前提下的数据处理问题</p><p>3、特征：</p><ul><li>可扩容、可伸缩</li><li>大数据量下高性能</li><li>灵活的数据模型</li><li>高可用</li><li><strong>不支持ACID</strong></li></ul><p><strong>4、常见Nosql数据库：</strong></p><ul><li>Redis<ul><li>数据在内存，支持持久化</li><li>支持多种数据结构的存储</li></ul></li><li>memcache<ul><li>数据在内存，不支持持久化</li></ul></li><li>MongoDB<ul><li>文档型数据库</li><li>对value（尤其是json）提供丰富的查询功能</li></ul></li></ul><h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><p>概念：用C语言开发的一个开源的高性能<strong>键值对数据库</strong></p><p>特征：</p><ul><li>数据间没有必然的关联关系</li><li>内部使用<strong>单线程</strong></li><li>高性能</li><li>多数据类型支持<ul><li>字符串类型 string</li><li>列表类型 list</li><li>散列类型 hash</li><li>集合类型 set</li><li>有序集合类型 zset</li></ul></li><li>数据类型都支持丰富操作，且是<strong>原子性</strong>的</li><li>持久化支持，可以进行数据灾难恢复</li><li>实现主从同步操作</li></ul><h3 id="Redis应用"><a href="#Redis应用" class="headerlink" title="Redis应用"></a>Redis应用</h3><p><img src="https://img-blog.csdnimg.cn/084e21ceb94244d787ff17b4f2a8c438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark：性能测试工具</span><br><span class="line">redis-check-aof ：修复有问题的AOF文件</span><br><span class="line">redis-check-rdb：修复有问题的RDB文件</span><br><span class="line">redis-sentinel：Redis集群使用</span><br><span class="line"></span><br><span class="line">redis-server：Redis服务器启动命令</span><br><span class="line">redis-cli：客户端，操作入口</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><h3 id="Redis相关知识"><a href="#Redis相关知识" class="headerlink" title="Redis相关知识"></a>Redis相关知识</h3><p>1、端口：6379</p><p>2、默认16个数据库，select 0&#x2F;1&#x2F;2</p><p>3、Redis是 <strong>单线程+多路IO复用技术</strong></p><ul><li><strong>多路复用</strong>：使用一个线程检查多个文件描述符（socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启用线程执行</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>业务数据的特殊性</p><p><strong>1、作为缓存使用</strong></p><ul><li>原始业务功能设计：秒杀、双11、12306</li><li>运营平台监控到的突发高频访问数据：突发时政要闻</li><li>高频、复杂的统计数据：在线人数、投票排行榜</li></ul><p><strong>2、附加功能</strong></p><ul><li>系统功能优化或升级：单服务器升级集群、Session管理</li></ul><p><strong>3、redis数据存储格式</strong></p><p>redis是一个Map，其中所有的数据都是采用key-value的形式存储</p><ul><li><strong>数据类型指的是存储的数据类型，也就是value部分的类型，key永远是字符串</strong></li></ul><h3 id="对key的操作"><a href="#对key的操作" class="headerlink" title="对key的操作"></a>对key的操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">key * ：查看当前库所有的key</span><br><span class="line">exists key ：判断某个key是否存在</span><br><span class="line">type key ：查看key的类型 </span><br><span class="line"></span><br><span class="line">del key ：删除key的数据</span><br><span class="line">unlink key ：根据value选择非阻塞删除，仅将keys从元数据中删除，真正的删除在后续异步完成</span><br><span class="line"></span><br><span class="line">expire key 10 ：为给定key设置过期时间（单位：秒），不设置时间表示永远不过期</span><br><span class="line">ttl key：查看剩余时间,-2表示过期，-1表示永不过期</span><br><span class="line"></span><br><span class="line">dbsize：查看当前数据库key的数量</span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p><strong>1、存储的数据：单个数据，最简单的数据存储类型，最常用</strong></p><p><strong>2、存储数据的格式：一个存储空间保存一个数据</strong></p><p>3、存储内容：通常使用字符串，如果以整数形式展示，也可以作为数字操作，value最大512M</p><p>4、基本操作</p><ul><li>添加&#x2F;修改数据：<code>set key value</code></li><li>获取数据：<code>get key</code></li><li>删除数据：<code>del key</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> del name                                                                  </span><br><span class="line">(<span class="type">integer</span>) <span class="number">1</span> # 操作成功</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> del name                                                                  </span><br><span class="line">(<span class="type">integer</span>) <span class="number">0</span> # 操作失败</span><br></pre></td></tr></table></figure><ul><li>添加&#x2F;修改多个数据：<code>mset key1 value1 key2 value2</code></li><li>获取多个数据：<code>mget key1 key2</code></li><li>获取数据字符串个数（字符串长度）：<code>strlen key</code></li><li>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）：<code>append key value</code></li></ul><blockquote><p>单数据操作和多数据操作？</p></blockquote><p>比如：操作三个数据</p><ul><li>单数据操作：3次发送、3次回复、运行三次</li><li>多数据操作：1次发送，1次回复，运行三次</li></ul><p><strong>结论：</strong>没有固定结论，对于多数据操作，可能需要切割</p><p><strong>5、String类型数据的扩展操作</strong></p><blockquote><p>业务场景：分布式ID</p><p>对于大型企业级应用，分表操作是基本操作，使用多张表存储同类型数据，但是对应的主键id必须保证统一性，不能重复，如何解决这个问题？</p></blockquote><p><strong>解决方案</strong></p><ul><li><p>设置数值数据增加指定范围的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 加<span class="number">1</span></span><br><span class="line">incr key</span><br><span class="line"># 加指定数</span><br><span class="line">incrby key increment</span><br><span class="line">incrbyfloat key increment</span><br></pre></td></tr></table></figure></li><li><p>设置数值减少指定范围的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decr key</span><br><span class="line">decrby key increment</span><br></pre></td></tr></table></figure></li></ul><p>Sting作为数值操作</p><ul><li>string在redis内部存储默认就是一个字符串，当遇到增减类操作incr、dec时会转为数值型进行计算</li><li><strong>redis所有操作都是原子性的，采用单线程处理所有的业务，命令一个个执行</strong></li><li>注意：如果原始数据不能转为数值或者超越了数值上限，就会报错</li></ul><p><strong>redis用于控制数据库主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性</strong></p><blockquote><p>业务场景：控制时效性</p></blockquote><p><strong>解决方案</strong></p><ul><li><p>设置数据具有指定的生命周期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setex key seconds <span class="keyword">value</span></span><br><span class="line">psetex key milliseconds <span class="keyword">value</span></span><br></pre></td></tr></table></figure></li></ul><p>redis控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</p><p><strong>6、数据结构</strong></p><p>String的数据结构为简单动态字符串（SDS），是可以修改的字符串，内部结构实现类似于java的arraylist，采用预分配冗余空间的方式来减少内存的频繁分配。</p><p><img src="https://img-blog.csdnimg.cn/77dffea9b4bd42509d140cead0bc18a8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>内部为当前字符串实际分配的空间capacity，一般高于实际字符串长度len，当字符串长度小于1M时，扩容都是2倍，如果超过1M，扩容一次只多扩容1M空间。（最长512M）</p><blockquote><p>为什么redis不使用char*？</p></blockquote><ul><li><p><strong>char*的结构设计</strong></p><ul><li><p>一块连续的内存空间，依次存放字符串的每一个字符；最后一个字符是<code>\0</code>，标识字符串的结束</p></li><li><p><strong>影响</strong>：如果保存的数据本身含有<code>\0</code>，那么数据会被截断，这就不符合redis希望能够保持任意数据的需求了</p></li><li><p><strong>操作函数的复杂度</strong>：</p><ul><li>求数组长度，需要遍历每一个字符，复杂度是O（n）</li><li>追加字符，需要遍历字符串获得末尾完成追加，还需要保证空间足够</li></ul><img src="https://img-blog.csdnimg.cn/197459f2e1bc4a5e8a6b09a6389ae11d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /></li></ul></li><li><p><strong>原因：不符合redis对字符串高效操作的需求</strong></p></li></ul><p><strong>SDS结构</strong></p><ul><li>主要由<code>len</code>（buf数据所保存字符串的长度）、<code>free</code>（未使用的字节数量）、<code>buf[]</code>（保存字符串的数组）三个属性组成</li></ul><img src="https://img-blog.csdnimg.cn/e01985bdbd994d71aec1fe52945d27e1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li><strong>本质还是数据，只是增加了额外的元数据</strong></li><li>追加操作：<ul><li>获取目标字符串长度，根据当前长度和需要追加的长度判断空间是否足够</li><li>将数据拷贝到字符串结尾</li><li>设置字符串的最新长度</li></ul></li><li>优点<ul><li>效率高：使用<code>strlen</code>获取字符串长度在SDS中len属性记录了字符串长度，获取字符串长度的时间复杂度为O(1)</li><li>数据溢出：SDS会自动扩容</li></ul></li><li><strong>内存重分配策略</strong>：解决了字符串在增长和缩短时内存分配问题<ul><li><strong>空间预分配策略</strong>：当修改字符串时，会为SDS分配修改所必要的空间，还会为SDS分配额外使用的空间<code>free</code>，如果字符串修改后<code>len</code>小于1M，那么<code>free</code>和<code>len</code>相等，<code>len</code>值大于等于1M，那么<code>free</code>为1M</li><li><strong>惰性空间释放</strong>：优化字符串缩短操作，使用free记录剩余空间</li></ul></li></ul><h3 id="List：单键多值"><a href="#List：单键多值" class="headerlink" title="List：单键多值"></a>List：单键多值</h3><p>1、简介</p><ul><li>Redis列表是简单的字符串列表，按照<strong>插入顺序排序</strong></li><li>可以添加一个元素到列表的头部或者尾部</li><li>底层实际上是个<strong>双向列表</strong>，对两端操作性能很高</li></ul><p><strong>2、基本操作</strong></p><ul><li><p>添加数据&#x2F;修改数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 [value2]...</span><br><span class="line">rpush key value1 [value2]...</span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrange key <span class="keyword">start</span> stop    (lrange list1 <span class="number">0</span> <span class="number">-1</span>)   </span><br><span class="line">lindex key index</span><br><span class="line">llen key</span><br></pre></td></tr></table></figure></li><li><p>获取并移除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpop key</span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure></li></ul><p><strong>3、扩展操作</strong></p><ul><li><p>规定时间内获取并移除数据，阻塞式数据获取</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blpop key1 [key2] timeout</span><br><span class="line">brpop key1 [key2] timeout</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>业务场景：微信朋友圈点赞，要求按照点赞顺序显示点赞好友信息</p></blockquote><img src="https://img-blog.csdnimg.cn/20210417170350860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>从中间取消元素，移除指定元素</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lrem key count <span class="keyword">value</span></span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">lrem list01 <span class="number">1</span> d</span><br></pre></td></tr></table></figure><p><strong>4、注意事项</strong></p><ul><li>list中保存的数据是string类型</li><li>具有索引概念，但是操作数据通常以队列形式进行入队出队，或者栈的形式</li><li>list可以对数据进行分页操作，通常第一页信息来自list，第2页及更多信息通过数据库形式加载</li></ul><p><strong>5、数据结构</strong></p><p>List的数据结构为<strong>快速链表</strong>（quickList）</p><ul><li><p>列表元素较少的情况下会使用一块连续的内存存储，这个结构是<strong>zipList</strong>，它将所有的元素紧挨着一起存储，分配的是一块连续的内存</p></li><li><p>数据量较多的情况下会使用<strong>quickList</strong></p><ul><li><p>因为普通链表需要的附加指针空间太大，会比较浪费空间</p></li><li><p>Redis将链表和zipList结合起来组成quickList，将多个ziplist使用双向指针串起来使用</p></li></ul><p><img src="https://img-blog.csdnimg.cn/5eff04b5fdee4157af248456e0b2e81d.png" alt="在这里插入图片描述"></p></li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote><p>对外提供功能与list类似的一个列表的功能，特殊之处在于set可以<strong>自动排重</strong>，当需要一个列表数据但不希望出现重复时，set是一个很好的选择，并且set提供了判断某个成员是否在集合内的接口</p><p>Redis的set时string类型的无序集合，底层是value为null的<strong>hash表</strong>，复杂度为O（1 ）</p></blockquote><img src="https://img-blog.csdnimg.cn/20210417171747798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>1、基本操作</strong></p><ul><li><p>添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd key m1 m2...</span><br></pre></td></tr></table></figure></li><li><p>获取全部数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smembers key</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srem key m1 m2</span><br></pre></td></tr></table></figure></li><li><p>获取集合数据总量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure></li><li><p>判断集合中是否包含指定数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sismember key <span class="keyword">member</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2、扩展操作</strong></p><blockquote><p>每位用户首次使用今日头条会设置3个爱好的内容，后期为了增加用户的活跃度，需要让用户对其他信息类别逐渐产生兴趣，如何实现？</p></blockquote><p>业务分析</p><ul><li>系统分析出各个分类的最新或最热点信息条目并组织成set集合</li><li>随机挑选其中部分信息</li><li>配合用户关注信息分类中的热点信息组织成展示的全信息集合</li></ul><p>解决方案</p><ul><li><p>随机获取集合中指定数量的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srandmember key count</span><br></pre></td></tr></table></figure></li><li><p><strong>随机获取</strong>集合中某个数据并将数据移出集合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spop key</span><br></pre></td></tr></table></figure></li></ul><p><strong>随机推荐类信息检索，如热点歌单推荐</strong></p><blockquote><p>qq好友推荐（共同好友）、微博推荐</p></blockquote><p>解决方案</p><ul><li><p>求两个集合的<strong>交、并、差</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinter key1 key2</span><br><span class="line">sunion key1 key2</span><br><span class="line">sdiff key1 key2</span><br></pre></td></tr></table></figure></li><li><p>求两个集合的交、并、差并存储到指定集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinterstore targetkey key1 key2</span><br><span class="line">sunionstore targetkey key1 key2</span><br><span class="line">sdiffstore targetkey key1 key2</span><br></pre></td></tr></table></figure></li><li><p>将指定数据从原始集合移动到目标集合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smove source targetkey <span class="keyword">member</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>redis应用于同类信息的关联搜索，二度关联搜索、深度关联搜索</strong></p><p><strong>显示共同好友、共同关注</strong></p><p>3、注意事项</p><ul><li>set类型不允许数据重复</li><li>set虽然和hash存储结构相同，无法启用hash中的存储值的空间</li></ul><p>4、应用场景</p><blockquote><p>集团有1000名员工，内部系统有700多个角色，3000多个业务操作，23000多种数据每位员工具有一个或多个角色，如何进行权限校验？</p></blockquote><p>解决方案：</p><ul><li>根据用户id获取用户所有角色</li><li>根据用户所有角色获取用户所有操作权限放入set集合（合并并存储）</li><li>根据用户所有角色获取用户所有数据全选放入set集合</li></ul><blockquote><p>统计网站的PV（访问量）、UV（独立访客）、IP（独立IP）</p><p>PV：被访问的次数</p><p>UV：不同用户访问次数</p><p>IP：不同IP地址访问次数</p></blockquote><p>解决方案：</p><ul><li>建立string类型数据，利用incr统计日访问量（PV）</li><li>建立set模型，记录不同cookie数量（UV）</li><li>建立set模型，记录不同ip数量（IP）</li></ul><blockquote><p>黑白名单</p></blockquote><p>解决方案：</p><ul><li>周期性更新用户黑名单，加入set集合</li><li>用户行为信息到达后和黑名单进行比对，确认行为去向</li><li>黑名单过滤IP地址：应用于开放游客访问权限的信息源</li><li>黑名单过滤设备信息：应用于限定访问设备的信息源</li><li>黑名单过滤用户：应用于基于访问权限的信息源</li></ul><p><strong>5、数据结构</strong></p><p>set的数据结构是dict字典，字典是用哈希表实现的</p><p>Java中的HashSet的内部实现使用HashMap，Redis的set结构也是一样的，内部使用hash结构，所有的value指向同一个内部值</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>1、简介</p><ul><li>键值对集合</li><li>是一个string类型的field和value的映射表，hash特别适合存储对象</li></ul><img src="https://img-blog.csdnimg.cn/20210417161600331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、基本操作</p><ul><li><p>添加&#x2F;修改数据：<code>hset key field value</code></p></li><li><p>获取数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hget key field</span><br><span class="line">hgetall key</span><br></pre></td></tr></table></figure></li><li><p>添加&#x2F;修改多个数据：<code>hmset key field1 value1 field2 value2</code></p></li><li><p>获取多个数据：<code>hmget key field1 field2</code></p></li><li><p>获取哈希表中字段的数量：<code>hlen key</code></p></li><li><p>获取哈希表中是否存在指定字段：<code>hexists key field</code></p></li></ul><p><strong>3、扩展操作</strong></p><ul><li><p>获取哈希表所有的字段名或字段值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hkeys key</span><br><span class="line">hvals key</span><br></pre></td></tr></table></figure></li><li><p>设置指定字段的数值数据增加指定范围的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hincrby key field increment</span><br><span class="line">hincrbyfloat key field increment</span><br></pre></td></tr></table></figure></li></ul><p><strong>4、注意事项</strong></p><ul><li>hash类型的value只能存储字符串</li><li>每个hash可以存储2^32-1个</li><li>hgetall操作可以获取全部属性，如果field过多，遍历效率会很低，有可能成为数据访问瓶颈</li></ul><p><strong>4、应用场景</strong></p><blockquote><p>购物车设计和实现</p></blockquote><img src="https://img-blog.csdnimg.cn/20210417162753154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" /><p><strong>业务分析</strong></p><ul><li>添加、浏览、更改数量、删除、清空</li></ul><p><strong>解决方案</strong></p><ul><li>用户id为key，每位客户创建一个hash存储结构存储对应的购物车信息</li><li>商品编号为field，购买数量为value</li><li>添加商品：追加全新的field和数量value</li><li>浏览：遍历hash</li><li>更改数量：自增&#x2F;自减，设置value值</li><li>删除商品：删除field</li><li>清空：删除key</li></ul><p><strong>问题：当前只是将数据存储到了redis中，并没有起到加速的作用，商品信息还需要二次查询数据库</strong></p><ul><li><p>每条商品记录保存为两条field</p></li><li><p>field1用于保存购买数量</p><ul><li>命名格式：<code>商品id：nums</code></li><li>数据：数值</li></ul></li><li><p>field2用于保存购物车显示的信息，包括文字描述、图片地址等</p><ul><li>命名格式：<code>商品id：info</code></li><li>数据：json</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hmset <span class="number">004</span> g01:nums <span class="number">100</span> g01:info &#123;...&#125;                                     </span><br><span class="line">OK                                                                                                                                                            </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> hgetall <span class="number">004</span>                                                               </span><br><span class="line"><span class="number">1</span>) &quot;g01:nums&quot;                                                                             </span><br><span class="line"><span class="number">2</span>) &quot;100&quot;                                                                                  </span><br><span class="line"><span class="number">3</span>) &quot;g01:info&quot;                                                                             </span><br><span class="line"><span class="number">4</span>) &quot;&#123;...&#125;&quot;                                                                                </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>优化：商品相同，会出现信息重复，可以将field2独立成hash</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果key中对应的field有vlaue，什么都不做，没有值就加进去</span><br><span class="line">hsetnx key field <span class="keyword">value</span></span><br></pre></td></tr></table></figure><blockquote><p>抢购商品</p></blockquote><img src="https://img-blog.csdnimg.cn/2021041716452792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>解决方案：</p><ul><li>以商家id作为key</li><li>参与抢购的商品id作为field</li><li>数量为value</li><li>使用降值的方式控制</li></ul><p><strong>5、数据结构</strong></p><p>Hash对应的数据结构有两种：ziplist、hashtable</p><ul><li>field-value长度较短且个数较少，使用ziplist</li><li>field-value长度较长且个数较多，使用hashtable</li></ul><h4 id="Hash数据结构"><a href="#Hash数据结构" class="headerlink" title="Hash数据结构"></a>Hash数据结构</h4><blockquote><p>两个问题：<strong>哈希冲突、rehash</strong></p><p>Redis解决方案：</p><ul><li>哈希冲突：链式哈希</li><li>rehash：渐进式rehash</li></ul></blockquote><p><strong>1、链式哈希</strong></p><ul><li>用链表把映射到hash表同一个桶中的键连接起来</li></ul><p>2、<strong>rehash</strong></p><ul><li>redis准备了两个哈希表用于rehash时交替保存数据</li></ul><h3 id="Zset有序集合"><a href="#Zset有序集合" class="headerlink" title="Zset有序集合"></a>Zset有序集合</h3><blockquote><p>新的存储需求：数据排序有利于数据有效展示，需要提供一种可以根据自身特征进行排序的方式</p><p>需要的存储结构：新的存储模型，可以保存可排序的数据</p><p>zset类型：在set的存储结构基础上添加可排序字段 score</p></blockquote><img src="https://img-blog.csdnimg.cn/20210417175132505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>1、基本操作</strong></p><ul><li><p>添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score1 m1 score2 m2</span><br></pre></td></tr></table></figure></li><li><p>获取全部数据，已经排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 从小到大</span><br><span class="line">zrange key <span class="keyword">start</span> stop 【withscores】</span><br><span class="line"># 从大到小</span><br><span class="line">zrevrange key <span class="keyword">start</span> stop 【withscores】</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem key m1 m2 m3...</span><br></pre></td></tr></table></figure></li><li><p>按条件获取数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore key min max [withscores][limit]</span><br><span class="line">zrevrangebyscore key max min [withscores]</span><br></pre></td></tr></table></figure></li><li><p>条件删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zremrangebyrank key <span class="keyword">start</span> stop</span><br><span class="line">zremrangebyscore key min max</span><br></pre></td></tr></table></figure></li><li><p>获取集合数据总量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zcard key</span><br><span class="line">zcount key min max</span><br></pre></td></tr></table></figure></li><li><p>集合交、并操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zinterstore target numkeys key1 key2</span><br><span class="line">zunionstore target numkeys key1 key2</span><br></pre></td></tr></table></figure></li></ul><p><strong>2、扩展操作</strong></p><blockquote><p>电影TOP10</p><ul><li>对资源建立排序依据</li></ul></blockquote><p>解决方案</p><ul><li><p>获取数据对应的索引（排名）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrank key <span class="keyword">member</span></span><br><span class="line">zrevrank key <span class="keyword">member</span></span><br></pre></td></tr></table></figure></li><li><p>score值获取与修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zscore key <span class="keyword">member</span></span><br><span class="line">zincrby key increment <span class="keyword">member</span></span><br></pre></td></tr></table></figure></li></ul><p>3、注意事项</p><ul><li>score有范围，64位</li><li>score保存的数据可以是一个双精度double值，基于双精度浮点数的特征可能会丢失精度，使用时要慎重</li><li><strong>zset底层存储还是基于set结构，因此数据不能重复，如果重复添加相同数据，score会被覆盖，保留最后一次修改的结果</strong></li></ul><p><strong>4、应用场景</strong></p><blockquote><p>基于时效性任务管理</p><p>试用VIP，VIP到期之后，如果有效管理此类信息，即便对于正式VIP用户也存在对应的管理方式</p></blockquote><p>解决方案</p><ul><li>将处理时间记录为score值</li><li>记录下一个要处理的时间，当到期后处理对应任务，移除redis中的记录，记录下一个要处理的时间</li><li>新任务加入时，判定并更新当前下一个要处理的任务时间</li><li>为了提升性能，通常将任务根据特征存储成若干个zset，例如1小时内、1天内等，操作时逐级提升，将即将操作的若干个任务纳入1小时内处理的队列中</li><li>获取当前系统时间：<code>time</code></li></ul><blockquote><p>权重任务队列&#x2F;消息队列</p></blockquote><p>解决方案</p><ul><li>对于带权重的任务，优先处理权重高的任务，采用score记录权重</li></ul><p><strong>多条件任务权重</strong></p><ul><li>如果权限过多，需要对排序score值进行处理</li></ul><p><strong>5、数据结构</strong></p><p>zset是Redis提供的一个非常特别的数据结构，一方面等价于java的Map&lt;String,Double&gt;，可以给每个元素value赋予一个权重score，另一方面又类似于TreeSet，内部的元素会按照score进行排序，得到每个元素的名次，还可以根据score的范围获取元素的列表</p><p>底层使用了两个数据结构：</p><ul><li><strong>hash</strong>，hash的作用是关联value和score，保障元素value的唯一性，可以通过元素value找到对应的score</li><li><strong>跳表</strong>，目的是给value排序，根据score的范围获取元素列表</li></ul><blockquote><p>为什么不用平衡二叉树？</p></blockquote><ul><li>更加节省内存</li><li>遍历更加友好</li><li>更容易实现和维护</li></ul><h4 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h4><p>1、可以实现二分查找的有序链表</p><p><strong>2、查找的时间复杂度</strong></p><ul><li>过程：从最高级索引开始，一层一层遍历最后下沉到原始链表</li><li>时间复杂度&#x3D;索引高度*每层索引遍历元素的个数</li><li>O（Logn）</li></ul><img src="https://img-blog.csdnimg.cn/d76ad8ea4e8149d0a806efab0223b060.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>3、空间复杂度</strong></p><ul><li>假设<strong>每两个结点会抽出一个结点作为上一级索引的结点</strong>，原始的链表有n个元素，则一级索引元素个数为n&#x2F;2，二级索引元素个数n&#x2F;4，所以索引节点的总和是：n&#x2F;2 + n&#x2F;4 + n&#x2F;8 + … + 8 + 4 + 2 &#x3D; n-2，**空间复杂度是 O(n)**。</li><li>如果<strong>每三个结点抽一个结点做为索引</strong>，索引总和数就是 n&#x2F;3 + n&#x2F;9 + n&#x2F;27 + … + 9 + 3 + 1&#x3D; n&#x2F;2，减少了一半</li><li>因此，<strong>可以通过减少索引数来减少空间复杂度</strong></li><li>O（n）</li></ul><p><strong>4、插入数据</strong></p><ul><li>概率算法：告诉我们这个元素需要插入到几级索引中</li><li>最坏时间复杂度：O（logn）</li></ul><img src="https://img-blog.csdnimg.cn/cfd28470af644f7d9c9d2a961c70c1c1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:30%;" /><img src="https://img-blog.csdnimg.cn/0dcb1affc4be42b68b50f6d1f66a4772.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:30%;" /><img src="/Users/zhangtao/Desktop/截屏2021-09-06 下午3.32.42.png" alt="截屏2021-09-06 下午3.32.42" style="zoom:33%;" /><img src="/Users/zhangtao/Desktop/截屏2021-09-06 下午3.32.48.png" alt="截屏2021-09-06 下午3.32.48" style="zoom:40%;" /><h3 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">################################## NETWORK #####################################</span><br><span class="line"></span><br><span class="line"># 表示只能本地访问</span><br><span class="line">bind 127.0.0.1 ::1</span><br><span class="line"></span><br><span class="line"># 表示开启保护模式</span><br><span class="line">protected-mode yes</span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># 设置tcp的backlog，backlog是一个连接队列，队列总和=未完成三次握手队列+已经完成三次握手队列</span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"># 超时时间 0表示永不超时</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"># 表示检查心跳的时间</span><br><span class="line">tcp-keepalive 300</span><br><span class="line"></span><br><span class="line">################################# TLS/SSL #####################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################# GENERAL #####################################</span><br><span class="line"># redis后台启动</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># 保存进程号</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"># 日志级别：</span><br><span class="line"># debug (a lot of information, useful for development/testing)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"># 日志输出文件路径</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 数据库个数</span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line">always-show-logo no</span><br><span class="line"></span><br><span class="line">set-proc-title yes</span><br><span class="line"></span><br><span class="line">################################ SNAPSHOTTING  ################################</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">dir /usr/local/var/db/redis/</span><br><span class="line"></span><br><span class="line">################################# REPLICATION #################################</span><br><span class="line"></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"></span><br><span class="line">replica-read-only yes</span><br><span class="line"></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"></span><br><span class="line">############################### KEYS TRACKING #################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################## SECURITY ###################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################### CLIENTS ####################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################## MEMORY MANAGEMENT ################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# LAZY FREEING ####################################</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lazyfree-lazy-user-del no</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-user-flush no</span><br><span class="line"></span><br><span class="line">################################ THREADED I/O #################################</span><br><span class="line"></span><br><span class="line">############################ KERNEL OOM CONTROL ##############################</span><br><span class="line">oom-score-adj no</span><br><span class="line">oom-score-adj-values 0 200 800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#################### KERNEL transparent hugepage CONTROL ######################</span><br><span class="line"></span><br><span class="line">disable-thp yes</span><br><span class="line"></span><br><span class="line">############################## APPEND ONLY MODE ###############################</span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"></span><br><span class="line">################################ LUA SCRIPTING  ###############################</span><br><span class="line"></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line">################################ REDIS CLUSTER  ###############################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">########################## CLUSTER DOCKER/NAT support  ########################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">################################## SLOW LOG ###################################</span><br><span class="line"></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line">################################ LATENCY MONITOR ##############################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################### GOPHER SERVER #################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################### ADVANCED CONFIG ###############################</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h3><p>1、Reds发布订阅是一种消息通信模式</p><p>2、Redis客户端可以订阅任意数量的频道</p><p>3、命令行实现</p><ul><li><p>打开一个客户端订阅channel1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribe channel1</span><br></pre></td></tr></table></figure></li><li><p>打开另外一个客户端，给channel1发布消息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish channel1 hello</span><br></pre></td></tr></table></figure></li></ul><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>1、简介</p><ul><li>本身不是一种数据类型，实际上是字符串，但是可以对字符串的位进行操作</li><li>单独提供一套命令，在redis中使用bitmaps和 使用字符串的方法不同。可以把bitmaps想象成一个以位为单位的数组，数组的每个单元存储0和1</li></ul><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h3 id="Geospatital"><a href="#Geospatital" class="headerlink" title="Geospatital"></a>Geospatital</h3><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><blockquote><p>微信接收消息默认将最近接收的消息置顶，多个好友及订阅号同时发消息，该排序会不停进行交替，同时还可以将重要的会话设置为置顶，一旦用户离线后，再次打开微信时消息怎么按顺序展示？</p></blockquote><p>依赖list的数据具有顺序的特征</p><p>对置顶好友和普通好友分别创建独立的list</p><p>当某个list接受到用户消息后，将消息发送方的id从list的一侧加入list</p><p>多个相同id加入需要先删除</p><p>先推送置顶会话list</p><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><h3 id="key通用命令"><a href="#key通用命令" class="headerlink" title="key通用命令"></a>key通用命令</h3><h4 id="key特征"><a href="#key特征" class="headerlink" title="key特征"></a>key特征</h4><p>1、key是一个字符串，通过key获取redis保存的数据</p><blockquote><p>key应该设计哪些操作？</p></blockquote><p>对于key自身状态相关操作</p><p>对于key有效性控制相关操作</p><p>对于key快速查询</p><h4 id="key基本操作"><a href="#key基本操作" class="headerlink" title="key基本操作"></a>key基本操作</h4><p>1、删除指定key</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure><p>2、获取key是否存在</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exists</span> key</span><br></pre></td></tr></table></figure><p>3、获取key类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure><h4 id="key扩展操作（时效性）"><a href="#key扩展操作（时效性）" class="headerlink" title="key扩展操作（时效性）"></a>key扩展操作（时效性）</h4><p>1、为指定key设置有效期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expire key seconds</span><br><span class="line">pexpire key milliseconds</span><br><span class="line">expireat key <span class="type">timestamp</span></span><br><span class="line">pexpireat key milliseconds<span class="operator">-</span><span class="type">timestamp</span></span><br></pre></td></tr></table></figure><p>2、获取key有效期</p><ul><li>-2：不存在</li><li>-1：存在</li><li>当前有效时长</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ttl key</span><br><span class="line">pttl key</span><br></pre></td></tr></table></figure><p>3、切换key转换到永久性</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist key</span><br></pre></td></tr></table></figure><h4 id="key扩展操作（查询模式）"><a href="#key扩展操作（查询模式）" class="headerlink" title="key扩展操作（查询模式）"></a>key扩展操作（查询模式）</h4><p>1、查询key</p><ul><li><code>Keys *</code> 查询索引</li><li><code>Keys it*</code> 查询所有以it开头的</li><li><code>keys ??h</code> 查询前面两个字符任意，后面以h结尾</li><li><code>keys user:?</code> 查询所有以user：开头，最后一个字符任意</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys <span class="keyword">pattern</span></span><br></pre></td></tr></table></figure><h4 id="key其他操作"><a href="#key其他操作" class="headerlink" title="key其他操作"></a>key其他操作</h4><p>1、为key改名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 同名就覆盖</span><br><span class="line">rename key newkey</span><br><span class="line"># 如果不存在改名</span><br><span class="line">renamenx key newkey</span><br></pre></td></tr></table></figure><p>2、对所有key排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort</span><br></pre></td></tr></table></figure><p>3、其他key 通用操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help <span class="variable">@generic</span></span><br></pre></td></tr></table></figure><h3 id="数据库通用命令"><a href="#数据库通用命令" class="headerlink" title="数据库通用命令"></a>数据库通用命令</h3><blockquote><p>key重复问题</p></blockquote><p>1、切换数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> index</span><br></pre></td></tr></table></figure><p>2、其他操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br><span class="line">ping </span><br><span class="line">echo message</span><br></pre></td></tr></table></figure><p>3、数据移动</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move key db_index</span><br></pre></td></tr></table></figure><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//1、连接redis</span></span><br><span class="line">  Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.164.134&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">  <span class="comment">//2、操作redis</span></span><br><span class="line">  jedis.select(<span class="number">2</span>);</span><br><span class="line">  jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">  System.out.println(jedis.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">  <span class="comment">//3、关闭连接</span></span><br><span class="line">  jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务和锁"><a href="#事务和锁" class="headerlink" title="事务和锁"></a>事务和锁</h2><p> Redis事务是一个<strong>单独的隔离操作</strong>，事务中的所有命令都会序列化、按顺序执行。事务在执行的过程中，不会被其他客户端发送的命令请求打断</p><p>Redis事务的主要作用是<strong>串联多个命令</strong>防止别的命令插队</p><h3 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h3><p>从输入multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入exec奇偶，redis将之前的命令依次执行。</p><p>组队过程中可以使用discard放弃组队</p><p><img src="https://img-blog.csdnimg.cn/0343f819374b40799612483619dcf49a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li><strong>如果组队中命令出现错误，那么所有的命令都不会执行</strong>；</li><li><strong>如果执行出现运行错误，那么正确的命令会被执行，只有错误的命令不执行</strong>。</li></ol><h3 id="事务冲突"><a href="#事务冲突" class="headerlink" title="事务冲突"></a>事务冲突</h3><p><img src="https://img-blog.csdnimg.cn/4879b58d97404d9781cfad06ca5d850f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>每次拿数据的时候认为别人会修改，所以每次在拿数据的时候会加上锁，这样别人想去拿数据就会阻塞。</p><p><img src="https://img-blog.csdnimg.cn/16d8ef1f15d94f808b824de927a27dad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>使用版本号机制</p><p>适用于多读的应用类型，这样可以提高吞吐量，redis就是使用这种check-and-set机制实现事务的</p><p><img src="https://img-blog.csdnimg.cn/8c46bbf3590449c2aa1497b01a3a1fac.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="watch-key"><a href="#watch-key" class="headerlink" title="watch key"></a>watch key</h4><p>在执行multi之前，先执行watch key1 [key2]，可以监视一个或多个key。</p><p><strong>如果在事务执行之前这些key被其他命令改动，那么事务被打断，监控一直持续到EXEC命令</strong></p><h4 id="事务三特性"><a href="#事务三特性" class="headerlink" title="事务三特性"></a>事务三特性</h4><p>1、单独的隔离操作</p><ul><li>事务的所有命令都会序列化、按顺序的执行。事务在执行过程中不会被其他客户端发送的命令请求打断</li></ul><p>2、没有隔离级别的概念</p><ul><li>队列的命令在提交之前都不会执行</li></ul><p>3、不保证原子性</p><ul><li>事务中如果有一条命令执行失败，后面的命令仍然会执行，不回滚</li></ul><h3 id="秒杀案例"><a href="#秒杀案例" class="headerlink" title="秒杀案例"></a>秒杀案例</h3><p><img src="https://img-blog.csdnimg.cn/e04b93e8a4b84ae0b156516c698b6357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p> set集合判断用户是否重复秒杀操作：<code>sismember</code></p><p>库存-1：<code>decr</code></p></blockquote><p>问题：</p><ul><li>连接超时问题：使用连接池解决</li><li><strong>超卖问题</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/3f08040453ee433fa6fd3ddcd19c0cc6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>解决方案：</p><ul><li><p><strong>乐观锁</strong></p><p><img src="https://img-blog.csdnimg.cn/60d1b46a79e7450f855706ad747adb13.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watch</span></span><br><span class="line">jedis.watch(kcKey);</span><br><span class="line"><span class="comment">//获取库存，如果库存为null，秒杀开没有开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果商品数量小于1，秒杀结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始秒杀</span></span><br><span class="line"><span class="comment">//使用事务</span></span><br><span class="line">Transaction multi = jedis.multi();</span><br><span class="line"><span class="comment">//组队操作</span></span><br><span class="line">multi.decr(kcKey);</span><br><span class="line">multi.sadd(userKey,uid);</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">List&lt;Object&gt; results = multi.exec();</span><br><span class="line"><span class="keyword">if</span>(results==<span class="keyword">null</span> || results.size()==<span class="number">0</span>)&#123;</span><br><span class="line">  jedis.close(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>库存遗留问题</strong></p><ul><li>乐观锁造成库存遗留问题</li><li>解决：<ul><li>LUA脚本<ul><li>将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数</li><li>lua脚本类似redis的事务，有一定的原子性，不会被其他命令插队</li><li>利用lua脚本淘汰用户，解决超卖问题</li><li>通过lua解决争抢问题，实际上是<strong>redis利用单线程的特性，用任务队列的方式解决多任务并发问题</strong></li></ul></li></ul></li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><blockquote><p>超卖问题，避免一件商品被多个人修改</p></blockquote><p>业务分析：</p><ul><li>使用watch监控一个key有没有改变不能解决问题，需要监控的是具体数据</li><li>虽然redis是单线程的，但是<strong>多个客户端对同一数据进行操作，如何避免不被同时修改？</strong></li></ul><p>解决方案</p><ul><li><strong>使用setnx设置一个公共锁</strong>：利用setnx命令返回值特征，有值就返回设置失败（无控制权），无值则返回设置成功（有控制权），操作完毕通过del操作释放锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx lock<span class="operator">-</span>key <span class="keyword">value</span></span><br></pre></td></tr></table></figure><blockquote><p>业务场景</p><p>依赖分布式锁的机制，某个用户操作时对应客户端当即，且此时已经获取到锁，如何解决？</p></blockquote><p>业务分析：</p><ul><li>由于锁操作由用户控制加锁解锁，必定会存在加锁后不解锁的风险</li><li>需要解锁操作不能仅依赖用户控制，系统级别要给出保底处理方案</li></ul><p>解决方案</p><ul><li>使用expire为锁key添加时间限制</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expire lock<span class="operator">-</span>key <span class="keyword">second</span></span><br><span class="line">pexpire lock<span class="operator">-</span>key milliseconds</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p><img src="https://img-blog.csdnimg.cn/20210417214135821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>什么是持久化？</p></blockquote><p>持久化：利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制</p><blockquote><p>为什么要进行持久化？</p></blockquote><p>防止数据的意外丢失，确保数据安全</p><blockquote><p>持久化过程保存什么？</p></blockquote><p>1、RDB：将当前数据状态进行保存，<strong>快照形式</strong>，存储数据结果，存储格式简单，关注点在数据（<strong>全量快照</strong>）</p><p>2、AOF：将数据的操作过程进行保存，<strong>日志形式</strong>，存储操作过程，存储格式复杂，关注点在数据的操作过程</p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><blockquote><p>谁？什么时间？干什么事情？</p></blockquote><ul><li>谁：redis操作者</li><li>什么时间：即时</li><li>干什么事情：保存数据</li></ul><h4 id="save、bgsave"><a href="#save、bgsave" class="headerlink" title="save、bgsave"></a>save、bgsave</h4><p>1、命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210417214829822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、save指令相关配置</p><img src="https://img-blog.csdnimg.cn/20210417214936359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>3、save工作原理</p><p><strong>save指令会阻塞当前Redis服务器，线上环境不建议使用</strong></p><blockquote><p>数据量过大，单线程执行方式造成效率过低如何处理？</p></blockquote><p><strong>后台执行</strong></p><ul><li>谁：使用者</li><li>什么时间：合理的时间</li><li>干什么事：保存数据</li></ul><p>1、命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgsave</span><br></pre></td></tr></table></figure><p>2、作用</p><p>手动启动后台保存操作，但是不是立即执行的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> bgsave                                            </span><br><span class="line">Background saving started </span><br></pre></td></tr></table></figure><p>3、工作原理</p><img src="https://img-blog.csdnimg.cn/2021041722000451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>bgsave是针对save阻塞问题做的优化，Redis内部所涉及的RDB操作都采用bgsave方式</strong></p><blockquote><p>快照时数据能够修改吗？</p></blockquote><p>Redis借助操作系统提供的写时复制（COW），在执行快照的时候能够正常处理些操作</p><p>bgsave子进程是由主线程fork生成的，可以共享主线程的内存数据；如果主线程要修改一块数据，那么这个数据块就会被复制一份，主线程在这个数据副本上进行修改。bgsave可以继续把原来的数据写入rdb</p><p>这既保证了快照的完整性，也允许主线程同时对数据进行修改，避免了对正常业务的影响</p><img src="https://img-blog.csdnimg.cn/77090b87a1134c398c20b07bc9c79f63.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="自动执行"><a href="#自动执行" class="headerlink" title="自动执行"></a>自动执行</h4><blockquote><p>反复执行保存指令，忘记了怎么办？不知道数据产生了多少变化？何时保存？</p></blockquote><p><strong>自动执行</strong></p><ul><li>谁：redis服务器发起指令（基于条件）</li><li>什么时间：满足条件</li><li>干什么事情：保存数据</li></ul><p>1、配置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save <span class="keyword">second</span> changes</span><br></pre></td></tr></table></figure><p>作用：满足限定时间范围内（second）key的变化数量达到指定数量（changes）即进行持久化</p><p>2、工作原理</p><p>4、原理</p><img src="https://img-blog.csdnimg.cn/20210417220936467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>save配置要根据实际业务设置，随意设置会出现问题</p><p>使用的是bgsave</p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><img src="https://img-blog.csdnimg.cn/20210418100055166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h4><p>1、优点</p><ul><li>存储效率高</li><li>内部存储的是redis在某个时间点的数据快照</li><li><strong>速度比AOF快</strong></li><li>应用：服务器中每X个小时执行bgsave备份，将rdb文件拷贝到远程机器中，<strong>用于灾难恢复</strong></li></ul><p>2、缺点</p><ul><li>无法做到实时持久化，具有较大可能丢失数据</li><li>bgsave需要fork操作创建子进程，要牺牲一些性能</li><li>redis众多版本没有进行rdb的格式统一，可能出现兼容问题</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><blockquote><p>RDB的弊端：</p><ul><li>数据量大，效率低、IO性能低</li><li>基于fork创建子进程，内存产生额外消耗</li><li>宕机带来的数据丢失风险</li></ul><p>解决思路</p><ul><li>不写全数据，仅记录部分数据</li><li>改记录数据为记录操作过程</li><li>对所有操作均进行记录，排除丢失数据的风险</li></ul></blockquote><p>1、AOF概念：以独立日志的方式记录每次写命令，重启时再重新执行AOF中命令来恢复数据，与RDB相比可以简单描述为<strong>改记录数据为记录操作过程</strong></p><p>2、主要作用：解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</p><h4 id="写数据的过程"><a href="#写数据的过程" class="headerlink" title="写数据的过程"></a>写数据的过程</h4><img src="https://img-blog.csdnimg.cn/20210418093029908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>4、AOF功能开启</p><ul><li>配置：开启AOF持久化功能</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><ul><li>配置：AOF写数据策略</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always<span class="operator">|</span>everysec<span class="operator">|</span><span class="keyword">no</span></span><br></pre></td></tr></table></figure><h4 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h4><p>1、如果刚执行完一个命令就宕机了，这个命令和数据会有丢失的风险</p><p>2、AOF日志在主线程执行，在把日志写入磁盘时，磁盘写压力大，导致写盘很慢，导致后面操作无法执行</p><h4 id="回写策略"><a href="#回写策略" class="headerlink" title="回写策略"></a>回写策略</h4><p>三个写数据的策略</p><ul><li><strong>always</strong>：每次写入操作均同步到AOF文件中，<strong>数据零误差，性能较低</strong></li><li><strong>everysec</strong>：每秒将缓冲区的指令同步到AOF文件中，数据<strong>准确性较高，性能较高</strong>，在系统突然宕机的情况下丢失1s的数据</li><li><strong>no</strong>：操作系统控制每次同步到AOF文件的周期，<strong>过程不可控制</strong></li></ul><img src="https://img-blog.csdnimg.cn/6a0844aeff924075ba596c47451a1474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h4><p>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积，AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。</p><p><strong>简单的说，就是将同一个数据的若干执行结果转化为最终结果数据对应的指令进行记录</strong></p><p>作用：</p><ul><li>降低磁盘占用量</li><li>提高持久化效率</li><li>降低恢复数据的效率</li></ul><p>规则：</p><ul><li>进程内已超时的数据不再写入文件</li><li>忽略无效指令，重写时使用进程内数据直接生成，新的AOF只保留最终数据的写入命令</li><li>对同一个数据的多条命令进行合并</li><li>把rdb快照以二进制的形式附在新的aof头部</li></ul><blockquote><p>重写会阻塞吗？</p></blockquote><p>重写过程由后台子进程来完成，这也是为了避免阻塞主线程，导致数据库性能下降</p><p><strong>一个拷贝，两处日志</strong></p><ul><li><strong>一个拷贝</strong>：每次执行重写时候，主线程fork出后台的bgrewriteaof子进程。此时，fork 会把主线程的内存拷贝一份给 bgrewriteaof 子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof 子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志</li><li><strong>两处日志</strong>：如果有写操作，第一处日志就是指正在使用的AOF日志，Redis会把这个操作写到它的缓冲区；第二处日志指的是重写日志</li></ul><img src="https://img-blog.csdnimg.cn/40fb5c3624894d1a9bd83240cdc7b5b3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="RDB和AOF区别"><a href="#RDB和AOF区别" class="headerlink" title="RDB和AOF区别"></a>RDB和AOF区别</h3><img src="https://img-blog.csdnimg.cn/20210418095510742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h4><p><strong>1、对数据非常敏感，建议使用默认的AOF持久化方案</strong></p><ul><li>AOF持久化策略使用everysecond，每秒钟fsync一次，该策略redis仍可以保持很好的处理性能，当出现问题，最多丢失1s数据</li><li>注意：AOF文件存储体积大，且恢复速度慢</li></ul><p><strong>2、数据呈现阶段有效性，建议使用RDB持久化方案</strong></p><ul><li>数据可以良好的做到阶段内无丢失，且恢复速度较快</li><li>注意：利用RDB实现紧凑数据持久化会降低Redis性能</li></ul><p>3、综合比对</p><ul><li>RDB和AOF是一种权衡</li><li><strong>不能承受分钟以内的数据丢失，对业务数据敏感，使用AOF</strong></li><li><strong>能够承受分钟以内的数据丢失，且追求大数据集的恢复速度，使用RDB</strong></li><li><strong>灾难恢复使用RDB</strong></li><li>双保险策略，同时开启RDB和AOF，重启后Redis<strong>优先使用AOF</strong>恢复数据</li></ul><h3 id="持久化应用场景"><a href="#持久化应用场景" class="headerlink" title="持久化应用场景"></a>持久化应用场景</h3><img src="https://img-blog.csdnimg.cn/20210418100351741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>不需要持久化：1、3、4、9、12（长期）、15</p><p>持久化：5、6、7、12（短期）、13、16</p><h2 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h2><h3 id="过期数据"><a href="#过期数据" class="headerlink" title="过期数据"></a>过期数据</h3><p>Redis是一种内存级的数据库，所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态</p><ul><li>XX：具有时效性的数据</li><li>-1：永久有效的数据</li><li>-2：<strong>已经过期的数据</strong>或<strong>被删除的数据</strong>或<strong>未定义的数据</strong></li></ul><h3 id="删除策略-1"><a href="#删除策略-1" class="headerlink" title="删除策略"></a>删除策略</h3><h4 id="时效性数据的存储结构"><a href="#时效性数据的存储结构" class="headerlink" title="时效性数据的存储结构"></a>时效性数据的存储结构</h4><p><img src="https://img-blog.csdnimg.cn/20210418111159381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>删除策略的目标</p></blockquote><p>在内存占用和cpu占用之间寻找平衡点</p><h4 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h4><p><strong>1、创建一个定时器，当key设置有过期时间，且过期时间到达，由定时器任务立即执行对键的删除操作</strong></p><p>2、优点：节约内存，快速释放</p><p>3、缺点：cpu压力很大，会影响redis服务器的响应时长、吞吐量</p><p>4、总结：时间换空间</p><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p><strong>1、数据到达过期时间不处理，等下次访问该数据时如果已经过期就删除</strong></p><p>2、<code>expirelfNeeded()</code>：检查数据过期</p><p>3、优点：节约cpu性能</p><p>4、缺点：内存压力很大，出现长期占用内存的数据</p><p>5、总结：存储空间换处理器性能</p><h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><p>1、过程</p><ul><li><p>Redis服务器初始化时，读取配置server.hz的值，默认为10；</p></li><li><p>每秒钟执行server.hz次<code>serverCron()-&gt;databasesCron()-&gt; activeExpireCycle()</code></p></li><li><p><code>activeExpireCycle()</code>对每个expires[*]逐一检测，随机挑选w个key检测</p><ul><li>如果key超时就删除</li><li>如果一轮中删除的key数量&gt;w * 0.25循环该过程</li><li>如果小于等于就检查下一个expires[*]，0-15循环</li><li>w值在配置文件中设置</li></ul></li><li><p>参数current_db用于记录<code>activeExpireCycle()</code>进入哪一个expires[*]执行</p></li><li><p>如果<code>activeExpireCycle()</code>执行时间到期，下次从current_对比继续执行</p></li></ul><p><strong>2、周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频率</strong></p><p>3、特点：</p><ul><li>cpu性能占用设置有峰值，检测频率可以自定义设置</li><li>内存压力不是很大，长期占用内存的冷数据会被持续清理</li></ul><p><strong>4、总结：周期性抽查</strong></p><h4 id="比对"><a href="#比对" class="headerlink" title="比对"></a>比对</h4><p><strong>1、定时删除</strong></p><ul><li>定义计时器，过期就删除</li><li>节约内存，无占用</li><li>不分时间占用cpu</li></ul><p><strong>2、惰性删除</strong></p><ul><li>下次访问就删除</li><li>内存占用严重</li><li>cpu利用率高</li></ul><p><strong>3、定期删除</strong></p><ul><li>轮询redis库，随机抽查</li><li>每秒花费固定的cpu资源维护</li></ul><h3 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h3><blockquote><p>如果新数据进入redis时，如果内存不足怎么办？</p></blockquote><p>redis使用内存存储数据，执行每一个命令前，会调用<code>freeMemoryifNeeded()</code>检测内存是否充足</p><p><strong>如果内存不满足新加入数据的最低存储要求，redis要临时删除一些数据，清理数据的策略为逐出算法</strong></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>最大可用内存</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory</span><br></pre></td></tr></table></figure><p>每次选取待删除数据个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory<span class="operator">-</span>samples</span><br></pre></td></tr></table></figure><p>删除策略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory<span class="operator">-</span>policy</span><br></pre></td></tr></table></figure><h4 id="检测易失数据"><a href="#检测易失数据" class="headerlink" title="检测易失数据"></a>检测易失数据</h4><p><strong>可能会过期的key</strong></p><ul><li><code>voliate-lru</code>：挑选最近最少使用（时间上）的数据进行数据淘汰（LRU）</li><li><code>voliate-lfu</code>：挑选最近使用次数最少（次数上）的数据淘汰（LFU）</li><li><code>volatile-ttl</code>：挑选将要过期的数据淘汰</li><li><code>volatile-random</code>：任意选择数据淘汰</li></ul><h4 id="检测全库数据"><a href="#检测全库数据" class="headerlink" title="检测全库数据"></a>检测全库数据</h4><p><strong>所有key</strong></p><ul><li><code>allkeys-lru</code></li><li><code>allkeys-lfu</code></li><li><code>allkeys-random</code>：任意选择数据淘汰</li></ul><h4 id="放弃数据驱逐"><a href="#放弃数据驱逐" class="headerlink" title="放弃数据驱逐"></a>放弃数据驱逐</h4><ul><li><code>noenviction</code>：禁止驱逐</li></ul><h3 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h3><blockquote><p>是什么？</p></blockquote><p>Least Recently used，<strong>常用页面置换算法</strong></p><p><strong>选择最近最久未使用的数据淘汰</strong></p><p><a href="https://leetcode-cn.com/problems/lru-cache/">https://leetcode-cn.com/problems/lru-cache/</a></p><p><strong>核心：哈希链表</strong></p><ul><li>本质：HashMap+DoubleLinkedList</li></ul><h4 id="手写LRU"><a href="#手写LRU" class="headerlink" title="手写LRU"></a>手写LRU</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span></span>&#123;</span><br><span class="line">  <span class="comment">//Node节点作为数据载体</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">k</span>,<span class="title">v</span>&gt;</span>&#123;</span><br><span class="line">    k key;</span><br><span class="line">    v value;</span><br><span class="line">    Node&lt;k,v&gt; prev;</span><br><span class="line">    Node&lt;k,v&gt; next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.prev=<span class="keyword">this</span>.next=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(k key,v value)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.key=key;</span><br><span class="line">      <span class="keyword">this</span>.value=value;</span><br><span class="line">      <span class="keyword">this</span>.prev=<span class="keyword">this</span>.next=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//双向链表，里面放node</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>&lt;<span class="title">k</span>,<span class="title">v</span>&gt;</span>&#123;</span><br><span class="line">    Node&lt;k,v&gt; head;</span><br><span class="line">    Node&lt;k,v&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      head=<span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">      tail=<span class="keyword">new</span> Node&lt;&gt;();</span><br><span class="line">      head.next=tail;</span><br><span class="line">      tail.prev=head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加到头</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node&lt;k,v&gt; node)</span></span>&#123;</span><br><span class="line">      node.prev=head;</span><br><span class="line">      node.next=tail.next;</span><br><span class="line">      head.next.prev=node;</span><br><span class="line">      head.next=node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(Node&lt;k,v&gt; node)</span></span>&#123;</span><br><span class="line">      node.next.prev=node.prev;</span><br><span class="line">      node.prev.next=node.next;</span><br><span class="line">      node.next=<span class="keyword">null</span>;</span><br><span class="line">      node.prev=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得最后一个节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node&lt;k,v&gt; <span class="title">getLast</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> tail.prev;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//缓存坑位</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">  Map&lt;Integer,Node&lt;Integer,Integer&gt;&gt; map;</span><br><span class="line">  DoubleLinkedList&lt;Integer,Integer&gt; doubleLinkedList;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.capacity=capacity;</span><br><span class="line">    map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    doubleLinkedList=<span class="keyword">new</span> DoubleLinkedList&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!map.containsKey(key))&#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;Integer, Integer&gt; node = map.get(key);</span><br><span class="line">    doubleLinkedList.removeNode(node);</span><br><span class="line">    doubleLinkedList.addHead(node);</span><br><span class="line">    <span class="keyword">return</span> node.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key,<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(key))&#123;</span><br><span class="line">      Node&lt;Integer, Integer&gt; node = map.get(key);</span><br><span class="line">      node.value=value;</span><br><span class="line">      map.put(key,node);</span><br><span class="line">      doubleLinkedList.removeNode(node);</span><br><span class="line">      doubleLinkedList.addHead(node);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(map.size()==capacity)&#123;</span><br><span class="line">        Node&lt;Integer, Integer&gt; last = doubleLinkedList.getLast();</span><br><span class="line">        map.remove(last.key);</span><br><span class="line">        doubleLinkedList.removeNode(last);</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;Integer,Integer&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(key,value);</span><br><span class="line">        map.put(key,newNode);</span><br><span class="line">        doubleLinkedList.addHead(newNode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>1、是什么？</p><ul><li>主机数据更新后根据配置和策略，自动同步到备机的master&#x2F;slaver机制，master以写为主，slave以读为主</li></ul><img src="https://img-blog.csdnimg.cn/de647e0d9da341d7a2e7d90aba4e7d67.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、用处</p><ul><li>读写分离</li><li>容灾恢复</li></ul><h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><p>1、从服务器连接上主服务器之后，从服务器向主服务器发送进行数据同步消息</p><p>2、主服务器接到从服务器发送过来的同步消息之后，把主服务器数据进行持久化，rdb文件，把rdb文件发送给从服务器，从服务器读取rdb文件</p><p>3、每次主服务器进行写操作后，和从服务器进行数据同步</p><h4 id="主从库如何进行第一次同步"><a href="#主从库如何进行第一次同步" class="headerlink" title="主从库如何进行第一次同步"></a>主从库如何进行第一次同步</h4><p><strong>1、第一阶段</strong>：主从库间建立连接、协商同步的过程。从库和主库建立起来连接，告诉主库即将进行同步，主库确认回复后主从库就可以开始同步了</p><ul><li>从库给主库发送psync命令，表示要进行数据同步</li><li>主库收到psync命令后会用FULLRESYNC响应命令带上两个参数（<strong>表示第一次复制采用全量复制</strong>）</li></ul><p>2、<strong>第二阶段</strong>：主库将所有数据同步给从库，从库收到数据后在本地完成数据加载</p><ul><li>主库执行bgsave命令生成rdb文件，将文件发送给从库</li><li>从库清空数据库，加载rdb文件</li><li>同步过程中的写操作主库会在内存中用buffer记录写操作</li></ul><p>3、<strong>第三阶段</strong>：主库把第二阶段执行过程中新收到的写命令发送给从库</p><h4 id="主-从-从模式"><a href="#主-从-从模式" class="headerlink" title="主-从-从模式"></a>主-从-从模式</h4><blockquote><p>如果从库数量很多，都需要和主库进行全量复制，就会导致主库忙于fork子进程生成RDB文件，进行数据全量同步，“主-从-从”可以分担主库压力</p><p>redis cluster模式下，无法使用主-从-从的级联模式</p></blockquote><img src="https://img-blog.csdnimg.cn/dee1641f08cb4982a6b6a9474cb48911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="主从库间网络断了怎么办"><a href="#主从库间网络断了怎么办" class="headerlink" title="主从库间网络断了怎么办"></a>主从库间网络断了怎么办</h4><p>1、网络断后，主从库会采用增量复制的方式继续同步</p><p>2、主库会把断连期间收到的写操作命令写入 replication buffer，同时也会把这些操作命令也写入 repl_backlog_buffer 这个缓冲区。</p><p>3、repl_backlog_buffer 是一个环形缓冲区，主库会记录自己写到的位置，从库则会记录自己已经读到的位置。</p><h3 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h3><blockquote><p>能够后台监控主机是否故障，如果故障了根据投票数量自动将从库转换为主库</p></blockquote><img src="https://img-blog.csdnimg.cn/5525ce7078a443c6a662aa90159176ab.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:33%;" /><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67310a227b284539810f3914ec1f3822~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p><p>主要功能包括：</p><ul><li>主节点生存检测，通过ping监控</li><li>自动故障转移：<strong>当主节点无法正常工作时，Sentinel将启动自动故障转移操作。它将与发生故障的主节点处于主从关系的从节点之一升级到新的主节点，并将其他从节点指向新的主节点；</strong></li><li>通知：通知其他从库和客户端新的主库</li></ul><h4 id="监控：主观下线和客观下线"><a href="#监控：主观下线和客观下线" class="headerlink" title="监控：主观下线和客观下线"></a>监控：主观下线和客观下线</h4><p>1、哨兵进程会使用ping命令检测它自己和主、从库的网络连接情况，用来判断实例的状态</p><p>2、<strong>主观下线</strong>：发现从库超时了就标记为主观下线</p><p>3、误判一般会发生在集群网络压力较大、网络拥塞，或者是主库本身压力较大的情况，<strong>如何减少误判？</strong></p><ul><li><strong>哨兵集群</strong>：通常采用多实例组成的集群模式进行部署，引入多个哨兵实例一起来判断，就可以避免单个哨兵因为自身网络状态不好而误判主库下线的情况。</li></ul><p>4、<strong>客观下线</strong>：只有大多数的哨兵实例，都判断主库已经“主观下线”了，主库才会被标记为“客观下线”</p><h4 id="选定新的主库"><a href="#选定新的主库" class="headerlink" title="选定新的主库"></a>选定新的主库</h4><p>1、过程：筛选+打分</p><ul><li>先按一定的照筛选条件把不符合条件的从库去掉，再按照一定的规则给剩下的从库打分</li></ul><img src="https://img-blog.csdnimg.cn/cbce5522e96c4db4b7975e387179b29f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>2、筛选条件</strong></p><ul><li>检查从库的在线状态、判断之前的网络连接状态</li></ul><p><strong>3、打分</strong></p><ul><li>第一轮：优先级高的从库得分高（<code>slave-priority</code>配置项）</li><li>第二轮：和旧主库同步程度最接近的从库得分高</li><li>第三轮：ID号小的从库得分高（最早连接上）</li></ul><h3 id="哨兵集群"><a href="#哨兵集群" class="headerlink" title="哨兵集群"></a>哨兵集群</h3><p>在配置哨兵集群的时候，配置哨兵的信息需要设置<strong>主库的IP</strong>和<strong>端口</strong>，<strong>并没有配置其他哨兵的连接信息</strong></p><h4 id="基于pub-x2F-sub机制的哨兵集群组成"><a href="#基于pub-x2F-sub机制的哨兵集群组成" class="headerlink" title="基于pub&#x2F;sub机制的哨兵集群组成"></a>基于pub&#x2F;sub机制的哨兵集群组成</h4><p>1、哨兵实例之间可以相互发现，归功于Redis提供的发布&#x2F;订阅机制</p><p><strong>2、哨兵间如何互相知道彼此地址？</strong></p><ul><li>哨兵只要和主库建立起了连接，就可以在主库上发布消息（比如发布自己的连接信息），同时也可以从主库上订阅消息，获得其他哨兵发布的连接信息</li><li>频道：<code>__sentinel__:hello</code></li></ul><img src="https://img-blog.csdnimg.cn/46b627811f8941efbfa8735e9285dc45.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>3、哨兵如何知道从库的IP地址和端口？</strong></p><ul><li>哨兵向主库发送<code>INFO</code>命令，主库返回从库列表给哨兵</li></ul><img src="https://img-blog.csdnimg.cn/4881d351a5c34ef09b2c8f6206a25e95.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="基于pub-x2F-sub机制的客户端事件通知"><a href="#基于pub-x2F-sub机制的客户端事件通知" class="headerlink" title="基于pub&#x2F;sub机制的客户端事件通知"></a>基于pub&#x2F;sub机制的客户端事件通知</h4><p><strong>1、哨兵是特殊的redis实例</strong></p><ul><li>每个哨兵也提供发布&#x2F;订阅机制，客户端可以从哨兵订阅信息</li></ul><p>2、哨兵提供不同的消息订阅频道</p><img src="https://img-blog.csdnimg.cn/9d8c9f1ecc2642149f2601d7d8ce2f04.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="由哪个哨兵执行主从切换？"><a href="#由哪个哨兵执行主从切换？" class="headerlink" title="由哪个哨兵执行主从切换？"></a>由哪个哨兵执行主从切换？</h4><p>1、判断客观观下线</p><ul><li>任何一个哨兵只要判断主库“主观下线”后就会给其他哨兵发送is-master-down-by-addr 命令，其他哨兵也会根据自己和主库的连接情况做出响应</li><li>一个哨兵获得了所需要的赞同票数后可以标记主库“客观下线”</li><li><strong>此时这个哨兵会给其他哨兵发送命令，表示希望自己来执行主从切换，并让其他哨兵投票（Leader选取）</strong></li></ul><p><strong>2、Leader选取</strong></p><ul><li>需要满足两个条件：<ul><li>拿到半数以上的赞成票</li><li>拿到的票数大于等于哨兵配置文件的quorum值</li></ul></li></ul><p>3、需要注意的是，如果哨兵集群只有 2 个实例，此时，一个哨兵要想成为 Leader，必须获得 2 票，而不是 1 票。所以，如果有个哨兵挂掉了，那么，此时的集群是无法进行主从库切换的。因此，<strong>通常我们至少会配置 3 个哨兵实例</strong>。这一点很重要，你在实际应用时可不能忽略了。</p><h2 id="切片集群"><a href="#切片集群" class="headerlink" title="切片集群"></a>切片集群</h2><p>1、概念</p><ul><li>切片集群也叫分片集群，指启动多个Redis实例组成一个集群，然后按照一定的规则将收到的数据划分成多份，每一份用一个实例来保存</li></ul><img src="https://img-blog.csdnimg.cn/ba87fc1e7abf4de18a14decf5427853c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="如何保存更多数据？"><a href="#如何保存更多数据？" class="headerlink" title="如何保存更多数据？"></a>如何保存更多数据？</h3><p>1、为了保存大量的数据，使用大内存云主机（纵向扩展）和切片集群（横向扩展）两种方法</p><ul><li><strong>纵向扩展</strong>：升级单个redis实例的资源配置，包括增加内存容量、增加磁盘容量等</li><li><strong>横向扩展</strong>：增加redis实例的个数</li></ul><p>2、使用横向扩展要解决的两个问题：</p><ul><li>数据在多个实例如何分布？</li><li>客户端怎么确定想要访问的数据在哪里？</li></ul><h3 id="数据切片和实例的对应分布关系"><a href="#数据切片和实例的对应分布关系" class="headerlink" title="数据切片和实例的对应分布关系"></a>数据切片和实例的对应分布关系</h3><h4 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h4><p>1、在redis 3.0之后，官方提供了Redis Cluster的方案用于实现切片集群，规定了数据和实例的对应规则</p><p><strong>2、Slot</strong></p><ul><li>Redis Cluster一个切片集群由16384个哈希槽</li><li>哈希槽类似于数据分区，每个键值对都会根据key被映射到一个哈希槽中</li></ul><p><strong>3、映射过程</strong></p><ul><li>根据key按照CRC16算法计算一个16bit的值</li><li>用这个值对16384取模，得到哈希槽</li></ul><p><strong>4、哈希槽的映射</strong></p><ul><li>使用cluster create创建集群，此时redis会自动把这些槽平均分布在集群实例上</li></ul><img src="https://img-blog.csdnimg.cn/64bebe51c02d4b038cd2dc4e069a2731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="客户端如何定位数据？"><a href="#客户端如何定位数据？" class="headerlink" title="客户端如何定位数据？"></a>客户端如何定位数据？</h3><p>一般来说，客户端和集群实例建立连接后，实例就会把哈希槽的分配信息发给客户端。但是，<strong>在集群刚刚创建的时候，每个实例只知道自己被分配了哪些哈希槽，是不知道其他实例拥有的哈希槽信息的</strong></p><h2 id="应用问题"><a href="#应用问题" class="headerlink" title="应用问题"></a>应用问题</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p><img src="https://img-blog.csdnimg.cn/d2193c72722a4411b4e39cbcbcdb4dd9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>1、背景</strong></p><ul><li>应用服务器压力变大了</li><li>redis命中率降低，一直查询数据库</li></ul><p><strong>2、现象</strong></p><ul><li>redis查询不到数据</li><li>出现大量非正常url访问</li></ul><p>3、解决方案</p><ul><li>**对空值缓存 **：如果一个查询返回的数据为空，把这个结果进行缓存</li><li><strong>设置可访问的白名单</strong>：使用bitmaps定义一个可访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id做比较</li><li><strong>采用布隆过滤器</strong></li></ul><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p><img src="https://img-blog.csdnimg.cn/d493f2a1b9ce446f93571be04667c5db.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>1、现象</strong></p><ul><li>数据库访问压力瞬间增加</li><li>redis没有出现大量key过期</li><li>redis正常运行</li></ul><p><strong>2、原因</strong></p><ul><li>redis的某个key过期，大量访问使用这个key</li></ul><p><strong>3、解决方案</strong></p><ul><li>预先设置热门数据</li><li>事时调整：监控热门数据，实时调整key的过期时长</li><li>使用锁：<ul><li>缓存失效的时候，不是立即去load db</li><li>先使用缓存工具的某些成功操作返回值的操作（redis的setnx）去set一个mutex key</li><li>操作返回成功时，再进行load db的操作，并回设缓存，删除mutex key</li><li>操作返回失败，说明有线程在load db，当前线程睡眠一段时间重试</li></ul></li></ul><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p><img src="https://img-blog.csdnimg.cn/2a01fe182c544e6f9558186e364e94b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>1、现象</strong></p><ul><li>数据库压力变大，服务器崩溃</li><li>大量key集中过期</li></ul><p>2、解决方案</p><ul><li><strong>构建多级缓存架构</strong>：ngnix缓存+redis缓存+其他缓存</li><li><strong>使用锁</strong>：保证不会有大量线程对数据库一次性进行读写，从而避免失效时出现大量并发请求</li><li><strong>设置过期标志更新缓存</strong>：记录缓存数据是否过期，如果过期会触发通知另外的线程在后台更新实际key的缓存</li><li><strong>分散过期时间</strong></li></ul><h3 id="分布式锁-1"><a href="#分布式锁-1" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>1、使用setnx上锁，使用del释放锁</p><p>2、锁一直没有释放，设置key的过期时间，自动释放</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setnx <span class="keyword">user</span> <span class="number">1</span></span><br><span class="line">expire <span class="number">10</span></span><br></pre></td></tr></table></figure><p>3、上锁之后突然出现异常，无法设置过期时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上锁，设置过期时间</span><br><span class="line"><span class="keyword">set</span> <span class="number">10</span> nx ex <span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2022/01/08/mysql/"/>
      <url>/2022/01/08/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><img src="https://img-blog.csdnimg.cn/20210412230559704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:30%;" /><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>关系型数据库和非关系型数据库</p></blockquote><img src="https://pic1.zhimg.com/50/v2-7fbacd76b41dad4b9085eb3dc3945e36_b.jpg" alt="img" style="zoom:50%;" /><p>关系型数据库最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织。</p><p><strong>优点：</strong> 1、易于维护：都是使用表结构，格式一致； 2、使用方便：SQL语言通用，可用于复杂查询； 3、复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。</p><p><strong>缺点：</strong> 1、读写性能比较差，尤其是海量数据的高效率读写； 2、固定的表结构，灵活度稍欠； 3、高并发读写需求，传统关系型数据库来说，硬盘I&#x2F;O是一个很大的瓶颈。</p><p><img src="https://pic4.zhimg.com/50/v2-6a00cbd7da57844cc1dba1a457d76b8b_b.jpg" alt="img"></p><p>非关系型数据库严格上不是一种数据库，应该是一种<strong>数据结构化存储方法</strong>的集合，可以是文档或者键值对等。</p><p><strong>优点：</strong> 1、格式灵活：存储数据的格式可以是key,value形式、文档形式、图片形式等等，文档形式、图片形式等等，使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。 2、速度快：nosql可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘； 3、高扩展性； 4、成本低：nosql数据库部署简单，基本都是开源软件。</p><p><strong>缺点：</strong> 1、不提供sql支持，学习和使用成本较高； 2、无事务处理； 3、数据结构相对复杂，复杂查询方面稍欠。</p><blockquote><p>为什么使用B+树？</p></blockquote><p><strong>1、哈希表：</strong>只有精确匹配索引所有列的查询才有效，不适合范围查询</p><ul><li><strong>自适应哈希索引</strong>：如果 InnoDB 注意到某些索引列值被频繁使用时，它会在内存基于 B+ 树索引之上再创建一个哈希索引，这样就能让 B+ 树也具有哈希索引的优点。</li></ul><p><strong>2、平衡二叉树：</strong>每个节点只存储一个键值和数据，数量非常多时树会非常高</p><p><strong>3、B树：</strong>每个节点可以存储多个关键字，一定程度上解决了上文提到的存储尽量多的索引的问题，也一定程度上的解决了存储尽量多的有效索引的问题</p><p><strong>4、B+树：</strong></p><ul><li><strong>非节点不存储数据</strong>：InnoDB 中页的默认大小是 16 KB，如果不存储数据，那么节点就可以存储更多的键值</li><li><strong>B+ 树的叶子节点中的索引数据是按顺序排列的，并且叶子节点间是通过双向链表进行连接的</strong>：实现范围查找，排序查找，分组查找等操作时变得异常简单</li></ul><blockquote><p>如果没有主键索引？</p></blockquote><p> 在InnoDB中,只有主键索引是聚簇索引,如果没有主键,则挑选一个唯一键建立聚簇索引.如果没有唯一键,则隐式的生成一个键来建立聚簇索引</p><blockquote><p>为什么推荐使用自增索引？</p></blockquote><p>自增的话就是依次插入，否则就需要在已经有的节点插入，可能会有叶子节点的分裂</p><blockquote><p>为什么不能使用红黑树？</p></blockquote><p>读取磁盘的次数过多，读取浪费太多</p><blockquote><p>B+树的阶</p><p><a href="https://juejin.cn/post/6973647815473889311">https://juejin.cn/post/6973647815473889311</a></p></blockquote><p>16K &#x2F; 字段大小</p><p>int：4byte</p><p>bigint：8byte</p><p>指针：6B</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="redo-Log（重做日志）"><a href="#redo-Log（重做日志）" class="headerlink" title="redo Log（重做日志）"></a><strong>redo Log</strong>（重做日志）</h4><p>1、当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log里面，并更新内存，这个时候更新就算完成了</p><p>2、InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做</p><p>3、InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示</p><img src="https://img-blog.csdnimg.cn/d801ef0897424b2eac1162e52e358848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><blockquote><p>redo log 是<strong>循环写的，空间固定会用完</strong>；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p><p><strong>write pos</strong> 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。<strong>checkpoint</strong> 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 <strong>crash-safe</strong>。</p><p><strong>crash-safe：保证即使数据库发生异常重启，之前提交的记录都不会丢失</strong></p></blockquote><h4 id="binLog（归档日志）"><a href="#binLog（归档日志）" class="headerlink" title="binLog（归档日志）"></a><strong>binLog</strong>（归档日志）</h4><p>1、Server层日志</p><blockquote><p>为什么会有两个日志？</p></blockquote><ul><li>最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 <strong>crash-safe</strong> 的能力，binlog 日志只能用于归档。InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 <strong>InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力</strong></li></ul><p><strong>区别：</strong></p><ul><li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”。</li><li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ul><p>2、Binlog有两种模式，statement 格式的话是记sql语句， row格式会记录行的内容，记两条，<strong>更新前和更新后都有</strong>。</p><p><strong>3、概念</strong></p><ul><li><strong>binlog cache</strong>：它是用于缓存binlog event的内存，大小由binlog_cache_size控制</li><li><strong>binlog cache 临时文件</strong>：是一个临时磁盘文件，存储由于binlog cache不足溢出的binlog event，该文件名字由”ML”打头，由参数<em>max_binlog_cache_size</em>控制该文件大小</li><li><strong>binlog file</strong>：代表binglog 文件，由<em>max_binlog_size</em>指定大小</li><li><strong>binlog event</strong>：代表binlog中的记录，如MAP_EVENT&#x2F;QUERY EVENT&#x2F;XID EVENT&#x2F;WRITE EVENT等</li></ul><blockquote><p>binlog cache和binlog临时文件都是在<strong>事务运行过程</strong>中写入，一旦事务提交，binlog cache和binlog临时文件都会释放掉。而且如果事务中包含多个DML语句，他们共享binlog cache和binlog 临时文件</p></blockquote><h4 id="更新语句的执行流程"><a href="#更新语句的执行流程" class="headerlink" title="更新语句的执行流程"></a>更新语句的执行流程</h4><p>1、<strong>事务开启</strong></p><p>2、执行器先找引擎取 ID&#x3D;2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID&#x3D;2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</p><p>3、<strong>执行DML语句</strong>：执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</p><ul><li><strong>更新redolog</strong>：将这个更新操作记录到 redo log 里面，此时 redo log 处于 <strong>prepare</strong> 状态。</li><li><strong>写入binglog cache</strong>：如果binlog cache的空间已经满了，则将binlog cache的数据写入到binlog临时文件，同时清空binlog cache。<ul><li>第一次执行DML语句时分配内存空间<strong>binlogcache</strong></li></ul></li></ul><p>4、<strong>提交事务</strong>：</p><ul><li>将binlog cache和binlog临时文件写入到binlog file中，释放binlog cache和binlog临时文件</li><li>redo log 改成提交（<strong>commit</strong>）状态</li></ul><blockquote><p>当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，怎么做？</p></blockquote><ul><li>建立临时库</li><li>寻找最近一次的全量备份</li><li>从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。</li></ul><blockquote><p>redo log的两阶段提交</p></blockquote><ul><li>为了保证一致性</li><li><strong>如果先写redolog，后写bin log</strong><ul><li>假设在 redo log 写完，binlog 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。</li></ul></li><li><strong>如果先写bindolog，后写redo log</strong><ul><li>如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。</li></ul></li><li><strong>两阶段提交</strong><ul><li>redolog只是完成了prepare， 而binlog又失败，那么事务本身会回滚，所以这个库里面status的值是0，如果通过binlog 恢复出一个库，status值也是0。</li></ul></li></ul><h4 id="undo-Log（回滚日志）"><a href="#undo-Log（回滚日志）" class="headerlink" title="undo Log（回滚日志）"></a>undo Log（回滚日志）</h4><blockquote><p>事务的<strong>原子性：</strong></p><ul><li>保证一个事务中的增删改操作要么都成功，要么都不做。这时就需要 <code>undo log</code>，在对数据库进行修改前，会先记录对应的 undo log，然后在事务失败或回滚的时候，就可以用这些 undo log 来将数据回滚到修改之前的样子。</li></ul></blockquote><p>行记录中会有三个隐藏列：</p><ul><li><code>DB_ROW_ID</code>：如果没有为表显式的定义主键，并且表中也没有定义唯一索引，那么InnoDB会自动为表添加一个<code>row_id</code>的隐藏列作为主键。</li><li><code>DB_TRX_ID</code>：事务中对某条记录做增删改时，就会将这个事务的事务ID写入<code>trx_id</code>中。</li><li><code>DB_ROLL_PTR</code>：回滚指针，本质上就是指向 undo log 的指针。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f5f991bf98040719aa9ef7f706f13b6~tplv-k3u1fbpfcp-watermark.awebp" alt="image.png"></p><blockquote><p>MVCC多版本控制中使用<code>undo log</code></p></blockquote><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3379df8eddb94af3910673f6559b8852~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><blockquote><p><strong>面试官：你知道MySQL的锁机制吗？</strong></p></blockquote><p>答：知道的。MySQL锁按加锁粒度可以分为行锁表锁和页锁。按锁的使用方式可以分为共享锁和排他锁。按加锁思想可以分为悲观锁和乐观锁。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9KYmlhZUtucEd1NmpHeFNVdXkxcUhVMUtJTWNOY0R6M2dFcGtpYU4yV00yaWJvQ0VqcEJ1UE9mQlcxbmxjSlZoYXlBQXowVnJzVllBV3pCOWFvOTdXeTlzQS82NDA?x-oss-process=image/format,png" alt="img"></p><p><strong>1、行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。有可能会出现死锁的情况。</strong></p><p><strong>2、表级锁是表示当前的操作对整张表加锁，资源开销比行锁少，不会出现死锁的情况，但是发生锁冲突的概率很大。</strong></p><p>3、在 MySQL 中，行级锁并不是直接锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条sql 语句操作了主键索引，MySQL 就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引。</p><p>I<strong>nnoDB 行锁是通过给索引项加锁实现的</strong>，如果没有索引，InnoDB 会通过隐藏的聚簇索引来对记录加锁。也就是说：<strong>如果不通过索引条件检索数据，那么InnoDB将对表中所有数据加锁，实际效果跟表锁一样</strong>。因为没有了索引，找到某一条记录就得扫描全表，要扫描全表，就得锁定表。</p><p><strong>4、乐观锁和悲观锁</strong></p><p>悲观锁和乐观锁是两种加锁的思想。<strong>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段</strong>。</p><p><strong>乐观锁</strong>在操作数据时非常乐观，认为别人不会同时修改数据。因此乐观锁不会上锁，只是在执行更新的时候判断一下在此期间别人是否修改了数据：如果别人修改了数据则放弃操作，否则执行操作。</p><p>乐观锁主要是基于数据版本机制来实现，实现方式有两种：CAS和版本号机制。<strong>MVCC也是乐观锁的一种实现方</strong>式。(注：与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control。MVCC最大的好处是：读不加锁，读写不冲突。读分为快照读和当前读，快照读基于数据的可见版本不加锁。）</p><blockquote><p><strong>面试官：那乐观锁加锁吗？</strong></p></blockquote><p>答：<br>（1）乐观锁本身是不加锁的，只是在更新时判断一下数据是否被其他线程更新了；<br>（2）有时乐观锁可能与加锁操作合作，但不能改变“乐观锁本身不加锁”这一事实。</p><blockquote><p><strong>面试官：那你知道死锁吗？是怎么产生的又怎么样解决呢？</strong></p></blockquote><p>MySQL中的死锁一般是事务相互等待对方资源，最后形成环路造成的。若无外力作用,它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等待的进程称为死锁进程。</p><p><strong>死锁的产生主要有以下几种情况</strong>：不同表相同记录行锁冲突，相同表记录行锁冲突，不同索引锁冲突，gap锁冲突。</p><p>死锁的发生与否，并不在于事务中有多少条SQL语句，死锁的关键在于：两个(或以上)的Session加锁的顺序不一致。</p><p>所以当出现死锁时要分析MySQL每条SQL语句的加锁规则，分析出每条语句的加锁顺序，然后检查多个并发SQL间是否存在以相反的顺序加锁的情况，就可以分析出各种潜在的死锁情况，也可以分析出线上死锁发生的原因。同时可以通过应用业务日志定位到问题代码，找到相应的事务对应的sql。</p><p><strong>死锁发生以后，只有部分或完全回滚其中一个事务，才能打破死锁，InnoDB目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚。</strong>所以事务型应用程序在设计时必须考虑如何处理死锁，多数情况下只需要重新执行因死锁回滚的事务即可。</p><p>避免死锁的方法：</p><p>1）以固定的顺序访问表和行。</p><p>2）大事务拆小。大事务更倾向于死锁，如果业务允许，将大事务拆小。</p><p>3）在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁概率。</p><p>4）降低隔离级别。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。</p><p>5）为表添加合理的索引。可以看到如果不走索引将会为表的每一行记录添加上锁，死锁的概率大大增大。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><blockquote><p>数据类型</p></blockquote><p><strong>1、varchar：</strong>可变长度的字符串，可以根据传输的数据长度动态分配空间</p><ul><li>优点：节省空间</li><li>缺点：速度慢</li><li>适用场景：字符串列的最大长度比平均长度大很多、列的更新很少、使用了 UTF8 这种复杂字符集，每个字符都使用不同的字节数存储。</li></ul><p><strong>2、char：</strong>定长字符串，不管实际的数据长度是多少，分配固定长度的空间，使用不恰当的时候可能会导致空间的浪费</p><ul><li>优点：速度快</li><li>缺点：使用不当可能会导致空间的浪费</li><li><strong>适合存储很短的字符串</strong>，或所有值都接近同一个长度，例如存储密码的 MD5 值。</li><li>对于经常变更的数据，CHAR 也比 VARCHAR更好，因为定长的 CHAR 不容易产生碎片。对于非常短的列，CHAR 在存储空间上也更有效率，例如用 CHAR 来存储只有 Y 和 N 的值只需要一个字节，但是 VARCHAR 需要两个字节，因为还有一个记录长度的额外字节。</li></ul><p>3、int：整数型，等同于java中的int</p><p>4、bigint：长整型，等同于java中的long</p><p>5、float：单精度浮点型数据</p><p>6、double：双精度浮点型数据</p><p>7、date：短日期类型</p><p>8、datetime：长日期类型</p><blockquote><p>DATETIME 和 TIMESTAMP 的区别？</p></blockquote><p><strong>DATETIME</strong> 能保存大范围的值，从 1001~9999 年，精度为秒。把日期和时间封装到了一个整数中，与时区无关，使用 8 字节存储空间。</p><p><strong>TIMESTAMP</strong> 和 UNIX 时间戳相同，只使用 4 字节的存储空间，范围比 DATETIME 小得多，只能表示 1970 ~2038 年，并且依赖于时区。</p><blockquote><p>MySQL支持的字符集和排序规则</p></blockquote><p>utf8mb3（在mysql中就是utf8）：阉割过的utf8字符集，使用1-3个字节表示字符</p><p>utf8mb4（emoji表情）：正宗的utf8字符集，使用1-4个字节表示字符</p><blockquote><p>SQL语句执行顺序</p></blockquote><ul><li><p>编写步骤</p><ul><li>select</li><li>from</li><li>join on</li><li>where</li><li>group by</li><li>having</li><li>order by</li><li>limit</li></ul></li><li><p>执行步骤</p><ul><li>from</li><li>on join</li><li>where</li><li>group by</li><li>having</li><li>select</li><li>Order by</li><li>limit</li></ul></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>什么是事务？</p></blockquote><p><strong>一个事务其实就是一个完整的业务逻辑</strong></p><p>答：事务是一组原子性的 SQL 查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行，也就是说事务内的语句要么全部执行成功，要么全部执行失败。</p><p>什么是完整的业务逻辑？</p><ul><li>假设从A账户向B账户转账100元，将A账户的钱减去100，将B账户的钱加100</li></ul><p><strong>以上的操作是一个最小的工作单元，要么同时成功，要么同时失败，不可再分</strong></p><p><strong>1、只有DML（insert、delete、update）语句才有事务，其他的语句和事务无关</strong></p><ul><li>只有这三个操作对数据库表的数据进行增删改，需要考虑安全问题</li></ul><blockquote><p>假设所有业务只需要一条DML语句就能完成，还需要事务机制吗？</p></blockquote><p>正是因为做某件事的时候需要多条DML语句共同联合完成，所以才需要事务的存在；一条DML语句不需要事务</p><blockquote><p>到底什么是事务？</p></blockquote><p>本质上，一个事务其实就是多条DML语句同时成功，或者同时失败</p><blockquote><p>事务是怎么做到同时成功同时失败的呢？</p></blockquote><p>InnoDB存储引擎：提供一组用来记录<strong>事务性活动的日志文件</strong></p><p>在事务的执行过程中，每一条DML语句的操作都会记录到<strong>事务性活动日志文件</strong>中</p><p>在事务的执行过程中，可以提交事务，也可以回滚事务</p><ul><li><strong>提交事务</strong>：清空事务性活动日志文件，将数据持久化到数据库表中，<strong>标志着事务的成功结束</strong></li><li><strong>回滚事务</strong>：清空事务性活动日志文件，撤销所有的操作，<strong>事务结束，全部失败</strong></li></ul><p><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/2020-12/640-20201207160554677.png" alt="img"></p><blockquote><p>如何提交事务？如何回滚事务？</p></blockquote><p>提交事务：<code>commit</code>语句</p><p>回滚事务：<code>rollback</code>语句，回滚到上一次的提交点</p><p>事务：transaction</p><blockquote><p>mysql默认情况下是什么样的事务行为？</p></blockquote><p>自动提交，每执行一条DML语句提交一次（回滚无效）</p><p>关闭自动提交机制：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br></pre></td></tr></table></figure><p><strong>自动提交不符合开发习惯，为了保证数据的安全，所以需要使用事务</strong></p><blockquote><p>事务有什么特性？ACID？</p></blockquote><p><strong>原子性 atomicity</strong></p><p>一个事务在逻辑上是必须不可分割的最小工作单元，不可再分</p><p><strong>一致性 consistency</strong></p><p>同一个事物中所有操作同时成功或者同时失败</p><p><strong>隔离性 isolation</strong></p><p>A事务和B事务之间有一定的隔离</p><p>A事务在操作一张表时在提交之前对另一个事务B的隔离性</p><p>针对并发事务而言，隔离性就是要隔离并发运行的多个事务之间的相互影响，一般来说一个事务所做的修改在最终提交以前，对其他事务是不可见的。</p><p><strong>持久性 durability</strong></p><p>一旦事务提交成功，其修改就会永久保存到数据库中，此时即使系统崩溃，修改的数据也不会丢失。</p><blockquote><p>事务的隔离级别</p></blockquote><p>A教室和B教室之间的墙可以很厚也可以很薄，这就是事务的隔离级别，墙越厚表示隔离级别越高</p><p>事务和事务之间的隔离级别包括：</p><ul><li><p><strong>读未提交 READ UNCOMMITTED</strong>：没有提交就读到了</p><ul><li>事务A可以读取到事务B未提交的数据</li><li><strong>脏读现象</strong>：读到了脏数据</li><li>这种隔离级别一般都是理论上的，大多数数据库不使用</li></ul></li><li><p><strong>读已提交 READ COMMITTED</strong>：提交之后才能读到</p><ul><li>事务A只能读取到事务B提交后的数据</li><li>解决了脏读现象</li><li><strong>问题：不可重复读取数据、幻读</strong><ul><li>事务开启之后，第一次读到的数据是3条，当前事务还没有结束，可能第二次再次读取的时候读到了4条，3不等于4称为不可重复读取</li></ul></li></ul><blockquote><p>幻读：如果一个事务先根据某些条件查询出一些记录，之后另外一个事务向表中添加了一些记录，原先的事务再次按照该条件查询的时候，读到了另外一个事务插入的数据。针对多行</p><p>幻读的重点在于新增或者删除</p></blockquote><blockquote><p>不可重复读：如果事务A 按一定条件搜索， 期间事务B 修改了符合条件的某一条数据，导致事务A 再次读取时数据发生改变，针对一行</p><p>不可重复读的重点是修改</p></blockquote><ul><li><strong>每次读到的数据是真实的</strong></li><li>Orcale默认</li></ul></li><li><p><strong>可重复读 REPEATABLE READ</strong>：提交之后也读不到，只能读取事务开始的数据</p><ul><li>事务A开启之后，不管多久每一次读取的数据都是一致的，即使数据已经改变</li><li>解决了不可重复读取数据的问题</li><li><strong>问题：可能出现幻读</strong><ul><li>数据不够绝对真实</li></ul></li><li>MySQL默认，mysql是不会出现幻读的</li></ul></li><li><p><strong>串行化 SERIALIZABLE</strong>（最高隔离级别）</p><ul><li>效率低</li><li>解决了所有问题</li><li><strong>事务不能并发</strong></li><li>每一次读取到的数据都是最真实的</li></ul></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置隔离级别</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read uncommitted;</span><br><span class="line">查看全局隔离级别</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;</span><br></pre></td></tr></table></figure><blockquote><p>版本链</p></blockquote><p>对于InnoDB存储引擎，他的聚簇索引记录中都包含两个必要的隐藏列：</p><ul><li>trx_id：每次对某条记录进行改动时，都会把对应的事务id赋值给trx_id</li><li>Roll_pointer：每次对某条记录进行改动时，这个隐藏列会存储一个指针，可以通过指针获取该记录修改前的信息</li></ul><img src="https://upload-images.jianshu.io/upload_images/10820483-d251da7ae4b62565?imageMogr2/auto-orient/strip|imageView2/2/w/675" alt="img" style="zoom:50%;" /><blockquote><p>ReadView</p></blockquote><p>对于使用读未提交的事务来说，直接读取记录的最新版本就好了，对于使用串行的事务来说，使用枷锁方式访问记录，对于读已提交和可重复读的事务来说，就需要版本链，<strong>核心问题是需要判断版本链哪个版本对事务可见：</strong></p><p>ReadView中4个重要的内容：</p><ul><li>m_ids：<strong>一个列表, 存储当前系统活跃的事务id（没有提交的事务）</strong>，通过对照版本链找到已经提交的事务</li><li>min_trx_id：存m_ids的最小值</li><li>max_trx_id：系统分配给下一个事务的id</li><li>creator_trx_id:：生成readView事务的事务id</li></ul><p>1、如果被访问版本的<code>trx_id</code>属性值小于<code>m_ids</code>列表中最小的事务id，表明生成该版本的事务在生成<code>ReadView</code>前已经提交，所以该版本可以被当前事务访问。</p><p>2、如果被访问版本的<code>trx_id</code>属性值大于<code>m_ids</code>列表中最大的事务id，表明生成该版本的事务在生成<code>ReadView</code>后才生成，所以该版本不可以被当前事务访问。</p><p>3、如果被访问版本的<code>trx_id</code>属性值在<code>m_ids</code>列表中最大的事务id和最小事务id之间，那就需要判断一下<code>trx_id</code>属性值是不是在<code>m_ids</code>列表中，如果在，说明创建<code>ReadView</code>时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建<code>ReadView</code>时生成该版本的事务已经被提交，该版本可以被访问。</p><blockquote><p>已提交读和可重复读的区别就在于它们生成ReadView的策略不同</p></blockquote><p>也就是说已提交读隔离级别下的事务在每次查询的开始都会生成一个独立的ReadView</p><p>可重复读隔离级别则在第一次读的时候生成一个ReadView，之后的读都复用之前的ReadView。</p><blockquote><p>MVCC</p></blockquote><p>MVCC （多版本并发控制），指的是<strong>在使用读已提交和重复读两个隔离级别的事务进行执行select操作时访问记录的版本链的过程</strong></p><p>MVCC 只能在 <code>READ COMMITTED</code> 和 <code>REPEATABLE READ</code> 两个隔离级别下工作，因为 <code>READ UNCOMMITTED</code> 总是读取最新的数据行，而不是符合当前事务版本的数据行，而 <code>SERIALIZABLE</code> 则会对所有读取的行都加锁。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>操作粒度：</p><ul><li>表锁：操作时，会锁定整个表</li><li>行锁：操作时，会锁定当前操作行</li></ul><p>对数据操作的类型分：</p><ul><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响</li><li>写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁</li></ul><p><img src="https://img-blog.csdnimg.cn/20210412175608445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="MyISAM表锁"><a href="#MyISAM表锁" class="headerlink" title="MyISAM表锁"></a>MyISAM表锁</h3><p>MyISAM在<strong>执行查询语句前，会自动给涉及的所有表加读锁，在执行更新操作（update、delete、insert）前，会自动给涉及的表加写锁</strong>，这个过程不需要用户干预。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">显式加读锁：</span><br><span class="line">lock <span class="keyword">table</span> tb_book read;</span><br></pre></td></tr></table></figure><p>1、对一个表使用表读锁后，不能读取另外一个表</p><p>2、读锁和写操作冲突</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">显示加写锁：</span><br><span class="line">lock <span class="keyword">table</span> tb_book write;</span><br></pre></td></tr></table></figure><p>1、在当前客户端：加写锁可以读</p><p>2、在当前客户端：加写锁可以更新、插入</p><p>3、在其他客户端：加写锁不可以读、不可以更新和插入</p><p><strong>小结</strong></p><p><img src="https://img-blog.csdnimg.cn/20210412181629938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1、加读锁，不会阻塞其他用户的读，会阻塞写</p><p>2、加写锁，会阻塞其他用户的读和写</p><p><strong>MyISAM的读写锁调度是写优先，不适合作为写为主的存储引擎</strong></p><h3 id="InnoDB锁"><a href="#InnoDB锁" class="headerlink" title="InnoDB锁"></a>InnoDB锁</h3><p><strong>行锁</strong>：偏向InnoDB存储引擎，开销大，加锁慢，会出现死锁；锁定的粒度很小，发生锁冲突的概率最低，并发读也最高</p><blockquote><p>InnoDB和MyISAM最大的不同就是支持事务、行锁</p></blockquote><h4 id="行锁的种类"><a href="#行锁的种类" class="headerlink" title="行锁的种类"></a>行锁的种类</h4><p><strong>1、记录锁</strong>：加在索引上的，不加索引就会升级为表锁</p><p><strong>2、间隙锁</strong>：为了避免幻读，引入了间隙锁，锁定的是范围，<strong>只有在事务隔离级别 RR 中才会产生</strong></p><p>当我们用<strong>范围条件</strong>而不是使用相等条件检索数据，并请求共享或排它锁时，InnoDB会给符合条件的已有数据进行加锁，<strong>对于键值在条件范围内但并不存在的记录叫做间隙（GAP），InnoDB会对间隙加锁</strong></p><ul><li><strong>非唯一索引等值判断、范围查询都会产生间隙锁</strong></li><li><strong>主键索引等值判断存在不会产生间隙锁（不存在就会产生间隙锁，锁住上面最近的一个到下面最近的一个），返回查询会产生间隙锁</strong></li></ul><p>如：查找id&lt;8，id有1、2、3、4、6、7，会对5也进行加锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">事务<span class="number">1</span>:</span><br><span class="line">update city <span class="keyword">set</span> city_name<span class="operator">=</span>&quot;zhang&quot; <span class="keyword">where</span> country_id<span class="operator">&lt;</span><span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">事务<span class="number">2</span>:</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city <span class="keyword">values</span>(<span class="number">2</span>,&quot;hello&quot;,<span class="number">3</span>);</span><br><span class="line">无法执行</span><br></pre></td></tr></table></figure><p><strong>3、记录锁和间隙锁组合（临键锁）</strong></p><p>封锁范围包含索引记录，又包含索引区间，主要目的是为了避免幻读</p><p><strong>锁定一段<code>左开右闭</code>的索引区间</strong></p><p><strong>临键锁只与<code>非唯一索引列</code>有关，在<code>唯一索引列</code>（包括<code>主键列</code>）上不存在临键锁。</strong></p><blockquote><p>1、加锁语句，使用主键或唯一键进行定值查询，查询对象存在时，使用的是记录锁（行锁），查询对象不存在时，使用的是间隙锁。</p><p>2、加锁语句，使用主键或唯一键进行范围查询，使用的是间隙锁</p><p>3、加锁语句，使用普通索引进行定值或者范围查询，均使用的是间隙锁</p><p>4、间隙锁可以看做是左右开区间“（）”，而临键锁是记录锁+间隙锁，所以看做是左开右闭区间“（]”，且InnoDB默认加锁为临键锁</p><p>5、间隙锁和临建锁都是为解决幻读问题</p><p><strong>6、记录锁、间隙锁、临键锁，都属于排它锁；</strong></p></blockquote><p><strong>4、表锁</strong></p><h4 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h4><p><strong>1、读锁</strong></p><p><strong>对于普通select语句，InnoDB不会加任何锁</strong></p><p><strong>将查到的数据加S锁，允许其他事务继续获取这些记录的S锁，不能获取这些记录的X锁（会阻塞）</strong></p><p>使用场景：读出数据后，其他事务不能修改，自己也不一定能修改，因为其他事务也可以加读锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ... lock <span class="keyword">in</span> share mode</span><br></pre></td></tr></table></figure><hr/><p><strong>将查到的数据加上X锁，不允许其他事务获取这些记录的S锁和X锁</strong></p><p>使用场景：读出数据后，其他事务即不能写也不能读，只有自己可以修改数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">for</span> update</span><br></pre></td></tr></table></figure><p><strong>2、写锁</strong></p><p>delete：删除一条数据时，先对记录加X锁，再执行删除操作</p><p>insert：插入一条记录时，会先加<strong>隐式锁</strong>来保护这条新插入的记录在本事务提交前不被别的事务访问到</p><p>update：</p><ul><li>如果被更新的列，修改前后没有导致存储空间变化，会先加X锁，再进行修改</li><li>如果被更新的列，修改前后导致存储空间产生变化，会先加X锁，然后删除记录，再insert一条新的记录</li></ul><blockquote><p>在MySQL，写锁是可以读的——MVCC</p></blockquote><p><strong>3、MDL锁</strong></p><p>元数据锁</p><p>表开启了一个<strong>查询事务</strong>后（select），会自动获得MDL锁，保证表的结构不会发生改变（添加列等）</p><p><strong>4、意向锁</strong></p><p>在mysql的innodb引擎中，<strong>意向锁是表级锁</strong></p><ul><li>意向共享锁（IS）：加共享锁之前必须获取该表的意向共享锁</li><li>意向排它锁（IX）：加排它锁之前。。。。</li></ul><p>意向锁和MDL锁都是为了防止事务进行中，执行DDL语句导致数据不一致</p><h4 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h4><p><strong>共享锁和排它锁都是悲观锁</strong></p><p><strong>乐观锁：</strong>大多数基于数据版本记录机制实现，一般给数据库表增加一个version</p><h4 id="锁等待和死锁"><a href="#锁等待和死锁" class="headerlink" title="锁等待和死锁"></a>锁等待和死锁</h4><p><strong>1、锁等待：</strong>一个事务过程中产生的锁，其他事务需要等待上一个事务释放他的锁，才能占用该资源</p><p>2、死锁</p><blockquote><p>死锁的条件</p></blockquote><ul><li>两行记录，至少两个事务</li><li>事务A操作第n行数据，并加锁</li><li>事务B操作第m行数据，并加锁</li><li>事务A操作第m行数据</li><li>事务B操作第n行数据</li><li>形成死锁</li></ul><p><strong>InnoDB可以自动检测死锁并回滚该事务（将持有最少行级排他锁的事务进行回滚）</strong></p><p>尽量不要产生死锁～～～</p><blockquote><p>死锁检测</p></blockquote><p>当出现死锁以后，有两种策略：</p><ul><li>一种策略是，直接进入等待，直到<strong>超时</strong>。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</li><li>另一种策略是，发起<strong>死锁检测</strong>，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</li></ul><blockquote><p>怎么解决由这种热点行更新导致的性能问题呢？（假设有 1000 个并发线程要同时更新同一行，那么死锁检测操作就是 100 万这个量级的。）</p></blockquote><ul><li>一种头痛医头的方法，就是如果你能确保这个业务一定不会出现死锁，<strong>可以临时把死锁检测关掉</strong>。但是这种操作本身带有一定的风险，因为业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是业务无损的。而关掉死锁检测意味着可能会出现大量的超时，这是业务有损的。</li><li>另一个思路是<strong>控制并发度</strong>。根据上面的分析，你会发现如果并发能够控制住，比如同一行同时最多只有 10 个线程在更新，那么死锁检测的成本很低，就不会出现这个问题。一个直接的想法就是，在客户端做并发控制。<ul><li>但是，你会很快发现这个方法不太可行，因为客户端很多。我见过一个应用，有 600 个客户端，这样即使每个客户端控制到只有 5 个并发线程，汇总到数据库服务端以后，峰值并发数也可能要达到 3000。</li><li>因此，这个<strong>并发控制要做在数据库服务端</strong>。如果你有中间件，可以考虑在中间件实现；如果你的团队有能修改 MySQL 源码的人，也可以做在 MySQL 里面。基本思路就是，对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。</li></ul></li><li></li></ul><blockquote><p>避免死锁</p></blockquote><ul><li><strong>以固定的顺序访问表和行</strong>。</li><li><strong>大事务拆小</strong>。大事务更倾向于死锁，如果业务允许，将大事务拆小。</li><li>在同一个事务中，尽可能做到<strong>一次锁定所需要的所有资源</strong>，减少死锁概率。</li><li><strong>降低隔离级别</strong>。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。</li><li><strong>为表添加合理的索引</strong>。可以看到如果不走索引将会为表的每一行记录添加上锁，死锁的概率大大增大。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>InnoDB存储引擎由于实现了行级锁定，虽然性能损耗较高，但是在整体并发处理能力方面优于MyISAM表锁，当系统高并发的情况下，InnoDB整体性能有优势。</p><p>优化建议：</p><ul><li>尽可能让检索数据通过索引完成，避免行锁升级为表锁</li><li>合理设计索引，减少锁的范围</li><li>减少索引条件及索引范围，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可能使用低级别事务隔离</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1、索引是帮助mysql高效获取数据的<strong>数据结构（有序）</strong></p><ul><li>在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用数据，这样就可以在这些数据结构上实现高级查找算法，<strong>这种数据结构就是索引</strong>。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210408170016586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>建立索引 VS 没有建立索引<ul><li>没有建立索引：需要遍历</li><li>建立索引：快速定位</li></ul></li></ul><blockquote><p>sql语句select * from user where name &#x3D; ‘jack’；</p></blockquote><p>以上sql语句回去name字段上扫描</p><p>如果没有添加所以就会进行全局扫描，一个一个比对，效率较低</p><p><strong>mysql在查询方面主要两种方式：</strong></p><ul><li>全局扫描</li><li>根据索引检索</li></ul><hr/><blockquote><p>注意</p></blockquote><p>在实际中，书的目录都是排序的，因为只有排序了才能进行区间查找，<strong>因此mysql中索引也是排序的，并且和treeset的数据结构相同（自平衡二叉树）</strong></p><p><strong>任何数据库中，主键会自动添加索引对象，在mysql中，一个字段如果有unique约束的话，也会自动创建索引对象</strong></p><p>任何数据库中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号</p><p>在mysql中，索引是一个单独的对象，不同的存储引擎以不同的形式存在，在MyISAM存储引擎中，索引存储在一个.MYI文件中，在InnoDB存储引擎中，存储在一个逻辑名称为tablespace当中，在MEMORY存储引擎当中存储在内存中。不管存储在哪里，索引在mysql中都是一个数的形式存在</p><hr/><p><strong>1、优势</strong></p><ul><li>快速定位，降低数据库IO成本</li><li>通过索引列对数据进行排序，降低数据排序成本</li></ul><p><strong>2、劣势</strong></p><ul><li>索引也是一种表，需要占用磁盘空间</li><li>虽然索引能够提高查询效率，<strong>同时也降低更新表的速度（mysql不仅需要保存数据，还需要保存索引文件每次更新添加了索引列的字段，都会调整因为更新带来的键值变化后的索引信息）</strong></li></ul><hr/><blockquote><p>什么条件下考虑给字段添加索引？</p></blockquote><p>条件一：数据量庞大（因为硬件环境不同，需要测试）</p><p>条件二：该字段经常出现在where后面，以条件的形式存在，也就是说这个字段总是被扫描</p><p>条件三：该字段很少的DML操作（因为DML之后索引需要重新排序）</p><p><strong>建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会影响系统性能</strong></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong>索引是在MySQL的存储引擎层中实现的</strong>，所以不同的存储引擎的索引不一定完全相同，MySQL目前提供以下4种索引：</p><ul><li><strong>BTREE：最常见的索引类型，大部分索引都支持B树索引</strong></li><li>Hash：只有Memory引擎支持，使用场景简单</li><li>R-tree：是MyISAM引擎的一种特殊索引类型</li><li>Full-tree：全文索引也是MyISAM的一种特殊索引类型</li></ul><p><img src="https://img-blog.csdnimg.cn/2021040817373865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果没有特别指明，都是指B+树（<strong>多路搜索树，并不一定是二叉树</strong>）</p><p>其中<strong>聚集索引、复合索引、前缀索引、唯一索引默认都是使用B+tree索引</strong>，统称为<strong>索引</strong></p><h4 id="BTree-结构"><a href="#BTree-结构" class="headerlink" title="BTree 结构"></a>BTree 结构</h4><p>BTree又叫<strong>多路平衡搜索树</strong>，一颗m叉的Btree特性如下：</p><ul><li>树中每个节点最多包含m个孩子</li><li>除根节点与叶子节点以外，<strong>每个节点至少有<code>[ceil(m/2)]</code>个孩子</strong>（ceil：向上取整）</li><li><strong>若根节点不是叶子节点，则至少有两个孩子</strong></li><li><strong>所有的叶子节点都在同一层</strong></li><li>每个非叶子节点由<strong>n个key和n+1个指针</strong>组成，其中<code>[ceil(m/2)-1] &lt;= n &lt;= m-1</code><ul><li>当key的数量大于m-1时，中间key向上分裂到父节点，两边key分裂</li></ul></li></ul><p><strong>例子：5叉BTree</strong></p><p>插入 C N G A H E K Q M F W L T Z D P  R X Y S</p><p>过程如下：</p><img src="https://img-blog.csdnimg.cn/20210408175125931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:60%;" /><img src="https://img-blog.csdnimg.cn/20210408175138499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:55%;" /><img src="https://img-blog.csdnimg.cn/20210408175211505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:55%;" /><img src="https://img-blog.csdnimg.cn/20210408175221531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>BTREE和二叉树相比，层级更浅，查找数据更快</strong></p><h4 id="B-Tree-结构"><a href="#B-Tree-结构" class="headerlink" title="B+Tree 结构"></a>B+Tree 结构</h4><h5 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h5><p>B+树插入要记住这几个步骤：</p><ul><li>B+树插入都是在叶子结点进行的，就是插入前，需要先找到要插入的叶子结点。</li><li>如果被插入关键字的叶子节点，当前含有的关键字数量是小于阶数m，则直接插入。</li><li>如果插入关键字后，叶子节点当前含有的关键字数目等于阶数m，则插，该节点开始<strong>分裂</strong>为两个新的节点，一个节点包含⌊m&#x2F;2⌋ 个关键字，另外一个关键字包含⌈m&#x2F;2⌉个关键值。（⌊m&#x2F;2⌋表示向下取整，⌈m&#x2F;2⌉表示向上取整，如⌈3&#x2F;2⌉&#x3D;2）。</li><li>分裂后，需要将第⌈m&#x2F;2⌉的关键字上移到父结点。如果这时候父结点中包含的关键字个数小于m，则插入操作完成。</li><li>分裂后，需要将⌈m&#x2F;2⌉的关键字上移到父结点。如果父结点中包含的关键字个数等于m，则继续分裂父结点。</li></ul><p>以一颗4阶的B+树为例子吧，4阶的话，关键值最多3（m-1）个。假设插入以下数据43，48，36，32,37,49,28.</p><ol><li>在空树中插入43</li></ol><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b1519db7a344866b2d2c5331c110f55~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><p>这时候根结点就一个关键值，此时它是根结点也是叶子结点。</p><ol><li>依次插入48，36</li></ol><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fd3f43b090849a68e6319d26aa274e5~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><p>这时候跟节点拥有3个关键字，已经满了</p><ol><li>继续插入 32，发现当前节点关键字已经不小于阶数4了，于是分裂</li></ol><p>第⌈4&#x2F;2⌉&#x3D;2（下标0,1,2）个，也即43上移到父节点。</p><img src="https://static01.imgkr.com/temp/92493cd24aaf4ee68ef7753ac6423d8b.png" alt="img" style="zoom:50%;" /><ol><li>继续插入37，49，前节点关键字都是还没满的，直接插入，如下：</li></ol><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4a527b97f8e4f9698fabf1cc75580e8~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><ol><li>最后插入28，发现当前节点关键字也是不小于阶数4了，于是分裂，第⌈4&#x2F;2⌉&#x3D;2个，也就是36上移到父节点，因父子节点只有2个关键值，还是小于4的，所以不用继续分裂，插入完成</li></ol><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de6ae575df144e8a8357a9c29fd35e3c~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom: 50%;" /><h5 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h5><p>因为B+树的数据都是在叶子节点上的，内部节点只是指针索引的作用，因此，查找过程需要搜索到叶子节点上。还是以这颗B+树为例吧：</p><img src="https://static01.imgkr.com/temp/7936c203fb7e481091a8e7400c5a5d5f.png" alt="img" style="zoom:50%;" /><p><strong>单值查询</strong></p><p>假设我们要查的值为32.</p><p>第一次磁盘 I&#x2F;O，查找磁盘块1，即根节点（36,43）,因为32小于36，因此访问根节点的左边第一个孩子节点</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b83c21448467448f97afa9ccecbc1c4b~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><p>第二次磁盘 I&#x2F;O, 查找磁盘块2，即根节点的第一个孩子节点，获得区间(28,32),遍历即可得32.</p><img src="https://static01.imgkr.com/temp/b1e3195c5a3749d9ae1195cfa3197780.png" alt="img" style="zoom:50%;" /><p><strong>范围查询</strong></p><p>假设我们要查找区间 [32,40]区间的值.</p><p>第一步先访问根节点，发现区间的左端点32小于36,则访问根节点的第一个左子树(28,32);</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b888144c35e04688b95f54ab243c28d8~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><p>第二步访问节点（28,32），找到32，于是开始遍历链表，把[32,40]区间值找出来，这也是B+树比B-树高效的地方。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/809183371d1f4520941b218a8641e8e5~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><p>B+树删除关键字，分这几种情况</p><ul><li><p>找到包含关键值的结点，如果关键字个数大于m&#x2F;2，直接删除即可；</p><ul><li>假设当前有这么一颗5阶的B+树</li></ul><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26db5b75704c4309b997c6fc0273d47c~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><ul><li>如果删除22，因为关键字个数为3 &gt; 5&#x2F;2&#x3D;2， 直接删除（⌈⌉表示向上取整的意思）</li></ul><img src="https://static01.imgkr.com/temp/9fca707c65634d49a488d74f13311008.gif" alt="img" style="zoom:50%;" /></li><li><p>找到包含关键值的结点,如果关键字个数大于m&#x2F;2，并且关键值是当前节点的最大（小）值，并且该关键值存在父子节点中，那么删除该关键字，同时需要相应调整父节点的值。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e81e147b313a4f5eaa201ba2f0b03849~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><ul><li>如果删除20，因为关键字个数为3 &gt; 5&#x2F;2&#x3D;2，并且20是当前节点的边界值，且存在父子节点中，所以删除后，其父子节点也要响应调整。</li></ul><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91d11cd6465c4583813291185bc70c03~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /></li><li><p>找到包含关键值的结点，如果删除该关键字后，关键字个数小于⌈m&#x2F;2⌉，并且其兄弟结点有多余的关键字，则从其兄弟结点借用关键字</p><ul><li><p>以下这颗5阶的B+树，</p><img src="https://static01.imgkr.com/temp/00b21728241449418fbb7a466522692a.png" alt="img" style="zoom:50%;" /></li><li><p>如果删除15,删除关键字的结点只剩1个关键字，小于5&#x2F;2&#x3D;2，不满足B+树特点，但是其兄弟节点拥有3个元素（7,8,9），可以借用9过来，如图：</p><img src="https://static01.imgkr.com/temp/f2416d7008f64021a73396142887a514.gif" alt="img" style="zoom:50%;" /></li></ul></li><li><p>找到包含关键值的结点，如果删除该关键字后，关键字个数小于⌈m&#x2F;2⌉，并且其兄弟结点没有多余的关键字，则与兄弟结点合并。</p><ul><li><p>以下这颗5阶的B+树：</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b19b4c2c90bf4610a272467e71d8d92a~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /></li><li><p>如果删除关键字7，删除关键字的结点只剩1个关键字，小于5&#x2F;2&#x3D;2，不满足B+树特点，并且兄弟结点没法借用，因此发生合并，如下：</p></li></ul></li></ul><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21257fbbdc834400961b1d3f54b7ce80~tplv-k3u1fbpfcp-watermark.awebp" alt="img" style="zoom:50%;" /><p>主要流程酱紫：</p><ul><li>因为7被删掉后，只剩一个8的关键字，不满足B+树特点（m&#x2F;2&lt;&#x3D;关键字&lt;&#x3D;m-1）。</li><li>并且没有兄弟结点关键字借用，因此8与前面的兄弟结点结合。</li><li>被删关键字结点的父节点，7索引也被删掉了，只剩一个9，并且其右兄弟结点（18,20）只有两个关键字，也是没得借，因此在此合并。</li><li>被删关键字结点的父子节点，也和其兄弟结点合并后，只剩一个子树分支，因此根节点（16）也下移了。</li></ul><p>所以删除关键字7后的结果如下：</p><p><img src="https://static01.imgkr.com/temp/09033dfd823440f6bae002898b85c8b7.png" alt="img"></p><h5 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h5><ul><li>在InnoDB中，索引默认使用的数据结构为<strong>B+树</strong>，而<code>B+树里的每个节点都是一个页</code>，默认的页大小为<code>16KB</code>。</li><li>非叶子节点存的是索引值以及页的偏移量，而叶子节点上存放的则是完整的每行记录</li></ul><img src="https://img-blog.csdnimg.cn/cb2dc349e27b47f2ad7afaf98e81cad2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 33%;" /><blockquote><p>B+树能够存多少数据？</p></blockquote><p><strong>非叶子节点</strong></p><ul><li>页默认16KB</li><li>File Header、Page Header等一共占102个字节</li><li>Infimum + Supremum分别占13个字节</li><li>记录头占5个字节</li><li>id占为int，占4个字节</li><li>页目录的偏移量占4个字节</li></ul><p>所以，非叶子节点能存多少条索引记录呢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   非叶子节点能存放的索引记录</span><br><span class="line">=  (页大小 - File Header - Page Header - ...) / ( 主键 + 页偏移量 + 下一条记录的偏移量)</span><br><span class="line">= （16KB - 128B) / (5B + 4B + 4B) </span><br><span class="line">=  16256 / 13</span><br><span class="line">=  1250 条</span><br></pre></td></tr></table></figure><p><strong>叶子节点</strong></p><ul><li>变长列表占1个字节</li><li>null标志位忽略</li><li>记录头占5个字节</li><li>id占为int，占4个字节</li><li>name为VARCHAR，编码为UTF8，为了好算，所有行记录我都只用两个中文，那就是 2 * 3B &#x3D; 6个字节</li><li>事务ID列占6个字节</li><li>回滚指针列占7个字节</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   叶子节点能存放的数据记录</span><br><span class="line">=  (页大小 - File Header - Page Header - ...) / ( 主键 + 字段 + 下一条记录的偏移量)</span><br><span class="line">= （16KB - 128B) / (1B + 5B + 4B + 6B + 6B + 7B) </span><br><span class="line">=  16256 / 29</span><br><span class="line">=  560 条</span><br></pre></td></tr></table></figure><p><strong>高度为3的B+树</strong></p><ul><li>根节点能放1250条索引记录</li><li>第二层能放1250 * 1250 &#x3D; 1,562,500条索引记录</li><li>叶子节点 1250 * 1250 * 560 &#x3D; 875,000,000条数据记录，八亿多条数据</li></ul><h4 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h4><p>1、B 树的所有节点既存放 键(key) 也存放 数据(data)，而 B+树只有叶子节点存放 key 和 data，其他内节点只存放 key。</p><p>2、B 树的叶子节点都是独立的，B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</p><p>3、B 树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而 B+树的检索效率就很稳定了，<strong>任何查找都是从根节点到叶子节点的过程</strong>，叶子节点的顺序检索很明显。</p><h4 id="Hash索引和B-树"><a href="#Hash索引和B-树" class="headerlink" title="Hash索引和B+树"></a>Hash索引和B+树</h4><p><strong>Hash 索引定位快</strong></p><p>Hash 索引指的就是 Hash 表，最大的优点就是能够在很短的时间内，根据 Hash 函数定位到数据所在的位置，这是 B+树所不能比的。</p><p><strong>Hash 冲突问题</strong></p><p>知道 HashMap 或 HashTable 的同学，相信都知道它们最大的缺点就是 Hash 冲突了。不过对于数据库来说这还不算最大的缺点。</p><p><strong>Hash 索引不支持顺序和范围查询(Hash 索引不支持顺序和范围查询是它最大的缺点。</strong></p><h3 id="聚集索引和非聚集索引"><a href="#聚集索引和非聚集索引" class="headerlink" title="聚集索引和非聚集索引"></a>聚集索引和非聚集索引</h3><blockquote><p>聚集索引</p></blockquote><p><strong>聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。</strong></p><p>在 Mysql 中，InnoDB 引擎的表的 <code>.ibd</code>文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。</p><p><strong>聚集索引的优点</strong></p><p>聚集索引的查询速度非常的快，因为整个 B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。</p><p><strong>聚集索引的缺点</strong></p><ol><li><strong>依赖于有序的数据</strong> ：因为 B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或 UUID 这种又长又难比较的数据，插入或查找的速度肯定比较慢。</li><li><strong>更新代价大</strong> ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改， 而且况聚集索引的叶子节点还存放着数据，修改代价肯定是较大的， 所以对于主键索引来说，主键一般都是不可被修改的。</li></ol><blockquote><p>非聚集索引</p></blockquote><p><strong>非聚集索引即索引结构和数据分开存放的索引。</strong></p><p><strong>二级索引属于非聚集索引</strong></p><blockquote><p>MYISAM 引擎的表的.MYI 文件包含了表的索引， 该表的索引(B+树)的每个叶子非叶子节点存储索引， 叶子节点存储索引和索引对应数据的指针，指向.MYD 文件的数据。</p><p><strong>非聚集索引的叶子节点并不一定存放数据的指针， 因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。</strong></p></blockquote><p><strong>非聚集索引的优点</strong></p><p><strong>更新代价比聚集索引要小</strong> 。非聚集索引的更新代价就没有聚集索引那么大了，非聚集索引的叶子节点是不存放数据的</p><p><strong>非聚集索引的缺点</strong></p><ol><li>跟聚集索引一样，非聚集索引也依赖于有序的数据</li><li><strong>可能会二次查询(回表)</strong> :这应该是非聚集索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。</li></ol><p>这是 Mysql 的表的文件截图:</p><ul><li><code>.frm文件</code>：表结构</li><li><code>.ibd文件</code>：索引和数据</li><li><code>.MYD文件</code>：数据</li><li><code>.MYI文件</code>：索引</li></ul><p><img src="https://snailclimb.gitee.io/javaguide/media/pictures/database/Mysql%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E6%88%AA%E5%9B%BE.png" alt="Mysql表文件截图"></p><blockquote><p>非聚集索引一定要回表吗？</p></blockquote><p><strong>非聚集索引不一定回表查询。</strong></p><p>试想一种情况，用户准备使用 SQL 查询用户名，而用户名字段正好建立了索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM table WHERE name=&#x27;guang19&#x27;;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>那么这个索引的 key 本身就是 name，查到对应的 name 直接返回就行了，无需回表查询。</p><p><strong>即使是 MYISAM 也是这样，虽然 MYISAM 的主键索引确实需要回表， 因为它的主键索引的叶子节点存放的是指针。但是如果 SQL 查的就是主键呢?</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id FROM table WHERE id=1;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>主键索引本身的 key 就是主键，查到返回就行了。这种情况就称之为覆盖索引了。</p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为“覆盖索引”。</p><p>我们知道在 InnoDB 存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次。这样就会比较慢覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！</p><p><strong>覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了， 而无需回表查询。</strong></p><blockquote><p>如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。</p><p>再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。</p></blockquote><h3 id="索引语法和分类"><a href="#索引语法和分类" class="headerlink" title="索引语法和分类"></a>索引语法和分类</h3><p>可以在创建表的时候创建，也可以随时增加新的索引</p><p><strong>创建索引</strong></p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> [] index 索引名称 <span class="keyword">on</span> 表名(字段名,...)</span><br></pre></td></tr></table></figure><p>为city表的city_name创建索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_city_name <span class="keyword">on</span> city(city_name);</span><br></pre></td></tr></table></figure><p><strong>查看索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> city\G;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210408190843606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city <span class="keyword">where</span> city_name<span class="operator">=</span><span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">添加索引前：</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> city  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span>    <span class="number">20.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">添加索引后：</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key           <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> city  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_city_name <span class="operator">|</span> idx_city_name <span class="operator">|</span> <span class="number">203</span>     <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong>删除索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index idx_city_name <span class="keyword">on</span> city;</span><br></pre></td></tr></table></figure><p><strong>索引分类</strong></p><p>1、单值索引：一个字段上添加索引</p><p>2、唯一索引：unique字段上添加索引，唯一性比较弱的字段上添加索引用处不大</p><p>3、复合索引：多个字段上添加索引</p><p>4、主键索引：主键上添加索引</p><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><p>1、<code>select * from city where city_name like &#39;%T&#39;;</code></p><p><strong>即使添加了索引也不会走索引，因为模糊匹配中以<code>%</code>开头，无法使用索引进行检索</strong></p><p><strong>2、隐式类型转换</strong></p><p>如果索引列出现了隐式类型转换，则 MySQL 不会使用索引。</p><p>常见的情况是在 SQL 的 <strong>WHERE 条件中字段类型为字符串，其值为数值</strong>，如果没有加引号那么 MySQL 不会使用索引。</p><p><strong>3、索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引</strong></p><p><strong>4、使用or的时候索引会失效，如果使用or要求两边的条件字段都有索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city <span class="keyword">where</span> city_name <span class="operator">=</span> <span class="string">&#x27;zhang&#x27;</span> <span class="keyword">or</span> country_id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> city  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> idx_city_name <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span>    <span class="number">40.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">没有使用索引</span><br></pre></td></tr></table></figure><p><strong>5、使用复合索引没有使用左侧的列查找</strong></p><ul><li><p>复合索引：两个字段或者更多字段联合起来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index c_index <span class="keyword">on</span> city(city_name,country_id);</span><br></pre></td></tr></table></figure></li><li><p>只能使用city_name进行查找</p></li></ul><p><strong>6、在where当中索引列参加了运算，索引失效</strong></p><p><strong>7、在where当中索引列使用了函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city <span class="keyword">where</span> <span class="built_in">lower</span>(city_name)<span class="operator">=</span><span class="string">&#x27;london&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><p><strong>建立索引</strong></p><p>对查询频次较高且数据量比较大的表建立索引。</p><p>索引字段的选择，最佳候选列应当从 WHERE 子句的条件中提取，如果 WHERE 子句中的组合比较多，应当挑选最常用、过滤效果最好的列的组合。业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。</p><p><strong>使用前缀索引</strong></p><p>索引列开始的部分字符，索引创建后也是使用硬盘来存储的，因此短索引可以提升索引访问的 IO 效率。对于 BLOB、TEXT 或很长的 VARCHAR 列必须使用前缀索引，MySQL 不允许索引这些列的完整长度。前缀索引是一种能使索引更小更快的有效方法，但缺点是 MySQL 无法使用前缀索引做 ORDER BY 和 GROUP BY，也无法使用前缀索引做覆盖扫描。</p><p><strong>选择合适的索引顺序</strong></p><p>当不需要考虑排序和分组时，将选择性最高的列放在前面。索引的选择性是指不重复的索引值和数据表的记录总数之比，索引的选择性越高则查询效率越高，唯一索引的选择性是 1，因此也可以使用唯一索引提升查询效率。</p><p><strong>删除无用索引</strong></p><p>MySQL 允许在相同列上创建多个索引，重复的索引需要单独维护，并且优化器在优化查询时也需要逐个考虑，这会影响性能。重复索引是指在相同的列上按照相同的顺序创建的相同类型的索引，应该避免创建重复索引。如果创建了索引 (A,B) 再创建索引 (A) 就是冗余索引，因为这只是前一个索引的前缀索引，对于 B-Tree 索引来说是冗余的。解决重复索引和冗余索引的方法就是删除这些索引。除了重复索引和冗余索引，可能还会有一些服务器永远不用的索引，也应该考虑删除。</p><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>满足最左前缀原则的时候，最左前缀可以用于在索引中定位记录。那些不符合最左前缀的部分，会怎么样呢？</p><p>以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tuser <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span><span class="number">10</span> <span class="keyword">and</span> ismale<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>你已经知道了前缀索引规则，所以这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。</p><p>当然，这还不错，总比全表扫描要好。</p><p>然后呢？当然是判断其他条件是否满足。</p><p><strong>在 MySQL 5.6 之前</strong>，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p><img src="https://img-blog.csdnimg.cn/135b9cd50a404b81904f0710b5baefa7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 33%;" /><p>而 <strong>MySQL 5.6 引入的索引下推优化</strong>（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</p><img src="https://img-blog.csdnimg.cn/a6ccafb180964c4091257011de3965f9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 33%;" /><h2 id="😊-存储过程和函数"><a href="#😊-存储过程和函数" class="headerlink" title="😊 存储过程和函数"></a>😊 存储过程和函数</h2><p><strong>1、事先经过编译并存储在数据库中的一段SQL语句的集合</strong></p><p>2、优势：减少应用程序和数据库之间的交互</p><p><strong>3、存储过程：一个没有返回值的函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> proceduce procedure_name ([proc_parameter])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- sql语句</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>声明语句结束符，可以自定义:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">或</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><p><strong>4、存储函数：一个有返回值的过程</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">FUNCTION</span> name()</span><br><span class="line"><span class="keyword">returns</span> type</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote><p>什么是视图？</p></blockquote><p>view：站在不同的角度看待同一份数据</p><blockquote><p>怎么创建视图对象？怎么删除？</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> city_id <span class="operator">|</span> city_name <span class="operator">|</span> country_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> 武汉      <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> 沈阳      <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> NewYork   <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">4</span> <span class="operator">|</span> London    <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建视图</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myView <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city;</span><br><span class="line">删除视图</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> myView;</span><br></pre></td></tr></table></figure><p><strong>注意：只有DQL查询语句才能以view形式创建</strong></p><blockquote><p>视图作用？</p></blockquote><p>方便、简化开发、利于维护</p><p>可以面向视图对象进行增删改查，<strong>对视图对象进行增删改查会对原表进行操作</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 面向视图查询</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> myView;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span> city_id <span class="operator">|</span> city_name <span class="operator">|</span> country_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> 武汉      <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">2</span> <span class="operator">|</span> 沈阳      <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">3</span> <span class="operator">|</span> NewYork   <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">4</span> <span class="operator">|</span> London    <span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-----------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p><strong>在实际开发中，将一个特别长且多处使用的sql语句转为视图对象，会方便增删改查，并且有利于后期的维护</strong></p><p><strong>试图对象也是一个文件，在数据库中也是以文件的形式存在的，和table一样</strong></p><h2 id="数据库设计三范式"><a href="#数据库设计三范式" class="headerlink" title="数据库设计三范式"></a>数据库设计三范式</h2><blockquote><p>函数依赖？码？</p></blockquote><p>函数依赖：X函数确定Y，例如：姓名-&gt;年龄这个函数依赖只在姓名唯一的情况下成立</p><p>码：k-&gt;u，k称为超码</p><blockquote><p>什么是数据库设计范式？</p></blockquote><p>数据库表的设计依据，教你怎么进行数据库表的设计</p><p>设计数据库表的时候按照以上范式进行可以避免表数据的冗余</p><blockquote><p>什么是规范化？</p></blockquote><p>通过模式分解将低级范式的关系模式转为若干高级范式关系模式的集合</p><blockquote><p>范式直接的关系</p></blockquote><p>1NF 包含 2NF 包含 3NF 包含 BCNF</p><hr/><p><strong>第一范式</strong></p><p><strong>1、要求任何一张表必须有主键，每一个字段原子性不可再分</strong></p><p>2、最基本的要求</p><hr/><p><strong>第二范式</strong></p><p><strong>建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">学生编号<span class="operator">+</span>教师编号     学生姓名      教师姓名</span><br><span class="line"><span class="number">1001</span> <span class="number">001</span>AD</span><br><span class="line"><span class="number">1002</span> <span class="number">002</span>BE</span><br><span class="line"><span class="number">1003</span> <span class="number">001</span>CD</span><br><span class="line"><span class="number">1001</span> <span class="number">002</span>AE</span><br></pre></td></tr></table></figure><p>不满足第二范式，A依赖1001，D依赖001，产生了部分依赖</p><blockquote><p>有什么缺点？</p></blockquote><p>1、插入异常：如果该学生没有对应的教师，插入不进去</p><p>2、删除异常：如果一个学生换了老师，那么删除的时候学生信息也被删除了</p><p>3、修改异常：修改一个需要多修改很多个</p><p>4、数据冗余，空间浪费</p><blockquote><p>如何修改？</p></blockquote><p>解决方法：分解</p><p><strong>为了满足第二范式，需要这样设计：</strong></p><ul><li>使用三张表表示多对多关系：学生表、教师表、学生教师关系表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">学生编号（主键） 学生姓名</span><br><span class="line"></span><br><span class="line">老师编号（主键） 老师信息</span><br><span class="line"></span><br><span class="line">id（主键）学生编号（外键）老师编号（外键）</span><br></pre></td></tr></table></figure><p><strong>口诀：多对多，三张表，关系表两个外键</strong></p><hr/><p><strong>第三范式</strong></p><p><strong>建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">学生编号(pk)  学生姓名班级编号班级名称</span><br><span class="line"> <span class="number">1001</span>   A <span class="number">01</span>一年一班</span><br><span class="line"> <span class="number">1002</span>   B <span class="number">02</span>  一年二班</span><br><span class="line"> <span class="number">1003</span>   C <span class="number">02</span>一年二班</span><br></pre></td></tr></table></figure><p>以上表设计描述班级和学生的关系，一对多关系（一个教师多个学生）</p><blockquote><p>是否满足第三范式？</p></blockquote><p>班级依赖班级编号，班级编号依赖学生编号，产生传递依赖</p><p>不符合第三范式，产生数据的冗余</p><blockquote><p>如何设计一对多？</p></blockquote><p>拆分两张表：学生表、班级表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">班级编号 班级名称</span><br><span class="line"></span><br><span class="line">学生编号 学生姓名 班级编号（外键）</span><br></pre></td></tr></table></figure><p><strong>口诀：一对多，两张表，多的表加外键</strong></p><hr/><p><strong>总结</strong></p><p>1、一对多：两张表，多的表加外键</p><p>2、多对多：三张表，关系表两个外键</p><p>3、一对一：在实际开发可能出现一张表字段过多，这个时候需要拆分表</p><ul><li>没有拆分表之前，一张表，比如用户信息表</li><li>拆分为用户登陆信息表、用户详细信息表</li></ul><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p><img src="https://img-blog.csdnimg.cn/20210409214735169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>1、connection Pool</strong>：连接池组件，接收客户端发起的请求</p><p><strong>2、management service &amp; utilities</strong>：管理服务和工具组件</p><ul><li>SQL interface：封装sql语句</li><li>Parser：解析器，解析客户端的请求</li><li>optimizer：优化器</li><li>cache &amp; buffers：缓存</li></ul><p><strong>3、Plggable storage engines</strong>：插件式存储引擎（innoDB）</p><p><strong>4、存储层</strong>：操作文件系统、日志等信息</p><hr/><p>1、连接层</p><ul><li>客户端和链接服务，包括本地socket通信和大多数基于客户端&#x2F;服务端工具实现的类似于TCP&#x2F;IP的通信</li><li>连接池，为通过安全接入的客户端提供线程</li></ul><p>2、服务层</p><ul><li>完成大多数核心功能，包括查询解析、分析、优化、缓存以及日期和时间等所有内置函数，所有跨存储引擎的功能都在这一层实现，例如存储过程、触发器、视图等</li><li>所有的跨存储引擎的功能也在这一层实现，在该层服务器解析查询并创建内部解析书，完成优化，最后生成执行操作；select语句还会查询内部的缓存</li></ul><p>3、引擎层</p><p>4、存储层</p><img src="https://static001.geekbang.org/resource/image/0d/d9/0d2070e8f84c4801adbfa03bda1f98d9.png" alt="img" style="zoom:30%;" /><p>MySQL可以分为server层和存储引擎层</p><ol><li>客户端和server端tcp握手进行连接</li><li>如果你是一条查询语句，mysql8.0之前回查询缓存，mysql8.0之后就删掉了</li><li>server端收到你发送的sql语句，会进行分析判断你这条sql的语法属于增删改查等等</li><li>分析完要执行的sql之后，就是对sql进行一些成本估计和优化</li><li>执行器拿到优化完的sql，会调用存储引擎提供的接口查询具体的数据，并将满足条件的数据返回给客户端。</li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>1、针对不同的存储需求可以选择最优的存储引擎，存储引擎就是存储数据、建立索引、更新查询数据等技术的实现方式。</p><p><strong>2、存储引擎是作用在表上的</strong></p><p><strong>3、默认使用innoDB，5.5版本之前使用MyISAM</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/mysql-engines.png" alt="查看MySQL提供的所有存储引擎"></p><p>从上图我们可以查看出 MySQL 当前默认的存储引擎是 InnoDB,并且在 5.7 版本所有的存储引擎中<strong>只有 InnoDB 是事务性存储引擎</strong>，也就是说<strong>只有 InnoDB 支持事务</strong>。</p><p><img src="https://img-blog.csdnimg.cn/20210409221148186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p><strong>支持事务</strong></p><p><strong>行锁</strong></p><p><strong>唯一支持外键</strong></p><p><strong>存储方式不同</strong></p><h4 id="InnoDB页"><a href="#InnoDB页" class="headerlink" title="InnoDB页"></a>InnoDB页</h4><blockquote><p>InnoDB是一个将表数据存储到磁盘上的存储引擎，真正处理数据的过程发生在内存中，所以需要把硬盘的数据加载到内存，<strong>但是读写磁盘的数据远低于内存</strong></p></blockquote><p>InnoDB将数据划分为若干页，以页作为磁盘和内存之间交互的基本单位，一般是16KB。</p><p>也就是说，一次最少从磁盘读取16KB内容到内存，一次最少将内存16KB内容刷新到磁盘中</p><p><img src="https://img-blog.csdnimg.cn/20210411163308858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="InnoDB页目录"><a href="#InnoDB页目录" class="headerlink" title="InnoDB页目录"></a>InnoDB页目录</h4><blockquote><p>记录在页中按照主键值由小到大顺序串联成一个<strong>单链表</strong>，那如果我们想根据主键值查找页中的某条记录该咋办呢？</p></blockquote><p>最笨的办法：从<code>Infimum</code>记录（最小记录）开始，沿着链表一直往后找，总有一天会找到（或者找不到），在找的时候还能投机取巧，因为链表中各个记录的值是按照从小到大顺序排列的，所以当链表的某个节点代表的记录的主键值大于你想要查找的主键值时，你就可以停止查找了，因为该节点后边的节点的主键值依次递增。</p><p><strong>这个方法在页中存储的记录数量比较少的情况用起来也没啥问题</strong>，但是如果一个页中存储了非常多的记录，这么查找对性能来说还是有损耗的，所以我们说这种遍历查找这是一个<code>笨</code>办法</p><p><strong>那么就可以使用类似书的目录</strong></p><img src="https://img-blog.csdnimg.cn/20210411163230474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><blockquote><p>存取多行数据之后，就会出现多个页，就需要另外的部分——目录页</p></blockquote><p>目录页：记录页号，key为该页的最小值，value为页数</p><img src="https://img-blog.csdnimg.cn/20210411164247579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>B+树：</p><img src="https://img-blog.csdnimg.cn/20210411165147141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="主键：聚簇索引"><a href="#主键：聚簇索引" class="headerlink" title="主键：聚簇索引"></a>主键：聚簇索引</h4><p>特点：</p><ul><li>按照主键大小进行记录和页的排序<ul><li>数据页（叶子节点）里的记录是按照主键从小到大排序的单向链表</li><li>数据页之间是按照主键大小排列的双向链表</li><li>B+树中同一层的页目录也是按照主键值从小到大排序的双向链表</li></ul></li><li>B+树的叶子节点存储的是完整的用户记录，就是指这个记录中存储了所有列的值</li></ul><p>具体这两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点</p><p><strong>在InnoDB中，聚簇索引就是数据的存储方式，所有的用户记录都存储在了叶子节点</strong></p><p><strong>优点：</strong></p><ul><li>可以把相关数据保存在一起</li><li>数据访问更快，聚簇索引将索引和数据保存在同一个 B-Tree 中，因此获取数据比非聚簇索引要更快。</li><li>用覆盖索引扫描的查询可以直接使用页节点中的主键值。</li></ul><p><strong>缺点：</strong></p><ul><li>聚簇索引最大限度提高了 IO 密集型应用的性能，如果数据全部在内存中将会失去优势。</li><li>更新聚簇索引列的代价很高，因为会强制每个被更新的行移动到新位置。</li><li>基于聚簇索引的表插入新行或主键被更新导致行移动时，可能导致页分裂，表会占用更多磁盘空间。</li><li>当行稀疏或由于页分裂导致数据存储不连续时，全表扫描可能很慢。</li></ul><h4 id="其他索引列：二级索引"><a href="#其他索引列：二级索引" class="headerlink" title="其他索引列：二级索引"></a>其他索引列：二级索引</h4><p>聚簇索引只能在搜索条件是主键时才能发挥作用，因为B+树的数据是按照主键进行排序的，<strong>当我们想以别的列作为搜索条件时，可以多建几棵B+树，不同的B+树采用不同的排序规则</strong></p><p>二级索引和聚簇索引的不同：</p><ul><li>按照指定索引列进行排序</li><li><strong>叶子节点存储的不是完整的用户记录，而是索引列+主键</strong></li><li>目录项记录中不适主键+页号，变成了索引列+页号</li><li>对二级索引进行查找数据的时候，需要根据主键值区聚簇索引中再查找完整的用户记录，这个过程叫<strong>回表</strong></li></ul><blockquote><p>和聚簇索引的区别？回表？</p></blockquote><p>叶子节点存储索引列+主键，然后再去聚簇索引找完整的数据</p><h4 id="多个索引列：联合索引"><a href="#多个索引列：联合索引" class="headerlink" title="多个索引列：联合索引"></a>多个索引列：联合索引</h4><p>以多个列的大小作为排序规则建立的B+树称为联合索引，本质上是二级索引</p><h4 id="索引的适用条件"><a href="#索引的适用条件" class="headerlink" title="索引的适用条件"></a>索引的适用条件</h4><p><strong>1、全值匹配</strong>：搜索条件中的列和索引列一致的话</p><p><strong>2、匹配左边的列</strong>：不用包含全部联合索引中的列，只包含左边的就行</p><ul><li><span style="color:red">如果我们想使用联合索引中尽可能多的列，搜索条件中的各个列必须是联合索引中从最左边连续的列</span></li></ul><p><strong>3、匹配列前缀</strong>：使用like语句进行模糊匹配，需要匹配前缀，例如“AS%”</p><p><strong>4、匹配范围值</strong></p><ul><li><p>例1：name为索引，下面的操作会使用到索引，先查找name值为Asa的记录，再查找name为Barlow的记录，因为记录之间有链表，所以可以进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person_info <span class="keyword">WHERE</span> name <span class="operator">&gt;</span> <span class="string">&#x27;Asa&#x27;</span> <span class="keyword">AND</span> name <span class="operator">&lt;</span> <span class="string">&#x27;Barlow&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>例2：使用联合索引name、age，下面的操作，会对name进行索引查询，对于age是用不到索引的，因为name不同，无法排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person_info <span class="keyword">WHERE</span> name <span class="operator">&gt;</span> <span class="string">&#x27;Asa&#x27;</span> <span class="keyword">AND</span> name <span class="operator">&lt;</span> <span class="string">&#x27;Barlow&#x27;</span> <span class="keyword">AND</span> age <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><span style="color:red">如果对多个列同时进行范围查找的话，只有对索引最左边的那个列进行范围查找的时候才能用到<code>B+</code>树索引</span></p></li></ul><p><strong>5、精确匹配某一列并范围匹配另外一列</strong>：对于联合索引，如果查找左边的列是精确查找，那么后面的查找就会使用到索引</p><p><strong>6、排序</strong></p><ul><li><p>规则：按照从左到右的顺序，先按照<code>name</code>值排序，如果记录的<code>name</code>值相同，则需要按照<code>birthday</code>来排序，如果<code>birthday</code>的值相同，则需要按照<code>phone_number</code>排序，然后进行<code>回表</code>操作取出该索引中不包含的列就好了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person_info <span class="keyword">ORDER</span> <span class="keyword">BY</span> name, birthday, phone_number LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>需要匹配左索引列</li><li>不可以顺序逆序混用</li><li>where子句中不能出现非索引列</li></ul></li></ul><p><strong>7、分组</strong></p><h4 id="覆盖查询"><a href="#覆盖查询" class="headerlink" title="覆盖查询"></a>覆盖查询</h4><p><span style="color:red">需要回表的记录越多，使用二级索引的性能就越低</span>，甚至让某些查询宁愿使用全表扫描也不使用<code>二级索引</code></p><blockquote><p>那什么时候采用全表扫描的方式，什么时候使用采用<code>二级索引 + 回表</code>的方式去执行查询呢？</p></blockquote><p>这个就是传说中的<strong>查询优化器做的工作</strong>，查询优化器会事先对表中的记录计算一些统计数据，然后再利用这些统计数据根据查询的条件来计算一下需要回表的记录数，需要回表的记录数越多，就越倾向于使用全表扫描，反之倾向于使用<code>二级索引 + 回表</code>的方式。</p><p>当然优化器做的分析工作不仅仅是这么简单，但是大致上是个这个过程。一般情况下，限制查询获取较少的记录数会让优化器更倾向于选择使用<code>二级索引 + 回表</code>的方式进行查询，因为回表的记录越少，性能提升就越高。</p><blockquote><p>覆盖索引</p></blockquote><p>为了彻底告别<code>回表</code>操作带来的性能损耗，我们建议：<span style="color:red">最好在查询列表里只包含索引列</span></p><h4 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h4><p><strong>InnoDB结构：</strong></p><img src="https://img-blog.csdnimg.cn/20210420111956928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><blockquote><p>InnoDB的缓冲池缓存什么？有什么用？</p></blockquote><p>缓存表数据与索引数据，把磁盘上的数据加载到缓冲池，避免每次访问都进行磁盘IO，起到加速访问的作用。</p><blockquote><p>速度快，那<strong>为啥不把所有数据都放到缓冲池里</strong>？</p></blockquote><p>凡事都具备两面性，抛开数据易失性不说，访问快速的反面是存储容量小：</p><p>（1）缓存访问快，但容量小，数据库存储了200G数据，缓存容量可能只有64G；</p><p>（2）内存访问快，但容量小，买一台笔记本磁盘有2T，内存可能只有16G；</p><p>因此，只能把“最热”的数据放到“最近”的地方，以“最大限度”的降低磁盘访问。</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>1、不支持事务</p><p>2、不支持外键</p><p>3、非聚集索引</p><p>4、MySQL5.1及之前，MyISAM 是默认存储引擎</p><p>5、支持全文索引</p><p>6、不支持行锁，支持表锁</p><blockquote><p>MyISAM和InnoDB实现BTree索引方式的区别</p></blockquote><p><strong>MyISAM</strong></p><p><strong>B+Tree叶节点的data域存放的是数据记录的地址</strong>。在索引检索的时候，首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其 data 域的值，然后以 data 域的值为地址读取相应的数据记录。这被称为“<strong>非聚簇索引</strong>”。</p><p><strong>InnoDB</strong></p><p>其数据文件本身就是索引文件，其表数据文件本身就是按B+Tree组织的一个索引结构，<strong>树的叶节点data域保存了完整的数据记录</strong>。这个索引的key是数据表的主键，<strong>因此InnoDB表数据文件本身就是主索引</strong>。这被称为“<strong>聚簇索引</strong>（或聚集索引）”，而其余的索引都作为<strong>辅助索引</strong>，<strong>辅助索引的data域存储相应记录主键的值而不是地址</strong>，这也是和MyISAM不同的地方。在根据主索引搜索时，直接找到key所在的节点即可取出数据；在根据辅助索引查找时，则需要先取出主键的值，在走一遍主索引。 因此，在设计表的时候，不建议使用过长的字段作为主键，也不建议使用非单调的字段作为主键，这样会造成主索引频繁分裂。</p><p><strong>总结：</strong></p><ul><li>MyISAM的B+Tree叶子节点存放的是数据记录的地址，InnoDB的叶子节点存放的是完整的数据记录</li><li>MyISAM是非聚集索引，InnoDB是聚集索引（数据文件本身就是主索引，主键就是索引的key）</li><li>InnoDB的其他索引都是辅助索引，叶子节点存放主键的值</li><li>一个表中只能有一个聚集索引，一个表中可以有多个非聚集索引</li></ul><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>1、InnoDB：默认存储引擎，用于事务处理应用程序，支持外键。如果对事务的完整性有较高要求，在并发条件下要求数据的一致性，数据操作包含很多更新、删除操作，那么就选择InnoDB</p><p>2、MyISAM：如果操作以读操作和插入操作为主，对事务的完整性和并发性要求不高，就选择MyISAM</p><p>3、MEMORY：叫所有数据存在在RAM中，在需要快速定位记录的环境下可以提供快速访问。常用于更新不频繁的小表</p><p>4、MERGE：将一系列等同于MyISAM表以逻辑方式组合在一起，作为一个对象引用。优点是突破对单个MyISAM表的大小限制</p><h2 id="优化SQL步骤"><a href="#优化SQL步骤" class="headerlink" title="优化SQL步骤"></a>优化SQL步骤</h2><h3 id="查看SQL执行频率"><a href="#查看SQL执行频率" class="headerlink" title="查看SQL执行频率"></a>查看SQL执行频率</h3><p><code>show [session|global]status</code>提供服务器状态信息</p><ul><li>session 当前链接</li><li>global 数据库上次启动至今</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;com_______&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Com_binlog    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_commit    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_delete    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_import    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_insert    <span class="operator">|</span> <span class="number">2</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_repair    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_revoke    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_select    <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_signal    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_update    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_xa_end    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">11</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;Innodb_rows_%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name        <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Innodb_rows_deleted  <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_rows_inserted <span class="operator">|</span> <span class="number">10</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_rows_read     <span class="operator">|</span> <span class="number">64</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_rows_updated  <span class="operator">|</span> <span class="number">4</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="定位低效的SQL语句"><a href="#定位低效的SQL语句" class="headerlink" title="定位低效的SQL语句"></a>定位低效的SQL语句</h3><p><strong>1、慢查询日志</strong></p><p>可以通过慢查询日志定位那些已经执行完毕的 SQL 语句</p><p><strong>2、show processlist</strong></p><p>查看当前 MySQL 正在进行的线程，包括线程的状态、是否锁表等，可以实时查看 SQL 的执行情况，同时对一些锁表操作进行优化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> processlist;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+-----------+---------+---------+--------+------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> <span class="keyword">User</span>            <span class="operator">|</span> Host      <span class="operator">|</span> db      <span class="operator">|</span> Command <span class="operator">|</span> <span class="type">Time</span>   <span class="operator">|</span> State                  <span class="operator">|</span> Info             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+-----------+---------+---------+--------+------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> event_scheduler <span class="operator">|</span> localhost <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> Daemon  <span class="operator">|</span> <span class="number">395042</span> <span class="operator">|</span> Waiting <span class="keyword">on</span> <span class="keyword">empty</span> queue <span class="operator">|</span> <span class="keyword">NULL</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">22</span> <span class="operator">|</span> root            <span class="operator">|</span> localhost <span class="operator">|</span> demo_01 <span class="operator">|</span> Query   <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span> init                   <span class="operator">|</span> <span class="keyword">show</span> processlist <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+-----------+---------+---------+--------+------------------------+------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>当查询非常多的数据时，可以看到：</p><p><img src="https://img-blog.csdnimg.cn/20210412100758997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>通过上面的步骤查询到效率低的sql语句后，可以通过explain或者desc命令获取MySQL如何执行SELECT语句的信息，包括执行过程中表是如何连接的、链接的顺序：</p><p>查询SQL语句的执行计划</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> city  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210412101236723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>id</strong></p><p>表示查询中执行select子句或者操作表的顺序</p><p>1、id相同代表加载表的顺序从上到下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city,country <span class="keyword">where</span> city.country_id <span class="operator">=</span> country.country_id;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> country <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> city    <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>    <span class="number">25.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> <span class="keyword">join</span> buffer (hash <span class="keyword">join</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>2、id不同，id值越大优先级越高，越先被执行</p><p>3、id有相同，也有不同；相同的可以认为是一组，从上到下顺序执行；在所有的组中id值越大优先级越高</p><p><strong>select_type</strong></p><table><thead><tr><th align="center">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center"><code>SIMPLE</code></td><td align="left">简单的select查询，不包含子查询或者union</td></tr><tr><td align="center"><code>PRIMARY</code></td><td align="left">查询中包括任何复杂的子查询，最外层查询标记为该标记</td></tr><tr><td align="center"><code>UNION</code></td><td align="left">第二个select出现在union之后标记为union，如果union包含在from子句的子查询外外层标记为derived</td></tr><tr><td align="center"><code>DERIVED</code></td><td align="left">在from列表中包含的子查询</td></tr><tr><td align="center"><code>SUBQUERY</code></td><td align="left">在select或where列表中包含子查询</td></tr></tbody></table><p><strong>table</strong></p><p>数据来源表</p><p><strong>type</strong></p><p>表的访问类型</p><table><thead><tr><th>null</th><th>不访问任何表、索引，直接返回结果</th></tr></thead><tbody><tr><td>system</td><td>表只有一行记录，这是const类型的特殊例子，一般不会出现</td></tr><tr><td>const</td><td>通过索引一次就找到了，用于比较<strong>主键或者unique索引，因为只匹配一行数据</strong>，所以很快。</td></tr><tr><td>eq_ref</td><td>类似于ref，区别在于使用的是唯一索引，<strong>使用主键的关联查询</strong>，<strong>关联查询出的记录只有一条</strong>。常见于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问</td></tr><tr><td>range</td><td>只检索给定返回的行，使用一个索引来选择行</td></tr><tr><td>index</td><td>和all的区别为index类型只是遍历了索引树，all是遍历数据文件</td></tr><tr><td>all</td><td>遍历全表</td></tr></tbody></table><p><strong>possible_keys</strong></p><p>可能用到的索引</p><p><strong>key</strong></p><p>实际用到的索引</p><p><strong>key_len</strong></p><p>索引字段的长度</p><p><strong>rows</strong></p><p>扫描行的数量</p><p><strong>extra</strong></p><p>1、using filesort：使用文件排序，使用非索引字段进行order by</p><p>2、using temporary：使用临时表保存中间结果，常见于order by 和groupby</p><p>3、using index</p><h3 id="show-profiles-分析SQL"><a href="#show-profiles-分析SQL" class="headerlink" title="show profiles 分析SQL"></a>show profiles 分析SQL</h3><p>帮助我们了解时间耗费都去哪里了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> profiles;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> Query_ID <span class="operator">|</span> Duration   <span class="operator">|</span> Query                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> <span class="number">0.00195000</span> <span class="operator">|</span> <span class="keyword">select</span> @<span class="variable">@have</span>_profiling <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span> <span class="number">0.00123100</span> <span class="operator">|</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------+-------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> profile <span class="keyword">for</span> query <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> Status                         <span class="operator">|</span> Duration <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> starting                       <span class="operator">|</span> <span class="number">0.000888</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Executing hook <span class="keyword">on</span> transaction  <span class="operator">|</span> <span class="number">0.000021</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> starting                       <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> checking permissions           <span class="operator">|</span> <span class="number">0.000008</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Opening tables                 <span class="operator">|</span> <span class="number">0.000050</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> init                           <span class="operator">|</span> <span class="number">0.000005</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> lock                    <span class="operator">|</span> <span class="number">0.000015</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> optimizing                     <span class="operator">|</span> <span class="number">0.000012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> statistics                     <span class="operator">|</span> <span class="number">0.000023</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> preparing                      <span class="operator">|</span> <span class="number">0.000020</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> executing                      <span class="operator">|</span> <span class="number">0.000131</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">end</span>                            <span class="operator">|</span> <span class="number">0.000004</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> query <span class="keyword">end</span>                      <span class="operator">|</span> <span class="number">0.000002</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> waiting <span class="keyword">for</span> handler <span class="keyword">commit</span>     <span class="operator">|</span> <span class="number">0.000007</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> closing tables                 <span class="operator">|</span> <span class="number">0.000006</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> freeing items                  <span class="operator">|</span> <span class="number">0.000011</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cleaning up                    <span class="operator">|</span> <span class="number">0.000022</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------+----------+</span></span><br><span class="line"><span class="number">17</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="trace分析优化器执行计划"><a href="#trace分析优化器执行计划" class="headerlink" title="trace分析优化器执行计划"></a>trace分析优化器执行计划</h3><p>开启trace，设置格式为JSON，并设置trace最大能够使用的内存大小</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> optimizer_trace<span class="operator">=</span>&quot;enabled=on&quot;,end_markers_in_json<span class="operator">=</span><span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> optimizer_trace_max_mem_size<span class="operator">=</span><span class="number">1000000</span>;</span><br></pre></td></tr></table></figure><p>执行sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city <span class="keyword">where</span> country_id <span class="operator">&gt;</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">查看执行计划：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><h4 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h4><p>使用load指令大量导入数据，可以提高导入的效率</p><p>对于InnoDB类型的表，有以下几种方式可以提高导入的效率：</p><p><strong>1、主键顺序插入</strong></p><p><strong>2、关闭唯一性校验：<code>set unique_checks=0</code>，导入后设置为1</strong></p><p><strong>3、手动提交事务：<code>set autocommit=0</code>，导入后设置为1</strong></p><h4 id="优化insert语句"><a href="#优化insert语句" class="headerlink" title="优化insert语句"></a>优化insert语句</h4><p>1、多次inset合并为一条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inser <span class="keyword">into</span> test <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>2、手动提交事务：<code>set autocommit=0</code>，插入后设置为1</p><h4 id="优化order-by语句"><a href="#优化order-by语句" class="headerlink" title="优化order by语句"></a>优化order by语句</h4><p>尽量使用use index，减少额外的排序，通过索引直接返回数据</p><h3 id="应用优化"><a href="#应用优化" class="headerlink" title="应用优化"></a>应用优化</h3><h4 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h4><p>对于访问数据库来说，建立连接的代价比较昂贵，因为我们频繁创建关闭连接是比较消耗资源的，所以有必要建立数据库连接池来提高访问的性能</p><h4 id="减少对MySQL的访问"><a href="#减少对MySQL的访问" class="headerlink" title="减少对MySQL的访问"></a>减少对MySQL的访问</h4><p><strong>1、避免对数据的重复检索</strong></p><p><strong>2、增加cache层</strong></p><p>增加缓存层来减轻数据库的负担，部分数据从数据库抽取出来放到应用端以文本方式存储，或者使用MyBatis提供的一级缓存&#x2F;二级缓存，或者使用redis数据库来缓存数据</p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>将固定的负载量分布到不同的服务器上，从而降低单台服务器的负载</p><p><strong>1、利用MySQL复制分流查询</strong></p><ul><li><p>通过MySQL的<strong>主从复制</strong>，实现读写分离，使增删改操作走主节点，查询操作走从节点，降低单台服务器的读写压力</p><img src="https://img-blog.csdnimg.cn/20210412163032857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /></li></ul><p><strong>2、使用分布式数据库架构</strong></p><ul><li>适合大数据量、负载高的情况，有良好的拓展性和可用性，通过在多台服务器之间分布数据可以实现在多台服务器之间的负载均衡</li></ul><h4 id="MySQL查询缓存优化（Mysql-8已经没有了）"><a href="#MySQL查询缓存优化（Mysql-8已经没有了）" class="headerlink" title="MySQL查询缓存优化（Mysql 8已经没有了）"></a>MySQL查询缓存优化（Mysql 8已经没有了）</h4><blockquote><p>开启MySQL查询缓存，当执行完全相同的SQL语句时，服务器就会直接从缓存中读取结果，之前的缓存会失效</p></blockquote><p><strong>操作流程</strong></p><p><img src="https://img-blog.csdnimg.cn/2021041216411765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1、客户端发送一条查询给服务器</p><p>2、服务器检查查询缓存，如果命中缓存，则立即返回存储在缓存中的结果，否则进入下一个阶段</p><p>3、服务端进行SQL解析、预处理、再由优化器生成对应的执行计划</p><p>4、查询执行引擎</p><p>5、返回结果</p><p><strong>参数配置</strong></p><p>1、查看当前数据库是否支持查询缓存</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;have_query_cache&#x27;</span>;</span><br></pre></td></tr></table></figure><p>2、查看是否开启查询缓存</p><h2 id="日志-1"><a href="#日志-1" class="headerlink" title="日志"></a>日志</h2><p>在MySQL中，有4种日志：<strong>错误日志、二进制日志、查询日志、慢查询日志</strong></p><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><p>记录了mysqld启动和停止时，已经服务器在运行过程中发生任何严重错误时的相关信息</p><h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h3><p>记录了所有DDL（数据定义）语句和DML（操作）语句，不包含select查询语句</p><p><strong>对数据的恢复有极其重要的作用，MySQL的主从复制就是根据这个日志</strong></p><p><strong>默认没有开启</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置文件位置：<span class="operator">/</span>usr<span class="operator">/</span>my.cnf</span><br><span class="line">开启</span><br><span class="line">log_bin<span class="operator">=</span>mysqlbin</span><br><span class="line"></span><br><span class="line">配置二进制日志的格式</span><br><span class="line">binlog_format<span class="operator">=</span>statement</span><br></pre></td></tr></table></figure><h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><p><strong>statement</strong></p><p>该日志格式在日志文件中记录SQL语句，每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰查看每条语句的文本</p><p><strong>主从复制的时候，从库会将日志解析为原文本，并在从库重新执行一次</strong></p><p><strong>row</strong></p><p>记录每一行数据的变更</p><p><strong>mixed</strong></p><p>默认日志格式，混合statement和row，默认使用statement，但是特殊情况下使用row</p><h3 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h3><p>记录所有操作语句</p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>记录了执行时间超过<code>long_query_time</code>设置值并且扫描记录数不小于min_examined_row_limit的所有SQL语句的日志，默认10s。</p><h2 id="MySQL主备一致"><a href="#MySQL主备一致" class="headerlink" title="MySQL主备一致"></a>MySQL主备一致</h2><blockquote><p>将主数据库的DDL和DML操作通过<strong>二进制日志</strong>传输到从库的数据库中，然后在从库上对这些日志重新执行</p><p>MySQL支持一台主库同时向多台从库进行复制，从库同时也可以作为其他从服务器的主库，实现<strong>链状复制</strong></p></blockquote><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p><strong>1、主备切换的流程</strong></p><ul><li>状态1：客户端读写都访问节点A，节点B是A的备库，只是将A的更新同步过来在本地执行，可以保持节点B和A数据相同</li><li>状态2：当需要切换时就切换成状态2，这时候客户端访问B，节点A为节点B的备库</li></ul><img src="https://img-blog.csdnimg.cn/203c354c32874f42b7fd410b153ac9f8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li><p><strong>节点A到节点B的内部流程</strong></p><ul><li><p>下图是update语句在A执行同步到B的完整流程</p><ul><li>主库收到客户端更新请求后写入undolog、redolog、binlog</li><li>B和A之间维持了一个<strong>长连接</strong>，主库A内部有一个线程专门用于服务B的这个长连接</li></ul><img src="https://img-blog.csdnimg.cn/608fe8dae29348ff8c5407ecf5b04982.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /></li></ul></li><li><p>事务日志同步的完整流程：</p><ul><li>在B上通过change master命令，设置主库A的IP、端口、用户名、密码以及从哪个位置开始请求binlog（文件名、日志偏移量）</li><li>在B上执行start slave命令，这时候备库会启动两个线程，如上图<code>io_thread</code>、<code>sql_thread</code>，其中io_thread负责与主库建立连接</li><li>A校验信息，开始按照B传来的位置信息从本地读取binlog，发送给B</li><li>B拿到binlog后写入本地文件，称为<strong>中转日志(relay log)</strong></li><li>sql_thread读取中转日志后解析出日志里的命令并执行</li></ul></li></ul><p><strong>2、循环复制问题</strong></p><ul><li>双M结构：A和B互为主备</li><li><strong>问题：B执行relay log会生成binlog，又发给了A，循环执行更新语句</strong></li><li>解决：<ul><li>规定两个库的server id（mysql在binlog中记录了这个命令第一次执行所在实例的server id）不同</li><li>一个备库接到binlog进行重放后，生成与原binlog的server id相同的binlog</li><li>每个库收到binlog后先判断serverid，如果和自己相同表示这个日志是自己生产的，丢弃</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/a87732d216ff4ddea866c15a68e15e0b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="Mysql保证高可用"><a href="#Mysql保证高可用" class="headerlink" title="Mysql保证高可用"></a>Mysql保证高可用</h3><p>1、最终一致性</p><ul><li>主库的binlog都可以传到备库并被正确执行，备库就能达到和主库一致的状态</li></ul><p><strong>2、主备延迟</strong></p><ul><li>主备切换的场景：主动运维、被动</li><li>主备延迟：备库执行完成的时间—主库执行完成的时间</li></ul><blockquote><p>如果两个机器时间不一致会导致时主备延迟的值不准吗？</p><ul><li>备库连接到主库时会获取主库的时间，在计算主备延迟时会进行扣除</li></ul></blockquote><ul><li><strong>主备延迟的最直接表现：备库消费relay log的速度比主库生产binlog的速度慢</strong></li></ul><p><strong>3、主备延迟的来源</strong></p><ul><li>备库机器性能</li><li>备库压力大</li><li>大事务：用delete语句删除很多数据、大表DDL</li><li>备库的并行复制能力</li></ul><p><strong>4、可靠性优先策略</strong></p><ul><li><p>双M结构下，从状态1到状态2切换的过程：</p><ul><li>判断备库B的<code>seconds_behind_master</code>（主备延迟时间），<strong>如果小于某个值继续下一步，否则持续重试</strong></li><li>把主库A改成只读状态（<strong>当前系统不可用，都是只读的</strong>）</li><li>判断B的<code>seconds_behind_master</code>值，直到这个值变成0</li><li>把B改成可读写状态</li><li>把业务请求切换到B</li></ul></li><li><p><strong>系统的不可用时间由数据可靠性优先的策略决定</strong></p></li></ul><p><strong>5、可用性优先策略</strong></p><ul><li>不等主备数据同步，直接把连接切到备库</li><li>问题：数据不一致</li></ul><h3 id="主从切换"><a href="#主从切换" class="headerlink" title="主从切换"></a>主从切换</h3><p><strong>1、基本的一主多从结构</strong></p><ul><li>A和A’互为主备</li><li>从库B、C、D指向主库A</li><li><strong>主备切换：A’成为新的主库，从库B、C、D接到A‘</strong></li></ul><img src="https://img-blog.csdnimg.cn/b0a9a0dab8314a9eadd106c91de9a5b9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5b-r5LmQ55qE5Yay5rWq56CB5Yac,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>2、基于位点的主备切换</strong></p><ul><li>把节点B设置为节点A‘的从库时需要执行<code>change master</code>命令<ul><li>参数：<ul><li>MASTER_HOST、MASTER_PORT、MASTER_USER 和 MASTER_PASSWORD 四个参数，分别代表了主库 A’的 IP、端口、用户名和密码</li><li>MASTER_LOG_FILE 和 MASTER_LOG_POS 表示，要从主库的 master_log_name 文件的 master_log_pos 这个位置的日志继续同步。而这个位置就是我们所说的<strong>同步位点</strong>，也就是主库对应的文件名和日志偏移量。</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java进阶</title>
      <link href="/2022/01/06/Java%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/01/06/Java%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>1、Math包含执行基本数字运算的方法</p><p>2、Math没有构造方法，如何使用类中的成员呢？</p><ul><li>看类的成员是否都是静态的，如果是，通过类名就可以直接调用</li></ul><img src="https://img-blog.csdnimg.cn/20210312144420224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>System类包含几个有用的类字段和方法，它不能被实例化</p><img src="https://img-blog.csdnimg.cn/20210312144803924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>1、Object是类层次结构的根，每个类都可以将Object作为超类，所有类都直接或者间接的继承自Object</p><p>2、构造方法：    <code>public Object()</code></p><p>在面向对象中，为什么说子类的构造方法默认访问父类的无参构造方法？</p><ul><li>因为他们的顶级父类只有无参构造方法</li></ul><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于比较2个对象的内存地址是否相等</span></span><br><span class="line"><span class="comment">//String类对该方法进行了重写用户比较字符串的值是否相等。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>1、排序：将一组数据按照固定的规则进行排列</p><p>2、冒泡排序：一种排序的方式，对要进行排序的数据中相邻的数据进行两两比较，将较大的数据放在后面，依次对所有的数据进行操作，直至所有数据按要求完成排序</p><ul><li>如果有n个数据进行排序，总共需要比较n-1次</li><li>每一次比较完毕，下一次的比较就会少一个数据参与</li></ul><p>3、动画演示：</p><p><img src="https://img-blog.csdnimg.cn/20210312160610180.gif" alt="在这里插入图片描述"></p><p>4、代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line"><span class="comment">//定义一个数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">57</span>,<span class="number">13</span>&#125;;</span><br><span class="line">System.out.println(arrayToString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一次比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">            arr[i+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(arrayToString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二次比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">            arr[i+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(arrayToString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三次比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>-<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">            arr[i+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(arrayToString(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四次比较</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>-<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">            arr[i+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(arrayToString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; arr.length-<span class="number">1</span>;x++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length-<span class="number">1</span>-x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">            arr[i+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(arrayToString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把数组中的元素按照指定的规则组成一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i == arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">sb.append(arr[i]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">sb.append(arr[i]).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">String s = sb.toString();</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终冒泡排序的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x &lt; arr.length-<span class="number">1</span>;x++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length-<span class="number">1</span>-x;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">            arr[i+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(arrayToString(arr));</span><br></pre></td></tr></table></figure><h3 id="Arrays类的概述和常用方法"><a href="#Arrays类的概述和常用方法" class="headerlink" title="Arrays类的概述和常用方法"></a>Arrays类的概述和常用方法</h3><p>Arrays类包含用于操作数组的各种方法</p><img src="https://img-blog.csdnimg.cn/20210312161152401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toString(int[] a)</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">57</span>,<span class="number">13</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">24</span>,<span class="number">69</span>,<span class="number">80</span>,<span class="number">57</span>,<span class="number">13</span>]</span><br><span class="line">[<span class="number">13</span>,<span class="number">24</span>,<span class="number">57</span>,<span class="number">69</span>,<span class="number">80</span>]</span><br></pre></td></tr></table></figure><p>有构造方法：<code>private Arrays()&#123;&#125;</code></p><p>工具类的设计思想：</p><ul><li>构造方法用<code>private</code>修饰</li><li>成员用<code>public</code> <code>static</code>修饰</li></ul><h2 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>引入：</p><blockquote><p>需求：判断一个数据是否在int范围内</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Integer.MIN_VALUE);</span><br><span class="line">System.out.println(Integer.MAX_VALUE);</span><br></pre></td></tr></table></figure><p><code>java.lang.Integer</code>继承于<code>java.lang.Number</code>继承于<code>java.lang.Object</code></p><p>1、将基本数据类型封装成对象的<span style="background: yellow;">好处</span>：可以在对象中定义更多的功能方法操作该数据</p><p>2、常用操作之一：用于基本数据类型与字符串之间的转换</p><h3 id="Integer类的概述和使用"><a href="#Integer类的概述和使用" class="headerlink" title="Integer类的概述和使用"></a>Integer类的概述和使用</h3><p>1、Integer：包装一个对象中的原始类型int的值</p><p>2、方法：</p><ul><li><code>public static Integer valueOf(int i)</code>：返回表示指定int值的Integer实例</li><li><code>public static Integer valueOf(String s)</code>：返回保存指定值的Integer对象String</li></ul><h3 id="int和String的相互转换"><a href="#int和String的相互转换" class="headerlink" title="int和String的相互转换"></a>int和String的相互转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//int-&gt;string</span></span><br><span class="line">String s1 = <span class="string">&quot;&quot;</span> + number;</span><br><span class="line"><span class="comment">//int-&gt;string</span></span><br><span class="line">String s2 = String.valueOf(number);</span><br><span class="line"></span><br><span class="line">String s = <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="comment">//string-&gt;int</span></span><br><span class="line">Integer i = Integer.valueOf(s);</span><br><span class="line"><span class="keyword">int</span> i1 = i.intValue();</span><br><span class="line"><span class="comment">//string-&gt;int</span></span><br><span class="line"><span class="keyword">int</span> i2 = Integer.parseInt(s);</span><br></pre></td></tr></table></figure><p>1、int转为String</p><ul><li><code>public static String valueOf(int i)</code></li></ul><p>2、String转为int</p><ul><li><code>public static int parseInt(String s)</code></li></ul><h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><p>Date代表特定的时间，精确到毫秒</p><p><code>public class Date extends Object implements Serializable,Cloneable,Comparable&lt;Date&gt;</code></p><p>1、构造方法：</p><ul><li><code>public Date()</code>：分配一个Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</li><li><code>public Date(long date)</code> 分配一个Date对象，将其初始化为从标准基准时间（January 1, 1970, 00:00:00 GMT.）起指定的毫秒数</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line"><span class="comment">//public Date():分配一个Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</span></span><br><span class="line">Date d1 = <span class="keyword">new</span> Date() <span class="comment">// Fri Mar 12 20:39:41 CST 2021</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public Date(long date):分配一个Date对象，并将其初始化为从标准基准时间起指定的毫秒数</span></span><br><span class="line"><span class="keyword">long</span> date = <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">Date d2 = <span class="keyword">new</span> Date(date);<span class="comment">// Thu Jan 01 09:00:00 CST 1970</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、常用方法</p><ul><li><code>public long getTime()</code>：获取日期对象从1970年1月1日0点到现在的毫秒值</li><li><code>public void setTime(long time)</code>：设置时间，给的是毫秒值</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line"><span class="comment">//创建日期对象</span></span><br><span class="line">Date d = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line"><span class="comment">//public long getTime()</span></span><br><span class="line">d.getTime(); <span class="comment">// 1615553049497毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public void setTime(long time)</span></span><br><span class="line">d.setTime(<span class="number">0</span>); <span class="comment">//Thu Jan 01 08:00:00 CST 1970 由于时区不一样，所以结果不一样</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a>SimpleDateFormat类</h3><p><code>public class SimpleDateFormat extends DateFormat</code></p><p>1、SimpleDateFormat是一个具体类，用于以区域设置敏感的方式格式化和解析日期</p><p>2、常用的模式字母及对应关系：</p><ul><li>y    年</li><li>M    月</li><li>d    日</li><li>H    时</li><li>m    分</li><li>s    秒</li></ul><p>3、构造方法：</p><ul><li><code>public SimpleDateFormat()</code>：使用默认模式和日期格式</li><li><code>public SimpleDateFormat(String pattern)</code>：使用给的的模式和日期格式</li></ul><p>4、格式化和解析日期方法</p><ul><li>格式化（Date到String）：<code>public final String format(Date date)</code></li><li>解析（String到Date）：<code>public Date parse(String source)</code></li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式化</span></span><br><span class="line">Date d = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">String s = sdf.format(d);</span><br><span class="line">System.out.println(s); <span class="comment">//21-3-12 下午8:54</span></span><br><span class="line"></span><br><span class="line">SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd-HH-mm-ss&quot;</span>);</span><br><span class="line">String s = sdf1.format(d);</span><br><span class="line">System.out.println(s); <span class="comment">//2021-03-12-20-55-49</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从String到Date</span></span><br><span class="line">String ss = <span class="string">&quot;2021-03-12-20-55-49&quot;</span>;</span><br><span class="line">SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd-HH-mm-ss&quot;</span>);</span><br><span class="line">Date dd = sdf2.parse(ss); <span class="comment">//这里需要处理异常 throws ParseException</span></span><br><span class="line">System.out.println(dd); <span class="comment">//Fri Mar 12 20:55:49 CST 2021</span></span><br></pre></td></tr></table></figure><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><p>Calendar类为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取对象</span></span><br><span class="line">Calendar c = Calendar.getInstance(); <span class="comment">//多态的形式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public int get(int field)</span></span><br><span class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH)+<span class="number">1</span>;<span class="comment">//从0开始的</span></span><br><span class="line"><span class="keyword">int</span> day = c.get(Calendar.DATE);</span><br></pre></td></tr></table></figure><p>1、常用方法：</p><ul><li><code>public int get(int field)</code>：返回给定日历字段的值</li><li><code>public abstract void add(int field,int amount)</code>：根据日历的规则，将指定的时间量添加或减去给定的日历字段</li><li><code>public final void set(int year,int month,int date)</code>：设置当前日历的年月日</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取对象</span></span><br><span class="line">Calendar c = Calendar.getInstance(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//public abstract void add(int field,int amount)</span></span><br><span class="line">c.add(Calendar.YEAR,<span class="number">1</span>);<span class="comment">//年份+1</span></span><br><span class="line">System.out.println(c.get(Calendar.YEAR)); <span class="comment">// 2022</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public final void set(int year,int month,int date)</span></span><br><span class="line">c.set(<span class="number">2020</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH)+<span class="number">1</span>;<span class="comment">//从0开始的</span></span><br><span class="line"><span class="keyword">int</span> day = c.get(Calendar.DATE);</span><br><span class="line">System.out.println(year+<span class="string">&quot;-&quot;</span>+month+<span class="string">&quot;-&quot;</span>+day) <span class="comment">// 2020-2-1</span></span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>1、<code>Throwable</code>类是所有错误（<code>error</code>类）和异常（<code>exception</code>类）的超类</p><p>2、异常：就是程序出现了不正常的情况</p><p>3、异常体系</p><img src="https://img-blog.csdnimg.cn/20210314094454730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><span style="background: yellow;">Error</span>：严重问题，不需要处理（<span style="background: yellow;">非检查型异常</span>）</p><p><span style="background: yellow;">Exception</span>：异常类，表示程序本身可以处理的问题</p><ul><li><strong>RuntimeException</strong>：编译期不检查，出现问题之后需要回来修改代码（<span style="background: yellow;">非检查型异常</span>）<br>包括：错误的强制类型转换、数组访问越界、访问null指针</li><li><strong>非RuntimeException</strong>：编译期必须处理，否则不能通过编译（<span style="background: yellow;">检查型异常</span>）<br>包括：试图超越文件末尾继续添加数据、试图打开一个不存在的文件、试图根据指定的字符串查找class对象，而这个类并不存在</li></ul><h2 id="JVM的默认处理方案"><a href="#JVM的默认处理方案" class="headerlink" title="JVM的默认处理方案"></a>JVM的默认处理方案</h2><p>如果程序出现了问题，我们没有做任何处理，最终JVM会做默认的处理：</p><ul><li>把异常的名称、原因、位置等信息输出在控制台</li><li>程序停止运行</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>两种方案：</p><ul><li>使用<code>try..catch..</code></li><li>使用<code>throws</code></li></ul><h3 id="捕获异常：try-catch"><a href="#捕获异常：try-catch" class="headerlink" title="捕获异常：try-catch"></a>捕获异常：try-catch</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">可能出现的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量名)&#123;</span><br><span class="line">异常处理</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行流程：</span><br><span class="line"><span class="number">1</span>、程序从<span class="keyword">try</span>里面的代码开始执行</span><br><span class="line"><span class="number">2</span>、出现异常，会自动生成一个异常类对象，该异常类对象将被提交给Java运行系统</span><br><span class="line"><span class="number">3</span>、当java运行时，吸引接收到异常对象，回到<span class="keyword">catch</span>中去找匹配的异常对象，找到后进行异常的处理</span><br><span class="line"><span class="number">4</span>、执行完毕后，程序还可以继续往下执行</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Throwable成员方法"><a href="#Throwable成员方法" class="headerlink" title="Throwable成员方法"></a>Throwable成员方法</h3><p>1、<code>public String getMessage()</code>：返回此throwable的详细消息字符串</p><p>2、<code>public String toString()</code>：返回此可抛出的简短描述</p><p>3、<code>public void printStackTrace()</code>：把异常的错误信息输出在控制台</p><h4 id="getMessage"><a href="#getMessage" class="headerlink" title="getMessage()"></a>getMessage()</h4><p>源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Throwable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String detailMessage;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Throwable</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">detailMessage = message;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> detailMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">    System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="toString"><a href="#toString" class="headerlink" title="toString()"></a>toString()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">    System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：java.lang.ArrayIndexOutOfBoundsException: <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="printStackTrace"><a href="#printStackTrace" class="headerlink" title="printStackTrace()"></a>printStackTrace()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">输出:</span><br><span class="line">java.lang.ArrayIndexOutOfBoundsException: <span class="number">10</span></span><br><span class="line">at Test.main(Test.java:<span class="number">13</span>)</span><br></pre></td></tr></table></figure><h3 id="抛出异常：throws"><a href="#抛出异常：throws" class="headerlink" title="抛出异常：throws"></a>抛出异常：throws</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throws</span> 异常类名</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行时异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span><span class="keyword">throws</span> ArrayIndexOutOfBoundsException</span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译时异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span>thorws ParseException</span>&#123;</span><br><span class="line">String s = <span class="string">&quot;2020-01-01&quot;</span>;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">Date d = sdf.parse(s);</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">method();<span class="comment">//不能往下运行</span></span><br><span class="line">method2();<span class="comment">//使用try-catch即可往下运行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>编译时异常</code>必须要处理，有两种方案：try-catch或者throws，如果采用throws，将来谁调用谁处理</li><li><code>运行时异常</code>可以不处理，出现问题后需要修改代码</li></ul><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 异常类名 <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">无参构造</span><br><span class="line">带参构造</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">scoreException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">scoreException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">scoreException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">teacher</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> score)</span><span class="keyword">throws</span> scoreException</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(score&lt;<span class="number">0</span>||score&gt;<span class="number">100</span>)&#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> scoreException(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="throws和throw的区别"><a href="#throws和throw的区别" class="headerlink" title="throws和throw的区别"></a>throws和throw的区别</h3><p>1、throws：</p><ul><li>用在方法声明后面，跟的是异常类名</li><li>表示抛出异常，由该方法的调用者处理</li><li>表示出现异常的一种可能性，并不一定会发生这些异常</li></ul><p>2、throw：</p><ul><li>用在方法体内，跟的是异常对象名</li><li>表示抛出异常，由方法体内的语句处理</li><li>执行throw一定抛出了某种异常</li></ul><h2 id="finally子句"><a href="#finally子句" class="headerlink" title="finally子句"></a>finally子句</h2><blockquote><p>代码抛出一个异常后，就会停止处理这个方法中剩余的代码，并退出这个方法；如果这个方法已经获取了一些本地资源，而且这些资源必须处理，这就会存在问题。</p></blockquote><p>不管是否有异常被捕获，<code>finally</code>子句中的代码都会执行。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> in = <span class="keyword">new</span> FileInputStream(...);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">导致异常的执行代码</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOexception e)&#123;</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">show error message</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//5</span></span><br><span class="line">in.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>有三种情况会执行finally子句：</p><ol><li>代码没有抛出异常，1、2、5、6</li><li>代码抛出一个异常，并在<code>catch</code>中捕获。如果catch中没有抛出异常，程序将会执行<code>finally</code>子句之后的第一条语句（1、3、4、5、6）；如果抛出异常了，异常被抛回这个方法的调用者（1、3、5）</li><li>代码抛出了一个异常，但没有<code>catch</code>子句捕获这个异常，（1、5）</li></ol><p>在以下 3 种特殊情况下，<code>finally</code> 块不会被执行：</p><ol><li>在 <code>try</code> 或 <code>finally</code> 块中用了 <code>System.exit(int)</code>退出程序。但是，如果 <code>System.exit(int)</code> 在异常语句之后，<code>finally </code>还是会被执行</li><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ol><p>注意： 当 <code>try </code>语句和 <code>finally</code> 语句中都有 <code>return</code> 语句时，在方法返回之前，<code>finally</code> 语句的内容将被执行，并且 <code>finally</code> 语句的返回值将会覆盖原始的返回值。</p><h2 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h2><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(Resource res=...)&#123;</span><br><span class="line">work with res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>try</code>退出时，会自动调用<code>res.close()</code></p><p>1、适用范围（资源的定义）： 任何实现 <code>java.lang.AutoCloseable</code>或者 <code>java.io.Closeable</code> 的对象，即&#x3D;&#x3D;需要关闭资源&#x3D;&#x3D;</p><blockquote><p>面对必须要关闭的资源，我们总是应该优先使用 try-with-resources<br>而不是try-finally。随之产生的代码更简短，更清晰，产生的异常对我们也更有用。try-with-resources语句让我们更容易编写必须要关闭的资源的代码，若采用try-finally则几乎做不到这点。</p></blockquote><p>Java 中类似于<code>InputStream</code>、<code>OutputStream</code> 、<code>Scanner</code> 、<code>PrintWriter</code>等的资源都需要我们调用<code>close()</code>方法来手动关闭，一般情况下我们都是通过<code>try-catch-finally</code>语句来实现这个需求，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取文本文件的内容</span></span><br><span class="line">   Scanner scanner = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">&quot;D://read.txt&quot;</span>));</span><br><span class="line">       <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">           System.out.println(scanner.nextLine());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (scanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">           scanner.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>使用 Java 7 之后的 <code>try-with-resources</code> 语句改造上面的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">&quot;test.txt&quot;</span>))) &#123;</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException fnfe) &#123;</span><br><span class="line">    fnfe.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然多个资源需要关闭的时候，使用 <code>try-with-resources </code>实现起来也非常简单，如果你还是用<code>try-catch-finally</code>可能会带来很多问题。</p><p>通过使用分号分隔，可以在<code>try-with-resources</code>块中声明多个资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">BufferedInputStream bin = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;test.txt&quot;</span>)));</span><br><span class="line">BufferedOutputStream bout = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;out.txt&quot;</span>)))) </span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = bin.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bout.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>try-with-resource语句自身也可以有catch，甚至可以有finally，这些子句会在关闭资源之后执行</p></blockquote><h1 id="集合进阶"><a href="#集合进阶" class="headerlink" title="集合进阶"></a>集合进阶</h1><h2 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h2><p>1、概念：对象的容器，实现了对对象常用的操作，类似数组功能</p><p>2、集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</p><p>3、和数组的区别：</p><ul><li>数组长度固定，集合长度不固定</li><li>数组可以存储基本类型和引用类型，集合只能存储引用类型（<strong>装箱操作</strong>）</li></ul><p>4、位置：<strong>java.util.</strong>*</p><p><img src="https://img-blog.csdnimg.cn/20210314105057426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="概述和使用"><a href="#概述和使用" class="headerlink" title="概述和使用"></a>概述和使用</h3><p>1、概述</p><ul><li>单列集合的顶层接口，表示一组对象，这些对象称为Collection的元素</li><li>JDK不提供此接口的任何直接实现，它提供更具体的子接口（set和list）实现</li></ul><p>2、创建Collection集合的对象</p><ul><li><span style="background: yellow;">多态</span>的方式</li><li>具体的实现类ArrayList</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line"><span class="comment">//创建Collection集合的对象</span></span><br><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素:boolean add(E e)</span></span><br><span class="line">c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出集合对象</span></span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>1、<code>boolean add(E e)</code>：添加元素，永远返回true</p><p>2、<code>boolean remove(Object o)</code>：从集合中移除指定的元素</p><p>3、<code>void clear()</code>：清空集合中的元素</p><p>4、<code>boolean contains(Object o)</code>：判断集合中是否存在指定元素</p><p>5、<code>boolean isEmpty()</code>：判断集合是否为空</p><p>6、<code>int size()</code>：集合的长度</p><h3 id="使用Iterator迭代器遍历"><a href="#使用Iterator迭代器遍历" class="headerlink" title="使用Iterator迭代器遍历"></a>使用Iterator迭代器遍历</h3><p>1、<code>Iterator</code>：迭代器，集合的专用遍历方式</p><ul><li><code>Iterator&lt;E&gt; iterator()</code>：返回此集合中元素的迭代器，通过集合的iterator()方法得到</li><li>迭代器是通过集合的方法得到的，<span style="background: yellow;">所以说它是依赖于集合存在的</span></li></ul><p>2、<code>Iterator</code>中的常用方法：</p><ul><li><code>E next()</code>：返回迭代的下一个元素</li><li><code>boolean hasNext()</code>：如果迭代具有更多元素，则返回true</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">c.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成迭代器</span></span><br><span class="line">Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//iterator方法</span></span><br><span class="line"><span class="comment"> public Iterator&lt;E&gt; iterator() &#123;</span></span><br><span class="line"><span class="comment">        return new Itr();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">//Itr:内部类</span></span><br><span class="line"><span class="comment">private class Itr implements Iterator&lt;E&gt;&#123;....&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//next：返回迭代的下一个元素</span></span><br><span class="line">System.out.println(it.next());<span class="comment">//a</span></span><br><span class="line">System.out.println(it.next());<span class="comment">//b</span></span><br><span class="line">System.out.println(it.next());<span class="comment">//c</span></span><br><span class="line">System.out.println(it.next());<span class="comment">//多调用会抛出异常NoSuchElementException，表示被请求的元素不存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//优化：hasNext(),多次调用不会抛出异常</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="集合的使用步骤"><a href="#集合的使用步骤" class="headerlink" title="集合的使用步骤"></a>集合的使用步骤</h3><img src="https://img-blog.csdnimg.cn/20210314124007333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>步骤：</p><ul><li>创建集合对象</li><li>添加元素</li><li>遍历集合<ul><li>通过集合对象获取迭代器对象</li><li>通过迭代器对象的hasNext()方法判断是否还有元素</li><li>通过迭代器对象的next()方法获取下一个元素</li></ul></li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="概述和特点"><a href="#概述和特点" class="headerlink" title="概述和特点"></a>概述和特点</h3><p>概述：</p><ul><li>有序集合（也称为序列），用户可以精确控制列表中每个元素的插入位置，用户可以通过整数索引访问元素，并搜索列表中的元素</li><li>与set集合不同，列表通常允许重复的元素</li></ul><p>特点：</p><ul><li>有序：存储和取出的元素顺序一致</li><li>可重复：存储的元素可以重复</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">//输出集合对象</span></span><br><span class="line">System.out.println(list)<span class="comment">//[1,2,3,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 2 3 3</span></span><br></pre></td></tr></table></figure><h3 id="list集合的特有方法"><a href="#list集合的特有方法" class="headerlink" title="list集合的特有方法"></a>list集合的特有方法</h3><p>1、<code>void add(int index,Element)</code>：插入指定位置的元素</p><p>2、<code>E remove(int index)</code>：删除指定索引处的元素，返回被删除的元素</p><p>3、<code>E set(int index,E element)</code>：修改指定索引处的元素，返回被修改的元素</p><p>4、<code>E get(int index)</code>：返回指定索引处的元素</p><h3 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h3><blockquote><p>需求：有一个集合list，里面三个元素：hello、world、java，遍历集合得到每一个元素，看看有没有world，如果有就添加一个javaee元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">String s = it.next();</span><br><span class="line"><span class="keyword">if</span>(s.equals(<span class="string">&quot;world&quot;</span>))&#123;</span><br><span class="line">list.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错：Exception in thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br></pre></td></tr></table></figure><p>2、源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//获取迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//光标 默认0</span></span><br><span class="line">    <span class="keyword">int</span> cursor;      </span><br><span class="line">    <span class="comment">//记录 -1</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; </span><br><span class="line">    <span class="comment">//将集合实际修改次数赋值给预期修改次数</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断集合是否有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取下一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      checkForComodification();</span><br><span class="line">      <span class="comment">//将光标赋值给i</span></span><br><span class="line">      <span class="keyword">int</span> i = cursor;</span><br><span class="line">      <span class="comment">//判断，如果大于size说明没有元素了</span></span><br><span class="line">      <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">      <span class="comment">//把集合存储数组的地址复制给该方法的局部变量</span></span><br><span class="line">      Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">      <span class="comment">//进行判断，条件满足抛出并发修改异常</span></span><br><span class="line">      <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">      <span class="comment">//光标自增</span></span><br><span class="line">      cursor = i + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//返回局部变量数组的元素</span></span><br><span class="line">      <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//校验预期修改次数和实际修改次数是否一致</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="comment">//抛出并发修改异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">报错行：String s = it.next();</span><br><span class="line"></span><br><span class="line">由于ArrayList的内部类Itr的next方法中首先调用了checkForComodification方法，而这个方法中如果modCount不等于expectedModCount的话就会抛出异常；</span><br><span class="line"></span><br><span class="line">在add操作中，会在ensureExplicitCapacity方法中对modCount进行++，因此，modeCount不等于expectedModCount了，所以会抛出异常</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：</p><ul><li><strong>当要删除的元素在集合的倒数第二个元素的位置，不会发生并发修改异常</strong><ul><li>原因：调用hasnext方法时，光标的值和集合的长度一样，就会返回false，因此不会再去调用next方法，不会产生并发修改异常</li></ul></li></ul><p><strong>解决方案：使用Itr的remove方法即可</strong></p><h3 id="listIterator列表迭代器"><a href="#listIterator列表迭代器" class="headerlink" title="listIterator列表迭代器"></a>listIterator列表迭代器</h3><p>1、通过list集合的<code>listIterator()</code>方法得到，所以说它是list集合特有的迭代器</p><p>2、用于允许程序员沿<span style="background: yellow;">任一方向遍历</span>列表的列表迭代器，<span style="background: yellow;">在迭代期间修改列表</span>，并获取列表中迭代器的当前位置</p><p>3、常用方法：</p><ul><li><code>E next()</code>：返回迭代中的下一个元素</li><li><code>boolean hasNext()</code></li><li><code>E previous()</code>：返回迭代中的上一个元素</li><li><code>boolean hasPrevious()</code>：如果此列表迭代器在相反方向遍历列表时具有更多元素，则返回true</li><li><code>void add(E e)</code>：插入列表</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">ListIterator&lt;String&gt; lit = list.listIterator();</span><br><span class="line"><span class="comment">//正向迭代</span></span><br><span class="line"><span class="keyword">while</span>(lit.hasNext())&#123;</span><br><span class="line">System.out.println(lit.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//逆向迭代</span></span><br><span class="line"><span class="keyword">while</span>(lit.hasPrevious())&#123;</span><br><span class="line">System.out.println(lit.previous());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增加元素</span></span><br><span class="line"><span class="keyword">while</span>(lit.hasNext())&#123;</span><br><span class="line">String s = lit.next();</span><br><span class="line"><span class="keyword">if</span>(s.eauals(<span class="string">&quot;world&quot;</span>))&#123;</span><br><span class="line">lit.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="background: yellow;">注意：这里使用迭代器添加元素，不会报错～～</span></p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="function">ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Itr</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;....&#125;</span><br><span class="line">    <span class="comment">//ListItr</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//实际修改值赋值给预期修改值！！！！</span></span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不会出现并发修改异常的原因：重写了add方法，添加了<code>expectedModCount = modCount;</code></p><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><p>简化数组和Collection集合的遍历</p><ul><li>实现Iterable接口的实现类，允许其对象称为增强for语句的目标</li><li>是JDK5之后出现的，内部原理是一个<span style="background: yellow;">Iterator迭代器</span></li></ul><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素数据类型 变量名 : 数组或者Collection集合)&#123;...&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>数据结构是计算机存储、组织数据的方式，是指相互之间一种或多种特定关系的数据元素的集合，通常情况下精心挑选的数据结构可以带来更高的效率</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>1、结构：</p><img src="https://img-blog.csdnimg.cn/20210314140333978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、压栈操作</p><p>压栈顺序：A、B、C、D<br><img src="https://img-blog.csdnimg.cn/20210314140425814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /></p><p>3、出栈</p><p>出栈顺序：D、C、B、A</p><p><span style="background: yellow;">先进后出</span></p><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>1、结构</p><img src="https://img-blog.csdnimg.cn/20210314140601387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、入队列：从后端进入队列</p><img src="https://img-blog.csdnimg.cn/2021031414063784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>3、出队列：从前端出队列</p><img src="https://img-blog.csdnimg.cn/2021031414071019.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><span style="background: yellow;">先进先出</span></p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>1、结构</p><img src="https://img-blog.csdnimg.cn/20210314140838568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、查询数据通过索引定位，查询任意数据耗时相同，<span style="background: yellow;">查询效率高</span></p><p>3、删除数据时，要将原始数据删除，同时后面的每个数据后移，<span style="background: yellow;">删除效率低</span></p><p>4、添加数据时，添加位置后的每个数据后移，再添加元素，<span style="background: yellow;">添加效率低</span></p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>1、结点的结构：</p><img src="https://img-blog.csdnimg.cn/20210314141058999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、结构：</p><img src="https://img-blog.csdnimg.cn/20210314141251490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>3、在链表中添加数据</p><img src="https://img-blog.csdnimg.cn/20210314141317146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>4、删除数据</p><img src="https://img-blog.csdnimg.cn/20210314141357535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><span style="background: yellow;">链表是一个增加、删除快的模型（对比数组）</span></p><p>5、查询数据必须要从头开始查询，<span style="background: yellow;">所以是一种查询慢的模型（对比数组）</span></p><h3 id="list集合子类的特点"><a href="#list集合子类的特点" class="headerlink" title="list集合子类的特点"></a>list集合子类的特点</h3><p>list集合常用子类：ArrayList、LinkedList</p><ul><li>ArrayList：底层数据结构是<strong>数组</strong>，查询慢，增删慢</li><li>LinkedList：底层数据结构是<strong>链表</strong>，查询慢，增删快</li></ul><p><strong>LinkedList：</strong></p><p>1、<code>public void addFirst(E e)</code>：在该链表开头插入指定元素</p><p>2、<code>public void addLast(E e)</code>：在指定元素追加到此链表结尾</p><p>3、<code>public E getFirst()</code>：返回第一个元素</p><p>4、<code>public E getLast()</code>：返回最后一个元素</p><p>5、<code>public E removeFirst()</code>：删除并返回第一个元素</p><p>6、<code>public E removeLast()</code>：删除并返回最后一个元素</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;String&gt; l = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">l.add(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">l.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public void addFirst(E e)</span></span><br><span class="line">l.addFirst(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">System.out.println(l);<span class="comment">//[3,0,1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public void addLast(E e)</span></span><br><span class="line">l.addLast(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">System.out.println(l);<span class="comment">//[3,0,1,2,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public E getFirst()</span></span><br><span class="line">l.getFirst();<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public E getLast()</span></span><br><span class="line">l.getLast();<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public E removeFirst()</span></span><br><span class="line">l.removeFirst();<span class="comment">//3</span></span><br><span class="line">System.out.println(l);<span class="comment">//[0,1,2,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// public E removeLast()</span></span><br><span class="line">l.removeLast();<span class="comment">//4</span></span><br><span class="line">System.out.println(l);<span class="comment">//[0,1,2]</span></span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="概述和特点-1"><a href="#概述和特点-1" class="headerlink" title="概述和特点"></a>概述和特点</h3><p>1、特点</p><ul><li>不包含重复元素</li><li>没有索引，不能使用普通的for循环遍历</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">需求：存储字符串并遍历</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; s = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">s.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">s.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">s.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//增强for</span></span><br><span class="line"><span class="keyword">for</span>(String i:s)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">java</span><br><span class="line">world</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h3 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h3><p>哈希值：JDK根据对象的<span style="background: yellow;">地址</span>或者<span style="background: yellow;">字符串</span>或者<span style="background: yellow;">数字</span>算出来的<span style="background: yellow;">int类型数值</span></p><p>Object类中的<code>public int hashCode()</code>方法可以获取对象的哈希值</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line"><span class="comment">//创建学生对象</span></span><br><span class="line">student s = <span class="keyword">new</span> student(<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//同一个对象的哈希值相同</span></span><br><span class="line">System.out.println(s.hashCode());</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认情况下（不重写hashCode()方法的情况下），不同对象的哈希值不同</span></span><br><span class="line">student s1 = <span class="keyword">new</span> student(<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);</span><br><span class="line">System.out.println(s1.hashCode());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span>.hashCode());<span class="comment">//97</span></span><br><span class="line">System.out.println(<span class="string">&quot;b&quot;</span>.hashCode());<span class="comment">//98</span></span><br><span class="line">System.out.println(<span class="string">&quot;c&quot;</span>.hashCode());<span class="comment">//99</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;重地&quot;</span>.hashCode());<span class="comment">//1179395</span></span><br><span class="line">    System.out.println(<span class="string">&quot;通话&quot;</span>.hashCode());<span class="comment">//1179395</span></span><br></pre></td></tr></table></figure><p>对象的哈希值的特点：</p><ul><li>同一对象多次调用hashCode()方法返回的哈希值相同</li><li>默认情况下，不同对象的哈希值不同</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet集合特点</p><ul><li>底层数据结构是<span style="background: yellow;">哈希表</span></li><li>对集合的迭代顺序不保证</li><li>不带索引</li><li>不饱和重复元素</li></ul><h4 id="HashSet保证元素唯一的源码分析"><a href="#HashSet保证元素唯一的源码分析" class="headerlink" title="HashSet保证元素唯一的源码分析"></a>HashSet保证元素唯一的源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">//add方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//hash值与hashCode方法相关</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果哈希表未初始化，就对齐初始化</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据对象的哈希值计算对象的存储位置，如果该位置没有元素，就存储元素</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// p.hash == hash：存入的元素和以前的元素比较哈希值</span></span><br><span class="line">            <span class="comment">// 如果不同就继续向下执行，把元素添加到集合；如果相同，会调用对象的equals方法来进行比较</span></span><br><span class="line">            <span class="comment">// 如果equals返回false，把元素添加到集合；如果返回true说明元素重复、不存储</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashSet集合添加元素的过程"><a href="#HashSet集合添加元素的过程" class="headerlink" title="HashSet集合添加元素的过程"></a>HashSet集合添加元素的过程</h4><img src="https://img-blog.csdnimg.cn/20210314150249641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_11,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><span style="background: yellow;">要保证元素的唯一性，就需要重写hashCode()和equals()</span></p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>哈希表：</p><ul><li>JDK8之前，底层采用<span style="background: yellow;">数组+链表</span>实现，可以说是<span style="background: yellow;">元素为链表的数组</span></li><li>JDK8之后，在长度比较长之后，底层做出了优化</li></ul><p>1、哈希表如何保证元素唯一性的？</p><p><img src="https://img-blog.csdnimg.cn/20210314150907167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>1、特点：</p><ul><li>哈希表和链表实现set接口，具有可预测的迭代次序</li><li>由链表保证元素<span style="background: yellow;">有序</span>，也就是说元素的<span style="background: yellow;">存储和取出顺序一致</span></li><li>由哈希表保证<span style="background: yellow;">元素唯一</span>，也就是说没有重复的元素</li></ul><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>1、特点：</p><ul><li><p>元素有序，按照一定的顺序进行排序，取决于构造方法<br><code>TreeSet()</code>：根据元素的自然排序进行排序<br><code>TreeSet(Comparator comparator)</code>：根据指定的比较器进行排序</p></li><li><p>没有带索引的方法</p></li><li><p>不含重复元素</p></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">ts.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">ts.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(String s:ts)&#123;</span><br><span class="line">System.out.println(s);<span class="comment">//1,2,3  自然排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自然排序Comparable"><a href="#自然排序Comparable" class="headerlink" title="自然排序Comparable"></a>自然排序Comparable</h3><p>存储学生对象并遍历，创建TreeSet集合使用无参构造方法</p><blockquote><p>需求：按照年龄从小到大，年龄相同按照名字字母排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stu</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">stu</span>&gt;</span>&#123;</span><br><span class="line">String name;</span><br><span class="line">Int age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(stu s)</span></span>&#123;</span><br><span class="line"><span class="comment">//相等：return 0;</span></span><br><span class="line"><span class="comment">//升序：return 1；</span></span><br><span class="line"><span class="comment">//降序：return -1；</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="keyword">this</span>.age-s.age</span><br><span class="line">num == <span class="number">0</span> ? <span class="keyword">this</span>.name.compareTo(s.name):num</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">TreeSet&lt;stu&gt; ts = <span class="keyword">new</span> TreeSet&lt;stu&gt;();</span><br><span class="line">stu s1 = <span class="keyword">new</span> stu(<span class="string">&quot;aa&quot;</span>,<span class="number">1</span>);</span><br><span class="line">stu s2 = <span class="keyword">new</span> stu(<span class="string">&quot;bb&quot;</span>,<span class="number">2</span>);</span><br><span class="line">stu s3 = <span class="keyword">new</span> stu(<span class="string">&quot;ab&quot;</span>,<span class="number">1</span>);</span><br><span class="line">stu s4 = <span class="keyword">new</span> stu(<span class="string">&quot;cc&quot;</span>,<span class="number">3</span>);</span><br><span class="line">ts.add(s1);</span><br><span class="line">ts.add(s2);</span><br><span class="line">ts.add(s3);</span><br><span class="line">ts.add(s4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(stu s:ts)&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li>用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序</li><li>自然排序：元素所属的类实现Comparable接口，重写compareTo方法</li></ul><h3 id="比较器排序Comparator"><a href="#比较器排序Comparator" class="headerlink" title="比较器排序Comparator"></a>比较器排序Comparator</h3><p>存储学生对象并遍历，创建TreeSet集合使用带参构造方法</p><blockquote><p>需求：按照年龄从小到大，年龄相同按照名字字母排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stu</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">stu</span>&gt;</span>&#123;</span><br><span class="line">String name;</span><br><span class="line">Int age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">TreeSet&lt;stu&gt; ts = <span class="keyword">new</span> TreeSet&lt;stu&gt;(<span class="keyword">new</span> Comparator&lt;stu&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(stu s1,stu s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = s1.age-s2.age</span><br><span class="line">num == <span class="number">0</span> ? <span class="keyword">this</span>.name.compareTo(s.name):num</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">stu s1 = <span class="keyword">new</span> stu(<span class="string">&quot;aa&quot;</span>,<span class="number">1</span>);</span><br><span class="line">stu s2 = <span class="keyword">new</span> stu(<span class="string">&quot;bb&quot;</span>,<span class="number">2</span>);</span><br><span class="line">stu s3 = <span class="keyword">new</span> stu(<span class="string">&quot;ab&quot;</span>,<span class="number">1</span>);</span><br><span class="line">stu s4 = <span class="keyword">new</span> stu(<span class="string">&quot;cc&quot;</span>,<span class="number">3</span>);</span><br><span class="line">ts.add(s1);</span><br><span class="line">ts.add(s2);</span><br><span class="line">ts.add(s3);</span><br><span class="line">ts.add(s4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(stu s:ts)&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li>用TreeSet集合存储自定义对象，有参构造方法使用的是比较器排序对元素进行排序</li><li>比较器排序：让集合构造方法接收Comparator的实现类对象，重写compare方法</li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>1、泛型：是JDK5引入的特性，提供了编译时类型安全监测机制，该机制允许在编译时检测到非法的类型</p><p>2、本质：<span style="background: yellow;">参数化类型</span>，也就是说所操作的数据类型被指定为一个参数</p><p>参数化类型：将类型由原来的具体的类型参数化，然后在调用&#x2F;使用的时候传入具体的类型</p><p>参数化类型可以用在<span style="background: yellow;">类（泛型类）、方法（泛型方法）、接口（范型接口）</span>中</p><p>3、格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;：指定一种类型的歌手，这里的类型可以看作形参</span><br><span class="line">&lt;类型<span class="number">1</span>，类型<span class="number">2.</span>..&gt;：指定多种类型的格式，多种类型之间由逗号隔开，可以看作形参</span><br><span class="line">将来具体调用时给定的类型可以看作实参，并且实参只能是引用数据类型</span><br></pre></td></tr></table></figure><p>4、好处</p><ul><li>把运行期间的问题提前到了编译期间</li><li>避免了强制类型转换</li></ul><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stu</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">teacher</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">stu s = <span class="keyword">new</span> stu();</span><br><span class="line">s.setName(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">teacher t = <span class="keyword">new</span> teacher();</span><br><span class="line">t.setAge(<span class="number">30</span>);</span><br><span class="line"><span class="comment">//t.setAge(&quot;30&quot;); 会报错，只能接受integer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型类的定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;类型&gt;</span>&#123;&#125;</span><br><span class="line">类型：T、E、K、V...</span><br></pre></td></tr></table></figure><p>新建泛型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">generic</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> T t;</span><br><span class="line">get/set...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">generic&lt;String&gt; g1 = <span class="keyword">new</span> generic&lt;String&gt;();</span><br><span class="line">g1.setT(<span class="string">&quot;a&quot;</span>);<span class="comment">//只能填String</span></span><br><span class="line">generic&lt;Integer&gt; g2 = <span class="keyword">new</span> generic&lt;Integer&gt;();</span><br><span class="line">g1.setT(<span class="number">1</span>);<span class="comment">//只能填Integer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">gen</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span></span>&#123;System.out.println(s);&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Integer s)</span></span>&#123;System.out.println(s);&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Boolean s)</span></span>&#123;System.out.println(s);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">gen g = <span class="keyword">new</span> gen();</span><br><span class="line">g.show(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">g.show(<span class="number">30</span>);</span><br><span class="line">g.show(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">问题：方法必须一一对应，太麻烦</span><br><span class="line"></span><br><span class="line">解决<span class="number">1</span>:使用范型类进行改进</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">gen</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T s)</span></span>&#123;System.out.println(s);&#125;</span><br><span class="line">&#125;</span><br><span class="line">问题：想要使用不同方法必须创建一个新的类，麻烦</span><br></pre></td></tr></table></figure><p>范型方法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名)&#123;&#125;</span><br></pre></td></tr></table></figure><p>改进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">gen</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T s)</span></span>&#123;System.out.println(s);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>1、定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;类型&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">gen</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">gen1</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">gen</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">System.out.println(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">gen&lt;String&gt; g = <span class="keyword">new</span> gen1&lt;String&gt;();</span><br><span class="line">g.show(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><p>Java 的泛型是<strong>伪泛型</strong>，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除。</p><p>Java的泛型基本上都是在<span style="background: yellow;">编译器</span>这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为类型擦除。</p><p>为什么使用？为了兼容jdk老版本的编码</p><p><strong>使用反射验证</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  list.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">  Class&lt;? extends List&gt; aClass = list.getClass();</span><br><span class="line">  Method add = aClass.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">  add.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  add.invoke(list,<span class="number">123</span>);</span><br><span class="line">  System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><p>java中的父子类在泛型不被认可，所以要使用通配符进行处理；接下来会使用通配符在泛型在将java中的继承关系重新绑定</p><p>通配符一般使用<code>？</code>来表示，可以理解<code>？</code>是泛型中所有类的父类</p><p>如果我们不希望<code>list&lt;?&gt;</code>是任何泛型list的父类，只希望它代表某一种泛型list的父类，可以使用类型通配符的上限：</p><ul><li>类型通配符上限：<code>&lt;?extends 类型&gt;</code></li><li><code>list&lt;?extends Number&gt;</code>：表示的类型是Number或者其子类型</li></ul><p>指定下限：</p><ul><li>类型通配符下限：<code>&lt;?super 类型&gt;</code></li><li><code>list&lt;?super Number&gt;</code>：表示的类型是Number或者其父类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型通配符：`&lt;?&gt;`</span></span><br><span class="line">List&lt;?&gt; l1 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">List&lt;?&gt; l2 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//上限</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(List&lt;? extends Number&gt; p)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">List&lt;String&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; b = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">show(a)<span class="comment">//报错</span></span><br><span class="line">show(b)<span class="comment">//不报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下限</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(List&lt;? <span class="keyword">super</span> Integer&gt; p)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">List&lt;Object&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; b = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">show(a)<span class="comment">//不报错</span></span><br><span class="line">show(b)<span class="comment">//不报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题：什么时候用上边界，什么时候用下边界？</p><p>答：上边界在读取T这个类型数据的时候，但不写入数据的时候使用；下边界在需要写入数据时，但不需要读取的时候使用</p><p>常用的通配符为： T，E，K，V，？</p><ul><li>？ 表示不确定的 java 类型</li><li>T (type) 表示具体的一个 java 类型</li><li>K V (key value) 分别代表 java 键值中的 Key Value</li><li>E (element) 代表 Element</li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>1、概述和使用</p><ul><li><code>Interface Map&lt;K,V&gt;</code> K：键；V：值</li><li>将键映射到值的对象；不能包含重复的键；每个键可以映射到最多一个值</li></ul><p>2、创建Map集合对象</p><ul><li>多态的方式</li><li>HashMap</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">main&#123;</span><br><span class="line">Map&lt;String,String&gt; a = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//put：添加方法，第一次出现添加元素，多次出现更改元素</span></span><br><span class="line">a.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a1&quot;</span>);</span><br><span class="line">a.put(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b1&quot;</span>);</span><br><span class="line">a.put(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b2&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(a);<span class="comment">//&#123;a=a1, b=b2&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><img src="https://img-blog.csdnimg.cn/20210314175244975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="1、" style="zoom:50%;" /><h3 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h3> <img src="https://img-blog.csdnimg.cn/20210314175402375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>1、方式1：</p><ul><li>获取所有键的集合，用<code>keySet</code>方法实现</li><li>遍历键的集合，获取每一个键，用增强for循环实现</li><li>根据键找值，用<code>get</code>方法实现</li></ul><p>2、方式2：</p><ul><li>获取键值对对象集合，用<code>entrySet</code>方法</li><li>遍历键值对对象集合，得到每一个键值对对象，用增强for循环实现</li><li>根据键值对对象获取键和值，<code>getKey</code>获取键，<code>getValue</code>获取值</li></ul><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p>1、概述：是对集合操作的工具类</p><p>2、常用方法：</p><ul><li><code>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)</code>：将指定的列表按照升序排列</li><li><code>public static void reverse(List&lt;?&gt; list)</code>：反转指定列表中元素的顺序</li><li><code>public static void shuffle(list&lt;?&gt; list)</code>：使用默认的随机源随机排序列表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">10</span>);</span><br><span class="line">list.add(<span class="number">30</span>);</span><br><span class="line">list.add(<span class="number">20</span>);</span><br><span class="line">list.add(<span class="number">50</span>);</span><br><span class="line">list.add(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(list);</span><br><span class="line">System.out.println(list);<span class="comment">//10、20、30、40、50</span></span><br><span class="line"></span><br><span class="line">Collections.reverse(list);</span><br><span class="line">System.out.println(list);<span class="comment">//40、50、20、30、10</span></span><br><span class="line"></span><br><span class="line">Collections.shuffle(list);</span><br><span class="line">System.out.println(list);<span class="comment">//每次运行都不一样</span></span><br></pre></td></tr></table></figure><p>对于排序，使用比较器进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(array,<span class="keyword">new</span> Comparator&lt;stu&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(stu s1,stu s2)</span></span>&#123;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="概述和构造方法"><a href="#概述和构造方法" class="headerlink" title="概述和构造方法"></a>概述和构造方法</h3><p>File：是文件和目录路径名的抽象表示</p><ul><li>文件和目录是可以通过File封装成对象的</li><li>对于File而言，<span style="background: yellow;">其封装的并不是一个真正存在的文件，仅仅是一个路径名</span>而已，它可以是存在的，也可以不存在。将来要通过具体的操作把这个路径的内容转换为具体的存在。</li></ul><p>1、方法</p><ul><li><code>File(String pathname)</code>：通过将给定的路径名字符串转换为抽象路径名来创建新的File实例</li><li><code>File(String parent,String child)</code>：从父路径名字符串和子路径字符串创建新的File实例</li><li><code>File(File parent,String child)</code>：从父抽象路径名和子路径名字符串创建新的File实例</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">File l1 = <span class="keyword">new</span> File(<span class="string">&quot;/Users/zhangtao/Desktop/2/1.txt&quot;</span>);</span><br><span class="line">System.out.println(l1);<span class="comment">///Users/zhangtao/Desktop/2/1.txt</span></span><br><span class="line"></span><br><span class="line">File l2 = <span class="keyword">new</span> File(<span class="string">&quot;/Users/zhangtao/Desktop/2&quot;</span>,<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">System.out.println(l2);<span class="comment">///Users/zhangtao/Desktop/2/1.txt</span></span><br><span class="line"></span><br><span class="line">File l3 = <span class="keyword">new</span> File(<span class="string">&quot;/Users/zhangtao/Desktop/2&quot;</span>);</span><br><span class="line">File l4 = <span class="keyword">new</span> File(l3,<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">System.out.println(l4);<span class="comment">///Users/zhangtao/Desktop/2/1.txt</span></span><br></pre></td></tr></table></figure><h3 id="File类的创建功能"><a href="#File类的创建功能" class="headerlink" title="File类的创建功能"></a>File类的创建功能</h3><p>方法：</p><ul><li><code>public boolean creatNewFile()</code>：文件不存在时，创建新的空文件</li><li><code>public boolean mkdir()</code>：创建目录</li><li><code>public boolean mkdirs()</code>：创建目录，包括不存在的父目录（多级目录）</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//需求1：创建/Users/zhangtao/Desktop/2/目录下java.txt文件</span></span><br><span class="line">    File l1 = <span class="keyword">new</span> File(<span class="string">&quot;/Users/zhangtao/Desktop/2/java.txt&quot;</span>);</span><br><span class="line">    System.out.println(l1.createNewFile());<span class="comment">//再次创建会出现false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求2:创建/Users/zhangtao/Desktop/2/目录下的一个目录javase</span></span><br><span class="line">    File l2 = <span class="keyword">new</span> File(<span class="string">&quot;/Users/zhangtao/Desktop/2/javase&quot;</span>);</span><br><span class="line">    System.out.println(l2.mkdir());<span class="comment">//再次创建会出现false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求3：创建多级目录java/javase/</span></span><br><span class="line">    File l3 = <span class="keyword">new</span> File(<span class="string">&quot;/Users/zhangtao/Desktop/2/java/javase&quot;</span>);</span><br><span class="line">    System.out.println(l3.mkdirs());<span class="comment">//再次创建会出现false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="File类的判断和获取功能"><a href="#File类的判断和获取功能" class="headerlink" title="File类的判断和获取功能"></a>File类的判断和获取功能</h3><p><img src="https://img-blog.csdnimg.cn/20210315165414260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="File类的删除功能"><a href="#File类的删除功能" class="headerlink" title="File类的删除功能"></a>File类的删除功能</h3><p>方法：</p><ul><li><code>public boolean delete()</code>：删除文件或者目录</li></ul><p>绝对路径和相对路径的区别：</p><ul><li>绝对路径：完整的路径名，不需要其他信息就可以定位文件</li><li>相对路径：使用其他路径名的信息进行解释</li></ul><p>注意：如果一个目录中有内容，就必须逐层删除</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归概述：方法定义中调用方法本身</p><p>例子：</p><blockquote><p>每个月的兔子：1、1、2、3、5、8….，从第三个月开始每个月的数量是前两个月之和</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(get(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首先定义一个方法</span></span><br><span class="line"><span class="comment">     * 定一个方法f(n)表示第n个月的兔子</span></span><br><span class="line"><span class="comment">     * 如何表示n-1个月的兔子？f(n-1)</span></span><br><span class="line"><span class="comment">     * 如何表示n-2个月的兔子？f(n-2)</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> get(n - <span class="number">1</span>) + get(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>递归 思路：</p><ul><li>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</li><li>递归策略只需少量的程序就可以描述出解题过程所需要的多次重复计算</li></ul><p>递归解决问题要找到两个内容：</p><ul><li>递归<span style="background: yellow;">出口<span style="background: yellow;">：否则会出现内存溢出</li><li>递归<span style="background: yellow;">规则<span style="background: yellow;">：与原问题相似的规模较小的问题</li></ul><p><strong>案例1：递归求阶乘</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> get(n-<span class="number">1</span>)*n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>案例2：遍历目录并打印所有文件的路径</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(File n)</span></span>&#123;</span><br><span class="line">        File [] files = n.listFiles();</span><br><span class="line">        <span class="keyword">if</span>(files!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(File file:files)&#123;</span><br><span class="line">                <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">                    get(file);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(file.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="IO流概述和分类"><a href="#IO流概述和分类" class="headerlink" title="IO流概述和分类"></a>IO流概述和分类</h3><p>1、概述：</p><ul><li>IO：输入&#x2F;输出</li><li>流：一种抽象概念，是对数据传输的总称，也就是说数据在设备间的传输统称为流，<span style="background: yellow;">流的本质是数据传输</span></li><li>IO流就是用来处理设备间数据传输问题的<br>常见应用：文件复制、文件上传、文件下载</li></ul><p>2、分类：</p><ul><li>按照数据的流向分类<br>输入流：读数据<br>输出流：写数据</li><li>按照数据类型分类<br>字节流：字节输入流、字节输出流（记事本打开，读不懂的内容，不知道选什么就选字节流）<br>字符流：字符输入流、字符输出流（记事本打开，读得懂的内容）</li></ul><p>一般来说，IO流的分类按照<span style="background: yellow;">数据类型</span>分类</p><h3 id="字节流写数据"><a href="#字节流写数据" class="headerlink" title="字节流写数据"></a>字节流写数据</h3><p>字节流抽象基类：</p><ul><li><code> InputStream</code>：表示字节输入流的类的超类</li><li><code>OutputStream</code>：表示字节输出流的所有类的超类</li><li>子类名特点：子类名称都是以其父类名作为子类名的后缀</li></ul><p><code>FileOutputStream</code>：文件输出流用于将数据写入File</p><ul><li><code>FileOutputStream (String name)</code>：创建文件输出流以指定的名称写入文件</li><li><code>public void write(int b)</code>：根据输入转为字符，写入文件中</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建字节输出流对象，能够自动生成文件</span></span><br><span class="line">FileOutputStream a = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">a.write(<span class="number">97</span>);<span class="comment">//a</span></span><br><span class="line">a.write(<span class="number">57</span>);<span class="comment">//9</span></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">a.close();</span><br></pre></td></tr></table></figure><h3 id="字节流写数据的三种方式"><a href="#字节流写数据的三种方式" class="headerlink" title="字节流写数据的三种方式"></a>字节流写数据的三种方式</h3><p><img src="https://img-blog.csdnimg.cn/20210315174038402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建字节输出流对象，能够自动生成文件</span></span><br><span class="line">FileOutputStream a = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public void write(int b)</span></span><br><span class="line">a.write(<span class="number">97</span>);<span class="comment">//a</span></span><br><span class="line">a.write(<span class="number">57</span>);<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public void write(byte b[])</span></span><br><span class="line"><span class="keyword">byte</span>[] by = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">a.write(by);<span class="comment">//abcde</span></span><br><span class="line"><span class="comment">//String.getBytes()：返回字符串的字节数组</span></span><br><span class="line">a.write(<span class="string">&quot;zhang&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">//public void write(byte b[], int off, int len)</span></span><br><span class="line">a.write(by,<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//bcd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">a.close();</span><br></pre></td></tr></table></figure><h3 id="字节流写数据的两个小问题"><a href="#字节流写数据的两个小问题" class="headerlink" title="字节流写数据的两个小问题"></a>字节流写数据的两个小问题</h3><p>1、如何实现换行？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用换行符号换行</span><br><span class="line"></span><br><span class="line">win：\r\n</span><br><span class="line">mac：\r</span><br><span class="line">linux：\n</span><br></pre></td></tr></table></figure><p>2、如何实现追加写入？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用true表示文件写入到末尾</span></span><br><span class="line">FileOutputStream a = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;a.txt&quot;</span>,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h3 id="字节流写数据加异常处理-finally"><a href="#字节流写数据加异常处理-finally" class="headerlink" title="字节流写数据加异常处理(finally)"></a>字节流写数据加异常处理(finally)</h3><p><code>finally</code>：在异常处理时提供finally来执行所有清楚操作，比如说IO流的释放资源</p><p>特点：被finally控制的语句一定会执行，除非JVM退出</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">可能导致异常的执行代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOexception e)&#123;</span><br><span class="line">异常处理</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">执行所有清除操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream a = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  a = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">  a.write(<span class="string">&quot;zhang&quot;</span>.getBytes());</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(a!=<span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          a.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节流读数据（一次读一个字节数据）"><a href="#字节流读数据（一次读一个字节数据）" class="headerlink" title="字节流读数据（一次读一个字节数据）"></a>字节流读数据（一次读一个字节数据）</h3><blockquote><p>需求：把文件的内容读出来打印到控制台</p></blockquote><p><code>FileInputStream</code>：从文件系统中的文件获取输入字节</p><ul><li><code>FileInputStream(String name)</code>：通过打开与实际文件的连接来创建一个FileInputStream，该文件由文件系统中的路径名name命名</li></ul><p>步骤：</p><ul><li>创建字节输入流对象</li><li>调用字节输入流对象的读数据方法</li><li>释放资源</li></ul><p>读取数据：<code>public int read()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fs = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// public int read():读取一个字节的数据</span></span><br><span class="line">        <span class="keyword">int</span> by = fs.read();<span class="comment">//第一次读取</span></span><br><span class="line">        System.out.println((<span class="keyword">char</span>)by);<span class="comment">//a</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by2 = fs.read();<span class="comment">//第二次读取</span></span><br><span class="line">        System.out.println((<span class="keyword">char</span>)by2);<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by3 = fs.read();<span class="comment">//第三次读取</span></span><br><span class="line">        System.out.println(by3);<span class="comment">//没有数据了返回-1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环读取</span></span><br><span class="line">        <span class="keyword">int</span> by4 = fs.read();</span><br><span class="line">        <span class="keyword">while</span> (by4!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)by4);</span><br><span class="line">            by4 = fs.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//优化循环读取</span></span><br><span class="line">        <span class="comment">//fs.read():读取数据</span></span><br><span class="line">        <span class="comment">//by5=fs.read():赋值操作</span></span><br><span class="line">        <span class="comment">//by5!=-1：判断数据是不是-1</span></span><br><span class="line">        <span class="keyword">int</span> by5;</span><br><span class="line">        <span class="keyword">while</span> ((by5=fs.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(by5);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>案例：复制文本文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">分析：读取文件-&gt;写入新文件</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileInputStream fs = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">    FileOutputStream fo = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> by;</span><br><span class="line">    <span class="keyword">while</span> ((by=fs.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">        fo.write(by);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.close();</span><br><span class="line">    fo.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节流读取数据（一次读一个字节数组）"><a href="#字节流读取数据（一次读一个字节数组）" class="headerlink" title="字节流读取数据（一次读一个字节数组）"></a>字节流读取数据（一次读一个字节数组）</h3><p>需求：把文件内容读取出来在控制台输出</p><p><code>public int read(byte b[])</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//文件中数据：12345678</span></span><br><span class="line">        FileInputStream fs = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//public int read(byte b[])：从输入流读取最多b.length个字节的数据到一个字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//第一次读取数据：12345</span></span><br><span class="line">        <span class="comment">//len表示实际读取的个数,-1表示末尾</span></span><br><span class="line">        <span class="keyword">int</span> len = fs.read(bys);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bys,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">//第二次读取：67845，只覆盖了前三个</span></span><br><span class="line">        len = fs.read(bys);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bys,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">//第三次读取：67845，不变</span></span><br><span class="line">        len = fs.read(bys);</span><br><span class="line">        <span class="comment">//public String(char value[], int offset, int count)</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bys,<span class="number">0</span>,len));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环改进</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//1024及其整数倍</span></span><br><span class="line">        <span class="keyword">int</span> len1;</span><br><span class="line">        <span class="keyword">while</span> ((len1=fs.read(bys2))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(bys2,<span class="number">0</span>,len1));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><p>1、<code>BufferOutputStream</code>：该类实现缓冲输出流，通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</p><p>2、<code>BufferInputStream</code>：创建一个内部缓冲区数组，读取或者跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</p><p>3、构造方法：</p><ul><li>字节缓冲输出流：<code>BufferOutputStream(OutputStream out)</code></li><li>字节缓冲输入流：<code>BufferInputStream(InputStream in)</code></li></ul><p>为什么构造方法需要的不是具体的文件？</p><ul><li>字节缓冲流只是提供缓冲区，真正的读写还得依靠字节流对象</li></ul><p><strong>就是构造方法和前面不一样，其他的应用方式一样</strong></p><p>使用字节缓冲流进行复制文件，效率很高</p><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="为什么会出现字符流？"><a href="#为什么会出现字符流？" class="headerlink" title="为什么会出现字符流？"></a>为什么会出现字符流？</h3><p>1、存储汉字：</p><ul><li>GBK编码：占用2个字节</li><li>UTF-8编码：占用3个字节</li></ul><p>为什么复制文本文件有中文没有问题？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bys = s.getBytes(<span class="string">&quot;UTF-8&quot;</span>);[-<span class="number">28</span>,-<span class="number">72</span>,-<span class="number">83</span>,-<span class="number">27</span>,-<span class="number">101</span>,-<span class="number">67</span>]</span><br><span class="line"><span class="keyword">byte</span>[] bys2 = s.getBytes(<span class="string">&quot;GBK&quot;</span>);[-<span class="number">42</span>,-<span class="number">48</span>,-<span class="number">71</span>,-<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>因为中文字符编码存储后<span style="background: yellow;">第一个字节永远是负的</span>，拼接的时候就知道这个是汉字，再根据编码格式进行拼接。</p><p>2、由于字节流操作中文不方便，所以Java提供了字符流</p><ul><li><span style="background: yellow;">字符流&#x3D;字节流+编码表</span></li></ul><h3 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h3><p>计算机中存储的信息都是<span style="background: yellow;">二进制</span>数表示的</p><p><span style="background: yellow;">编码</span>：按照某种规则，将字符存储到计算机中</p><p><span style="background: yellow;">解码</span>：将存储在计算机中的二进制数按照某种规则解析</p><h3 id="字符串中的编码解码问题"><a href="#字符串中的编码解码问题" class="headerlink" title="字符串中的编码解码问题"></a>字符串中的编码解码问题</h3><p>1、编码：</p><ul><li><code>byte[] getBytes()</code></li><li><code>byte[] getBytes(String charsetName)</code></li></ul><p>2、解码：</p><ul><li><code>String(byte[] bytes)</code>：</li><li><code>String(byte[] bytes,String charsetName)</code></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bys = s.getBytes();<span class="comment">// [-28, -72, -83, -27, -101, -67]</span></span><br><span class="line"><span class="keyword">byte</span>[] bys1 = s.getBytes(<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">// [-28, -72, -83, -27, -101, -67]</span></span><br><span class="line"><span class="keyword">byte</span>[] bys2 = s.getBytes(<span class="string">&quot;GBK&quot;</span>);<span class="comment">// [-42, -48, -71, -6]</span></span><br><span class="line"></span><br><span class="line">String ss = <span class="keyword">new</span> String(bys);<span class="comment">//中国</span></span><br><span class="line">String ss1 = <span class="keyword">new</span> String(bys1,<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//中国</span></span><br><span class="line">String ss2 = <span class="keyword">new</span> String(bys1,<span class="string">&quot;GBK&quot;</span>);<span class="comment">//中国</span></span><br></pre></td></tr></table></figure><h3 id="字符流中的编码解码问题"><a href="#字符流中的编码解码问题" class="headerlink" title="字符流中的编码解码问题"></a>字符流中的编码解码问题</h3><p>抽象基类：</p><ul><li><code>Reader</code></li><li><code>Writer</code></li></ul><p>相关的两个类：</p><ul><li><code>InputStreamReader</code>：字节流到字符流的桥梁，读取字节并使用指定的字符集解码为字符</li><li><code> OuputStreamWriter</code>：字符流到字节流的桥梁，使用指定的字符集将写入的字符编码为字节</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//public OutputStreamWriter(OutputStream out)</span></span><br><span class="line">        <span class="comment">//public OutputStreamWriter(OutputStream out, String charsetName)</span></span><br><span class="line">        OutputStreamWriter os = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;a.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        os.write(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public InputStreamReader(InputStream in)</span></span><br><span class="line">        <span class="comment">//public InputStreamReader(InputStream in, String charsetName)</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字符数据</span></span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="字符流写数据的五种方式"><a href="#字符流写数据的五种方式" class="headerlink" title="字符流写数据的五种方式"></a>字符流写数据的五种方式</h3><p><img src="https://img-blog.csdnimg.cn/20210315202507214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter os = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;a.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//public void write(int c)</span></span><br><span class="line"> os.write(<span class="number">97</span>);</span><br><span class="line"> <span class="comment">//public void write(char cbuf[])</span></span><br><span class="line"> <span class="keyword">char</span>[] chs=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"> os.write(chs);</span><br><span class="line"> <span class="comment">//public void write(char cbuf[], int off, int len)</span></span><br><span class="line"> os.write(chs,<span class="number">0</span>,chs.length);</span><br><span class="line"> <span class="comment">//public void write(String str)</span></span><br><span class="line"> os.write(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line"> <span class="comment">//public void write(String str, int off, int len)</span></span><br><span class="line"> os.write(<span class="string">&quot;中国nb&quot;</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"> os.close();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210315203049806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="字符流读数据的两种方式"><a href="#字符流读数据的两种方式" class="headerlink" title="字符流读数据的两种方式"></a>字符流读数据的两种方式</h3><p><img src="https://img-blog.csdnimg.cn/20210315203137982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//public int read()</span></span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//public int read(char cbuf[], int offset, int length)</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read(chs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(chs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="FileReader和FileWriter"><a href="#FileReader和FileWriter" class="headerlink" title="FileReader和FileWriter"></a>FileReader和FileWriter</h3><p>当不涉及编码和解码时使用来简化操作</p><p><code>FileReader(String name)</code>：读取字符文件的便捷类<br><code>FileWriter(String name)</code>：写入字符文件的便捷类</p><p><strong>案例：复制文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader isr = <span class="keyword">new</span> FileReader(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;c.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fw.write(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><p>用来提高读写数据的效率</p><ul><li><code>BufferedReader(Reader in)</code></li><li><code>BufferedWriter(Writer out)</code>：</li></ul><p><strong>案例：复制文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader isr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line">        BufferedWriter fw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;c.txt&quot;</span>));</span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fw.write(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="字符缓冲流的特有功能"><a href="#字符缓冲流的特有功能" class="headerlink" title="字符缓冲流的特有功能"></a>字符缓冲流的特有功能</h3><p>1、<code>BufferedReader</code></p><ul><li><code>public String readLine()</code>：读一行文字，结果包含行的内容，<span style="background: yellow;">不包括任何行终止字符</span>，如果结尾到达，则为null</li></ul><p>2、<code>BufferedWriter</code></p><ul><li><code>void newLine()</code>：写一行行分隔符，行分隔符字符串由系统定义（win、mac）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader isr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line">        BufferedWriter fw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            fw.write(<span class="string">&quot;hello&quot;</span>+i);</span><br><span class="line">            fw.newLine();</span><br><span class="line">            fw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据</span></span><br><span class="line">        String a;</span><br><span class="line">        <span class="keyword">while</span>((a =isr.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isr.close();</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>案例：复制文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       BufferedReader isr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line">       BufferedWriter fw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;d.txt&quot;</span>));</span><br><span class="line">       <span class="comment">//读取数据</span></span><br><span class="line">       String a;</span><br><span class="line">       <span class="keyword">while</span>((a =isr.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">           fw.write(a);</span><br><span class="line">           fw.newLine();</span><br><span class="line">           fw.flush();</span><br><span class="line">       &#125;</span><br><span class="line">       isr.close();</span><br><span class="line">       fw.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="复制文件的异常处理"><a href="#复制文件的异常处理" class="headerlink" title="复制文件的异常处理"></a>复制文件的异常处理</h3><p>1、方法一：<code>finally</code>的做法</p><p>2、方法二：JDK7改进方案</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(定义流对象)&#123;</span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(BufferedReader isr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line">            BufferedWriter fw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;d.txt&quot;</span>));</span><br><span class="line">                )&#123;</span><br><span class="line">            String a;</span><br><span class="line">            <span class="keyword">while</span>((a =isr.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                fw.write(a);</span><br><span class="line">                fw.newLine();</span><br><span class="line">                fw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            isr.close();</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、方法三：JDK9改进方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义输入流对象；</span><br><span class="line">定义输出流对象；</span><br><span class="line"><span class="keyword">try</span>(输入流对象；输出流对象)&#123;</span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="IO流小结"><a href="#IO流小结" class="headerlink" title="IO流小结"></a>IO流小结</h2><p>1、字节流</p><img src="https://img-blog.csdnimg.cn/2021031520565033.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/2021031520571818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>2、字符流</p><img src="https://img-blog.csdnimg.cn/20210315205744356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210315205822142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="特殊操作流"><a href="#特殊操作流" class="headerlink" title="特殊操作流"></a>特殊操作流</h2><h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3><p>System类中有两个静态的成员变量：</p><ul><li><code>public static final InputStream in</code>：标准输入流，对应于键盘输入或由主机环境或用户指定的另外一个输入源</li><li><code>public static final PrintStream out</code>：标准输出流</li></ul><p>自己实现键盘录入数据：</p><ul><li><code>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</code></li></ul><p>Java提供了一个类：</p><ul><li><code>Scanner sc = new Scanner(System.in)</code></li></ul><p>输出数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PrintStream is = System.out;</span><br><span class="line">is.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">is.println(<span class="number">100</span>);</span><br><span class="line">is.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out的本质是一个字节输出流</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><p>分类：</p><ul><li>字节打印流：<code>PrintStream</code></li><li>字符打印流：<code>PrintWriter</code></li></ul><p>打印流特点：</p><ul><li>只负责输出数据</li><li>由自己的特有方法</li></ul><p>1、字节打印流：</p><ul><li><code>PrintStream(String filename)</code>：使用指定的文件名创建新的打印流</li><li>使用继承父类方法写数据（write）会转码，使用自己特有方法写数据会原样输出（print）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PrintStream a = <span class="keyword">new</span> PrintStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">a.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">a.close();</span><br></pre></td></tr></table></figure><p>2、字符打印流</p><ul><li><code>PrintWriter(String Filename)</code>:不需要自动执行刷新</li><li><code>PrintWriter(Writer out,boolean autoFlush)</code>：如果为true则print、printf或者format方法会刷新缓冲区</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter a = <span class="keyword">new</span> PrintWriter(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">a.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">a.flush()</span><br><span class="line">a.close();</span><br><span class="line"></span><br><span class="line">PrintWriter a = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;a.txt&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line">a.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">a.close();</span><br></pre></td></tr></table></figure><h3 id="对象序列化流"><a href="#对象序列化流" class="headerlink" title="对象序列化流"></a>对象序列化流</h3><p>1、<span style="background: yellow;">对象序列化</span>：将对象保存在磁盘中，或者在网络中传输对象</p><p>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象的类型、对象的数据、对象中存储的属性等信息</p><p>字节序列写到文件中之后，相当于持久保存了一个对象的信息。</p><p>反之，字节序列可以从文件中读取回来，泛序列化</p><p>2、对象序列化流和反序列化流</p><ul><li>对象序列化流：<code>ObjectOutputStream</code></li><li>对象反序列化流：<code>ObjectInputStream</code></li></ul><h4 id="对象序列化流-1"><a href="#对象序列化流-1" class="headerlink" title="对象序列化流"></a>对象序列化流</h4><p><code>ObjectOutputStream</code>：将对象的原始数据类型和图形写入OutputStream，可以使用ObjectInputStream读取对象，提高使用流的文件来实现对象的持久存储</p><p>1、构造方法：<br>-<code>ObjectOutputStream(OutputStream out)</code></p><p>2、序列化对象的方法：</p><ul><li><code>void writeObject(Object obj)</code>：将指定对象写入ObjectOutputStream</li></ul><p>3、<span style="background: yellow;">被序列化的对象需要实现Serializable接口</span>，这个接口只是个标识接口，没有需要重写的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line">        b test= <span class="keyword">new</span> b(<span class="number">30</span>,<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">        oos.writeObject(test);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="对象序列化流-2"><a href="#对象序列化流-2" class="headerlink" title="对象序列化流"></a>对象序列化流</h4><p><code>ObjectInputStream</code>：可以使用ObjectInputStream反序列化对象</p><p>1、构造方法：<br>-<code>ObjectInputStream(InputStream in)</code></p><p>2、反序列化对象的方法：</p><ul><li><code>Object readObject()</code>：读取一个对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream oos = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line">        b test = (b)oos.readObject();</span><br><span class="line">        System.out.println(test.getAge());</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="三个问题"><a href="#三个问题" class="headerlink" title="三个问题"></a>三个问题</h4><p><em><strong>1、用对象序列化流序列化一个对象后，假如我们修改了对象所属的类文件，读取数据会不会出问题？</strong></em></p><p>答：出现了问题，报错<code>java.io.InvalidClassException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">报错：</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.io.InvalidClassException: b;</span><br><span class="line">stream classdesc serialVersionUID = -<span class="number">2649758102526158628</span>,</span><br><span class="line">local <span class="class"><span class="keyword">class</span> <span class="title">serialVersionUID</span> </span>= -<span class="number">2109106879062324476</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当出现以下问题之一时抛出InvalidClassException：</span><br><span class="line"><span class="number">1</span>、类的版本与读取的不一致</span><br><span class="line"><span class="number">2</span>、类中包含未知的数据类型</span><br><span class="line"><span class="number">3</span>、该类没有可访问的无参构造函数</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serialVersionUID</span><br><span class="line">序列化运行时与每个可序列化的类关联的一个版本号，序列化的类可以通过声明一个serialVersionUID来显式的声明它的serialVersionUID</span><br></pre></td></tr></table></figure><p><em><strong>2、如果出问题了，如何解决？</strong></em></p><p>显式声明一个serialVersionUID，就不会改变serialVersionUID了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">42L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>3、如果一个对象中的某个成员值不想被序列化，如何实现</strong></em></p><p>使用<code>transient</code>关键字或者<code>static</code>关键字修饰成员变量，就不参与序列化过程了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">42L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties</span> <span class="keyword">extends</span> <span class="title">Hashtable</span>&lt;<span class="title">Object</span>,<span class="title">Object</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>是一个Map体系的集合类</li><li>Properties类表示一组持久的属性，可以保存到流中或者从流中加载</li></ul><p><strong>练习：作为Map集合使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.put(<span class="string">&quot;hello1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">prop.put(<span class="string">&quot;hello2&quot;</span>,<span class="number">1</span>);</span><br><span class="line">prop.put(<span class="string">&quot;hello3&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Object&gt; keySet = prop.keySet();</span><br><span class="line"><span class="keyword">for</span> (Object key:keySet)&#123;</span><br><span class="line">    Object value  = prop.get(key);</span><br><span class="line">    System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作为集合的特有的方法"><a href="#作为集合的特有的方法" class="headerlink" title="作为集合的特有的方法"></a>作为集合的特有的方法</h4><p><img src="https://img-blog.csdnimg.cn/20210315222803678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.setProperty(<span class="string">&quot;hello1&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">prop.setProperty(<span class="string">&quot;hello2&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">prop.setProperty(<span class="string">&quot;hello3&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">System.out.println(prop.getProperty(<span class="string">&quot;hello1&quot;</span>));</span><br><span class="line">Set&lt;String&gt; keys = prop.stringPropertyNames();</span><br><span class="line"><span class="keyword">for</span>(String key:keys)&#123;</span><br><span class="line">    System.out.println(prop.getProperty(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="与IO流结合"><a href="#与IO流结合" class="headerlink" title="与IO流结合"></a>与IO流结合</h4><p><img src="https://img-blog.csdnimg.cn/20210315223306239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//把集合中的数据保存到文件</span></span><br><span class="line">        myStore();</span><br><span class="line">        <span class="comment">//文件的数据加载到集合</span></span><br><span class="line">        myLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myStore</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        prop.setProperty(<span class="string">&quot;hello1&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;hello2&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;hello3&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//writer 描述信息（可以为null）</span></span><br><span class="line">        prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        FileReader fr =<span class="keyword">new</span> FileReader(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line">        System.out.println(prop);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h1><h2 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p>1、进程：正在运行的程序</p><ul><li>是系统进行<span style="background: yellow;">资源分配和调用的独立单位</span></li><li>每一个进程都有它自己的内存空间和系统资源</li></ul><p>2、线程：进程中的单个顺序控制流，是一条执行路径</p><ul><li>单线程：一个进程只有一条执行路径，则称为<span style="background: yellow;">单线程程序</span></li><li>多线程：一个进程有多条执行路径，则称为<span style="background: yellow;">多线程程序</span>（扫雷程序）</li></ul><p>3、核心概念：</p><ul><li>线程是独立的执行路径</li><li>在程序运行时，没有创建线程后台也会有多个线程</li><li>main()称之为主线程，是系统的入口，用于执行整个程序</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，先后顺序不能人为干预</li><li><span style="background: yellow;">多个进程间并发执行，同一个进程内多个线程并发执行</span></li><li>进程拥有资源，线程不拥有资源</li></ul><h3 id="多线程的实现方式（一）"><a href="#多线程的实现方式（一）" class="headerlink" title="多线程的实现方式（一）"></a>多线程的实现方式（一）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br></pre></td></tr></table></figure><p>创建一个新的执行线程有两种方法：</p><p>1、将类继承<code>Thread</code>类：</p><ul><li>定义一个类继承<code>Thread</code>类</li><li>在该类中重写<code>run()</code>方法</li><li>创建该类的对象</li><li>启动线程（调用<code>start()</code>方法，Java虚拟机调用<code>run()</code>方法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">c</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        c c1 = <span class="keyword">new</span> c();</span><br><span class="line">        c c2 = <span class="keyword">new</span> c();</span><br><span class="line"></span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>问题1：为什么要重写<code>run</code>方法？</strong></p><p>因为<code>run</code>方法是用来封装被线程执行的代码</p><p><strong>问题2：<code>run</code>方法和<code>start</code>方法的区别？</strong></p><p><code>run</code>方法封装线程执行的代码，直接调用相当于普通方法的调用；<code>start</code>方法是用来启动线程，然后JVM来调用此线程的<code>run</code>方法</p><h3 id="多线程的实现方式（二）"><a href="#多线程的实现方式（二）" class="headerlink" title="多线程的实现方式（二）"></a>多线程的实现方式（二）</h3><p>实现<code>Runnable</code>接口</p><ul><li>定义一个test类实现<code>Runnable</code>接口</li><li>在该类中重写<code>run</code>方法</li><li>创建test类的对象</li><li>创建Thread类的对象，把test对象作为构造方法的参数</li><li>启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">c</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    c c1 = <span class="keyword">new</span> c();</span><br><span class="line">    c c2 = <span class="keyword">new</span> c();</span><br><span class="line">    <span class="comment">//public Thread(Runnable target)</span></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(c1);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(c2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public Thread(Runnable target, String name)</span></span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(c1,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    Thread t4 = <span class="keyword">new</span> Thread(c2,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方式的<span style="background: yellow;">好处</span>：</p><ul><li><span style="background: yellow;">避免了Java单继承的局限性</span>，方便一个对象被多个线程使用</li><li>适合多个相同程序的代码处理同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现了面向对象的设计思想</li></ul><h3 id="多线程的实现方式（三）"><a href="#多线程的实现方式（三）" class="headerlink" title="多线程的实现方式（三）"></a>多线程的实现方式（三）</h3><ul><li><p>实现<code>Callable</code>接口，需要返回值类型</p></li><li><p>重写<code>call</code>方法，需要抛出异常</p></li><li><p>创建目标对象</p></li><li><p>创建执行服务</p></li><li><p>提交执行</p></li><li><p>获取结果</p></li><li><p>关闭服务</p></li></ul><p>与 <code>Runnable</code> 相比，<code>Callable</code> 可以有返回值，返回值通过 <code>FutureTask</code> 进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Callable接口，需要返回值类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//重写call方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    MyCallable mc = <span class="keyword">new</span> MyCallable();</span><br><span class="line">    FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;&gt;(mc);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(ft);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(ft.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置和获取线程名称"><a href="#设置和获取线程名称" class="headerlink" title="设置和获取线程名称"></a>设置和获取线程名称</h3><p>方法：</p><ul><li><code>void setName(String name)</code>：将此线程的名称进行修改，默认名称<code>Thread-0</code></li><li><code>String getName()</code>：返回线程的名称</li><li><code>static Thread currentThread()</code>：返回当前线程对象</li></ul><p>1、线程的默认名称为<code>Thread-0</code>、<code>Thread-1</code>……..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> threadInitNumber;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">nextThreadNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> threadInitNumber++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,<span class="keyword">long</span> stackSize)</span> </span>&#123;</span><br><span class="line">    init(g, target, name, stackSize, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name,<span class="keyword">long</span> stackSize, AccessControlContext acc,<span class="keyword">boolean</span> inheritThreadLocals)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、获取名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、更改名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    checkAccess();</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;name cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) &#123;</span><br><span class="line">        setNativeName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    c c1 = <span class="keyword">new</span> c();</span><br><span class="line">    c c2 = <span class="keyword">new</span> c();</span><br><span class="line">    c1.setName(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    c2.setName(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    c1.start();</span><br><span class="line">    c2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、使用<code>Thread</code>类带参构造更改名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    init(<span class="keyword">null</span>, <span class="keyword">null</span>, name, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">c</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">c</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;-&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        c c1 = <span class="keyword">new</span> c(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        c c2 = <span class="keyword">new</span> c(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>5、获取当前执行对象的线程对象引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="线程调度-优先级"><a href="#线程调度-优先级" class="headerlink" title="线程调度(优先级)"></a>线程调度(优先级)</h3><p>两种调度模型：</p><ul><li><span style="background: yellow;">分时调度模型</span>：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间片</li><li><span style="background: yellow;">抢占式调度模型</span>：优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取CPU时间片相对多一些（<span style="background: yellow;">Java使用</span>）</li></ul><p>Thread类中设置和获取线程优先级的方法：</p><ul><li><code>public final int getPriority()</code>：返回线程的优先级</li><li><code>public final void setPriority(int newPriority)</code>：更改线程的优先级（最小1，最大10，默认5）,<span style="background: yellow;">线程优先级高只是代表获取CPU时间片的几率比较高</span></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    c c1 = <span class="keyword">new</span> c(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    c c2 = <span class="keyword">new</span> c(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    c1.setPriority(<span class="number">10</span>);</span><br><span class="line">    c2.setPriority(<span class="number">1</span>);</span><br><span class="line">    c1.start();</span><br><span class="line">    c2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><p>方法：</p><ul><li><code>static void sleep(long millis)</code>：使当前正在执行的线程停留指定的毫秒数</li><li><code>void join()</code>：等待这个线程死亡</li><li><code>void setDaemon(boolean on)</code>：将此线程标记为守护线程，当运行的线程都是守护线程时，JVM退出</li><li><code>static void yield()</code>：暂停当前正在执行的线程对象，并执行其他线程</li></ul><h4 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h4><p>1、不推荐使用JDK提供的<code>stop()</code>、<code>destroy()</code>方法</p><p>2、推荐线程自己停下来</p><p>3、建议使用一个标志位进行终止变量，当flag&#x3D;false，则终止线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">  <span class="comment">//1、设置一个标志位</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">  <span class="comment">//2、重写run方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">      System.out.println(getName()+<span class="string">&quot;-&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3、设置一个公开的方法停止线程，转换标识位</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h4><p>1、<code>static void sleep(long millis)</code>指定当前线程阻塞的毫秒数；</p><p>2、sleep存在异常<code>InterruptedException</code></p><p>3、sleep时间达到后线程进入就绪状态</p><p>4、sleep可以模拟网络延时，倒计时等</p><p>5、每个对象都有一个锁，sleep不会释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        System.out.println(getName()+<span class="string">&quot;-&quot;</span>+i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//停止1秒</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h4><p>1、<code>static void yield()</code>：礼让线程，让当前执行的线程暂停，但不阻塞</p><p>2、将线程从运行状态转为就绪状态</p><p>3、让cpu重新调度，&#x3D;&#x3D;礼让不一定成功&#x3D;&#x3D;，看cpu心情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  main&#123;</span><br><span class="line">    t a = <span class="keyword">new</span> t();</span><br><span class="line">    <span class="keyword">new</span> Thread(a,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(a,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">t</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread.yield();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程强制执行"><a href="#线程强制执行" class="headerlink" title="线程强制执行"></a>线程强制执行</h4><p>1、<code>void join()</code>：等待这个线程死亡再执行其他线程，其他线程阻塞</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     c t1 = <span class="keyword">new</span> c(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">     c t2 = <span class="keyword">new</span> c(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">     </span><br><span class="line">     t1.start();</span><br><span class="line">     <span class="comment">//t1结束后t2执行</span></span><br><span class="line">     t1.join();</span><br><span class="line">     t2.start();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    join(<span class="number">0</span>);            <span class="comment">//join()等同于join(0)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);           <span class="comment">//join(0)等同于wait(0)，即wait无限时间直到被notify</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，<code>join()</code>方法的底层是利用<code>wait()</code>方法实现的。可以看出，<code>join方法</code>是一个同步方法，当主线程调用<code>t1.join()</code>方法时，主线程先获得了t1对象的锁，随后进入方法，调用了t1对象的<code>wait()</code>方法，使主线程进入了t1对象的等待池，此时，A线程则还在执行，并且随后的<code>t2.start()</code>还没被执行，因此，B线程也还没开始。等到A线程执行完毕之后，主线程继续执行，走到了<code>t2.start()</code>，B线程才会开始执行。</p><p>此外，对于<code>join()</code>的位置和作用的关系，我们可以用下面的例子来分析:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot; start&quot;</span>);</span><br><span class="line">ThreadTest t1=<span class="keyword">new</span> ThreadTest(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">ThreadTest t2=<span class="keyword">new</span> ThreadTest(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">ThreadTest t3=<span class="keyword">new</span> ThreadTest(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;t1start&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line">System.out.println(<span class="string">&quot;t2start&quot;</span>);</span><br><span class="line">t2.start();</span><br><span class="line">System.out.println(<span class="string">&quot;t3start&quot;</span>);</span><br><span class="line">t3.start();</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot; end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main start</span><br><span class="line">t1start</span><br><span class="line">t1end</span><br><span class="line">t2start</span><br><span class="line">t2end</span><br><span class="line">t3start</span><br><span class="line">t3end</span><br><span class="line">A-<span class="number">1</span></span><br><span class="line">A-<span class="number">2</span></span><br><span class="line">main end</span><br><span class="line">C-<span class="number">1</span></span><br><span class="line">C-<span class="number">2</span></span><br><span class="line">C-<span class="number">3</span></span><br><span class="line">C-<span class="number">4</span></span><br><span class="line">C-<span class="number">5</span></span><br><span class="line">A-<span class="number">3</span></span><br><span class="line">B-<span class="number">1</span></span><br><span class="line">B-<span class="number">2</span></span><br><span class="line">B-<span class="number">3</span></span><br><span class="line">B-<span class="number">4</span></span><br><span class="line">B-<span class="number">5</span></span><br><span class="line">A-<span class="number">4</span></span><br><span class="line">A-<span class="number">5</span></span><br></pre></td></tr></table></figure><p>A、B、C和主线程交替运行,加入join()方法后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot; start&quot;</span>);</span><br><span class="line">ThreadTest t1=<span class="keyword">new</span> ThreadTest(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">ThreadTest t2=<span class="keyword">new</span> ThreadTest(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">ThreadTest t3=<span class="keyword">new</span> ThreadTest(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;t1start&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line">System.out.println(<span class="string">&quot;t1end&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;t2start&quot;</span>);</span><br><span class="line">t2.start();</span><br><span class="line">System.out.println(<span class="string">&quot;t2end&quot;</span>);</span><br><span class="line">t1.join();</span><br><span class="line">System.out.println(<span class="string">&quot;t3start&quot;</span>);</span><br><span class="line">t3.start();</span><br><span class="line">System.out.println(<span class="string">&quot;t3end&quot;</span>);</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">&quot; end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main start</span><br><span class="line">t1start</span><br><span class="line">t1end</span><br><span class="line">t2start</span><br><span class="line">t2end</span><br><span class="line">A-<span class="number">1</span></span><br><span class="line">B-<span class="number">1</span></span><br><span class="line">A-<span class="number">2</span></span><br><span class="line">A-<span class="number">3</span></span><br><span class="line">A-<span class="number">4</span></span><br><span class="line">A-<span class="number">5</span></span><br><span class="line">B-<span class="number">2</span></span><br><span class="line">t3start</span><br><span class="line">t3end</span><br><span class="line">B-<span class="number">3</span></span><br><span class="line">main end</span><br><span class="line">B-<span class="number">4</span></span><br><span class="line">B-<span class="number">5</span></span><br><span class="line">C-<span class="number">1</span></span><br><span class="line">C-<span class="number">2</span></span><br><span class="line">C-<span class="number">3</span></span><br><span class="line">C-<span class="number">4</span></span><br><span class="line">C-<span class="number">5</span></span><br></pre></td></tr></table></figure><p>可以看出，主线程在<code>t1.join()</code>方法处停止，并需要等待A线程执行完毕后才会执行<code>t3.start()</code>，然而，并不影响B线程的执行。因此，可以得出结论，<code>t.join()</code>方法只会使主线程进入等待池并等待t线程执行完毕后才会被唤醒。并不影响同一时刻处在运行状态的其他线程。</p><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><p>1、线程分为<span style="background: yellow;">用户线程</span>和<span style="background: yellow;">守护线程</span></p><p>2、虚拟机必须确保用户线程执行完毕</p><p>3、虚拟机不用等待守护线程执行完毕</p><p>4、常见守护线程：后台记录操作日志、监控内存、垃圾回收……</p><p>方法：<code>void setDaemon(boolean on)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    c c1 = <span class="keyword">new</span> c(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    c c2 = <span class="keyword">new</span> c(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置主线程为3</span></span><br><span class="line">    Thread.currentThread().setName(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="comment">//设置3结束后1和2自杀,设置为守护线程,但不是立即杀掉</span></span><br><span class="line">    c1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    c2.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">    c1.start();</span><br><span class="line">    c2.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><p>线程状态：</p><ul><li><p>New（新建）</p></li><li><p>Runnable（可运行）</p></li><li><p>Blocked（阻塞）</p></li><li><p>Wating（等待）</p></li><li><p>Timed waiting（计时等待）</p></li><li><p>Terminated（终止）</p></li></ul><p>方法：<code>Thread.State state1 = t1.getState();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (state1!=Thread.State.TERMINATED)&#123;</span><br><span class="line">  Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">  state1 = t1.getState();</span><br><span class="line">  System.out.println(state1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210316113241947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p><strong>卖票案例</strong>可能会出现的问题：</p><p>1、相同的票出现多次的情况</p><p>2、出现了负数票的情况</p><p><strong>并发</strong>：同一个对象被多个线程同时操作</p><h3 id="卖票数据安全问题"><a href="#卖票数据安全问题" class="headerlink" title="卖票数据安全问题"></a>卖票数据安全问题</h3><p><strong>1、为什么会出现问题？（判断多线程程序是否会有安全问题的标准）</strong></p><ul><li>是否有多线程环境（三个卖票窗口）</li><li>是否共享数据（共享票）</li><li>是否有多条语句操作共享数据（卖票）</li></ul><p><strong>2、如何解决线程安全问题？</strong></p><ul><li>基本思想：让程序没有安全问题的环境（破坏上述三种环境中的一种环境）</li><li>线程同步：一种等待机制，多个需要同时访问此对象的线程进入<span style="background: yellow;">对象的等待池</span>形成队列</li></ul><p><strong>3、如何实现？</strong></p><ul><li>队列+锁（每个对象都有锁）</li></ul><h3 id="同步代码块和同步方法"><a href="#同步代码块和同步方法" class="headerlink" title="同步代码块和同步方法"></a>同步代码块和同步方法</h3><h4 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h4><p>1、作用：锁多条语句操作共享数据</p><p>2、格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于给代码加锁，任意对象可以看作一把锁</span></span><br><span class="line"><span class="keyword">synchronized</span>(任意对象)&#123;</span><br><span class="line">多条语句操作共享数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义同一把锁</span></span><br><span class="line"><span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在出售第&quot;</span>+tickets+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                tickets--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、好处和弊端？</p><ul><li>好处：解决了多线程的数据安全问题</li><li>弊端：当线程很多时，每个线程都会去判断锁，很耗费资源，降低了程序的运行效率</li></ul><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><p>1、同步方法：将<code>synchronized</code>关键字加到方法上</p><p>2、格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(方法参数)&#123;&#125;</span><br></pre></td></tr></table></figure><p>同步方法的锁——<code>this</code></p><p>4、同步静态方法：把<code>synchronized</code>关键字加到静态方法上</p><p>同步静态方法的锁——<code>类.class</code></p><h3 id="线程安全的类"><a href="#线程安全的类" class="headerlink" title="线程安全的类"></a>线程安全的类</h3><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>1、线程安全，可变的字符序列</p><p>2、从JDK5开始，被<code>StringBuilder</code>替代，通常使用<code>StringBuilder</code>类，因为它支持所有相同的操作，但是更快，因为它不执行同步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法都是同步方法</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">StringBuilder sb2 = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>1、该类改进了<code>list</code>接口，使其成为<code>Java Collections Framework</code>的成员，与新的集合实现不同，<code>Vector</code>被同步，如果不需要线程安全的实现，建议使用<code>ArrayList</code>代替<code>Vector</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法都是同步方法</span></span><br><span class="line">Vector&lt;String&gt; v = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">ArrayList&lt;String&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; aa = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br></pre></td></tr></table></figure><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>1、该类实现了一个哈希表，它将键映射到值，任何非null对象都可以作为键或者值</p><p>2、该类进行改进，实现了<code>Map</code>接口，使其成为<code>Java Collections Framework</code>的成员，与新的集合不同，<code>Hashtable</code>被同步，如果不需要线程安全的实现，建议使用<code>HashMap</code>代替</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法都是同步方法</span></span><br><span class="line">Hashtable&lt;String, String&gt; ht = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">HashMap&lt;String, String&gt; hm = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Map&lt;String, String&gt; m = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>多个线程各自占有一些资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有<span style="background: yellow;">两个以上对象的锁</span>时，可能发生死锁问题.</p><p><strong>产生死锁的条件：</strong></p><ul><li><strong>互斥条件</strong>：一个资源只能被一个进程使用</li><li><strong>请求和保持条件</strong>：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li><li><strong>不剥夺条件</strong>：进程已获得的资源，在没有使用完之前不能强行剥夺</li><li><strong>循环等待条件</strong>：若干进程之间形成一种头尾相连的循环等待资源的关系</li></ul><p>破坏其中一个条件即可破坏死锁～～</p><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>为了更清晰表达如何加锁和师傅锁，JDK5之后提供了新的锁对象<code>Lock</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>方法：</p><ul><li><code>void lock()</code>：获得锁</li><li><code>void unlock()</code>：释放锁</li></ul><p>因为Lock是接口，所以采用它的实现类来实例化<code>ReentrantLock</code>（<span style="background: yellow;">可重入锁</span>）, <code>Condition</code>, <code>ReadWriteLock</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">c</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//可重入锁</span></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">          <span class="comment">//加锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(tickets&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在出售第&quot;</span>+tickets+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    tickets--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="comment">//解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="synchronized与lock的对比"><a href="#synchronized与lock的对比" class="headerlink" title="synchronized与lock的对比"></a>synchronized与lock的对比</h4><p>1、<code>Lock</code>是显式锁（手动开启和关闭锁），<code>synchronized</code>是隐式锁，出了作用域自动释放</p><p>2、<code>Lock</code>只有代码锁，<code>synchronized</code>有代码锁和方法锁</p><p>3、使用<code>Lock</code>锁，JVM将话费少量的时间来调度线程，性能更好，具有更好的扩展性</p><p>4、优先使用的顺序：Lock &gt; 同步代码块 &gt; 同步方法</p><h2 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h2><p>两类线程：</p><ul><li>生产者</li><li>消费者</li></ul><p>为了解耦，通常采用共享的数据区域，就像是仓库</p><p><img src="https://img-blog.csdnimg.cn/20210316140746838.png" alt="在这里插入图片描述"></p><p>为了体现生产和消费过程中的<span style="background: yellow;">等待和唤醒</span>，Java提供了几个方法：</p><img src="https://img-blog.csdnimg.cn/20210316140837774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>包含的类：</p><ul><li>奶箱类（Box）：定义一个成员变量表示第x瓶奶，提供存储牛奶和获取牛奶的操作</li><li>生产者类（Producer）：实现Runnable接口，重写run方法，调用存储牛奶操作</li><li>消费者（Customer）：实现Runnable接口，重写run方法，调用获取牛奶操作</li><li>测试类：main方法<br>创建奶箱对象<br>创建生产者对象<br>创建消费者对象<br>创建两个线程对象<br>启动线程</li></ul><p>1、奶箱类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第x瓶奶</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> milk;</span><br><span class="line">    <span class="comment">//奶箱的状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> state = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> milk)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.milk = milk;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产者将第&quot;</span>+<span class="keyword">this</span>.milk+<span class="string">&quot;瓶奶放入奶箱&quot;</span>);</span><br><span class="line">        <span class="comment">//生产完毕后修改状态</span></span><br><span class="line">        state=<span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//唤醒其他等待的线程</span></span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!state)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者拿到第&quot;</span>+<span class="keyword">this</span>.milk+<span class="string">&quot;瓶奶&quot;</span>);</span><br><span class="line">        state=<span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//唤醒其他等待的线程</span></span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、生产者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Box b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Box b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            b.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、消费者类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Box box;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Box b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.box = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            box.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Box box = <span class="keyword">new</span> Box();</span><br><span class="line">        Producer p = <span class="keyword">new</span> Producer(box);</span><br><span class="line">        Consumer c = <span class="keyword">new</span> Consumer(box);</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(p,<span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(c,<span class="string">&quot;消费者&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>1、背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大</p><p>2、思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回。可以避免频繁创建销毁、实现重复利用。</p><p>3、好处：</p><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中的线程，不需要每次都创建）</li><li>便于线程管理<ul><li><code>corePoolSize</code>：核心池的大小</li><li><code>maximumPoolSize</code>：最大线程数</li><li><code>keepAliveTime</code>：线程没有任务时最多保持多长时间会终止</li></ul></li></ul><p>4、JDK5起提供了线程池相关的相关API：<code>ExecutorService</code>和<code>Executors</code></p><p>5、<code>ExecutorService</code>：真正的线程池接口，常见子类：<code>ThreadPoolExecutor</code></p><ul><li><p><code>void execute(Runnable command)</code>：执行任务&#x2F;命令，没有返回值，一般用来执行Runnable</p></li><li><p><code>&lt;T&gt;Future&lt;T&gt;submit(Callable&lt;T&gt;task)</code>：执行任务，又返回值，一般用来执行Callable</p></li><li><p><code>void shutdown()</code>：关闭连接池</p></li></ul><p>6、<code>Executors</code>：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1、创建服务，创建线程池</span></span><br><span class="line">        <span class="comment">//newFixedThreadPool:参数为线程池大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、关闭链接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><h2 id="函数式编程思想"><a href="#函数式编程思想" class="headerlink" title="函数式编程思想"></a>函数式编程思想</h2><p>1、面向对象思想强调“<span style="background: yellow;">必须通过对象的形式来做事情</span>”</p><p>2、函数b式思想则尽量忽略面向对象的复杂语法，<span style="background: yellow;">强调做什么，而不是以什么形式去做</span></p><h2 id="体验Lambda表达式"><a href="#体验Lambda表达式" class="headerlink" title="体验Lambda表达式"></a>体验Lambda表达式</h2><p><strong>需求：启动一个线程，在控制台输出一句话</strong></p><p>方法1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">c</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main&#123;</span><br><span class="line"> c c1 = <span class="keyword">new</span> c();</span><br><span class="line"> Thread t = <span class="keyword">new</span> Thread(c1);</span><br><span class="line"> t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>方法3：Lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式的标准格式"><a href="#Lambda表达式的标准格式" class="headerlink" title="Lambda表达式的标准格式"></a>Lambda表达式的标准格式</h2><p>匿名内部类中重写<code>run()</code>方法的代码分析：</p><ul><li>方法形式参数为空，说明调用方法时不需要传递参数</li><li>方法返回值类型为void，说明方法执行没有结果返回</li><li>方法体中的内容是我们要做的事情</li></ul><p>Lambda表达式的代码分析：</p><ul><li><pre><code>`()`：里面没有内容，看成形式参数为空</code></pre></li><li><pre><code>`-&gt;`：用剪头指向后面要做的事情</code></pre></li></ul><p>组成Lambda表达式的三要素：<span style="background: yellow;">形式参数、箭头、代码块</span></p><p>Lambda表达式的标准格式：</p><ul><li>格式：<code>(形式参数)-&gt;&#123;代码块&#125;</code></li><li><code>形式参数</code>：如果有多个参数，参数之间用逗号隔开，如果没有参数，留空即可</li><li><code>-&gt;</code>：代表动作</li><li><code>代码块</code>：代表具体要做的事情，方法体内容</li></ul><h2 id="Lambda表达式的练习"><a href="#Lambda表达式的练习" class="headerlink" title="Lambda表达式的练习"></a>Lambda表达式的练习</h2><p>1、使用前提：</p><ul><li>有一个接口</li><li>接口中有且只有一个抽象方法</li></ul><p>2、练习1：</p><ul><li>定义一个接口，里面定义一个抽象方法</li><li>定义一个测试类，在测试类中提供两个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用 useEatable</span></span><br><span class="line">        c b1 = <span class="keyword">new</span> b();</span><br><span class="line">        useEatable(b1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        useEatable(<span class="keyword">new</span> c() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        useEatable(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useEatable</span><span class="params">(c e)</span></span>&#123;</span><br><span class="line">        e.eat();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、练习2</p><ul><li>定义一个接口，里面定义一个抽象方法：<code>void fly(String s);</code></li><li>定义一个测试类，在测试类中提供两个方法<br>方法：<code>useFlyable(Flyable f)</code><br>一个方法是主方法，在主方法中调用<code>useFlyable(Flyable f)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="comment">//匿名内部类</span></span><br><span class="line">       Flyable(<span class="keyword">new</span> c() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">               System.out.println(s);</span><br><span class="line">               System.out.println(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//Lambda表达式</span></span><br><span class="line">       Flyable((String s)-&gt;&#123;</span><br><span class="line">           System.out.println(s);</span><br><span class="line">           System.out.println(<span class="number">2</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Flyable</span><span class="params">(c e)</span></span>&#123;</span><br><span class="line">       e.fly(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>4、练习3</p><ul><li>定义一个接口，里面定义一个抽象方法：<code>void add(int x,int y);</code></li><li>定义一个测试类，在测试类中提供两个方法<br>方法：<code>useAdd(c c1)</code><br>一个方法是主方法，在主方法中调用<code>useAdd(c c1)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//Lambda表达式</span></span><br><span class="line">    Flyable((<span class="keyword">int</span> x,<span class="keyword">int</span> y)-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Flyable</span><span class="params">(c e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = e.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式的省略模式"><a href="#Lambda表达式的省略模式" class="headerlink" title="Lambda表达式的省略模式"></a>Lambda表达式的省略模式</h2><p>规则：</p><ul><li>参数的类型可以省略，有多个参数的情况下不能只省略一个</li><li>如果参数只有一个，那么小括号可以省略</li><li>如果代码块只有一条语句，可以省略大括号和分号；如果有return，return省略掉</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//Lambda表达式</span></span><br><span class="line">    Flyable((<span class="keyword">int</span> x,<span class="keyword">int</span> y)-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数的类型可以省略</span></span><br><span class="line">    <span class="comment">//有多个参数的情况下不能只省略一个</span></span><br><span class="line">    Flyable((x,y)-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果参数只有一个，那么小括号可以省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果代码块只有一条语句，可以省略大括号和分号</span></span><br><span class="line">    <span class="comment">//如果有return，return省略掉</span></span><br><span class="line">    Flyable((x,y)-&gt; x+y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、使用Lambda表达式时，必须要有接口，且要求接口中只能有一个抽象方法</p><p>2、必须有上下文环境，才能推导出Lambda对应的接口</p><ul><li>根据<span style="background: yellow;">局部变量的赋值</span>得知对应的接口：<code>Runnable r = ()-&gt;System.out.println(&quot;123&quot;)</code></li><li>根据<span style="background: yellow;">调用方法的参数</span>得知对应的接口：<code>new Thread(()-&gt;System.out.println(&quot;123&quot;).start()</code></li></ul><h2 id="Lambda表达式和匿名内部类的区别"><a href="#Lambda表达式和匿名内部类的区别" class="headerlink" title="Lambda表达式和匿名内部类的区别"></a>Lambda表达式和匿名内部类的区别</h2><p>1、所需要的类型不同</p><ul><li>匿名内部类：可以是接口、抽象类、具体类</li><li>Lambda表达式：接口</li></ul><p>2、使用限制不同</p><ul><li>如果接口中只有一个抽象方法，可以使用Lambda，也可以匿名内部类</li><li>如果接口多于一个抽象方法，只能使用匿名内部类</li></ul><p>3、实现原理不同</p><ul><li>匿名内部类：编译之后产生一个单独的.class字节码文件</li><li>Lambda表达式：没有单独的字节码文件，对应的字节码文件在运行的时候动态生成</li></ul><h1 id="注解和反射"><a href="#注解和反射" class="headerlink" title="注解和反射"></a>注解和反射</h1><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h3><p>在运行状态中，对于任意一个类都能知道它的所有属性和方法，对于任意一个对象都能调用它的任意方法和属性，这种动态获取信息及调用对象方法的功能称为反射。</p><p><strong>缺点：</strong>破坏了封装性以及泛型约束。</p><p>反射是框架的核心，Spring 大量使用反射。</p><h3 id="获取反射对象"><a href="#获取反射对象" class="headerlink" title="获取反射对象"></a>获取反射对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：通过对象</span></span><br><span class="line">teacher a1 = <span class="keyword">new</span> teacher();</span><br><span class="line">student a2 = <span class="keyword">new</span> student();</span><br><span class="line">Class c1 = a1.getClass();</span><br><span class="line">Class c2 = a2.getClass();</span><br><span class="line"><span class="comment">//方式二：通过类名</span></span><br><span class="line">Class c3 = Class.forName(<span class="string">&quot;com.tao.teacher&quot;</span>);</span><br><span class="line"><span class="comment">//方式三：通过类的class属性</span></span><br><span class="line">Class c4 = teacher.class;</span><br><span class="line"><span class="comment">//方式四</span></span><br><span class="line">Class c5 = Integer.TYPE;</span><br></pre></td></tr></table></figure><h3 id="所有类型的反射对象"><a href="#所有类型的反射对象" class="headerlink" title="所有类型的反射对象"></a>所有类型的反射对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类:class java.lang.Object</span></span><br><span class="line">Class c7 = Object.class;</span><br><span class="line"><span class="comment">//接口:interface java.lang.Comparable</span></span><br><span class="line">Class c8 = Comparable.class;</span><br><span class="line"><span class="comment">//一维数组:class [Ljava.lang.String;</span></span><br><span class="line">Class c9 = String[].class;</span><br><span class="line"><span class="comment">//二维数组:class [[I</span></span><br><span class="line">Class c10 = <span class="keyword">int</span>[][].class;</span><br><span class="line"><span class="comment">//注解:interface java.lang.Override</span></span><br><span class="line">Class c11 = Override.class;</span><br><span class="line"><span class="comment">//枚举:class java.lang.annotation.ElementType</span></span><br><span class="line">Class c12 = ElementType.class;</span><br><span class="line"><span class="comment">//基本数据类型:class java.lang.Integer</span></span><br><span class="line">Class c13 = Integer.class;</span><br><span class="line"><span class="comment">//void:void</span></span><br><span class="line">Class c14 = <span class="keyword">void</span>.class;</span><br></pre></td></tr></table></figure><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p>1、<strong>加载功能</strong></p><p>把字节码文件加载到内存</p><p><code>Class.forName(&quot;&quot;)</code></p><p>2、<strong>获取功能</strong></p><ul><li><p><strong>获取成员变量</strong></p><ul><li><p><code>getField(String name)</code>：根据属性名得到属性对象，如果属性是私有的返回null</p></li><li><p><code>getFields()</code>：得到当前class里面的所有<strong>非私有</strong>的属性</p></li><li><p>【重点】<code>getDeclaredField(String name)</code>：根据属性名得到属性对象[忽略修饰符]</p></li><li><p>【重点】<code>getDeclaredFields()</code>：得到当前class里面所有属性</p></li></ul></li><li><p><strong>获取构造方法</strong></p><ul><li><code>getConstructor(Class&lt;?&gt;... parameterTypes)</code>：根据参数类型和个数得到对应公有的构造方法</li><li><code>getConstructor()</code>：得到所有的公有的构造方法</li><li>【重点】<code>getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>：根据参数得到构造器</li><li>【重点】<code>getDeclaredConstructors()</code>：得到所有构造器</li></ul></li><li><p><strong>获取成员方法</strong></p><ul><li><code>getMethod(String name, Class&lt;?&gt;... parameterTypes)</code></li><li><code>getMethods()</code></li><li>【重点】<code>getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code></li><li>【重点】<code>getDeclaredMethods()</code></li></ul></li><li><p><strong>获取类名</strong></p><ul><li><code>getName()</code>：获取类的完全限定名（包+类型）</li><li><code>getSimpleName</code>：只得到类名</li></ul></li></ul><p>3、创建</p><ul><li><code>newInstance()</code>：使用class类创建一个当前的对象，真是的类里面必须要有空的构造方法</li></ul><h4 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h4><p>1、【重点】<code>newInstance(Object ... initargs)</code>：通过得到的构造器对象创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到空的构造方法</span></span><br><span class="line">Constructor con1 = c1.getDeclaredConstructor();</span><br><span class="line"><span class="comment">//调用构造方法</span></span><br><span class="line">Object o = con1.newInstance();</span><br><span class="line">System.out.println(o);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到带参数的构造方法</span></span><br><span class="line">Constructor con2 = c1.getDeclaredConstructor(Integer.class,String.class);</span><br><span class="line">Object o1 = con2.newInstance(<span class="number">1</span>,<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">System.out.println(o1);</span><br></pre></td></tr></table></figure><p>2、<code>setAccessible</code>：是否打破访问权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor con1 = c1.getDeclaredConstructor();</span><br><span class="line"><span class="comment">//打破访问权限</span></span><br><span class="line">con1.setAccessible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>3、<code>getModifiers()</code>：得到当前构造方法的访问权限</p><ul><li>private：2</li><li>public：1</li><li>空：0</li><li>protected：4</li></ul><p>4、<code>getParameterCount()</code>：获得参数个数</p><p>5、<code>getParameterTypes()</code>：获得参数类型</p><h4 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h4><p>1、<code>getName()</code>：得到属性名</p><p>2、<code>getModifiers()</code>：得到属性访问权限</p><p>3、<code>getType()</code>：得到属性的类型</p><p>4、【重点】<code>set(Object obj, Object value)</code>：给对象的属性赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到属性</span></span><br><span class="line">Field f = c1.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">f.set(o1,<span class="number">2</span>);</span><br><span class="line">System.out.println(o1);</span><br></pre></td></tr></table></figure><p>5、<code>setAccessible</code>：是否打破访问权限</p><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><p>1、<code>getModifiers()</code>：得到属性访问权限</p><p>2、<code>getName()</code>：得到方法名</p><p>3、<code>getParameterCount()</code>：获得方法参数个数</p><p>4、<code>getParameterTypes()</code>：获得方法参数类型，返回数组</p><p>5、<code>getReturnType()</code>：得到返回值类型</p><p>6、<code>setAccessible</code>：是否打破访问权限</p><p>7、【重点】<code>invoke(Object obj, Object... args)</code>：执行obj这个对象里面的方法，参数为args</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Method m = c1.getDeclaredMethod(<span class="string">&quot;hello&quot;</span>,Integer.class);</span><br><span class="line">m.invoke(o1,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(Integer age1)</span></span>&#123;</span><br><span class="line">  System.out.println(age1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote><p>注解就是对应用程序的某一个部分的特殊说明，这个说明只针对关注这个说明的程序，如果其他程序不关注，那么这个注解对其他程序无效</p></blockquote><h3 id="注解语法"><a href="#注解语法" class="headerlink" title="注解语法"></a>注解语法</h3><p><strong>Java四大类型：类、接口、枚举、注解</strong></p><p>1、格式：<code>public @interface hello&#123;&#125;</code></p><p>2、用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@hello</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hellotest</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>作用在注解上面的注解，能够应用到其他的注解上面</p><p>元注解是一张标签，它的作用和目的就是给其他普通的标签进行解释说明</p><p>元标签包括：</p><ul><li><strong>@Retention</strong>：解释说明注解的存活时间<ul><li><code>RetentionPolicy.RUNTIME</code>：可以保留到程序运行的时候，会被加载到JVM中</li><li><code>RetentionPolicy.CLASS</code>：可以保留到编译运行的时候，不会被加载到JVM中</li><li><code>RetentionPolicy.SOURCE</code>：只在源代码阶段保留，编译时丢弃</li></ul></li><li><strong>@Documented</strong>：能够将注解中的元素包含到Javadoc中</li><li><strong>@Target</strong> ：标记这个注解作用的范围</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> hello &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ElementType.TYPE：可以加在类型上，比如类、接口、枚举</span></span><br><span class="line"><span class="comment">//ElementType.METHOD：可以加在方法上（成员方法、静态方法）</span></span><br><span class="line"><span class="comment">//ElementType.CONSTRUCTOR：可以加在构造函数上</span></span><br><span class="line"><span class="comment">//ElementType.FIELD：可以加在属性上</span></span><br><span class="line"><span class="comment">//ElementType.PARAMETER：可以加在方法的参数上</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>@Inherited</strong>：如果一个超类被它注解过的注解进行注解，那么如果它的子类没有被任何注解应用的话，这个子类就继承了超类的注解</p></li><li><p><strong>@Repeatable</strong></p></li></ul><h3 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h3><p>注解的属性也叫做成员变量，注解只有成员变量，没有方法。</p><p>注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> hello &#123;</span><br><span class="line">    <span class="comment">//语法：类型 属性名() default 默认值</span></span><br><span class="line">    <span class="comment">//不加default就必须给值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;zhang&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@hello(age = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hellotest</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>注：value属性可以省略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> hello &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@hello(&quot;aa&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hellotest</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="预置的注解"><a href="#预置的注解" class="headerlink" title="预置的注解"></a>预置的注解</h3><p>1、<code>@Deprecated</code>：当前类，方法，属性已经不推荐使用</p><p>2、<code>@Override</code>：提示子类要重写父类的方法</p><p>3、<code>@SuppressWarnings</code>：去除编辑器相关的警告</p><p>4、<code>@FunctionalInterface</code>：主要是标记这个类可以使用Lambda表达式，不加也可以使用Lambda</p><h3 id="注解的解析"><a href="#注解的解析" class="headerlink" title="注解的解析"></a>注解的解析</h3><p><strong>离不开反射</strong></p><p><strong>1、得到类、属性、方法、参数等上面的注解，返回注解对象</strong></p><p><code>&lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationClass) &#123;&#125;</code></p><p><code>Annotation[] getAnnotations() &#123;&#125;</code></p><p><strong>2、判断注解</strong></p><p>注解通过反射获取，首先可以通过Class对象的<code>isAnnotationPresent()</code>方法判断是否应用了某个注解</p><p><code> boolean isAnnotationPresent() &#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hellotest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1、解析helloclass</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">        <span class="comment">//判断是否有注解</span></span><br><span class="line">        System.out.println(personClass.isAnnotationPresent(helloclass.class));</span><br><span class="line">        <span class="comment">//取出helloclass注解对象</span></span><br><span class="line">        helloclass a1 = personClass.getAnnotation(helloclass.class);</span><br><span class="line">        System.out.println(a1.msg()+<span class="string">&quot;\t&quot;</span>+a1.value());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、解析hello</span></span><br><span class="line">        Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field:declaredFields)&#123;</span><br><span class="line">            <span class="comment">//判断是否有注解</span></span><br><span class="line">            System.out.println(field.isAnnotationPresent(hello.class));</span><br><span class="line">            <span class="keyword">if</span>(field.isAnnotationPresent(hello.class)==<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(field.getAnnotation(hello.class).value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、解析方法</span></span><br><span class="line">        Method[] declaredMethods = personClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m:declaredMethods)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> a = m.isAnnotationPresent(hellomethod.class);</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            <span class="keyword">if</span> (a==<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.println(m.getAnnotation(hellomethod.class).value());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4、解析heloparam</span></span><br><span class="line">            <span class="keyword">if</span>(m.getParameterCount()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//为什么是二维数组？因为一个方法可能有多个参数，一个参数可能有多个注解</span></span><br><span class="line">                Annotation[][] parameterAnnotations = m.getParameterAnnotations();</span><br><span class="line">                <span class="keyword">for</span> (Annotation[] p:parameterAnnotations)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (Annotation p2:p)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> helloParam)&#123;</span><br><span class="line">                            System.out.println(((helloParam) p2).value());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@helloclass(value = &quot;类上的注解value&quot;,msg=&quot;类上的注解msg&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@hello(&quot;属性上的注解value&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@hellomethod(&quot;方法上的注解value&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(<span class="meta">@helloParam(&quot;参数上的注解value&quot;)</span> String food)</span></span>&#123;</span><br><span class="line">        System.out.println(food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="类加载的三个阶段"><a href="#类加载的三个阶段" class="headerlink" title="类加载的三个阶段"></a>类加载的三个阶段</h3><p>1、<strong>源代码：</strong>经过编译器编译后生成的.class字节码文件</p><p>2、<strong>类加载：</strong>class字节码文件经类加载器classloader加载到虚拟机内存，类加载器解析class文件生成Class类型的对象</p><p>3、<strong>运行时：</strong>newInstance()根据java类型生成对象</p><img src="https://img-blog.csdnimg.cn/20210321163552609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="类加载器-1"><a href="#类加载器-1" class="headerlink" title="类加载器"></a>类加载器</h3><p><strong>1、类加载器作用</strong></p><p>用来加载字节码文件</p><p>java.lang.ClassLoader类的基本职责就是<strong>根据一个指定类的名称，找到或者生成其对应的字节代码，然后从这些字节代码定义出一个java类</strong>，即<strong>java.lang.Class的一个实例</strong></p><p><strong>2、类加载器的获得方法</strong></p><ul><li>Class：<code>getClassLoader()</code></li><li>ClassLoader类：<code>ClassLoader.getSystemClassLoader()</code></li></ul><p><strong>3、类加载器重要方法</strong></p><img src="https://img-blog.csdnimg.cn/20210321164245304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><ul><li>装载：查找并加载二进制数据</li><li>链接<ul><li>验证：确保被加载类信息符合JVM规范，没有安全问题</li><li>准备：为类的静态变量分配内存，并将其初始化为默认值</li><li>解析：把虚拟机常量池的符合引用转换为直接引用</li></ul></li><li>初始化：为类的静态变量赋予正确的初始值</li></ul><h3 id="类初始化的步骤"><a href="#类初始化的步骤" class="headerlink" title="类初始化的步骤"></a>类初始化的步骤</h3><p>1、加载类信息</p><p>在实例化对象之前，类的装载器会找到需要加载的类class文件，进行类的加载（有父类的会先加载父类），一旦加载到最根上的基类，就会对基类的静态变量和静态初始化块进行初始化；</p><p>2、当所有类信息加载完毕，就会执行main（）主方法，然后执行new class（），对类进行实例化，首先对变量和、初始化块以及类的构造函数进行初始化（有父类的首先会对父类进行初始化，多个父类递归的方式）</p><p><span style="background: yellow;">（静态变量、静态初始化块：决于它们在类中出现的先后顺序）&gt;（变量、初始化块：决于它们在类中出现的先后顺序）&gt; 构造器</span></p><p>有父类的加载顺序：</p><ul><li>父类–静态变量</li><li>父类–静态初始化块</li><li>子类–静态变量</li><li>子类–静态初始化块</li><li>子类main方法</li><li>父类–变量</li><li>父类–初始化块</li><li>父类–构造器</li><li>子类–变量</li><li>子类–初始化块</li><li>子类–构造器</li></ul><h3 id="JVM中类加载器的层次结构"><a href="#JVM中类加载器的层次结构" class="headerlink" title="JVM中类加载器的层次结构"></a>JVM中类加载器的层次结构</h3><p><strong>1、根类加载器</strong></p><p>用来加载Java的核心库（<code>rt.jar</code>），用原生C++代码实现，并不继承自<code>java.lang.ClassLoader</code></p><p>加载扩展类和应用程序类加载器，并指定他们的父类加载器，在java中获取不到</p><p><strong>2、扩展类加载器</strong></p><p>用来加载java的扩展库（<code>jre/.jar</code>），java虚拟机的实现会提供一个扩展库目录，该类加载器在此目录里面查找并加载java类</p><p><strong>3、系统类加载器</strong></p><p>根据Java应用的类路径加载Java类，一般来说Java的类都是由它加载的</p><p><strong>4、自定义加载器</strong></p><p>除了系统提供的类加载器意外，开发人员继承<code>java.lang.ClassLoader</code>实现自己的类加载器</p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p><p><strong>好处：保护java核心库的安全</strong></p><img src="https://img-blog.csdnimg.cn/20210321170427536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>为什么叫双亲委派？</strong></p><p>双：有两个父模型</p><p>亲：因为java只支持单继承，所以亲指亲人</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动拆箱和自动装箱</title>
      <link href="/2022/01/06/%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1/"/>
      <url>/2022/01/06/%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1/</url>
      
        <content type="html"><![CDATA[<p>1、概念：</p><ul><li>自动装箱：自动将基本数据类型转换为包装器类型</li><li>拆箱：自动将包装器类型转换为基本数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">10</span>;<span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">int</span> n = i;<span class="comment">//拆箱</span></span><br><span class="line">i += <span class="number">200</span>;<span class="comment">//i=i+200; i+200是自动拆箱,i=i+200时自动装箱</span></span><br></pre></td></tr></table></figure><p>2、如何实现？</p><ul><li>装箱：调用包装器的<code>valueOf</code>方法</li><li>拆箱：调用包装器的<code>xxxValue</code>方法</li></ul><p><span style="background: yellow;">使用包装类类型时，如果做操作，最好先判断是否为null</span></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><span style="background: yellow;">1、下面这个代码的输出结果</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer i1 = <span class="number">100</span>;</span><br><span class="line">        Integer i2 = <span class="number">100</span>;</span><br><span class="line">        Integer i3 = <span class="number">200</span>;</span><br><span class="line">        Integer i4 = <span class="number">200</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>原因：查看Integer的ValueOf方法可以发现，在创建Integer对象时，如果数值在[-128,127]之间，便返回指向InetegrCache.cache中已经存在的对象的引用；否则创建新的对象。</p><p><span style="background: yellow;">2、下面这个代码的输出结果</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Double i1 = <span class="number">100.0</span>;</span><br><span class="line">        Double i2 = <span class="number">100.0</span>;</span><br><span class="line">        Double i3 = <span class="number">200.0</span>;</span><br><span class="line">        Double i4 = <span class="number">200.0</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>原因：查看Double的valueOf方法，可以发现，每次装箱都是创建一个不同的对象</p><p><span style="background: yellow;">3、下面这个代码的输出结果</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        Boolean i1 = <span class="keyword">false</span>;</span><br><span class="line">        Boolean i2 = <span class="keyword">false</span>;</span><br><span class="line">        Boolean i3 = <span class="keyword">true</span>;</span><br><span class="line">        Boolean i4 = <span class="keyword">true</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(i1==i2);</span><br><span class="line">        System.out.println(i3==i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>原因：在Boolean类的valueOf方法中，会返回一个静态成员（TRUE和FALSE），因此结果都是ture</p><p><span style="background: yellow;">4、Integer i &#x3D; new Integer(xxx)和Integer i &#x3D;xxx;这两种方式的区别</span></p><p>答：<br>1、 第一种方式不会触发自动装箱，第二张方式会触发<br>2、第二种方式的执行效率和资源占用在一般情况下要优于第一种方式</p><p><span style="background: yellow;">5、下面这个代码的输出结果</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="number">1</span>;</span><br><span class="line">        Integer b = <span class="number">2</span>;</span><br><span class="line">        Integer c = <span class="number">3</span>;</span><br><span class="line">        Integer d = <span class="number">3</span>;</span><br><span class="line">        Integer e = <span class="number">321</span>;</span><br><span class="line">        Integer f = <span class="number">321</span>;</span><br><span class="line">        Long g = <span class="number">3L</span>;</span><br><span class="line">        Long h = <span class="number">2L</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(c==d);</span><br><span class="line">        System.out.println(e==f);</span><br><span class="line">        System.out.println(c==(a+b));</span><br><span class="line">        System.out.println(c.equals(a+b));</span><br><span class="line">        System.out.println(g==(a+b));</span><br><span class="line">        System.out.println(g.equals(a+b));</span><br><span class="line">        System.out.println(g.equals(a+h));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c==d <span class="keyword">true</span></span><br><span class="line">e==f <span class="keyword">false</span> </span><br><span class="line">c==(a+b) <span class="keyword">true</span> <span class="comment">//触发自动拆箱，比较数值是否相等</span></span><br><span class="line">c.equals(a+b) <span class="keyword">true</span> <span class="comment">//先触发自动拆箱（a+b），再触发自动装箱（对a+b的数值进行装箱），再进行equals比较</span></span><br><span class="line">g==(a+b) <span class="keyword">true</span> </span><br><span class="line">g.equals(a+b) <span class="keyword">false</span></span><br><span class="line">g.equals(a+h) <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>原因：<br><code>==</code>：</p><ul><li>当<code>==</code>运算符的两个操作数都是包装器类型的引用时，则比较两边是不是同一个对象</li><li>当其中一个操作数为表达式（包含算术运算），则比较数值</li></ul><p><code>equals</code>：</p><ul><li>并不会进行类型转换</li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><p>valueOf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        ................</span><br><span class="line">        high = h;</span><br><span class="line">        ................</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Short"><a href="#Short" class="headerlink" title="Short"></a>Short</h3><p>valueOf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title">valueOf</span><span class="params">(<span class="keyword">short</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">int</span> sAsInt = s;</span><br><span class="line">    <span class="keyword">if</span> (sAsInt &gt;= -<span class="number">128</span> &amp;&amp; sAsInt &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Short(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Byte <span class="title">valueOf</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> ByteCache.cache[(<span class="keyword">int</span>)b + offset];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteCache</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ByteCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Byte cache[] = <span class="keyword">new</span> Byte[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">                cache[i] = <span class="keyword">new</span> Byte((<span class="keyword">byte</span>)(i - <span class="number">128</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Character"><a href="#Character" class="headerlink" title="Character"></a>Character</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> CharacterCache.cache[(<span class="keyword">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Character(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CharacterCache</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> Character[<span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> Character((<span class="keyword">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Long"><a href="#Long" class="headerlink" title="Long"></a>Long</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="keyword">int</span>)l + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Long(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Double(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Float <span class="title">valueOf</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Float(f);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java值传递</title>
      <link href="/2022/01/06/Java%E6%98%AF%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84%E8%BF%98%E6%98%AF%E6%8C%89%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E7%9A%84%EF%BC%9F/"/>
      <url>/2022/01/06/Java%E6%98%AF%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92%E7%9A%84%E8%BF%98%E6%98%AF%E6%8C%89%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>Java：<span style="background: yellow;">按值传递</span></p><p>方法的参数传递包括<span style="background: yellow;">基本数据类型的传递</span>和<span style="background: yellow;">引用类型的传递</span></p><h3 id="1、基本数据类型的传递"><a href="#1、基本数据类型的传递" class="headerlink" title="1、基本数据类型的传递"></a>1、基本数据类型的传递</h3><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">test(a,b);</span><br><span class="line"></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> aa,<span class="keyword">int</span> bb)</span></span>&#123;</span><br><span class="line">aa=bb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>分析：</p><p>进入test，aa初始化为a的一个副本，bb初始化为b的一个副本，在test方法里，aa被赋值为bb，那么aa就等于2，bb等于2；方法结束后，aa和bb作为参数变量也被一起丢弃了，因此最后a和b的值并不会发生改变</p><h3 id="2、引用数据类型的传递"><a href="#2、引用数据类型的传递" class="headerlink" title="2、引用数据类型的传递"></a>2、引用数据类型的传递</h3><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">person a = <span class="keyword">new</span> person(<span class="number">1</span>);</span><br><span class="line">test(a);</span><br><span class="line">System.out.println(a.age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(person x)</span></span>&#123;</span><br><span class="line">x.age = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>分析：</p><p>进入test方法后，x初始化为a的一个副本，a其实就是一个对象引用，真正的对象存储在堆内存中，在方法内，该对象的age被置为10，那么结束方法后这个x不再被使用，但是a还是指向那个堆内存中的对象，因此a的age为10</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</p><p>2、一个方法可以改变一个对象参数的状态。</p><p>3、一个方法不能让对象参数引用一个新的对象。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>==、equals、hashCode()</title>
      <link href="/2022/01/06/==%E3%80%81equals%E3%80%81hashCode()%20/"/>
      <url>/2022/01/06/==%E3%80%81equals%E3%80%81hashCode()%20/</url>
      
        <content type="html"><![CDATA[<h1 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h1><p>1、equals() 的作用是 <span style="background: yellow;">用来判断两个对象是否相等</span>。</p><p>2、equals() 定义在JDK的Object.java中。通过判断两个对象的地址是否相等(即，是否是同一个对象)来区分它们是否相等。</p><p>3、Java对equals（）的要求：</p><ul><li>对称性：如果<code>x.equals(y)</code>为<code>true</code>，那么<code>y.equals(x)</code>也为<code>true</code></li><li>反射性：<code>x.equals(x)</code>为<code>true</code></li><li>类推性：<code>x.equals(y)</code>为<code>true</code>，<code>y.equals(z)</code>为<code>true</code>，则<code>x.equals(z)</code>为<code>true</code></li><li>一致性：如果<code>x.equals(y)</code>为<code>true</code>，只要x和y的内容不变，不管重复多少次都是<code>true</code></li><li>非空性：<code>x.equals(null)</code>为<code>false</code>，<code>x.equals(不同类型的对象)</code>为<code>false</code></li></ul><h1 id="x3D-x3D-和-equals"><a href="#x3D-x3D-和-equals" class="headerlink" title="&#x3D;&#x3D; 和 equals()"></a>&#x3D;&#x3D; 和 equals()</h1><p>面试官：请问 equals() 和 “&#x3D;&#x3D;” 有什么区别？</p><p>应聘者：</p><ul><li><p>equals()方法用来比较的是两个对象的内容是否相等，由于所有的类都是继承自<code>java.lang.Object</code>类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object中的equals方法返回的却是&#x3D;&#x3D;的判断；</p></li><li><p>“&#x3D;&#x3D;” 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。</p></li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;zs&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">String s4 = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">System.out.println(s3 == s4); <span class="comment">//true，常量池地址</span></span><br><span class="line">System.out.println(s3 == s1); <span class="comment">//false，s1指向堆，s3指向常量池</span></span><br><span class="line"></span><br><span class="line">String s5 = <span class="string">&quot;zszs&quot;</span>;</span><br><span class="line">String s6 = s3+s4;</span><br><span class="line">System.out.println(s5 == s6); <span class="comment">//false，s3+s4构建新的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String s7 = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> String s8 = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">String s9 = s7+s8;</span><br><span class="line">System.out.println(s5 == s9); <span class="comment">//true，final关键字，表示是常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String s10 = s3+s4;</span><br><span class="line">System.out.println(s5 == s10); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="hashCode-的作用"><a href="#hashCode-的作用" class="headerlink" title="hashCode()的作用"></a>hashCode()的作用</h1><p>1、hashCode() 的作用是获取<span style="background: yellow;">哈希码</span>，也称为<span style="background: yellow;">散列码</span>；它实际上是返回一个<span style="background: yellow;">int整数</span>。这个哈希码的作用是<span style="background: yellow;">确定该对象在哈希表中的索引位置</span>。</p><p>2、hashCode() 定义在JDK的Object.java中，这就意味着<span style="background: yellow;">Java中的任何类都包含有hashCode() 函数</span>。</p><p>虽然，每个Java类都包含hashCode() 函数。但是，<strong>仅仅当创建并某个“类的散列表”(关于“散列表”见下面说明)时，该类的hashCode() 才有用</strong>(作用：确定该类的每一个对象在散列表中的位置；其它情况下(例如，创建类的单个对象，或者创建类的对象数组等等)，类的hashCode() 没有作用。</p><p>上面的<span style="background: yellow;">散列表</span>，指的是：<strong>Java集合中本质是散列表的类</strong>，如HashMap，Hashtable，HashSet。</p><blockquote><p> 也就是说：hashCode() 在散列表中才有用，在其它情况下没用。在散列表中hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p></blockquote><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><h2 id="散列码"><a href="#散列码" class="headerlink" title="散列码"></a>散列码</h2><blockquote><p>我们都知道，散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！<br>散列表的本质是通过<span style="background: yellow;">数组</span>实现的。当我们要获取散列表中的某个“值”时，实际上是要获取数组中的某个位置的元素。而数组的位置，就是通过“键”来获取的；更进一步说，数组的位置，是通过“键”对应的散列码计算得到的。</p></blockquote><p>下面，我们以HashSet为例，来深入说明hashCode()的作用。</p><p>假设，HashSet中已经有1000个元素。当插入第1001个元素时，需要怎么处理？因为HashSet是Set集合，它允许有重复元素。</p><p>“将第1001个元素逐个的和前面1000个元素进行比较”？显然，这个效率是相等低下的。散列表很好的解决了这个问题，它根据元素的散列码计算出元素在散列表中的位置，然后将元素插入该位置即可。对于相同的元素，自然是只保存了一个。</p><p>由此可知，<span style="background: yellow;">若两个元素相等，它们的散列码一定相等；但反过来确不一定</span>。在散列表中，</p><ul><li>如果两个对象相等，那么它们的hashCode()值一定要相同；</li><li>如果两个对象hashCode()相等，它们并不一定相等。<br>注意：这是在散列表中的情况。在非散列表中一定如此！</li></ul><h1 id="hashCode-和equals"><a href="#hashCode-和equals" class="headerlink" title="hashCode()和equals()"></a>hashCode()和equals()</h1><p>我们以“类的用途”来将“hashCode() 和 equals()的关系”分2种情况来说明。</p><h2 id="不会创建“类对应的散列表”"><a href="#不会创建“类对应的散列表”" class="headerlink" title="不会创建“类对应的散列表”"></a>不会创建“类对应的散列表”</h2><p>这里所说的“不会创建类对应的散列表”是说：我们不会在HashSet, Hashtable, HashMap等等这些本质是散列表的数据结构中，用到该类。例如，不会创建该类的HashSet集合。</p><p>在这种情况下，<span style="background: yellow;">该类的“hashCode() 和 equals() ”没有半毛钱关系的！</span></p><p>这种情况下，equals() 用来比较该类的两个对象是否相等。而hashCode() 则根本没有任何作用，所以，不用理会hashCode()。</p><p>下面，我们通过示例查看类的两个对象相等 以及 不等时hashCode()的取值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalHashCodeTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建2个相同内容的Person对象，</span></span><br><span class="line">        <span class="comment">// 再用equals比较它们是否相等</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;aaa&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;p1.equals(p2) : %s; p1(%d) p2(%d)\n&quot;</span>, p1.equals(p2), p1.hashCode(), p2.hashCode());</span><br><span class="line">        System.out.printf(<span class="string">&quot;p1.equals(p3) : %s; p1(%d) p3(%d)\n&quot;</span>, p1.equals(p3), p1.hashCode(), p3.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@desc</span> 覆盖equals方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果是同一个对象返回true，反之返回false</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span> == obj)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否类型相同</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.getClass() != obj.getClass())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Person person = (Person)obj;</span><br><span class="line">            <span class="keyword">return</span> name.equals(person.name) &amp;&amp; age==person.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p1.equals(p2) : <span class="keyword">true</span>; p1(<span class="number">1169863946</span>) p2(<span class="number">1901116749</span>)</span><br><span class="line">p1.equals(p3) : <span class="keyword">false</span>; p1(<span class="number">1169863946</span>) p3(<span class="number">2131949076</span>)</span><br></pre></td></tr></table></figure><p>从结果也可以看出：p1和p2相等的情况下，hashCode()也不一定相等。</p><h2 id="会创建“类对应的散列表”"><a href="#会创建“类对应的散列表”" class="headerlink" title="会创建“类对应的散列表”"></a>会创建“类对应的散列表”</h2><p>这里所说的“会创建类对应的散列表”是说：我们会在HashSet, Hashtable, HashMap等等这些本质是散列表的数据结构中，用到该类。例如，会创建该类的HashSet集合。</p><p>在这种情况下，该类的“hashCode() 和 equals() ”是有关系的：</p><ul><li>如果两个对象相等，那么它们的hashCode()值一定相同。<br>        这里的相等是指，通过equals()比较两个对象时返回true。</li><li>如果两个对象hashCode()相等，它们并不一定相等。<br>         因为在散列表中，hashCode()相等，即两个键值对的哈希值相等。然而哈希值相等，并不一定能得出键值对相等。补充说一句：“两个不同的键值对，哈希值相等”，这就是哈希冲突。</li></ul><p>此外，在这种情况下。若要判断两个对象是否相等，除了要覆盖equals()之外，也要覆盖hashCode()函数。否则，equals()无效。</p><p><strong>例如，创建Person类的HashSet集合，必须同时覆盖Person类的equals() 和 hashCode()方法。</strong></p><p><span style="background: yellow;">Test1:</span></p><p>如果单单只是覆盖equals()方法，我们会发现，equals()方法没有达到我们想要的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConflictHashCodeTest1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建Person对象，</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;aaa&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 新建HashSet对象</span></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        set.add(p3);</span><br><span class="line">        <span class="comment">// 比较p1 和 p2， 并打印它们的hashCode()</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;p1.equals(p2) : %s; p1(%d) p2(%d)\n&quot;</span>, p1.equals(p2), p1.hashCode(), p2.hashCode());</span><br><span class="line">        <span class="comment">// 打印set</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;set:%s\n&quot;</span>, set);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@desc</span> 覆盖equals方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果是同一个对象返回true，反之返回false</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span> == obj)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否类型相同</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.getClass() != obj.getClass())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Person person = (Person)obj;</span><br><span class="line">            <span class="keyword">return</span> name.equals(person.name) &amp;&amp; age==person.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p1.equals(p2) : <span class="keyword">true</span>; p1(<span class="number">1169863946</span>) p2(<span class="number">1690552137</span>)</span><br><span class="line">set:[(eee, <span class="number">100</span>), (eee, <span class="number">100</span>), (aaa, <span class="number">200</span>)]</span><br></pre></td></tr></table></figure><p>我们重写了Person的equals()。但是，很奇怪的发现：HashSet中仍然有重复元素：p1 和 p2。为什么会出现这种情况呢？</p><p>这是因为虽然p1 和 p2的内容相等，但是它们的hashCode()不等；所以，HashSet在添加p1和p2的时候，认为它们不相等。</p><p><span style="background: yellow;">Test2:</span><br>下面，我们同时覆盖equals() 和 hashCode()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConflictHashCodeTest2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建Person对象，</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;aaa&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        Person p4 = <span class="keyword">new</span> Person(<span class="string">&quot;EEE&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 新建HashSet对象</span></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        set.add(p3);</span><br><span class="line">        <span class="comment">// 比较p1 和 p2， 并打印它们的hashCode()</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;p1.equals(p2) : %s; p1(%d) p2(%d)\n&quot;</span>, p1.equals(p2), p1.hashCode(), p2.hashCode());</span><br><span class="line">        <span class="comment">// 比较p1 和 p4， 并打印它们的hashCode()</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;p1.equals(p4) : %s; p1(%d) p4(%d)\n&quot;</span>, p1.equals(p4), p1.hashCode(), p4.hashCode());</span><br><span class="line">        <span class="comment">// 打印set</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;set:%s\n&quot;</span>, set);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@desc</span>重写hashCode</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> nameHash =  name.toUpperCase().hashCode();</span><br><span class="line">            <span class="keyword">return</span> nameHash ^ age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@desc</span> 覆盖equals方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果是同一个对象返回true，反之返回false</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span> == obj)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否类型相同</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.getClass() != obj.getClass())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Person person = (Person)obj;</span><br><span class="line">            <span class="keyword">return</span> name.equals(person.name) &amp;&amp; age==person.age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p1.equals(p2) : <span class="keyword">true</span>; p1(<span class="number">68545</span>) p2(<span class="number">68545</span>)</span><br><span class="line">p1.equals(p4) : <span class="keyword">false</span>; p1(<span class="number">68545</span>) p4(<span class="number">68545</span>)</span><br><span class="line">set:[aaa - <span class="number">200</span>, eee - <span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>这下，equals()生效了，HashSet中没有重复元素。</p><ul><li>比较p1和p2，我们发现：它们的hashCode()相等，通过equals()比较它们也返回true。所以，p1和p2被视为相等。</li><li>比较p1和p4，我们发现：虽然它们的hashCode()相等；但是，通过equals()比较它们返回false。所以，p1和p4被视为不相等。</li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><em><strong>1、为什么要有 hashCode？</strong></em></p><p>我们以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode？</p><p>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals() 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><hr/><p><em><strong>2、为什么重写 equals 时必须重写 hashCode 方法？</strong></em></p><p>通俗的讲，注释中第二点和第三点的含义就是equals（）和hashcode（）方法要保持相当程度的一致性，<strong>equals（）方法相等，hashcode（）必须相等；反之，equals方法不相等，hashcode可以相等，可以不相等</strong>。但是两者的一致有利于提高哈希表的性能。</p><p>equals（）相等的的两个等价对象因为hashCode不同，所以在hashmap中的table数组的下标不同，从而这两个对象就会同时存在于集合中，在调用hashmap集合中的方法时就会出现逻辑的错误，也就是，你的equals（）方法也“白白”重写了。</p><p>因此，对于“为什么重写equals()就一定要重写hashCode()方法？”这个问题应该是有个前提，就是你需要用到HashMap,HashSet等Java集合。用不到哈希表的话，其实仅仅重写equals()方法也可以吧。而工作中的场景是常常用到Java集合，所以Java官方建议重写equals()就一定要重写hashCode()方法。</p><hr/><p><em><strong>3、为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？</strong></em></p><p>因为 hashCode() 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode。</p><p>我们刚刚也提到了 HashSet,如果 HashSet 在对比的时候，同样的 hashcode 有多个对象，它会使用 equals() 来判断是否真的相同。也就是说 hashcode 只是用来缩小查找成本。</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><p>final修饰类，表示类不可变，不可继承，比如：String</p><p>final修饰方法，表示方法不可以重写</p><p>final修饰变量，这个变量就是常量</p><p>注意：</p><ul><li><p>修饰的是基本数据类型，这个值本身不可修改</p></li><li><p>修饰的引用类型，引用的<span style="background: yellow;">指向不可以更改</span>，内容可以更改<br>下面这个代码是<span style="background: yellow;">可以</span>的：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Student student = <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">&quot;Andy&quot;</span>);</span><br><span class="line">student.setAge(<span class="number">18</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static关键字</title>
      <link href="/2022/01/06/static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2022/01/06/static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h1><p>如果将一个字段定义为static，那么每个类都只有一个这样的字段。而对于非静态的实例字段，每一个对象都有自己的一个副本。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextID = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个Employee对象都有一个自己的ID字段，但这个类的所有实例将共享一个nextID字段。</p><p>如果有100个Employee对象，则有100个实例字段id，分别对应每一个对象；但是，只有一个nextID字段。即使没有Employee对象，静态字段nextID也存在。它属于类，不属于任何一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee.nextID</span><br></pre></td></tr></table></figure><h1 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h1><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序中，可以使用<code>Math.PI</code>来访问这个常量</p><p>如果省略关键字static，PI就变成了一个实例字段，就需要通过类的一个对象来访问PI</p><p>咱们多次使用过<code>System.out</code>这个静态常量，它在System中的声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">System</span></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PrintStream out = ....;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><p>1 、静态方法是不在对象上执行的方法</p><p>2、静态方法没有this参数的方法</p><p>3、<span style="background: yellow;">静态方法不能访问实例字段，但是可以访问静态字段</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNextID</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> nextID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以这样调用这个方法：<code>Employee.getNextID();</code></p><p>4、<span style="background: yellow;">可以使用对象调用静态方法，但是不建议使用</span></p><p>5、下面两种状况可以使用静态方法：</p><ul><li>方法不需要访问对象状态，因为它所需要的所有参数都通过显式参数提供</li><li>方法之需要访问类的静态字段</li></ul><h1 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h1><p>static修饰的类<span style="background: yellow;">只能为内部类</span>，普通类无法用static关键字修饰。static修饰的内部类相当于一个普通的类，访问方式为（new 外部类名.内部类的方法() ）</p><h1 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h1><p>静态方法还有一种常见的用途。类似<code>LocalDate</code>和<code>NumberFormat</code>的类使用静态工厂方法来构造对象。</p><p>为什么不使用构造器呢？</p><ul><li>无法命名，构造器的名字必须和类名相同</li><li>使用构造器时，无法改变所构造对象的类型。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面对对象</title>
      <link href="/2022/01/05/Java%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/01/05/Java%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面对对象基础"><a href="#面对对象基础" class="headerlink" title="面对对象基础"></a>面对对象基础</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>1、什么是 <em><strong>面向对象</strong></em> ？</p><p>2、什么是 <em><strong>类</strong></em> ？</p><p>类是对现实生活中一类具有共同属性和行为的事物的抽象</p><p>类的特点</p><ul><li>类是对象的数据类型</li><li>类是具有相同属性和行为的一组对象的集合</li></ul><p>3、什么是 <em><strong>属性</strong></em> ？</p><p>属性：对象具有的各种特征，每个对象的每个属性都拥有特定的值</p><p>4、什么是 <em><strong>对象的行为</strong></em> ？</p><p>行为：对象能够执行的操作</p><p>5、 <em><strong>类和对象的关系</strong></em> ：</p><ul><li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象是能够看得到摸得着的真实存在的实体</li><li><span style="background: yellow;">类是对象的抽象，对象是类的实体</span></li></ul><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><p>1、类的重要性：<span style="background: yellow;">是Java程序的基本组成单位</span></p><p>2、类是什么：是对现实生活中一类具有共同属性和行为的事物的抽象</p><p>3、类的组成：属性和行为</p><p>4、格式：定义类+类的成员变量+类的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h3><p>1、创建对象：<code>类名 对象名 = new 类名()</code></p><p>2、使用对象：</p><ul><li><code>对象.变量名()</code></li><li><code>对象.方法名()</code></li></ul><h2 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h2><h3 id="单个对象"><a href="#单个对象" class="headerlink" title="单个对象"></a>单个对象</h3><p>1、创建对象</p><img src="https://img-blog.csdnimg.cn/20210310200651959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" />2、取值<img src="https://img-blog.csdnimg.cn/20210310200743151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>3、赋值<br><img src="https://img-blog.csdnimg.cn/20210310200817531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /></p><h3 id="多个对象"><a href="#多个对象" class="headerlink" title="多个对象"></a>多个对象</h3><img src="https://img-blog.csdnimg.cn/20210310201312198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="多个对象指向相同"><a href="#多个对象指向相同" class="headerlink" title="多个对象指向相同"></a>多个对象指向相同</h3><img src="https://img-blog.csdnimg.cn/20210310201444750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2><p>1、成员变量：类中方法外的变量</p><p>2、局部变量：方法中的变量</p><p>3、区别：</p><ul><li><span style="background: yellow;">位置不同</span>：成员变量在类中方法外，局部变量在方法内或者方法声明上</li><li><span style="background: yellow;">内存中的位置不同</span>：成员变量在堆内存，局部变量在栈内存</li><li><span style="background: yellow;">生命周期不同</span>：成员变量随着对象，局部变量随着方法的调用</li><li><span style="background: yellow;">初始化值不同</span>：成员变量有初始化值，局部变量没有初始化值，必须先定义后使用</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h3><ul><li>是一个<span style="background: yellow;">权限修饰符</span></li><li>可以<span style="background: yellow;">修饰成员（成员变量和成员方法）</span></li><li>作用是<span style="background: yellow;">保护成员不被别的类使用</span>，被private修饰的成员只能在本类中使用</li></ul><p>1、针对被<code>private</code>修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><ul><li>提供<code>get变量名()</code>方法，用于获取成员变量的值，方法用public修饰</li><li>提供<code>set变量名()</code>方法，用于设置成员变量的值，方法用public修饰</li></ul><p>2、private关键字的使用</p><ul><li>把成员变量用<code>private</code>修饰</li><li>提供对应的<code>get/set</code>方法</li></ul><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><ul><li>this修饰的变量用于<span style="background: yellow;">指代成员变量</span><br>在方法中，形参如果与成员变量同名，不带this修饰的变量指的是形参；如果形参没有与成员变量同名，那么就指的是成员变量</li><li>什么时候使用this？<span style="background: yellow;">解决局部变量隐藏成员变量</span></li><li>this：代表所在<span style="background: yellow;">类的对象引用</span><br>记住：方法被哪个对象调用，this就代表哪个对象</li></ul><h4 id="this内存原理"><a href="#this内存原理" class="headerlink" title="this内存原理"></a>this内存原理</h4><img src="https://img-blog.csdnimg.cn/20210310203342994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" />方法被哪个对象调用，this代表的是哪个对象<h3 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h3><p>1、封装：是面向对象三大特征之一（封装、继承、多态）</p><ul><li>封装是面向对象编程语言对客观世界的模拟，<span style="background: yellow;">客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作</span></li></ul><p>2、封装的原则：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问，成员变量<code>private</code>，提供<code>get/set</code>方法</p><p>3、封装的好处：</p><ul><li>提高了代码的安全性</li><li>把代码用方法进行封装，提高了代码的复用性</li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>1、构造方法是一种特殊的方法</p><ul><li>作用：创建对象</li><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">修饰符 类名(参数)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>功能：主要是完成对象数据的初始化</li></ul><p>2、注意事项</p><ul><li>构造方法的创建<br>如果没有定义构造方法，系统会给出一个默认的无参数构造方法<br>如果定义了构造方法，系统不会给出默认的无参数构造方法</li><li>构造方法的重载<br>如果自定义了带参构造方法，还要使用无参构造方法，就必须再写一个无参数构造方法</li></ul><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><ul><li>使用<code>private</code>修饰</li></ul><p>2、构造方法</p><ul><li>提供一个无参构造方法</li><li>提供一个带多个参数的构造方法</li></ul><p>3、成员方法</p><ul><li>提供每一个成员变量对应的<code>set/get()</code></li><li>提供一个显示对象信息的<code>show()</code></li></ul><p>4、创建对象并为成员变量赋值的两种方式</p><ul><li>无参数构造方法创建对象后使用<code>set()</code>赋值</li><li>使用带参构造方法直接创建带有属性值的对象</li></ul><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>1、String概述：</p><ul><li>String类在<code>java.lang</code>包下，所以使用的时候不需要导包</li><li>String类表示字符串，Java程序中所有的字符串文字（例如”abc”）都被实现为此类的实例，也就是说，<span style="background: yellow;">Java程序中所有双引号字符串，都是String类的对象</span></li></ul><h3 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h3><ul><li><span style="background: yellow;">字符串不可变</span>，它们的值在创建后不可以被更改</li><li>虽然String值不可变，但是可以被共享</li><li>字符串效果上相当于字符数组（char[]），但是底层原理是<span style="background: yellow;">字节数组</span>(byte[])，<span style="background: yellow;">jdk8及以前是字符数组，jdk9及以后是字节数组</span></li></ul><h3 id="String构造方法"><a href="#String构造方法" class="headerlink" title="String构造方法"></a>String构造方法</h3><ul><li><code>public String()</code>：创建一个空白字符串对象，不含任何内容</li><li><code>public String(char[] chs)</code>：根据字符数组的内容，来创建字符串对象</li><li><code>public String(byte[] bys)</code>：根据字节数组的内容，来创建字符串对象</li><li><code>String s = &quot;abc&quot;</code>：直接赋值的方式创建字符串对象（推荐）</li></ul><p>例子：输出abc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] bys = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">String s3 = <span class="keyword">new</span> String(bys)</span><br><span class="line"></span><br><span class="line">String s4 = <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="String对象的特点"><a href="#String对象的特点" class="headerlink" title="String对象的特点"></a>String对象的特点</h3><ul><li>通过<code>new</code>创建的字符串对象，每一次new都会申请一个内存空间，但是地址不同</li><li>以<code>&quot;&quot;</code>的方式给出的字符串，只要字符序列相同，无论在程序中出现几次都只会建立一个String对象，并在字符池中维护</li></ul><h3 id="String对象的内存空间"><a href="#String对象的内存空间" class="headerlink" title="String对象的内存空间"></a>String对象的内存空间</h3><p><img src="https://img-blog.csdnimg.cn/20210310220105206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h3><ul><li><code>==</code><br>基本类型：比较的是数据值是否相同<br>引用类型：比较的是地址值是否相同</li><li><code>equals</code><br>字符串public boolean equals(Object anObject)：将此字符串与指定对象进行比较，由于比较的是字符串对象，所以参数直接传递字符串。</li></ul><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>概述：StringBuilder是一个可变的字符串类，可以看作一个容器（<span style="background: yellow;">可变是指StringBuilder对象中的内容是可变的</span>）</p><h3 id="String的加法操作"><a href="#String的加法操作" class="headerlink" title="String的加法操作"></a>String的加法操作</h3><p><img src="https://img-blog.csdnimg.cn/20210310223752477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="String和StringBuilder的区别"><a href="#String和StringBuilder的区别" class="headerlink" title="String和StringBuilder的区别"></a>String和StringBuilder的区别</h3><p>String内容不可变，StringBuilder内容可变</p><h3 id="StringBuilder构造方法"><a href="#StringBuilder构造方法" class="headerlink" title="StringBuilder构造方法"></a>StringBuilder构造方法</h3><ul><li><code>public StringBuilder()</code>：创建一个空白可变字符串对象，不含有任何内容</li><li><code>public StringBuilder(String str)</code>：根据字符串的内容，来创建可变字符串对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空白可变字符串</span></span><br><span class="line">StingBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">System.out.println(sb);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据字符串内容创建一个可变字符串</span></span><br><span class="line">StingBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(sb2);</span><br></pre></td></tr></table></figure><h3 id="StringBuilder的添加和反转方法"><a href="#StringBuilder的添加和反转方法" class="headerlink" title="StringBuilder的添加和反转方法"></a>StringBuilder的添加和反转方法</h3><ul><li><code>public StringBuilder append(任意类型)</code>：在对象本身上添加数据，并<span style="background: yellow;">返回对象本身</span></li><li><code>public StringBuilder reverse()</code>：对象本身进行相反的字符序列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StingBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">StingBuilder sb2 = sb.append(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">System.out.println(sb);</span><br><span class="line">System.out.println(sb2);</span><br><span class="line">System.out.println(sb == sb2);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">hello</span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>注意：这两个方法都会改变对象本身～～</p><h3 id="String和StringBuilder的相互转换"><a href="#String和StringBuilder的相互转换" class="headerlink" title="String和StringBuilder的相互转换"></a>String和StringBuilder的相互转换</h3><h4 id="StingBuilder转为String"><a href="#StingBuilder转为String" class="headerlink" title="StingBuilder转为String"></a>StingBuilder转为String</h4><p><code>public String toString()</code>：通过toString()就可以实现把StringBuilder转换为String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StingBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">String s = sb.toString();</span><br></pre></td></tr></table></figure><h4 id="Sting转为StringBuilder"><a href="#Sting转为StringBuilder" class="headerlink" title="Sting转为StringBuilder"></a>Sting转为StringBuilder</h4><p><code>public StringBuilder(String s)</code>：通过构造方法实现String转为StringBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">StringBuilder b = <span class="keyword">new</span> StringBuilder(a);</span><br></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>1、String不可变的好处？</p><ul><li>可以缓存 hash 值<br>因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。</li><li>String Pool 的需要<br>如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。</li><li>安全性<br>String 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 的那一方以为现在连接的是其它主机，而实际情况却不一定是。</li><li>线程安全<br>String 不可变性天生具备线程安全，可以在多个线程中安全地使用。</li></ul><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>2、浅谈一下String, StringBuffer，StringBuilder的区别？</p><ul><li><p>String是不可变类，每当我们对String进行操作的时候，总是会创建新的字符串。操作String很耗资源,所以Java提供了两个工具类来操作String - StringBuffer和StringBuilder。</p></li><li><p>StringBuffer和StringBuilder是可变类，<span style="background: yellow;">StringBuffer是线程安全的</span>，<span style="background: yellow;">StringBuilder则不是线程安全的</span>。所以在多线程对同一个字符串操作的时候，我们应该选择用StringBuffer。由于不需要处理多线程的情况，StringBuilder的效率比StringBuffer高。</p></li></ul><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>3、什么是字符串池？</p><p>字符串常量池就是用来存储字符串的，它存在于Java 堆内存。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>4、String是线程安全的吗？</p><p>String是不可变类，一旦创建了String对象，我们就无法改变它的值。因此，它是线程安全的，可以安全地用于多线程环境中。</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>5、为什么我们在使用HashMap的时候总是用String做key？</p><p>因为字符串是不可变的，当创建字符串时，它的它的hashcode被缓存下来，不需要再次计算。因为HashMap内部实现是通过key的hashcode来确定value的存储位置，所以相比于其他对象更快。这也是为什么我们平时都使用String作为HashMap对象。</p><h1 id="集合基础"><a href="#集合基础" class="headerlink" title="集合基础"></a>集合基础</h1><h2 id="集合基础-1"><a href="#集合基础-1" class="headerlink" title="集合基础"></a>集合基础</h2><ul><li>集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</li><li><code>ArrayList&lt;E&gt;</code>：可调整大小的数组实现</li></ul><h2 id="ArrayList的构造方法和添加方法"><a href="#ArrayList的构造方法和添加方法" class="headerlink" title="ArrayList的构造方法和添加方法"></a>ArrayList的构造方法和添加方法</h2><ul><li><pre><code>`public ArrayList()`：创建一个空的集合对象</code></pre></li><li><pre><code>`public boolean add(E e)`：将指定的元素追加到此集合的末尾</code></pre></li><li><pre><code>`public void add(int index,E element)`：在此集合中的指定位置插入指定的元素</code></pre></li></ul><h2 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h2><ul><li><code>public boolean remove(Object o)</code>：删除指定元素，返回是否删除成功</li><li><code>public E remove(int index)</code>：删除指定索引的元素，返回被删除的元素</li><li><code>public E set(int index,E element)</code>：修改指定索引的元素，返回被修改的元素</li><li><code>public E get(int index)</code>：返回指定索引处的元素</li><li><code>public int size()</code>：返回集合中元素的个数</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承概述"><a href="#继承概述" class="headerlink" title="继承概述"></a>继承概述</h2><p>继承是面向对象三大特征之一，可以使得子类具有父类的<span style="background: yellow;">属性和方法</span>，还可以在子类中重新定义，追加属性和方法</p><h2 id="继承格式"><a href="#继承格式" class="headerlink" title="继承格式"></a>继承格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类名 <span class="keyword">extends</span> 父类名</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;&#125;</span><br><span class="line">Fu：是父类，也被称为基类、超类</span><br><span class="line">Zi：是子类，也被称为派生类</span><br></pre></td></tr></table></figure><p>继承中子类的特点：</p><ul><li>子类可以有父类的内容</li><li>子类还可以有自己的内容</li></ul><h2 id="继承的好处和弊端"><a href="#继承的好处和弊端" class="headerlink" title="继承的好处和弊端"></a>继承的好处和弊端</h2><p>1、好处</p><ul><li>提高了代码的<span style="background: yellow;">复用性</span>（多个类相同的成员可以放到同一个类中）</li><li>提高了代码的<span style="background: yellow;">维护性</span>（如果方法的代码需要修改，修改一处即可）</li></ul><p>2、弊端</p><ul><li>继承让类和类之间产生关系，类的耦合性增强了，削弱了子类的独立性</li></ul><p>3、什么时候使用继承？</p><ul><li>继承体现的关系：is a，A是B的一种</li></ul><h2 id="继承中变量的访问特点"><a href="#继承中变量的访问特点" class="headerlink" title="继承中变量的访问特点"></a>继承中变量的访问特点</h2><p>在子类方法中访问一个变量：（优先级如下）</p><ul><li>子类局部范围找</li><li>子类成员范围找</li><li>父类成员范围找</li><li>如果没有找到就报错（不考虑父亲的父亲）</li></ul><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="comment">//如何访问Zi的成员变量age=20</span></span><br><span class="line"><span class="keyword">this</span>.age;</span><br><span class="line"><span class="comment">//如何访问Fu的成员变量age=10</span></span><br><span class="line"><span class="keyword">super</span>.age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>super</code>和<code>this</code>的用法相似</p><ul><li>this：代表本类对象的引用</li><li>super：代表父类存储空间的标识（可以理解为父类对象的引用）</li></ul><img src="https://img-blog.csdnimg.cn/20210311144742172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="继承中构造方法的访问特点"><a href="#继承中构造方法的访问特点" class="headerlink" title="继承中构造方法的访问特点"></a>继承中构造方法的访问特点</h2><p><span style="background: yellow;">子类中的所有构造方法默认都会访问父类中无参数的构造方法</span></p><p>为什么？</p><ul><li>因为子类会继承父类中的数据，可能还会使用父类的数据。所以子类初始化之前，一定要先完成父类数据的初始化</li><li>每一个子类构造方法的第一条语句默认都是<code>super()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu-无参&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu-有参&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi-无参&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi-有参&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line"></span><br><span class="line">Zi z2 = <span class="keyword">new</span> Zi(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Fu-无参</span><br><span class="line">Zi-无参</span><br><span class="line"></span><br><span class="line">Fu-无参</span><br><span class="line">Zi-有参</span><br></pre></td></tr></table></figure><p>在子类的构造方法中的第一行都是<code>super()</code>,可以省略</p><p>如果父类中没有无参构造方法怎么办？</p><ul><li>通过使用super关键字去显示的调用父类的带参构造方法</li><li>在父类中提供一个无参构造方法</li></ul><h2 id="继承中成员方法的访问特点"><a href="#继承中成员方法的访问特点" class="headerlink" title="继承中成员方法的访问特点"></a>继承中成员方法的访问特点</h2><p>通过子类对象访问一个方法：</p><ul><li>子类成员范围找</li><li>父类成员范围找</li><li>如果找不到就报错</li></ul><h2 id="super内存图"><a href="#super内存图" class="headerlink" title="super内存图"></a>super内存图</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">40</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu-无参&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu-method&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi-无参&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">30</span>;</span><br><span class="line">System.out.println(age);</span><br><span class="line">System.out.println(<span class="keyword">this</span>.age);</span><br><span class="line">System.out.println(<span class="keyword">super</span>.age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">...main...&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.show();</span><br><span class="line">zi.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Zi z = new Zi();</span></span><br><span class="line">Fu-无参</span><br><span class="line">Zi-无参</span><br><span class="line"><span class="comment">// zi.show();</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="comment">// zi.method(); </span></span><br><span class="line"><span class="comment">// 调用FU类的method方法</span></span><br><span class="line">Fu-method</span><br></pre></td></tr></table></figure><p>过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zi.show();</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210311161423319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>1、概述：</p><ul><li>子类中出现了和父类中一模一样的方法声明</li></ul><p>2、方法重写的应用：</p><ul><li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这些，即沿袭了父类的功能，又定义了子类特有的内容</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">手机类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">新手机类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">newPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;new&quot;</span>);</span><br><span class="line"><span class="keyword">super</span>.call(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建对象，调用方法</span></span><br><span class="line">Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line">p.call(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">newPhone p2 = <span class="keyword">new</span> newPhone();</span><br><span class="line">p2.call(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Override注解"><a href="#Override注解" class="headerlink" title="@Override注解"></a>@Override注解</h3><p>1、可以当注释用,方便阅读；</p><p>2、编译器可以给你验证<code>@Override</code>下面的方法名是否是你父类中所有的，如果没有则报错。例如，你如果没写<code>@Override</code>，而你下面的方法名又写错了，这时你的编译器是可以编译通过的，因为编译器以为这个方法是你的子类中自己增加的方法。</p><h3 id="方法重写的注意事项"><a href="#方法重写的注意事项" class="headerlink" title="方法重写的注意事项"></a>方法重写的注意事项</h3><p>1、子类不能重写父类中私有的方法</p><p>2、子类方法访问权限不能更低（public &gt; 默认 &gt; 私有）</p><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><blockquote><p><span style="background: yellow;">重载</span>就是同样的一个方法能够根据输入数据的不同，做出不同的处理<br><span style="background: yellow;">重写</span>就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p></blockquote><p>1、重写：</p><ul><li>返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</li><li>如果父类方法访问修饰符为 private&#x2F;final&#x2F;static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。</li><li>构造方法无法被重写</li></ul><p>重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变</p><p>2、重载和重写的区别：<img src="https://img-blog.csdnimg.cn/20210311163927568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3、重写的返回值类型</p><ul><li>如果方法的返回类型是void和基本数据类型，则返回值重写时不可修改。</li><li>但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。</li></ul><h2 id="继承的注意事项"><a href="#继承的注意事项" class="headerlink" title="继承的注意事项"></a>继承的注意事项</h2><p>1、类不能继承多个类（单继承）</p><p>2、类可以多层继承</p><h1 id="权限修饰符、状态修饰符"><a href="#权限修饰符、状态修饰符" class="headerlink" title="权限修饰符、状态修饰符"></a>权限修饰符、状态修饰符</h1><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>1、其实就是文件夹</p><p>作用：对类进行分类管理</p><p>2、定义格式<br><code>package 包名</code></p><p>3、带包的Java类编译和执行</p><ul><li><p>手动建包：<br><span style="background: yellow;">按照以前的格式编译java文件</span>     <code>Java HelloWorld.java</code><br><span style="background: yellow;">手动创建包</span>  在E盘建立文件夹com，在com下建立文件夹tao<br><span style="background: yellow;">把class文件放到包的最里面</span>      把HelloWorld.java文件放到com下的tao这个文件夹下<br><span style="background: yellow;">带包执行</span>     <code>java com.tao.Helloworld</code></p></li><li><p>自动建包：<code>Java -d .Helloworld.java</code>  <code>java com.tao.HelloWorld</code></p></li></ul><h2 id="导包——import"><a href="#导包——import" class="headerlink" title="导包——import"></a>导包——import</h2><p>使用不同包下的类时，使用的时候要写类的全路径，写起来太麻烦了</p><p>为了简化带包的操作，Java就提供了导包的功能</p><p>格式：<code>import 包名</code></p><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p>四种：private、默认、protected、public</p><img src="https://img-blog.csdnimg.cn/2021031117143657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h2 id="状态修饰符"><a href="#状态修饰符" class="headerlink" title="状态修饰符"></a>状态修饰符</h2><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>final关键字是最终的意思，可以修饰成员方法、成员变量、类</p><p>1、final修饰<span style="background: yellow;">方法</span>：最终方法，不可被重写</p><p>2、final修饰<span style="background: yellow;">变量</span>：常量，不能被再次赋值</p><p>3、final修饰<span style="background: yellow;">类</span>：最终类，不能被继承</p><h4 id="final修饰局部变量"><a href="#final修饰局部变量" class="headerlink" title="final修饰局部变量"></a>final修饰局部变量</h4><p>1、final修饰基本类型变量：<span style="background: yellow;">值不能变</span></p><p>2、final修饰引用类型变量：<span style="background: yellow;">地址值不能变</span>，地址里面的内容可以被修改</p><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>可以修饰成员方法、成员变量</p><p>特点：</p><ul><li>被类的所有对象<span style="background: yellow;">共享</span><br>这是我们判断是否使用静态关键字的条件</li><li>可以<span style="background: yellow;">通过类名调用</span>，也可以通过对象名调用</li></ul><h4 id="static访问特点"><a href="#static访问特点" class="headerlink" title="static访问特点"></a>static访问特点</h4><p>静态成员方法只能访问静态成员（静态成员变量、静态成员方法）</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>同一个对象，在不同时刻表现出来的不同形态</p><p>例子：<br>我们可以说猫是猫：<code>猫 cat = new 猫()</code><br>也可以说猫是动物：<code>动物 animal = new 猫()</code><br>猫在不同时刻表现出不同的形态，这就是多态</p><p>多态的前提和体现</p><ul><li>有继承&#x2F;实现关系</li><li>有方法重写</li><li>有父类引用指向子类对象</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cat</span> <span class="keyword">extends</span> <span class="title">animal</span></span>&#123;</span><br><span class="line"><span class="comment">//重写</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line"><span class="comment">//父类引用指向子类对象</span></span><br><span class="line">animal a = <span class="keyword">new</span> cat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态中成员的访问特点"><a href="#多态中成员的访问特点" class="headerlink" title="多态中成员的访问特点"></a>多态中成员的访问特点</h2><p>访问的是父类，方法和属性都是父类，但是如果子类重写了方法，就访问重写后的方法</p><ul><li>成员<span style="background: yellow;">变量</span>：<strong>编译看左边，运行看左边</strong></li><li>成员<span style="background: yellow;">方法</span>：<strong>编译看左边，运行看右边</strong></li></ul><h2 id="多态的好处和弊端"><a href="#多态的好处和弊端" class="headerlink" title="多态的好处和弊端"></a>多态的好处和弊端</h2><p>1、好处：提高了程序的扩展性</p><ul><li>具体体现：定义方法时，使用父类作为参数，将来使用时，使用具体子类参与操作</li></ul><p>2、弊端：不能使用子类的特有功能，只能使用重写的方法</p><h2 id="多态中的转型"><a href="#多态中的转型" class="headerlink" title="多态中的转型"></a>多态中的转型</h2><p>分类：</p><ul><li><span style="background: yellow;">向上转型</span><br>子类到父类<br>父类引用指向子类对象</li><li><span style="background: yellow;">向下转型</span><br>从父到子<br>父类引用转为子类对象</li></ul><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>多态本身就是向上转型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animal a = <span class="keyword">new</span> cat();</span><br></pre></td></tr></table></figure><h3 id="向下转型（强制类型转换）"><a href="#向下转型（强制类型转换）" class="headerlink" title="向下转型（强制类型转换）"></a>向下转型（强制类型转换）</h3><p><em><strong>为了访问子类独特的方法</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">父类animal 有方法eat()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">子类cat，有重写方法eat()和独特的方法play()</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line"><span class="comment">//多态</span></span><br><span class="line">animal a = <span class="keyword">new</span> cat();</span><br><span class="line">a.eat();</span><br><span class="line"><span class="comment">//强制类型转换</span></span><br><span class="line">cat b = (cat)a;</span><br><span class="line">b.eat();</span><br><span class="line">b.play();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转型的内存图"><a href="#转型的内存图" class="headerlink" title="转型的内存图"></a>转型的内存图</h3><p>前几条代码：</p><img src="https://img-blog.csdnimg.cn/20210311182250656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>类型转换失败：</p><img src="https://img-blog.csdnimg.cn/20210311182255196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt=" 1类型转换失败 " style="zoom:50%;" /><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><blockquote><p>在多态模块中，我们假定了父类animal，这个位于上层的类更具有一般性，更加抽象，因此可以看作抽象类</p></blockquote><p>在Java中，一个没有<span style="background: yellow;">方法体</span>的方法应该被定义为<span style="background: yellow;">抽象方法</span>，而类中如果有抽象方法，应该被定义为<span style="background: yellow;">抽象类</span>。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">animal</span></span>&#123;</span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">animal</span></span>&#123;</span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以有方法，抽象类里面可以没有抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象类的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cat</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">animal a = <span class="keyword">new</span> cat();</span><br><span class="line">a.eat();</span><br><span class="line">a.sleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，抽象类的特点如下：</p><ul><li>抽象类和抽象方法必须使用<code>abstract</code>关键字修饰</li><li><span style="background: yellow;">抽象类可以没有抽象方法，有抽象方法的类一定是抽象类</span></li><li>抽象类不能直接实例化，可以参照多态的方式通过子类实例化</li><li>抽象类的<span style="background: yellow;">子类</span>要么也是<span style="background: yellow;">抽象类</span>，要么<span style="background: yellow;">重写抽象类的所有的抽象方法</span></li></ul><h2 id="抽象类的成员特点"><a href="#抽象类的成员特点" class="headerlink" title="抽象类的成员特点"></a>抽象类的成员特点</h2><p>1、成员变量：可以是变量，可以是常量</p><p>2、构造方法：有构造方法，但是不能实例化，他的作用是用于子类访问父类数据的初始化</p><p>3、成员方法：可以有抽象方法（限定子类必须完成的方法），可以有非抽象方法（提高代码复用性）</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口概述"><a href="#接口概述" class="headerlink" title="接口概述"></a>接口概述</h2><p>接口就是一种公共的规范标准，只要符合规范，大家都可以通用</p><p>Java中的接口更多的体现在对行为的抽象</p><h2 id="接口特点"><a href="#接口特点" class="headerlink" title="接口特点"></a>接口特点</h2><p>1、接口用关键字<code>interface</code>修饰</p><ul><li>格式：<code>public interface 接口名()</code></li></ul><p>2、类实现接口用<code>implements</code>标识</p><ul><li>格式：<code>public class implements 接口名&#123;&#125;</code></li></ul><p>3、接口不能实例化</p><ul><li>如何实例化呢？按照多态的方式，通过实现类对象实例化，这叫<span style="background: yellow;">接口多态</span></li><li><span style="background: yellow;">多态的形式：具体类多态，抽象类多态、接口多态</span></li><li>多态的前提：有继承或者实现关系、有方法重写、有父类&#x2F;接口引用指向子类&#x2F;接口对象</li></ul><p>4、接口的实现类</p><ul><li>要么重写所有的抽象方法</li><li>要么是抽象类</li></ul><h2 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h2><p>1、成员变量</p><ul><li>只能是常量</li><li>默认修饰符<code>public static final</code></li></ul><p>2、构造方法</p><ul><li>接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在</li><li>一个类如果没有父类，默认继承自Object类</li></ul><p>3、成员方法</p><ul><li>只能是抽象方法</li><li>默认修饰符<code>public abstract</code></li><li>关于接口中的方法，JDK8和JDK9有一些新特性</li></ul><h2 id="类和接口的关系"><a href="#类和接口的关系" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h2><p>1、类和类的关系</p><p><span style="background: yellow;">继承关系</span>，只能单继承，但是可以多层继承</p><p>2、类和接口的关系</p><p><span style="background: yellow;">实现关系</span>，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">inter1</span>,<span class="title">Inter2</span>,<span class="title">Inter3</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>3、接口和接口的关系</p><p><span style="background: yellow;">继承关系</span>，可以单继承，也可以多继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Inter3</span> <span class="keyword">extends</span> <span class="title">Inter1</span>,<span class="title">Inter2</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><h3 id="成员区别（语法层面）"><a href="#成员区别（语法层面）" class="headerlink" title="成员区别（语法层面）"></a>成员区别（语法层面）</h3><p>1、抽象类</p><ul><li>变量、常量</li><li>有构造方法</li><li>有抽象方法也有非抽象方法</li></ul><p>2、接口</p><ul><li>常量</li><li>抽象方法</li></ul><h3 id="关系区别（语法层面）"><a href="#关系区别（语法层面）" class="headerlink" title="关系区别（语法层面）"></a>关系区别（语法层面）</h3><p>1、类与类</p><ul><li>继承</li><li>单继承</li></ul><p>2、类与接口</p><ul><li>实现</li><li>单实现、多实现</li></ul><p>3、接口与接口</p><ul><li>继承</li><li>单继承、多继承</li></ul><h3 id="设计理念的区别"><a href="#设计理念的区别" class="headerlink" title="设计理念的区别"></a>设计理念的区别</h3><p>1、抽象类</p><ul><li>对类抽象</li><li>包括属性、行为</li></ul><p>2、接口</p><ul><li>对行为抽象</li><li>主要是行为</li></ul><p>例子：门和警报</p><blockquote><p>门：都有open()和close()两个动作，这个时候我们可以分别使用抽象类和接口来定义这个抽象概念</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Door</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>随着时代的发展，门现在有了报警的功能，如果把这个功能放到抽象类中所有的门就都有了报警功能，如果放在接口中其他具有报警功能的也不一定有开关功能</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Alram</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmDoor</span> <span class="keyword">extends</span> <span class="title">Door</span> <span class="keyword">implements</span> <span class="title">Alarm</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="background: yellow;">再次强调，抽象类是对事物的抽象，接口是对行为的抽象</span></p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><blockquote><p>需求：乒乓球运动员和篮球运动员，乒乓球教练和篮球教练。为了出国交流，跟乒乓球相关的人员都要学习英语。分析一下这个案例有哪些具体类，哪些抽象类，哪些接口，并用代码实现</p></blockquote><p>分析：具体到抽象</p><img src="https://img-blog.csdnimg.cn/20210312105659421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>实现：抽象到具体</p><p>使用：使用具体的类</p><p>代码实现思路：</p><ul><li>定义说英语的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">成员方法：说英语()；</span><br></pre></td></tr></table></figure><ul><li>定义抽象人类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">成员变量：姓名、年龄</span><br><span class="line">构造方法：无参、带参</span><br><span class="line">成员方法：get()/set()、吃饭()</span><br></pre></td></tr></table></figure><ul><li>定义抽象的教练类，继承人类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造方法：无参、带参</span><br><span class="line">成员方法：教()</span><br></pre></td></tr></table></figure><ul><li>定义抽象的运动员类，继承人类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造方法：无参、带参</span><br><span class="line">成员方法：学习()</span><br></pre></td></tr></table></figure><ul><li>定义具体篮球教练类，继承教练类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造方法：无参、带参</span><br><span class="line">成员方法：重写吃饭()&#123;&#125;,重写教()&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>定义具体乒乓球教练类，继承教练类，实现说英语接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造方法：无参、带参</span><br><span class="line">成员方法：重写吃饭()&#123;&#125;,重写教()&#123;&#125;,重写说英语()&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>定义具体篮球运动员类，继承运动员类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造方法：无参、带参</span><br><span class="line">成员方法：重写吃饭()&#123;&#125;,重写学习()&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>定义具体乒乓球运动员类，继承运动员类，实现说英语接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造方法：无参、带参</span><br><span class="line">成员方法：重写吃饭()&#123;&#125;,重写学习()&#123;&#125;,重写说英语()&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="类名作为形参和返回值"><a href="#类名作为形参和返回值" class="headerlink" title="类名作为形参和返回值"></a>类名作为形参和返回值</h2><p>1、方法的形参是类名，其实需要的是该类的对象</p><p>2、方法的返回值是类名，其实返回的是该类的对象</p><h2 id="抽象类名作为形参和返回值"><a href="#抽象类名作为形参和返回值" class="headerlink" title="抽象类名作为形参和返回值"></a>抽象类名作为形参和返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">animal</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cat</span> <span class="keyword">extends</span> <span class="title">animal</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> animalOperator&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useanimal</span><span class="params">(animal a)</span></span>&#123;</span><br><span class="line">a.eat();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> animal <span class="title">getanimal</span><span class="params">()</span></span>&#123;</span><br><span class="line">animal a = <span class="keyword">new</span> cat();</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line"><span class="comment">//创建操作类对象并调用方法</span></span><br><span class="line">animalOperator ao = <span class="keyword">new</span> animalOperator();</span><br><span class="line">animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">ao.useanimal(a);</span><br><span class="line"></span><br><span class="line">animal a2 = ao.getanimal();</span><br><span class="line">a2.eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、方法的形参是抽象类名，其实需要的是该抽象类的子类对象</p><p>2、方法的返回值是抽象类名，其实返回的是抽象类的子类对象</p><h2 id="接口名作为形参和返回值"><a href="#接口名作为形参和返回值" class="headerlink" title="接口名作为形参和返回值"></a>接口名作为形参和返回值</h2><p>1、方法是形参是接口名，其实需要的是该接口的实现类对象</p><p>2、方法的返回值是接口名，其实返回的是接口的实现类对象</p><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>1、内部类：就是在一个类中定义一个类</p><p>2、定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、内部类的访问格式</p><ul><li>内部类可以直接访问外部类的成员，包括<code>private</code></li><li>外部类要访问内部类的成员，必须创建对象</li></ul><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>1、内部类的分类：</p><ul><li>在类的成员位置：成员内部类</li><li>在类的局部位置：局部内部类</li></ul><p>2、成员内部类，外界如何创建对象使用？</p><ul><li>格式：<code>外部类名.内部类名 对象名 = 外部类对象.内部类对象</code></li><li>例子：<code>out.in i = new out().new in()</code></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">out</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//成员内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">in</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line"><span class="comment">//创建内部类对象，并调用方法</span></span><br><span class="line">out.in i = <span class="keyword">new</span> out().<span class="function">new <span class="title">in</span><span class="params">()</span></span>;</span><br><span class="line">i.show(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、内部类使用<code>private</code>修饰符怎么办？</p><p>方法：创建一个成员方法调用内部类里面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">out</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//成员内部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">in</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">in i = <span class="keyword">new</span> in();</span><br><span class="line">i.show()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line"><span class="comment">//创建内部类对象，并调用方法</span></span><br><span class="line">out o = <span class="keyword">new</span> out();</span><br><span class="line">o.method()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>局部内部类是方法中定义的类，所以外界无法直接使用，<span style="background: yellow;">需要在方法内部创建对象并使用</span>，该类可以直接访问外部类的成员，也可以访问方法内部的局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">out</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">in</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">System.out.println(num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">in i = <span class="keyword">new</span> in();</span><br><span class="line">i.show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main&#123;</span><br><span class="line">out o = <span class="keyword">new</span> out();</span><br><span class="line">o.method()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>1、<span style="background: yellow;">是局部内部类的特殊形式</span></p><p>2、前提：存在一个类或者接口，类可以是具体类或者抽象类</p><p>3、本质：是一个继承了该类或者实现了该接口的子类匿名<span style="background: yellow;">对象</span></p><p>3、格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名/接口名()&#123;</span><br><span class="line">重写方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">out</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line">inter i = <span class="keyword">new</span> inter()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">i.show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">inter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类在开发中的使用"><a href="#匿名内部类在开发中的使用" class="headerlink" title="匿名内部类在开发中的使用"></a>匿名内部类在开发中的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳高接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">jumpping</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口操作类，里面有一个方法，方法的参数是接口名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jumpoperator</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(jumpping j)</span></span>&#123;</span><br><span class="line">j.jump();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cat</span> <span class="keyword">implements</span> <span class="title">jumpping</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dog</span> <span class="keyword">implements</span> <span class="title">jumpping</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line">main(String[] args)&#123;</span><br><span class="line"><span class="comment">//需求：创建接口操作类的对象，调用method方法</span></span><br><span class="line">jumpoperator jo = <span class="keyword">new</span> jumpoperator();</span><br><span class="line">jumpping j = <span class="keyword">new</span> cat();</span><br><span class="line">jo.method(j);</span><br><span class="line"></span><br><span class="line">jumpping j2 = <span class="keyword">new</span> dog();</span><br><span class="line">jo.method(j2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改进</span></span><br><span class="line">jp.method(<span class="keyword">new</span> jumpping()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">jp.method(<span class="keyword">new</span> jumpping()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上：使用匿名内部类可以简化操作，如上例中需要构建实现类cat和dog才能够调用方法，经过改进，只需要创建两个匿名内部类即可。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 基础</title>
      <link href="/2022/01/04/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/01/04/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Java语言发展史"><a href="#Java语言发展史" class="headerlink" title="Java语言发展史"></a>Java语言发展史</h2><h3 id="Java语言发展史-1"><a href="#Java语言发展史-1" class="headerlink" title="Java语言发展史"></a>Java语言发展史</h3><p>1、Java语言</p><ul><li>Java语言是美国 <span style="background: yellow;">sun公司</span>在1995年推出的</li><li>Java之父：詹姆斯.高斯林</li></ul><p>2、Java语言发展历史</p><img src="https://img-blog.csdnimg.cn/20210307203148237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li>5.0：更新力度非常大，使得java发展进入快车道</li><li>8.0：公司使用最多</li><li>11.0：学习使用的版本</li></ul><h3 id="Java语言跨平台原理——JVM"><a href="#Java语言跨平台原理——JVM" class="headerlink" title="Java语言跨平台原理——JVM"></a>Java语言跨平台原理——JVM</h3><p>1、基本概念</p><ul><li>平台：指的是操作系统平台（windows、macOS、Linux）</li><li>跨平台：Java程序可以在任意操作系统上运行</li></ul><p>2、<span style="background: yellow;">跨平台原理</span></p><ul><li>针对不同的操作系统提供不同的JVM</li><li>方法：在需要运行Java应用程序的操作系统上安装一个与操作系统对应的Java虚拟机（JVM）即可完成跨平台</li></ul><p>3、<span style="background: yellow;">JVM</span>：运行 <span style="background: yellow;">Java 字节码</span>的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><blockquote><p>什么是字节码?采用字节码的好处是什么?</p></blockquote><ul><li>含义：在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。</li><li>好处：Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</li></ul><p>4、java程序运行过程</p><p>Java 程序从源代码到运行一般有下面 3 步：</p><p><img src="https://img-blog.csdnimg.cn/20210307204848421.png" alt="在这里插入图片描述"></p><p><span style="background: yellow;">.class-&gt;机器码</span></p><ol><li>JVM 类加载器首先加载字节码文件</li><li>然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 <span style="background: yellow;">JIT 编译器</span>，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</li></ol><blockquote><p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。<br>JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</p></blockquote><h3 id="JRE和JDK"><a href="#JRE和JDK" class="headerlink" title="JRE和JDK"></a>JRE和JDK</h3><p>1、<strong>JRE</strong>（Java Runtime Environment）</p><ul><li>含义：java程序的运行时的环境，<span style="background: yellow;">包含JVM和运行时所需要的核心类库</span></li><li>我们想要<span style="background: yellow;">运行</span>一个已有的java程序，只需要按照JRE即可</li></ul><p>2、<strong>JDK</strong>（Java Development kit）</p><ul><li>含义：java程序开发工具包，<span style="background: yellow;">包含JRE和开发人员使用的工具</span></li><li>开发工具：编译工具（javac.exe）和运行工具（java.exe）</li><li>想要开发一个全新的Java程序，必须安装JDK</li></ul><p>3、JDK、JRE、JVM的关系<br><img src="https://img-blog.csdnimg.cn/20210307204240270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /></p><h3 id="Oracle-JDK-和-OpenJDK"><a href="#Oracle-JDK-和-OpenJDK" class="headerlink" title="Oracle JDK 和 OpenJDK"></a>Oracle JDK 和 OpenJDK</h3><p>1、Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK 版本大概每三个月发布一次，但这不是固定的。</p><p>2、OpenJDK 是一个参考模型并且是完全<span style="background: yellow;">开源</span>的，而 Oracle JDK 是 OpenJDK 的一个实现，并<span style="background: yellow;">不是完全开源</span>的；</p><p>3、Oracle JDK 比 OpenJDK 更<span style="background: yellow;">稳定</span>。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业&#x2F;商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。</p><p>4、在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了<span style="background: yellow;">更好的性能</span>；<br>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</p><p>5、Oracle JDK 根据<span style="background: yellow;">二进制代码许可协议</span>获得许可，而 OpenJDK 根据 <span style="background: yellow;">GPL v2 许可</span>获得许可。</p><h3 id="Java-和-C-的区别"><a href="#Java-和-C-的区别" class="headerlink" title="Java 和 C++的区别"></a>Java 和 C++的区别</h3><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</li><li>Java 有<span style="background: yellow;">自动内存管理垃圾回收机制(GC)</span>，不需要程序员手动释放无用内存</li><li>在 C 语言中，字符串或字符数组最后都会有一个额外的字符’\0’来表示结束。但是，Java 语言中没有结束符这一概念。</li></ul><h3 id="Java——编译与解释并存"><a href="#Java——编译与解释并存" class="headerlink" title="Java——编译与解释并存"></a>Java——编译与解释并存</h3><p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（*.class 文件），这种字节码必须由 Java 解释器来解释执行。因此，我们可以认为 Java 语言编译与解释并存。</p><h2 id="Java语法"><a href="#Java语法" class="headerlink" title="Java语法"></a>Java语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>1、注释：在指定位置添加的说明性信息（仅起到说明作用）</p><p>2、分类：</p><ul><li>单行注释<br>格式：<code>// 注释信息</code></li><li>多行注释<br>格式：<code>/* 注释信息*/</code></li><li>文档注释<br>格式：<code>/** 注释信息*/</code></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>1、关键字：被Java语言赋予了特定含义的单词</p><p>2、关键字的特点：</p><ul><li>字母全部小写</li><li>常用的代码编辑器对关键字有特殊的颜色标记</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>1、常量：在程序运行过程中，值不会改变的量</p><p>2、常量的分类：</p><ul><li>字符串常量<br>说明：用双引号括起来的内容<br>例子：<code>&quot;HelloWorld&quot;</code></li><li>整数常量<br>说明：不带小数的数字<br>例子：<code>520</code></li><li>小数常量<br>说明：带小数的数字<br>例子：<code>13.14</code></li><li>字符常量<br>说明：用单引号括起来的内容<br>例子：<code>&#39;A&#39;</code></li><li>布尔常量<br>说明：布尔值<br>例子：<code>true</code> <code>false</code></li><li>空常量（<span style="background: yellow;">不能直接输出</span>）<br>说明：一个特殊的值，空值<br>例子：<code>null</code></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>1、计算机存储单元</p><ul><li>计算机存储设备（内存、硬盘）的最小信息单元——<code>位（bit）</code>，又称为比特位，通常用小写字母b表示</li><li>计算机最小的存储单元——<code>字节（byte）</code>，用大写字母B表示，由连续的8个位组成</li><li>1B &#x3D; 8 bit —— 1KB &#x3D; 1024B —— 1MB &#x3D; 1024KB —— 1GB &#x3D; 1024MB —— 1TB &#x3D; 1024GB</li></ul><p>2、数据类型</p><p>Java语言时强类型语言，对于每一种数据都给出了明确的数据类型，不同的数据类型分配不同的存储空间，所以表示的数据大小也不同。</p><p><img src="https://img-blog.csdnimg.cn/20210308155312801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="数据类型 "></p><p>3、数据类型内存占用和取值范围</p><p><img src="https://img-blog.csdnimg.cn/20210308155431734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>1、变量：在程序运行过程中，其值可以发生变化的量；从本质上讲，变量时内存中的一小块区域</p><p>2、变量的定义</p><ul><li>组成：变量名+变量数据类型+变量值</li><li>例子：<code>int a = 10;</code></li></ul><p>3、变量的使用：取值、修改值</p><ul><li>取值：变量名   <code>a</code></li><li>修改值：变量名&#x3D;修改值 <code>a = 20;</code></li></ul><p>4、注意事项：</p><ul><li>变量名不能重复</li><li>变量未赋值不能使用</li><li>long类型的变量定义时，为了防止整数过大，后面要加L</li><li>float类型的变量定义时，为了防止类型不兼容，后面要加F</li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>1、标识符定义规则</p><ul><li>由数字、字母、下划线、美元符组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><p>2、常见命名约定：</p><ul><li>小驼峰命名法：<span style="background: yellow;">方法、变量</span><br>标识符是一个单词时，首字母小写<br> 标识符由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写</li><li>大驼峰命名法：<span style="background: yellow;">类</span><br>标识符是一个单词时，首字母大写<br> 标识符由多个单词组成的时候，单词首字母大写</li></ul><p>3、<span style="background: yellow;">标识符和关键字的区别</span>是什么？</p><p>在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了标识符，简单来说，标识符就是一个名字。但是有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，<span style="background: yellow;">这种特殊的标识符就是关键字</span>。</p><p>因此，关键字是被赋予特殊含义的标识符。比如，在我们的日常生活中 ，“警察局”这个名字已经被赋予了特殊的含义，所以如果你开一家店，店的名字不能叫“警察局”，“警察局”就是我们日常生活中的关键字。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>1、分类：</p><ul><li><p>自动类型转换：把一个数据范围小的数值或者变量赋值给另外一个大的变量<br>例：<code>double d = 10</code><br><img src="https://img-blog.csdnimg.cn/20210308162956679.png" alt="在这里插入图片描述"></p></li><li><p>强制类型转换：把一个数据范围大的数值或者变量赋值给另外一个小的变量<br>格式：目标数据类型 变量名 &#x3D; （目标数据类型）值<br>例子：<code>int k = (int)88.8</code></p></li></ul><blockquote><p>基本概念：</p><ul><li>运算符：对常量或者变量进行操作的符号</li><li>表达式：用运算符把常量或者变量连接起来符合Java语法的式子可以称为表达式，不同运算符连接的表达式体现的是不同类型的表达式</li></ul></blockquote><h2 id="Java运算符"><a href="#Java运算符" class="headerlink" title="Java运算符"></a>Java运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>1、算数运算符：加号（+）、减号（-）、除号（&#x2F;）、乘号（*）以及取模操作符（%）</p><p>2、注意：</p><ul><li>整数相除只能得到整数，若想得到小数，必须有浮点数参与运算</li></ul><h4 id="字符的-操作"><a href="#字符的-操作" class="headerlink" title="字符的+操作"></a>字符的+操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span> <span class="comment">//65</span></span><br><span class="line">c = <span class="string">&#x27;a&#x27;</span> <span class="comment">//97</span></span><br><span class="line">c = <span class="string">&#x27;0&#x27;</span> <span class="comment">//48</span></span><br></pre></td></tr></table></figure><p>字符参与加操作，拿字符在计算机底层的<span style="background: yellow;">对应数值</span>来计算</p><p><img src="https://img-blog.csdnimg.cn/20210308164511281.png" alt="在这里插入图片描述"></p><p>算术表达式中包含多个基本数据类型的值的时候，整个算术表达式的类型会进行<span style="background: yellow;">自动提升</span></p><p>提升规则：</p><ul><li>byte类型、short类型、char类型将被提升到int类型</li><li>整个表达式的类型自动提升到表达式中最高等级的类型，顺序：byte、short、char -&gt; int -&gt; long -&gt; float -&gt; double</li></ul><h4 id="字符串的-操作"><a href="#字符串的-操作" class="headerlink" title="字符串的+操作"></a>字符串的+操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;zhang&quot;</span>+<span class="string">&quot;tao&quot;</span> <span class="comment">//输出zhangtao</span></span><br><span class="line"><span class="string">&quot;zhang&quot;</span>+<span class="number">666</span>  <span class="comment">//输出zhang666</span></span><br><span class="line"><span class="string">&quot;zhang&quot;</span>+<span class="number">7</span>+<span class="number">66</span> <span class="comment">//输出zhang766</span></span><br><span class="line"><span class="number">1</span>+<span class="number">99</span>+<span class="string">&quot;zhang&quot;</span> <span class="comment">//输出100zhang</span></span><br></pre></td></tr></table></figure><p>当“+”操作出现字符串时，这个+是<span style="background: yellow;">字符串连接符</span>，而不是算术运算</p><ul><li><code>&quot;zhang&quot;+7+66</code>：如果出现了字符串，就是连接运算符，否则是算术运算；当连续进行+操作时，从左到右逐个执行</li><li><code>1+99+&quot;zhang&quot;</code>：从左到右逐个执行</li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><img src="https://img-blog.csdnimg.cn/20210308170457637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>注意：隐含<span style="background: yellow;">强制类型转换</span></p><h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><img src="https://img-blog.csdnimg.cn/20210308170530678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><ul><li><p>前缀递增和前缀递减（如++a或–a），会先执行运算，再生成值</p></li><li><p>后缀递增和后缀递减（如a++或a–），会先生成值，再执行运算</p></li></ul><p>⚠️注意：</p><ul><li>++和–可以放在变量的后边，也可以放在变量的前边</li><li><span style="background: yellow;">单独使用</span>，放在前边和后边结果一样（<span style="background: yellow;">最常见的用法&#x3D;&#x3D;）</li><li><span style="background: yellow;">参与操作</span>时，如果放在变量后边，先拿变量进行操作，后拿变量做++或者–；如果放在变量前边，先拿变量做++或者–，后进行操作<br>例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">10</span></span><br><span class="line"><span class="keyword">int</span> j = i++ </span><br><span class="line"><span class="comment">// 结果：j = 10,i =11</span></span><br></pre></td></tr></table></figure><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系操作符：比较两个变量之间的关系，生成一个boolean值（true or false）</p><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于或等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td></tr><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符，是用来连接关系表达式的运算符，也可以直接连接布尔类型的常量或者变量</p><table><thead><tr><th>关键字</th><th>简介</th><th align="left">具体含义</th></tr></thead><tbody><tr><td>&amp;、 &amp;&amp;</td><td>长路与 、短路与</td><td align="left">相同点：两边都为真时为真；任意一个为假结果为假；     不同点：长路与两侧都会被运算；短路与如果第一个为假则结果为假</td></tr><tr><td>｜、｜｜</td><td>长路或  、 短路或</td><td align="left">相同点：两边都为假时为假；任意一个为真结果为真；     不同点：长路与两侧都会被运算；短路与如果第一个为真则结果为真</td></tr><tr><td>！</td><td>取反</td><td align="left">真变假；假变真</td></tr><tr><td>^</td><td>异或</td><td align="left">不同时返回真；相同时返回假</td></tr></tbody></table><p>最常用的逻辑运算符：<code>&amp;&amp;</code>    、<code>||</code>、<code>!</code></p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>格式：<code>关系表达式？表达式1:表达式2</code></p><p>规则：首先计算关系表达式的值，如果为true，表达式1则为运算结果，反之表达式2为运算结果</p><h4 id="案例：两只老虎"><a href="#案例：两只老虎" class="headerlink" title="案例：两只老虎"></a>案例：两只老虎</h4><blockquote><p>需求：动物园有两只老虎，分别是180kg和200kg，用程序实现判断两只老虎的体重是否相同</p></blockquote><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> weight1 = <span class="number">180</span>;</span><br><span class="line"><span class="keyword">int</span> weight2 = <span class="number">200</span>;</span><br><span class="line">System.out.println(weight1==weight2?<span class="keyword">true</span>:<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><h4 id="案例：三个和尚"><a href="#案例：三个和尚" class="headerlink" title="案例：三个和尚"></a>案例：三个和尚</h4><blockquote><p>需求：有三个和尚，身高分别为150cm、210cm、165cm，用程序获取三个和尚的最高身高</p></blockquote><p>分析：</p><ul><li>定义三个变量保存身高</li><li>用三元运算符获取前两个身高的较高身高，用临时变量保存</li><li>用三元运算符获得临时身高与第三个和尚的身高的较高身高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> height1 = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">int</span> height2 = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">int</span> height3 = <span class="number">165</span>;</span><br><span class="line"><span class="keyword">int</span> temp  = height1&gt;height2 ? height1:height2;</span><br><span class="line"><span class="keyword">int</span> max = temp&gt;height3 ?temp:height3;</span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><h3 id="Scanner使用的基本步骤"><a href="#Scanner使用的基本步骤" class="headerlink" title="Scanner使用的基本步骤"></a>Scanner使用的基本步骤</h3><ul><li>导包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><ul><li>创建对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><ul><li>接受数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br></pre></td></tr></table></figure><h4 id="案例：三个和尚-1"><a href="#案例：三个和尚-1" class="headerlink" title="案例：三个和尚"></a>案例：三个和尚</h4><blockquote><p>需求：一个寺庙住着三个和尚，他们的身高必须经过测量得出，用程序获取三个和尚最高身高</p></blockquote><p>分析：</p><ul><li>身高未知，通过键盘输入</li><li>录入身高</li><li>比较</li><li>输出结果</li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> height1 = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> height2 = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> height3 = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> temp  = height1 &gt; height2 ? height1:height2;</span><br><span class="line"><span class="keyword">int</span> max = temp &gt; height3 ?temp:height3;</span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><h2 id="分支语句与循环语句"><a href="#分支语句与循环语句" class="headerlink" title="分支语句与循环语句"></a>分支语句与循环语句</h2><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><p>流程控制语句分类：</p><ul><li>顺序结构<br>是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，<span style="background: yellow;">依次执行</span>，程序中大多数的代码都是这样执行的。</li><li>分支结构（if、switch）</li><li>循环结构（for、while、do…while）</li></ul><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">格式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">格式<span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">格式<span class="number">3</span>:</span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br><span class="line">  ......</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>（表达式）&#123;</span><br><span class="line"><span class="keyword">case</span> value1 :</span><br><span class="line"></span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> value2 :</span><br><span class="line"></span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>组成部分：</p><ul><li>初始化语句：循环开启的起始状态，一条或者多条语句</li><li>条件判断语句：反复执行的条件，使用一个结果为布尔值的表达式</li><li>循环体语句：反复执行的内容，任意语句</li><li>条件控制语句：循环执行中每次变化的内容，使用一条语句改变变量的值，例如i++</li></ul><h4 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句；条件判断语句；条件控制语句)&#123;</span><br><span class="line">循环体语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：初始化语句-&gt;条件判断语句-&gt;循环体语句-&gt;条件控制语句-&gt;条件判断语句-&gt;循环体语句-&gt;……….</p><h4 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>（条件判断语句）&#123; </span><br><span class="line">循环体语句</span><br><span class="line">条件控制语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while循环语句"><a href="#do-while循环语句" class="headerlink" title="do-while循环语句"></a>do-while循环语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123; </span><br><span class="line">循环体语句</span><br><span class="line">条件控制语句</span><br><span class="line">&#125;<span class="keyword">while</span>（条件判断语句）</span><br></pre></td></tr></table></figure><h5 id="三种循环的区别："><a href="#三种循环的区别：" class="headerlink" title="三种循环的区别："></a>三种循环的区别：</h5><p>1、for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</p><p>2、do-while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</p><p>3、for和while的区别：</p><ul><li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li><li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li></ul><p>4、死循环：</p><ul><li><code>for(;;)&#123;&#125;</code></li><li><code>while(true)&#123;&#125;</code></li><li><code>do&#123;&#125;while(true)</code></li></ul><h4 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h4><p>1、<code>continue</code>：用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行</p><p>2、<code>break</code>：用在循环中，终止循环体内容的执行，也就是说结束当前的整个循环</p><p>3、<code>return</code> ：用于跳出所在方法，结束该方法的运行。</p><ul><li>return 一般有两种用法：<br><code>return;</code> ：直接使用 return 结束方法执行，用于没有返回值函数的方法<br><code>return value;</code> ：return 一个特定值，用于有返回值函数的方法</li></ul><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><p>语句结构：</p><ul><li>顺序语句：以分号结尾，表示一句话的结束</li><li>分支语句：一对大括号表示if&#x2F;switch的整体结构，整体描述一个完整的if语句</li><li>循环语句：for包for ；do-while以分号结尾，整体描述一个完整的do-while语句</li></ul><h4 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h4><p>1、作用：用于产生一个随机数</p><p>2、使用步骤：</p><ul><li>导包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random</span><br></pre></td></tr></table></figure><ul><li>创建对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br></pre></td></tr></table></figure><ul><li>获取随机数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>);<span class="comment">//[0,10)</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组定义格式"><a href="#数组定义格式" class="headerlink" title="数组定义格式"></a>数组定义格式</h3><p>1、数组：用于存储<span style="background: yellow;">多个相同类型数据</span>的存储模型</p><p>2、定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式一：数据类型[]变量名</span><br><span class="line">例如：<span class="keyword">int</span>[] arr</span><br><span class="line">格式二：数据类型 变量名[]</span><br><span class="line">例如：<span class="keyword">int</span> arr []</span><br></pre></td></tr></table></figure><h3 id="数组初始化之动态初始化"><a href="#数组初始化之动态初始化" class="headerlink" title="数组初始化之动态初始化"></a>数组初始化之动态初始化</h3><p>1、数组初始化：Java中的数组必须先初始化，然后才能使用</p><ul><li>初始化：为数组中的数组元素分配内存空间，并为每个数组元素赋值</li></ul><p>2、初始化方式：</p><ul><li>动态初始化：初始化时只制定数组长度，由系统分配初始值<br>格式：<code>数据类型[] 变量名 = new(为数组申请内存空间) 数据类型[数组长度]</code><br>例子：<code>int[] arr = new int[3];</code></li><li>静态初始化</li></ul><h3 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h3><p>1、数组变量的访问方式</p><ul><li>格式：<code>数组名</code></li></ul><p>2、数组内部保存数据的访问方式</p><ul><li>格式：<code>数组名[索引]</code></li></ul><p>3、索引是数组中数据的编号方式</p><ul><li>作用：索引用于访问数组中的数据使用，数组名[索引]等同于变量名，是一种特殊的变量名</li><li>索引从0开始，连续的，逐一增加的</li></ul><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><p>1、java中的内存分配：Java程序在运行时，需要在内存中分配空间，为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式</p><p><span style="background: yellow;">栈内存</span>：存储局部变量</p><ul><li>定义在方法中的变量，例如arr</li><li>使用完毕，立即消失</li></ul><p><span style="background: yellow;">堆内存</span>：存储new出来的内容（实体，对象）</p><ul><li>数组在初始化时，会为存储空间添加默认值</li><li>每一个new出来的东西都有一个地址值</li><li>使用完毕，会在垃圾回收器空闲时被回收</li></ul><p>2、数组的内存分配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//数组在初始化时，会为存储空间添加默认值</span></span><br><span class="line"><span class="comment">//整数：0，浮点数：0.0，布尔值：false，字符：空字符，引用数据类型：null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出数组名及元素</span></span><br><span class="line">System.out.println(arr); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//输出元素</span></span><br></pre></td></tr></table></figure><h4 id="数组内存图（单个数组）"><a href="#数组内存图（单个数组）" class="headerlink" title="数组内存图（单个数组）"></a>数组内存图（单个数组）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//输出数组名及元素</span></span><br><span class="line">System.out.println(arr); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//输出元素</span></span><br><span class="line"><span class="comment">//给数组中的元素赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//再次输出数组名及元素</span></span><br><span class="line">System.out.println(arr); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//输出元素</span></span><br></pre></td></tr></table></figure><p>内存图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2021030914444787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(arr);</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210309144522846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210309144552971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210309144618260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" />输出结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">001</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><h4 id="数组内存图（多个数组）"><a href="#数组内存图（多个数组）" class="headerlink" title="数组内存图（多个数组）"></a>数组内存图（多个数组）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//输出数组名及元素</span></span><br><span class="line">System.out.println(arr); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr2); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr2[<span class="number">2</span>]); <span class="comment">//输出元素</span></span><br><span class="line"><span class="comment">//给数组中的元素赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">arr2[<span class="number">2</span>] = <span class="number">300</span>;</span><br><span class="line"><span class="comment">//再次输出数组名及元素</span></span><br><span class="line">System.out.println(arr); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr2); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr2[<span class="number">2</span>]); <span class="comment">//输出元素</span></span><br></pre></td></tr></table></figure><p>内存图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210309145006197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" />输出：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">002</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">001</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">002</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure><h4 id="数组内存图（多个数组指向相同）"><a href="#数组内存图（多个数组指向相同）" class="headerlink" title="数组内存图（多个数组指向相同）"></a>数组内存图（多个数组指向相同）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//给数组中的元素赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">200</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">300</span>;</span><br><span class="line"><span class="comment">//输出数组名及元素</span></span><br><span class="line">System.out.println(arr); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//输出元素</span></span><br><span class="line"><span class="comment">//定义第二个数组指向第一个数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr2 = arr;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">111</span>;</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">222</span>;</span><br><span class="line">arr2[<span class="number">2</span>] = <span class="number">333</span>;</span><br><span class="line"><span class="comment">//再次输出数组名及元素</span></span><br><span class="line">System.out.println(arr); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br><span class="line">System.out.println(arr2); <span class="comment">//输出内存地址</span></span><br><span class="line">System.out.println(arr2[<span class="number">0</span>]); <span class="comment">//输出元素</span></span><br></pre></td></tr></table></figure><p>内存图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr2 = arr;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2021030914550564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210309145443558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr2[<span class="number">0</span>] = <span class="number">111</span>;</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">222</span>;</span><br><span class="line">arr2[<span class="number">2</span>] = <span class="number">333</span>;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210309145535778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="number">001</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">002</span></span><br><span class="line"><span class="number">111</span></span><br></pre></td></tr></table></figure><h3 id="数组初始化之静态初始化"><a href="#数组初始化之静态初始化" class="headerlink" title="数组初始化之静态初始化"></a>数组初始化之静态初始化</h3><p>1、静态初始化：初始化时指定每个数组元素的初始值，由系统决定数组长度</p><ul><li>格式：<code>数据类型[]变量名 = new 数据类型[]&#123;数据1，数据2，数据3........&#125;</code></li><li>简化格式：<code>数据类型[] 变量名 = &#123;数据1，数据2，数据3........&#125;</code></li></ul><h3 id="数组操作的两个问题"><a href="#数组操作的两个问题" class="headerlink" title="数组操作的两个问题"></a>数组操作的两个问题</h3><h4 id="索引越界"><a href="#索引越界" class="headerlink" title="索引越界"></a>索引越界</h4><p>访问了数组中不存在的索引对应的元素，造成该问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">System.out.println(arr[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210309150136585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h4 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h4><p>访问的数组已经不再指向堆内存的数据，造成空指针异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">arr=<span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr=<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210309150313304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h3><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i&lt;arr.length ; i++)&#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取最值"><a href="#获取最值" class="headerlink" title="获取最值"></a>获取最值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;max)&#123;</span><br><span class="line">max =arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h3><p>1、方法：将具有独立功能的代码块组织成一个整体，使其具有特殊功能的代码集</p><p>2、注意：</p><ul><li>方法必须先创建才可以使用，该过程称为 <em><strong>方法定义</strong></em></li><li>方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为 <em><strong>方法调用</strong></em></li></ul><h3 id="方法的定义和调用"><a href="#方法的定义和调用" class="headerlink" title="方法的定义和调用"></a>方法的定义和调用</h3><p>1、方法定义：</p><ul><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名()&#123;</span><br><span class="line">     <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、方法调用：</p><ul><li>格式：<code>方法名()</code></li></ul><h3 id="带参数方法的定义和调用"><a href="#带参数方法的定义和调用" class="headerlink" title="带参数方法的定义和调用"></a>带参数方法的定义和调用</h3><p>1、定义格式：<code>public static void 方法名(参数)&#123;......&#125;</code></p><ul><li>格式（单个参数）:<code>public static void 方法名(数据类型 变量名)&#123;.....&#125;</code></li><li>格式（多个参数）:<code>public static void 方法名(数据类型1 变量名1,数据类型2 变量名2....)&#123;.....&#125;</code></li></ul><p>2、调用格式：<code>方法名(参数)</code></p><p>3、形参和实参</p><ul><li>形参：方法定义中的参数，等同于变量定义格式，例如：int number</li><li>实参：方法调用中的参数，等同于使用变量或常量，例如：10 number</li></ul><h4 id="带返回值方法的定义和调用"><a href="#带返回值方法的定义和调用" class="headerlink" title="带返回值方法的定义和调用"></a>带返回值方法的定义和调用</h4><p>1、定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名（参数）&#123;</span><br><span class="line"><span class="keyword">return</span> 数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、调用格式：</p><ul><li>格式1：<code>方法名(参数)</code></li><li>格式2：<code>数据类型  变量名 = 方法名(参数)</code></li></ul><p>3、返回值：是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作。</p><h4 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h4><p>1、注意事项：</p><ul><li>方法不能嵌套定义（平级关系）</li><li>void表示没有返回值，可以省略return，也可以单独写return，后面不加数据</li></ul><p>2、方法的通用格式：</p><ul><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名（参数）&#123;</span><br><span class="line">方法体;</span><br><span class="line"><span class="keyword">return</span> 数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义方法要做到<span style="background: yellow;">两个明确</span>：返回值类型、参数</li><li>调用方法时，void类型的方法直接调用即可，非void方法用变量接受</li></ul><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><p>1、方法重载：同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载：</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相同的<span style="background: yellow;">方法名</span></li><li>多个方法<span style="background: yellow;">参数</span>不同、类型不同或者数量不同</li></ul><p><font size=5>判定重载只看同一个类、相同方法名、不同参数！！！</font></p><p>2、特点：</p><ul><li>重载只对应方法的定义，与方法的调用无关，调用方式按照标准格式</li><li>重载只针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互重载</li></ul><h4 id="方法的参数传递（按值传递的）"><a href="#方法的参数传递（按值传递的）" class="headerlink" title="方法的参数传递（按值传递的）"></a>方法的参数传递（按值传递的）</h4><p>1、方法参数传递（基本数据类型）</p><p>结论：<span style="background: yellow;">对于基本数据类型的参数，形式参数的改变不影响实际参数的值</span></p><p>例子：</p><img src="https://img-blog.csdnimg.cn/20210309201150482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>2、方法参数传递（引用类型）</p><p>结论：<span style="background: yellow;">对于引用类型的参数，形式参数的改变，影响实际参数的值</span></p><p>例子：</p><img src="https://img-blog.csdnimg.cn/20210309201507644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjUwODk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
